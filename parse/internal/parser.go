// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/corgierr"
	"github.com/mavolin/corgi/file"
	"github.com/mavolin/corgi/internal/stack"
)

// todo: rm these as soon as pigeon#115 is fixed
const lbrace = "{"
const rbrace = "}"

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 12, col: 1, offset: 189},
			expr: &actionExpr{
				pos: position{line: 13, col: 5, offset: 201},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 13, col: 5, offset: 201},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 134, col: 9, offset: 3709},
							run: (*parser).callonFile3,
						},
						&zeroOrOneExpr{
							pos: position{line: 14, col: 5, offset: 210},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 15, col: 5, offset: 223},
							label: "extendComments",
							expr: &zeroOrOneExpr{
								pos: position{line: 15, col: 20, offset: 238},
								expr: &ruleRefExpr{
									pos:  position{line: 15, col: 20, offset: 238},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 15, col: 35, offset: 253},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 16, col: 5, offset: 266},
							label: "extendI",
							expr: &zeroOrOneExpr{
								pos: position{line: 16, col: 13, offset: 274},
								expr: &actionExpr{
									pos: position{line: 3251, col: 11, offset: 111560},
									run: (*parser).callonFile25,
									expr: &seqExpr{
										pos: position{line: 3251, col: 11, offset: 111560},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3251, col: 11, offset: 111560},
												val:        "extend",
												ignoreCase: false,
												want:       "\"extend\"",
											},
											&labeledExpr{
												pos:   position{line: 3251, col: 20, offset: 111569},
												label: "extendI",
												expr: &choiceExpr{
													pos: position{line: 3221, col: 18, offset: 110591},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3221, col: 18, offset: 110591},
															run: (*parser).callonFile30,
															expr: &seqExpr{
																pos: position{line: 3221, col: 18, offset: 110591},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 3221, col: 18, offset: 110591},
																		expr: &litMatcher{
																			pos:        position{line: 3221, col: 18, offset: 110591},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3221, col: 23, offset: 110596},
																		label: "sI",
																		expr: &choiceExpr{
																			pos: position{line: 820, col: 11, offset: 24937},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 826, col: 14, offset: 25024},
																					run: (*parser).callonFile36,
																					expr: &seqExpr{
																						pos: position{line: 826, col: 14, offset: 25024},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 826, col: 14, offset: 25024},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 826, col: 18, offset: 25028},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 826, col: 23, offset: 25033},
																									expr: &charClassMatcher{
																										pos:        position{line: 2745, col: 27, offset: 94634},
																										val:        "[^\\n`]",
																										chars:      []rune{'\n', '`'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 826, col: 47, offset: 25057},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 828, col: 5, offset: 25149},
																					run: (*parser).callonFile43,
																					expr: &seqExpr{
																						pos: position{line: 828, col: 5, offset: 25149},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 828, col: 5, offset: 25149},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 828, col: 9, offset: 25153},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 828, col: 14, offset: 25158},
																									expr: &charClassMatcher{
																										pos:        position{line: 2745, col: 27, offset: 94634},
																										val:        "[^\\n`]",
																										chars:      []rune{'\n', '`'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 828, col: 38, offset: 25182},
																								expr: &seqExpr{
																									pos: position{line: 3794, col: 12, offset: 128891},
																									exprs: []interface{}{
																										&zeroOrMoreExpr{
																											pos: position{line: 3794, col: 12, offset: 128891},
																											expr: &charClassMatcher{
																												pos:        position{line: 3806, col: 36, offset: 129238},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3794, col: 16, offset: 128895},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 3794, col: 16, offset: 128895},
																													exprs: []interface{}{
																														&zeroOrOneExpr{
																															pos: position{line: 3794, col: 16, offset: 128895},
																															expr: &litMatcher{
																																pos:        position{line: 3794, col: 16, offset: 128895},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3794, col: 22, offset: 128901},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3793, col: 12, offset: 128877},
																													expr: &anyMatcher{
																														line: 3793, col: 13, offset: 128878,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 847, col: 22, offset: 25586},
																					run: (*parser).callonFile60,
																					expr: &seqExpr{
																						pos: position{line: 847, col: 22, offset: 25586},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 847, col: 22, offset: 25586},
																								val:        "\"",
																								ignoreCase: false,
																								want:       "\"\\\"\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 847, col: 26, offset: 25590},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 847, col: 31, offset: 25595},
																									expr: &choiceExpr{
																										pos: position{line: 847, col: 32, offset: 25596},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2484, col: 24, offset: 84297},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2484, col: 24, offset: 84297},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2401, col: 19, offset: 81486},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2401, col: 19, offset: 81486},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2401, col: 19, offset: 81486},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2485, col: 24, offset: 84364},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2485, col: 24, offset: 84364},
																														val:        "\\x",
																														ignoreCase: false,
																														want:       "\"\\\\x\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2486, col: 5, offset: 84401},
																												run: (*parser).callonFile75,
																												expr: &seqExpr{
																													pos: position{line: 2486, col: 5, offset: 84401},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2486, col: 5, offset: 84401},
																															val:        "\\x",
																															ignoreCase: false,
																															want:       "\"\\\\x\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2486, col: 14, offset: 84410},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2486, col: 26, offset: 84422},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2503, col: 19, offset: 85039},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2503, col: 19, offset: 85039},
																														val:        "\\u",
																														ignoreCase: false,
																														want:       "\"\\\\u\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2504, col: 5, offset: 85098},
																												run: (*parser).callonFile88,
																												expr: &seqExpr{
																													pos: position{line: 2504, col: 5, offset: 85098},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2504, col: 5, offset: 85098},
																															val:        "\\u",
																															ignoreCase: false,
																															want:       "\"\\\\u\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 14, offset: 85107},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 26, offset: 85119},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 38, offset: 85131},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 50, offset: 85143},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2533, col: 16, offset: 86279},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2533, col: 16, offset: 86279},
																														val:        "\\U",
																														ignoreCase: false,
																														want:       "\"\\\\U\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2534, col: 5, offset: 86382},
																												run: (*parser).callonFile109,
																												expr: &seqExpr{
																													pos: position{line: 2534, col: 5, offset: 86382},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2534, col: 5, offset: 86382},
																															val:        "\\U",
																															ignoreCase: false,
																															want:       "\"\\\\U\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 14, offset: 86391},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 26, offset: 86403},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 38, offset: 86415},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 50, offset: 86427},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 62, offset: 86439},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 74, offset: 86451},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 86, offset: 86463},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 98, offset: 86475},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2761, col: 36, offset: 95412},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2761, col: 36, offset: 95412},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2761, col: 41, offset: 95417},
																														val:        "[abfnrtv\\\\\"]",
																														chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2759, col: 38, offset: 95304},
																												val:        "[^\"\\\\\\n]",
																												chars:      []rune{'"', '\\', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																											&actionExpr{
																												pos: position{line: 2648, col: 37, offset: 91062},
																												run: (*parser).callonFile132,
																												expr: &seqExpr{
																													pos: position{line: 2648, col: 37, offset: 91062},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2648, col: 37, offset: 91062},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2672, col: 5, offset: 92079},
																												run: (*parser).callonFile143,
																												expr: &seqExpr{
																													pos: position{line: 2672, col: 5, offset: 92079},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2672, col: 5, offset: 92079},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2693, col: 5, offset: 92921},
																												run: (*parser).callonFile150,
																												expr: &seqExpr{
																													pos: position{line: 2693, col: 5, offset: 92921},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2693, col: 5, offset: 92921},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2711, col: 5, offset: 93607},
																												run: (*parser).callonFile155,
																												expr: &seqExpr{
																													pos: position{line: 2711, col: 5, offset: 93607},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2711, col: 5, offset: 93607},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2711, col: 10, offset: 93612},
																															expr: &charClassMatcher{
																																pos:        position{line: 3795, col: 12, offset: 128924},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 847, col: 115, offset: 25679},
																								val:        "\"",
																								ignoreCase: false,
																								want:       "\"\\\"\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 849, col: 5, offset: 25771},
																					run: (*parser).callonFile161,
																					expr: &seqExpr{
																						pos: position{line: 849, col: 5, offset: 25771},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 849, col: 5, offset: 25771},
																								val:        "\"",
																								ignoreCase: false,
																								want:       "\"\\\"\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 849, col: 9, offset: 25775},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 849, col: 14, offset: 25780},
																									expr: &choiceExpr{
																										pos: position{line: 849, col: 15, offset: 25781},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2484, col: 24, offset: 84297},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2484, col: 24, offset: 84297},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2401, col: 19, offset: 81486},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2401, col: 19, offset: 81486},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2401, col: 19, offset: 81486},
																														val:        "[0-7]",
																														ranges:     []rune{'0', '7'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2485, col: 24, offset: 84364},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2485, col: 24, offset: 84364},
																														val:        "\\x",
																														ignoreCase: false,
																														want:       "\"\\\\x\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2486, col: 5, offset: 84401},
																												run: (*parser).callonFile176,
																												expr: &seqExpr{
																													pos: position{line: 2486, col: 5, offset: 84401},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2486, col: 5, offset: 84401},
																															val:        "\\x",
																															ignoreCase: false,
																															want:       "\"\\\\x\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2486, col: 14, offset: 84410},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2486, col: 26, offset: 84422},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2503, col: 19, offset: 85039},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2503, col: 19, offset: 85039},
																														val:        "\\u",
																														ignoreCase: false,
																														want:       "\"\\\\u\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2504, col: 5, offset: 85098},
																												run: (*parser).callonFile189,
																												expr: &seqExpr{
																													pos: position{line: 2504, col: 5, offset: 85098},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2504, col: 5, offset: 85098},
																															val:        "\\u",
																															ignoreCase: false,
																															want:       "\"\\\\u\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 14, offset: 85107},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 26, offset: 85119},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 38, offset: 85131},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2504, col: 50, offset: 85143},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2533, col: 16, offset: 86279},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2533, col: 16, offset: 86279},
																														val:        "\\U",
																														ignoreCase: false,
																														want:       "\"\\\\U\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2534, col: 5, offset: 86382},
																												run: (*parser).callonFile210,
																												expr: &seqExpr{
																													pos: position{line: 2534, col: 5, offset: 86382},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2534, col: 5, offset: 86382},
																															val:        "\\U",
																															ignoreCase: false,
																															want:       "\"\\\\U\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 14, offset: 86391},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 26, offset: 86403},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 38, offset: 86415},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 50, offset: 86427},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 62, offset: 86439},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 74, offset: 86451},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 86, offset: 86463},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2534, col: 98, offset: 86475},
																															expr: &charClassMatcher{
																																pos:        position{line: 2402, col: 19, offset: 81510},
																																val:        "[0-9A-Fa-f]",
																																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2761, col: 36, offset: 95412},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2761, col: 36, offset: 95412},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2761, col: 41, offset: 95417},
																														val:        "[abfnrtv\\\\\"]",
																														chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2759, col: 38, offset: 95304},
																												val:        "[^\"\\\\\\n]",
																												chars:      []rune{'"', '\\', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																											&actionExpr{
																												pos: position{line: 2648, col: 37, offset: 91062},
																												run: (*parser).callonFile233,
																												expr: &seqExpr{
																													pos: position{line: 2648, col: 37, offset: 91062},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2648, col: 37, offset: 91062},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2672, col: 5, offset: 92079},
																												run: (*parser).callonFile244,
																												expr: &seqExpr{
																													pos: position{line: 2672, col: 5, offset: 92079},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2672, col: 5, offset: 92079},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2693, col: 5, offset: 92921},
																												run: (*parser).callonFile251,
																												expr: &seqExpr{
																													pos: position{line: 2693, col: 5, offset: 92921},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2693, col: 5, offset: 92921},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2402, col: 19, offset: 81510},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2711, col: 5, offset: 93607},
																												run: (*parser).callonFile256,
																												expr: &seqExpr{
																													pos: position{line: 2711, col: 5, offset: 93607},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2711, col: 5, offset: 93607},
																															val:        "\\",
																															ignoreCase: false,
																															want:       "\"\\\\\"",
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 2711, col: 10, offset: 93612},
																															expr: &charClassMatcher{
																																pos:        position{line: 3795, col: 12, offset: 128924},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 849, col: 98, offset: 25864},
																								label: "endPosI",
																								expr: &actionExpr{
																									pos: position{line: 3797, col: 8, offset: 128940},
																									run: (*parser).callonFile262,
																									expr: &choiceExpr{
																										pos: position{line: 3797, col: 9, offset: 128941},
																										alternatives: []interface{}{
																											&andExpr{
																												pos: position{line: 3797, col: 9, offset: 128941},
																												expr: &anyMatcher{
																													line: 3797, col: 10, offset: 128942,
																												},
																											},
																											&notExpr{
																												pos: position{line: 3797, col: 14, offset: 128946},
																												expr: &anyMatcher{
																													line: 3797, col: 15, offset: 128947,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 849, col: 110, offset: 25876},
																								expr: &seqExpr{
																									pos: position{line: 3794, col: 12, offset: 128891},
																									exprs: []interface{}{
																										&zeroOrMoreExpr{
																											pos: position{line: 3794, col: 12, offset: 128891},
																											expr: &charClassMatcher{
																												pos:        position{line: 3806, col: 36, offset: 129238},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3794, col: 16, offset: 128895},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 3794, col: 16, offset: 128895},
																													exprs: []interface{}{
																														&zeroOrOneExpr{
																															pos: position{line: 3794, col: 16, offset: 128895},
																															expr: &litMatcher{
																																pos:        position{line: 3794, col: 16, offset: 128895},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3794, col: 22, offset: 128901},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3793, col: 12, offset: 128877},
																													expr: &anyMatcher{
																														line: 3793, col: 13, offset: 128878,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 868, col: 22, offset: 26282},
																					run: (*parser).callonFile279,
																					expr: &seqExpr{
																						pos: position{line: 868, col: 22, offset: 26282},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 868, col: 22, offset: 26282},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 868, col: 27, offset: 26287},
																								label: "strI",
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 868, col: 32, offset: 26292},
																									expr: &charClassMatcher{
																										pos:        position{line: 868, col: 32, offset: 26292},
																										val:        "[^\\\\r\\n]",
																										chars:      []rune{'\'', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 868, col: 42, offset: 26302},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 868, col: 47, offset: 26307},
																								label: "endPosI",
																								expr: &actionExpr{
																									pos: position{line: 3797, col: 8, offset: 128940},
																									run: (*parser).callonFile287,
																									expr: &choiceExpr{
																										pos: position{line: 3797, col: 9, offset: 128941},
																										alternatives: []interface{}{
																											&andExpr{
																												pos: position{line: 3797, col: 9, offset: 128941},
																												expr: &anyMatcher{
																													line: 3797, col: 10, offset: 128942,
																												},
																											},
																											&notExpr{
																												pos: position{line: 3797, col: 14, offset: 128946},
																												expr: &anyMatcher{
																													line: 3797, col: 15, offset: 128947,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3223, col: 5, offset: 110631},
															run: (*parser).callonFile293,
															expr: &seqExpr{
																pos: position{line: 3223, col: 5, offset: 110631},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3223, col: 5, offset: 110631},
																		expr: &litMatcher{
																			pos:        position{line: 3223, col: 5, offset: 110631},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3223, col: 10, offset: 110636},
																		label: "pathI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 3223, col: 16, offset: 110642},
																			expr: &charClassMatcher{
																				pos:        position{line: 3795, col: 12, offset: 128924},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												expr: &charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3794, col: 16, offset: 128895},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																expr: &litMatcher{
																	pos:        position{line: 3794, col: 16, offset: 128895},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3794, col: 22, offset: 128901},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3793, col: 12, offset: 128877},
														expr: &anyMatcher{
															line: 3793, col: 13, offset: 128878,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 16, col: 21, offset: 282},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 295},
							label: "importsAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 25, offset: 315},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 25, offset: 315},
									name: "importsAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 17, col: 45, offset: 335},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 5, offset: 348},
							label: "usesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 22, offset: 365},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 22, offset: 365},
									name: "usesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 39, offset: 382},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 395},
							label: "globalCodeAndFuncI",
							expr: &zeroOrOneExpr{
								pos: position{line: 19, col: 24, offset: 414},
								expr: &ruleRefExpr{
									pos:  position{line: 19, col: 24, offset: 414},
									name: "globalCodeAndFunc",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 19, col: 43, offset: 433},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 20, col: 5, offset: 446},
							label: "preScopeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 20, col: 15, offset: 456},
								expr: &ruleRefExpr{
									pos:  position{line: 20, col: 15, offset: 456},
									name: "preScope",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 20, col: 25, offset: 466},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 5, offset: 479},
							label: "scopeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 12, offset: 486},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 12, offset: 486},
									name: "Scope",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 21, col: 19, offset: 493},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3793, col: 12, offset: 128877},
							expr: &anyMatcher{
								line: 3793, col: 13, offset: 128878,
							},
						},
					},
				},
			},
		},
		{
			name: "importsAndComments",
			pos:  position{line: 55, col: 1, offset: 1539},
			expr: &actionExpr{
				pos: position{line: 55, col: 23, offset: 1561},
				run: (*parser).callonimportsAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 55, col: 23, offset: 1561},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 55, col: 29, offset: 1567},
						expr: &seqExpr{
							pos: position{line: 55, col: 30, offset: 1568},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 55, col: 30, offset: 1568},
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 30, offset: 1568},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 55, col: 45, offset: 1583},
									expr: &oneOrMoreExpr{
										pos: position{line: 3808, col: 36, offset: 129325},
										expr: &seqExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3259, col: 12, offset: 111867},
									run: (*parser).callonimportsAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3259, col: 12, offset: 111867},
										label: "importsI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3259, col: 21, offset: 111876},
											expr: &seqExpr{
												pos: position{line: 3259, col: 22, offset: 111877},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3259, col: 22, offset: 111877},
														expr: &oneOrMoreExpr{
															pos: position{line: 3808, col: 36, offset: 129325},
															expr: &seqExpr{
																pos: position{line: 3808, col: 37, offset: 129326},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3808, col: 37, offset: 129326},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		expr: &litMatcher{
																			pos:        position{line: 3807, col: 36, offset: 129279},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3807, col: 42, offset: 129285},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3273, col: 11, offset: 112176},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3273, col: 11, offset: 112176},
																run: (*parser).callonimportsAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3273, col: 11, offset: 112176},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3273, col: 11, offset: 112176},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3794, col: 12, offset: 128891},
																			expr: &charClassMatcher{
																				pos:        position{line: 3806, col: 36, offset: 129238},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							expr: &litMatcher{
																								pos:        position{line: 3794, col: 16, offset: 128895},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3794, col: 22, offset: 128901},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3793, col: 12, offset: 128877},
																					expr: &anyMatcher{
																						line: 3793, col: 13, offset: 128878,
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3273, col: 24, offset: 112189},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3294, col: 16, offset: 112843},
																				run: (*parser).callonimportsAndComments41,
																				expr: &seqExpr{
																					pos: position{line: 3294, col: 16, offset: 112843},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4282, col: 11, offset: 149864},
																							run: (*parser).callonimportsAndComments43,
																						},
																						&labeledExpr{
																							pos:   position{line: 3294, col: 23, offset: 112850},
																							label: "importsI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3294, col: 32, offset: 112859},
																								expr: &seqExpr{
																									pos: position{line: 3294, col: 33, offset: 112860},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3294, col: 33, offset: 112860},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3808, col: 36, offset: 129325},
																												expr: &seqExpr{
																													pos: position{line: 3808, col: 37, offset: 129326},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3808, col: 37, offset: 129326},
																															expr: &charClassMatcher{
																																pos:        position{line: 3806, col: 36, offset: 129238},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3807, col: 36, offset: 129279},
																															expr: &litMatcher{
																																pos:        position{line: 3807, col: 36, offset: 129279},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3807, col: 42, offset: 129285},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3895, col: 17, offset: 133132},
																											run: (*parser).callonimportsAndComments55,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3895, col: 17, offset: 133132},
																												expr: &charClassMatcher{
																													pos:        position{line: 3806, col: 36, offset: 129238},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3895, col: 41, offset: 133156},
																											run: (*parser).callonimportsAndComments58,
																										},
																										&choiceExpr{
																											pos: position{line: 3947, col: 5, offset: 135066},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3947, col: 5, offset: 135066},
																													run: (*parser).callonimportsAndComments60,
																												},
																												&seqExpr{
																													pos: position{line: 3949, col: 9, offset: 135149},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3949, col: 9, offset: 135149},
																															run: (*parser).callonimportsAndComments62,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3951, col: 7, offset: 135272},
																															run: (*parser).callonimportsAndComments63,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3958, col: 9, offset: 135608},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3958, col: 9, offset: 135608},
																															run: (*parser).callonimportsAndComments65,
																														},
																														&andCodeExpr{
																															pos: position{line: 3960, col: 7, offset: 135716},
																															run: (*parser).callonimportsAndComments66,
																														},
																														&choiceExpr{
																															pos: position{line: 4013, col: 9, offset: 138051},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 4013, col: 9, offset: 138051},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4013, col: 9, offset: 138051},
																																			run: (*parser).callonimportsAndComments69,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4017, col: 11, offset: 138301},
																																			run: (*parser).callonimportsAndComments70,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 4083, col: 11, offset: 141507},
																																			run: (*parser).callonimportsAndComments71,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 4091, col: 13, offset: 141860},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4091, col: 13, offset: 141860},
																																			run: (*parser).callonimportsAndComments73,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4095, col: 11, offset: 142115},
																																			run: (*parser).callonimportsAndComments74,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3298, col: 15, offset: 112988},
																											run: (*parser).callonimportsAndComments75,
																											expr: &seqExpr{
																												pos: position{line: 3298, col: 15, offset: 112988},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3298, col: 15, offset: 112988},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3298, col: 22, offset: 112995},
																															expr: &seqExpr{
																																pos: position{line: 3298, col: 23, offset: 112996},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3311, col: 16, offset: 113276},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3311, col: 16, offset: 113276},
																																				run: (*parser).callonimportsAndComments81,
																																				expr: &litMatcher{
																																					pos:        position{line: 3311, col: 16, offset: 113276},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 2369, col: 12, offset: 80635},
																																				run: (*parser).callonimportsAndComments83,
																																				expr: &labeledExpr{
																																					pos:   position{line: 2369, col: 12, offset: 80635},
																																					label: "ident",
																																					expr: &seqExpr{
																																						pos: position{line: 2408, col: 17, offset: 81561},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2391, col: 20, offset: 81316},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2408, col: 26, offset: 81570},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2391, col: 20, offset: 81316},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3313, col: 15, offset: 113355},
																																				run: (*parser).callonimportsAndComments89,
																																				expr: &seqExpr{
																																					pos: position{line: 3313, col: 15, offset: 113355},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3313, col: 15, offset: 113355},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3313, col: 15, offset: 113355},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3313, col: 24, offset: 113364},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3797, col: 8, offset: 128940},
																																								run: (*parser).callonimportsAndComments94,
																																								expr: &choiceExpr{
																																									pos: position{line: 3797, col: 9, offset: 128941},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3797, col: 9, offset: 128941},
																																											expr: &anyMatcher{
																																												line: 3797, col: 10, offset: 128942,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3797, col: 14, offset: 128946},
																																											expr: &anyMatcher{
																																												line: 3797, col: 15, offset: 128947,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3298, col: 35, offset: 113008},
																																		expr: &litMatcher{
																																			pos:        position{line: 3298, col: 35, offset: 113008},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3298, col: 42, offset: 113015},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3235, col: 12, offset: 111017},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 826, col: 14, offset: 25024},
																																	run: (*parser).callonimportsAndComments104,
																																	expr: &seqExpr{
																																		pos: position{line: 826, col: 14, offset: 25024},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 826, col: 14, offset: 25024},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 826, col: 18, offset: 25028},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 826, col: 23, offset: 25033},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2745, col: 27, offset: 94634},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 826, col: 47, offset: 25057},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 828, col: 5, offset: 25149},
																																	run: (*parser).callonimportsAndComments111,
																																	expr: &seqExpr{
																																		pos: position{line: 828, col: 5, offset: 25149},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 828, col: 5, offset: 25149},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 828, col: 9, offset: 25153},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 828, col: 14, offset: 25158},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2745, col: 27, offset: 94634},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 828, col: 38, offset: 25182},
																																				expr: &seqExpr{
																																					pos: position{line: 3794, col: 12, offset: 128891},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3794, col: 12, offset: 128891},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3806, col: 36, offset: 129238},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3794, col: 16, offset: 128895},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3794, col: 16, offset: 128895},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3794, col: 16, offset: 128895},
																																											expr: &litMatcher{
																																												pos:        position{line: 3794, col: 16, offset: 128895},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3794, col: 22, offset: 128901},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3793, col: 12, offset: 128877},
																																									expr: &anyMatcher{
																																										line: 3793, col: 13, offset: 128878,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 847, col: 22, offset: 25586},
																																	run: (*parser).callonimportsAndComments128,
																																	expr: &seqExpr{
																																		pos: position{line: 847, col: 22, offset: 25586},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 847, col: 22, offset: 25586},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 847, col: 26, offset: 25590},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 847, col: 31, offset: 25595},
																																					expr: &choiceExpr{
																																						pos: position{line: 847, col: 32, offset: 25596},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2484, col: 24, offset: 84297},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2484, col: 24, offset: 84297},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2485, col: 24, offset: 84364},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2485, col: 24, offset: 84364},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2486, col: 5, offset: 84401},
																																								run: (*parser).callonimportsAndComments143,
																																								expr: &seqExpr{
																																									pos: position{line: 2486, col: 5, offset: 84401},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2486, col: 5, offset: 84401},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 14, offset: 84410},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 26, offset: 84422},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2503, col: 19, offset: 85039},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2503, col: 19, offset: 85039},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2504, col: 5, offset: 85098},
																																								run: (*parser).callonimportsAndComments156,
																																								expr: &seqExpr{
																																									pos: position{line: 2504, col: 5, offset: 85098},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2504, col: 5, offset: 85098},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 14, offset: 85107},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 26, offset: 85119},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 38, offset: 85131},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 50, offset: 85143},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2533, col: 16, offset: 86279},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2533, col: 16, offset: 86279},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2534, col: 5, offset: 86382},
																																								run: (*parser).callonimportsAndComments177,
																																								expr: &seqExpr{
																																									pos: position{line: 2534, col: 5, offset: 86382},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2534, col: 5, offset: 86382},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 14, offset: 86391},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 26, offset: 86403},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 38, offset: 86415},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 50, offset: 86427},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 62, offset: 86439},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 74, offset: 86451},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 86, offset: 86463},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 98, offset: 86475},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2761, col: 36, offset: 95412},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2761, col: 36, offset: 95412},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2761, col: 41, offset: 95417},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2759, col: 38, offset: 95304},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2648, col: 37, offset: 91062},
																																								run: (*parser).callonimportsAndComments200,
																																								expr: &seqExpr{
																																									pos: position{line: 2648, col: 37, offset: 91062},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2648, col: 37, offset: 91062},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2672, col: 5, offset: 92079},
																																								run: (*parser).callonimportsAndComments211,
																																								expr: &seqExpr{
																																									pos: position{line: 2672, col: 5, offset: 92079},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2672, col: 5, offset: 92079},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2693, col: 5, offset: 92921},
																																								run: (*parser).callonimportsAndComments218,
																																								expr: &seqExpr{
																																									pos: position{line: 2693, col: 5, offset: 92921},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2693, col: 5, offset: 92921},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2711, col: 5, offset: 93607},
																																								run: (*parser).callonimportsAndComments223,
																																								expr: &seqExpr{
																																									pos: position{line: 2711, col: 5, offset: 93607},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2711, col: 5, offset: 93607},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2711, col: 10, offset: 93612},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3795, col: 12, offset: 128924},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 847, col: 115, offset: 25679},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 849, col: 5, offset: 25771},
																																	run: (*parser).callonimportsAndComments229,
																																	expr: &seqExpr{
																																		pos: position{line: 849, col: 5, offset: 25771},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 849, col: 5, offset: 25771},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 849, col: 9, offset: 25775},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 849, col: 14, offset: 25780},
																																					expr: &choiceExpr{
																																						pos: position{line: 849, col: 15, offset: 25781},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2484, col: 24, offset: 84297},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2484, col: 24, offset: 84297},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2485, col: 24, offset: 84364},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2485, col: 24, offset: 84364},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2486, col: 5, offset: 84401},
																																								run: (*parser).callonimportsAndComments244,
																																								expr: &seqExpr{
																																									pos: position{line: 2486, col: 5, offset: 84401},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2486, col: 5, offset: 84401},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 14, offset: 84410},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 26, offset: 84422},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2503, col: 19, offset: 85039},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2503, col: 19, offset: 85039},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2504, col: 5, offset: 85098},
																																								run: (*parser).callonimportsAndComments257,
																																								expr: &seqExpr{
																																									pos: position{line: 2504, col: 5, offset: 85098},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2504, col: 5, offset: 85098},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 14, offset: 85107},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 26, offset: 85119},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 38, offset: 85131},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 50, offset: 85143},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2533, col: 16, offset: 86279},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2533, col: 16, offset: 86279},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2534, col: 5, offset: 86382},
																																								run: (*parser).callonimportsAndComments278,
																																								expr: &seqExpr{
																																									pos: position{line: 2534, col: 5, offset: 86382},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2534, col: 5, offset: 86382},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 14, offset: 86391},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 26, offset: 86403},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 38, offset: 86415},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 50, offset: 86427},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 62, offset: 86439},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 74, offset: 86451},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 86, offset: 86463},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 98, offset: 86475},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2761, col: 36, offset: 95412},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2761, col: 36, offset: 95412},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2761, col: 41, offset: 95417},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2759, col: 38, offset: 95304},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2648, col: 37, offset: 91062},
																																								run: (*parser).callonimportsAndComments301,
																																								expr: &seqExpr{
																																									pos: position{line: 2648, col: 37, offset: 91062},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2648, col: 37, offset: 91062},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2672, col: 5, offset: 92079},
																																								run: (*parser).callonimportsAndComments312,
																																								expr: &seqExpr{
																																									pos: position{line: 2672, col: 5, offset: 92079},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2672, col: 5, offset: 92079},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2693, col: 5, offset: 92921},
																																								run: (*parser).callonimportsAndComments319,
																																								expr: &seqExpr{
																																									pos: position{line: 2693, col: 5, offset: 92921},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2693, col: 5, offset: 92921},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2711, col: 5, offset: 93607},
																																								run: (*parser).callonimportsAndComments324,
																																								expr: &seqExpr{
																																									pos: position{line: 2711, col: 5, offset: 93607},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2711, col: 5, offset: 93607},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2711, col: 10, offset: 93612},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3795, col: 12, offset: 128924},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 849, col: 98, offset: 25864},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3797, col: 8, offset: 128940},
																																					run: (*parser).callonimportsAndComments330,
																																					expr: &choiceExpr{
																																						pos: position{line: 3797, col: 9, offset: 128941},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3797, col: 9, offset: 128941},
																																								expr: &anyMatcher{
																																									line: 3797, col: 10, offset: 128942,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3797, col: 14, offset: 128946},
																																								expr: &anyMatcher{
																																									line: 3797, col: 15, offset: 128947,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 849, col: 110, offset: 25876},
																																				expr: &seqExpr{
																																					pos: position{line: 3794, col: 12, offset: 128891},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3794, col: 12, offset: 128891},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3806, col: 36, offset: 129238},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3794, col: 16, offset: 128895},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3794, col: 16, offset: 128895},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3794, col: 16, offset: 128895},
																																											expr: &litMatcher{
																																												pos:        position{line: 3794, col: 16, offset: 128895},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3794, col: 22, offset: 128901},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3793, col: 12, offset: 128877},
																																									expr: &anyMatcher{
																																										line: 3793, col: 13, offset: 128878,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 868, col: 22, offset: 26282},
																																	run: (*parser).callonimportsAndComments347,
																																	expr: &seqExpr{
																																		pos: position{line: 868, col: 22, offset: 26282},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 868, col: 22, offset: 26282},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 868, col: 27, offset: 26287},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 868, col: 32, offset: 26292},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 868, col: 32, offset: 26292},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 868, col: 42, offset: 26302},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 868, col: 47, offset: 26307},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3797, col: 8, offset: 128940},
																																					run: (*parser).callonimportsAndComments355,
																																					expr: &choiceExpr{
																																						pos: position{line: 3797, col: 9, offset: 128941},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3797, col: 9, offset: 128941},
																																								expr: &anyMatcher{
																																									line: 3797, col: 10, offset: 128942,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3797, col: 14, offset: 128946},
																																								expr: &anyMatcher{
																																									line: 3797, col: 15, offset: 128947,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3235, col: 21, offset: 111026},
																																	run: (*parser).callonimportsAndComments361,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3235, col: 21, offset: 111026},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3235, col: 27, offset: 111032},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3795, col: 12, offset: 128924},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3794, col: 12, offset: 128891},
																														expr: &charClassMatcher{
																															pos:        position{line: 3806, col: 36, offset: 129238},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3794, col: 16, offset: 128895},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3794, col: 16, offset: 128895},
																																		expr: &litMatcher{
																																			pos:        position{line: 3794, col: 16, offset: 128895},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3794, col: 22, offset: 128901},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3793, col: 12, offset: 128877},
																																expr: &anyMatcher{
																																	line: 3793, col: 13, offset: 128878,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4287, col: 11, offset: 149969},
																							run: (*parser).callonimportsAndComments374,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3278, col: 5, offset: 112320},
																run: (*parser).callonimportsAndComments375,
																expr: &seqExpr{
																	pos: position{line: 3278, col: 5, offset: 112320},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3278, col: 5, offset: 112320},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3278, col: 14, offset: 112329},
																			expr: &litMatcher{
																				pos:        position{line: 3278, col: 14, offset: 112329},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3278, col: 19, offset: 112334},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3298, col: 15, offset: 112988},
																				run: (*parser).callonimportsAndComments381,
																				expr: &seqExpr{
																					pos: position{line: 3298, col: 15, offset: 112988},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3298, col: 15, offset: 112988},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3298, col: 22, offset: 112995},
																								expr: &seqExpr{
																									pos: position{line: 3298, col: 23, offset: 112996},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3311, col: 16, offset: 113276},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3311, col: 16, offset: 113276},
																													run: (*parser).callonimportsAndComments387,
																													expr: &litMatcher{
																														pos:        position{line: 3311, col: 16, offset: 113276},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2369, col: 12, offset: 80635},
																													run: (*parser).callonimportsAndComments389,
																													expr: &labeledExpr{
																														pos:   position{line: 2369, col: 12, offset: 80635},
																														label: "ident",
																														expr: &seqExpr{
																															pos: position{line: 2408, col: 17, offset: 81561},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2391, col: 20, offset: 81316},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2408, col: 26, offset: 81570},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2391, col: 20, offset: 81316},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3313, col: 15, offset: 113355},
																													run: (*parser).callonimportsAndComments395,
																													expr: &seqExpr{
																														pos: position{line: 3313, col: 15, offset: 113355},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3313, col: 15, offset: 113355},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3313, col: 15, offset: 113355},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3313, col: 24, offset: 113364},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3797, col: 8, offset: 128940},
																																	run: (*parser).callonimportsAndComments400,
																																	expr: &choiceExpr{
																																		pos: position{line: 3797, col: 9, offset: 128941},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3797, col: 9, offset: 128941},
																																				expr: &anyMatcher{
																																					line: 3797, col: 10, offset: 128942,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3797, col: 14, offset: 128946},
																																				expr: &anyMatcher{
																																					line: 3797, col: 15, offset: 128947,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3298, col: 35, offset: 113008},
																											expr: &litMatcher{
																												pos:        position{line: 3298, col: 35, offset: 113008},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3298, col: 42, offset: 113015},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3235, col: 12, offset: 111017},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 826, col: 14, offset: 25024},
																										run: (*parser).callonimportsAndComments410,
																										expr: &seqExpr{
																											pos: position{line: 826, col: 14, offset: 25024},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 826, col: 14, offset: 25024},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 826, col: 18, offset: 25028},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 826, col: 23, offset: 25033},
																														expr: &charClassMatcher{
																															pos:        position{line: 2745, col: 27, offset: 94634},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 826, col: 47, offset: 25057},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 828, col: 5, offset: 25149},
																										run: (*parser).callonimportsAndComments417,
																										expr: &seqExpr{
																											pos: position{line: 828, col: 5, offset: 25149},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 828, col: 5, offset: 25149},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 828, col: 9, offset: 25153},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 828, col: 14, offset: 25158},
																														expr: &charClassMatcher{
																															pos:        position{line: 2745, col: 27, offset: 94634},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 828, col: 38, offset: 25182},
																													expr: &seqExpr{
																														pos: position{line: 3794, col: 12, offset: 128891},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3794, col: 12, offset: 128891},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3806, col: 36, offset: 129238},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3794, col: 16, offset: 128895},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3794, col: 16, offset: 128895},
																																				expr: &litMatcher{
																																					pos:        position{line: 3794, col: 16, offset: 128895},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3794, col: 22, offset: 128901},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3793, col: 12, offset: 128877},
																																		expr: &anyMatcher{
																																			line: 3793, col: 13, offset: 128878,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 847, col: 22, offset: 25586},
																										run: (*parser).callonimportsAndComments434,
																										expr: &seqExpr{
																											pos: position{line: 847, col: 22, offset: 25586},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 847, col: 22, offset: 25586},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 847, col: 26, offset: 25590},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 847, col: 31, offset: 25595},
																														expr: &choiceExpr{
																															pos: position{line: 847, col: 32, offset: 25596},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2484, col: 24, offset: 84297},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2484, col: 24, offset: 84297},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2485, col: 24, offset: 84364},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2485, col: 24, offset: 84364},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2486, col: 5, offset: 84401},
																																	run: (*parser).callonimportsAndComments449,
																																	expr: &seqExpr{
																																		pos: position{line: 2486, col: 5, offset: 84401},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2486, col: 5, offset: 84401},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 14, offset: 84410},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 26, offset: 84422},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2503, col: 19, offset: 85039},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2503, col: 19, offset: 85039},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2504, col: 5, offset: 85098},
																																	run: (*parser).callonimportsAndComments462,
																																	expr: &seqExpr{
																																		pos: position{line: 2504, col: 5, offset: 85098},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2504, col: 5, offset: 85098},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 14, offset: 85107},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 26, offset: 85119},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 38, offset: 85131},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 50, offset: 85143},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2533, col: 16, offset: 86279},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2533, col: 16, offset: 86279},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2534, col: 5, offset: 86382},
																																	run: (*parser).callonimportsAndComments483,
																																	expr: &seqExpr{
																																		pos: position{line: 2534, col: 5, offset: 86382},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2534, col: 5, offset: 86382},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 14, offset: 86391},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 26, offset: 86403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 38, offset: 86415},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 50, offset: 86427},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 62, offset: 86439},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 74, offset: 86451},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 86, offset: 86463},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 98, offset: 86475},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2761, col: 36, offset: 95412},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2761, col: 36, offset: 95412},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2761, col: 41, offset: 95417},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2759, col: 38, offset: 95304},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2648, col: 37, offset: 91062},
																																	run: (*parser).callonimportsAndComments506,
																																	expr: &seqExpr{
																																		pos: position{line: 2648, col: 37, offset: 91062},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2648, col: 37, offset: 91062},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2672, col: 5, offset: 92079},
																																	run: (*parser).callonimportsAndComments517,
																																	expr: &seqExpr{
																																		pos: position{line: 2672, col: 5, offset: 92079},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2672, col: 5, offset: 92079},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2693, col: 5, offset: 92921},
																																	run: (*parser).callonimportsAndComments524,
																																	expr: &seqExpr{
																																		pos: position{line: 2693, col: 5, offset: 92921},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2693, col: 5, offset: 92921},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2711, col: 5, offset: 93607},
																																	run: (*parser).callonimportsAndComments529,
																																	expr: &seqExpr{
																																		pos: position{line: 2711, col: 5, offset: 93607},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2711, col: 5, offset: 93607},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2711, col: 10, offset: 93612},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3795, col: 12, offset: 128924},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 847, col: 115, offset: 25679},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 849, col: 5, offset: 25771},
																										run: (*parser).callonimportsAndComments535,
																										expr: &seqExpr{
																											pos: position{line: 849, col: 5, offset: 25771},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 849, col: 5, offset: 25771},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 849, col: 9, offset: 25775},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 849, col: 14, offset: 25780},
																														expr: &choiceExpr{
																															pos: position{line: 849, col: 15, offset: 25781},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2484, col: 24, offset: 84297},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2484, col: 24, offset: 84297},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2485, col: 24, offset: 84364},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2485, col: 24, offset: 84364},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2486, col: 5, offset: 84401},
																																	run: (*parser).callonimportsAndComments550,
																																	expr: &seqExpr{
																																		pos: position{line: 2486, col: 5, offset: 84401},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2486, col: 5, offset: 84401},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 14, offset: 84410},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 26, offset: 84422},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2503, col: 19, offset: 85039},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2503, col: 19, offset: 85039},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2504, col: 5, offset: 85098},
																																	run: (*parser).callonimportsAndComments563,
																																	expr: &seqExpr{
																																		pos: position{line: 2504, col: 5, offset: 85098},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2504, col: 5, offset: 85098},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 14, offset: 85107},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 26, offset: 85119},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 38, offset: 85131},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 50, offset: 85143},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2533, col: 16, offset: 86279},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2533, col: 16, offset: 86279},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2534, col: 5, offset: 86382},
																																	run: (*parser).callonimportsAndComments584,
																																	expr: &seqExpr{
																																		pos: position{line: 2534, col: 5, offset: 86382},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2534, col: 5, offset: 86382},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 14, offset: 86391},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 26, offset: 86403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 38, offset: 86415},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 50, offset: 86427},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 62, offset: 86439},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 74, offset: 86451},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 86, offset: 86463},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 98, offset: 86475},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2761, col: 36, offset: 95412},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2761, col: 36, offset: 95412},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2761, col: 41, offset: 95417},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2759, col: 38, offset: 95304},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2648, col: 37, offset: 91062},
																																	run: (*parser).callonimportsAndComments607,
																																	expr: &seqExpr{
																																		pos: position{line: 2648, col: 37, offset: 91062},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2648, col: 37, offset: 91062},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2672, col: 5, offset: 92079},
																																	run: (*parser).callonimportsAndComments618,
																																	expr: &seqExpr{
																																		pos: position{line: 2672, col: 5, offset: 92079},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2672, col: 5, offset: 92079},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2693, col: 5, offset: 92921},
																																	run: (*parser).callonimportsAndComments625,
																																	expr: &seqExpr{
																																		pos: position{line: 2693, col: 5, offset: 92921},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2693, col: 5, offset: 92921},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2711, col: 5, offset: 93607},
																																	run: (*parser).callonimportsAndComments630,
																																	expr: &seqExpr{
																																		pos: position{line: 2711, col: 5, offset: 93607},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2711, col: 5, offset: 93607},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2711, col: 10, offset: 93612},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3795, col: 12, offset: 128924},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 849, col: 98, offset: 25864},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3797, col: 8, offset: 128940},
																														run: (*parser).callonimportsAndComments636,
																														expr: &choiceExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3797, col: 9, offset: 128941},
																																	expr: &anyMatcher{
																																		line: 3797, col: 10, offset: 128942,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3797, col: 14, offset: 128946},
																																	expr: &anyMatcher{
																																		line: 3797, col: 15, offset: 128947,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 849, col: 110, offset: 25876},
																													expr: &seqExpr{
																														pos: position{line: 3794, col: 12, offset: 128891},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3794, col: 12, offset: 128891},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3806, col: 36, offset: 129238},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3794, col: 16, offset: 128895},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3794, col: 16, offset: 128895},
																																				expr: &litMatcher{
																																					pos:        position{line: 3794, col: 16, offset: 128895},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3794, col: 22, offset: 128901},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3793, col: 12, offset: 128877},
																																		expr: &anyMatcher{
																																			line: 3793, col: 13, offset: 128878,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 868, col: 22, offset: 26282},
																										run: (*parser).callonimportsAndComments653,
																										expr: &seqExpr{
																											pos: position{line: 868, col: 22, offset: 26282},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 868, col: 22, offset: 26282},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 868, col: 27, offset: 26287},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 868, col: 32, offset: 26292},
																														expr: &charClassMatcher{
																															pos:        position{line: 868, col: 32, offset: 26292},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 868, col: 42, offset: 26302},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 868, col: 47, offset: 26307},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3797, col: 8, offset: 128940},
																														run: (*parser).callonimportsAndComments661,
																														expr: &choiceExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3797, col: 9, offset: 128941},
																																	expr: &anyMatcher{
																																		line: 3797, col: 10, offset: 128942,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3797, col: 14, offset: 128946},
																																	expr: &anyMatcher{
																																		line: 3797, col: 15, offset: 128947,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3235, col: 21, offset: 111026},
																										run: (*parser).callonimportsAndComments667,
																										expr: &labeledExpr{
																											pos:   position{line: 3235, col: 21, offset: 111026},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3235, col: 27, offset: 111032},
																												expr: &charClassMatcher{
																													pos:        position{line: 3795, col: 12, offset: 128924},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3794, col: 12, offset: 128891},
																							expr: &charClassMatcher{
																								pos:        position{line: 3806, col: 36, offset: 129238},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3794, col: 16, offset: 128895},
																											expr: &litMatcher{
																												pos:        position{line: 3794, col: 16, offset: 128895},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3794, col: 22, offset: 128901},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3793, col: 12, offset: 128877},
																									expr: &anyMatcher{
																										line: 3793, col: 13, offset: 128878,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3283, col: 5, offset: 112479},
																run: (*parser).callonimportsAndComments680,
																expr: &seqExpr{
																	pos: position{line: 3283, col: 5, offset: 112479},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3283, col: 5, offset: 112479},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3283, col: 14, offset: 112488},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonimportsAndComments684,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3794, col: 12, offset: 128891},
																			expr: &charClassMatcher{
																				pos:        position{line: 3806, col: 36, offset: 129238},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							expr: &litMatcher{
																								pos:        position{line: 3794, col: 16, offset: 128895},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3794, col: 22, offset: 128901},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3793, col: 12, offset: 128877},
																					expr: &anyMatcher{
																						line: 3793, col: 13, offset: 128878,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "usesAndComments",
			pos:  position{line: 69, col: 1, offset: 1952},
			expr: &actionExpr{
				pos: position{line: 69, col: 20, offset: 1971},
				run: (*parser).callonusesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 69, col: 20, offset: 1971},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 69, col: 26, offset: 1977},
						expr: &seqExpr{
							pos: position{line: 69, col: 27, offset: 1978},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 69, col: 27, offset: 1978},
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 27, offset: 1978},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 69, col: 42, offset: 1993},
									expr: &oneOrMoreExpr{
										pos: position{line: 3808, col: 36, offset: 129325},
										expr: &seqExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3331, col: 9, offset: 113950},
									run: (*parser).callonusesAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3331, col: 9, offset: 113950},
										label: "usesI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3331, col: 15, offset: 113956},
											expr: &seqExpr{
												pos: position{line: 3331, col: 16, offset: 113957},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3331, col: 16, offset: 113957},
														expr: &oneOrMoreExpr{
															pos: position{line: 3808, col: 36, offset: 129325},
															expr: &seqExpr{
																pos: position{line: 3808, col: 37, offset: 129326},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3808, col: 37, offset: 129326},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		expr: &litMatcher{
																			pos:        position{line: 3807, col: 36, offset: 129279},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3807, col: 42, offset: 129285},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3345, col: 8, offset: 114238},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3345, col: 8, offset: 114238},
																run: (*parser).callonusesAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3345, col: 8, offset: 114238},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3345, col: 8, offset: 114238},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3794, col: 12, offset: 128891},
																			expr: &charClassMatcher{
																				pos:        position{line: 3806, col: 36, offset: 129238},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							expr: &litMatcher{
																								pos:        position{line: 3794, col: 16, offset: 128895},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3794, col: 22, offset: 128901},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3793, col: 12, offset: 128877},
																					expr: &anyMatcher{
																						line: 3793, col: 13, offset: 128878,
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3345, col: 18, offset: 114248},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3366, col: 13, offset: 114854},
																				run: (*parser).callonusesAndComments41,
																				expr: &seqExpr{
																					pos: position{line: 3366, col: 13, offset: 114854},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4282, col: 11, offset: 149864},
																							run: (*parser).callonusesAndComments43,
																						},
																						&labeledExpr{
																							pos:   position{line: 3366, col: 20, offset: 114861},
																							label: "usesI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3366, col: 26, offset: 114867},
																								expr: &seqExpr{
																									pos: position{line: 3366, col: 27, offset: 114868},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3366, col: 27, offset: 114868},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3808, col: 36, offset: 129325},
																												expr: &seqExpr{
																													pos: position{line: 3808, col: 37, offset: 129326},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3808, col: 37, offset: 129326},
																															expr: &charClassMatcher{
																																pos:        position{line: 3806, col: 36, offset: 129238},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3807, col: 36, offset: 129279},
																															expr: &litMatcher{
																																pos:        position{line: 3807, col: 36, offset: 129279},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3807, col: 42, offset: 129285},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3895, col: 17, offset: 133132},
																											run: (*parser).callonusesAndComments55,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3895, col: 17, offset: 133132},
																												expr: &charClassMatcher{
																													pos:        position{line: 3806, col: 36, offset: 129238},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3895, col: 41, offset: 133156},
																											run: (*parser).callonusesAndComments58,
																										},
																										&choiceExpr{
																											pos: position{line: 3947, col: 5, offset: 135066},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3947, col: 5, offset: 135066},
																													run: (*parser).callonusesAndComments60,
																												},
																												&seqExpr{
																													pos: position{line: 3949, col: 9, offset: 135149},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3949, col: 9, offset: 135149},
																															run: (*parser).callonusesAndComments62,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3951, col: 7, offset: 135272},
																															run: (*parser).callonusesAndComments63,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3958, col: 9, offset: 135608},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3958, col: 9, offset: 135608},
																															run: (*parser).callonusesAndComments65,
																														},
																														&andCodeExpr{
																															pos: position{line: 3960, col: 7, offset: 135716},
																															run: (*parser).callonusesAndComments66,
																														},
																														&choiceExpr{
																															pos: position{line: 4013, col: 9, offset: 138051},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 4013, col: 9, offset: 138051},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4013, col: 9, offset: 138051},
																																			run: (*parser).callonusesAndComments69,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4017, col: 11, offset: 138301},
																																			run: (*parser).callonusesAndComments70,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 4083, col: 11, offset: 141507},
																																			run: (*parser).callonusesAndComments71,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 4091, col: 13, offset: 141860},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4091, col: 13, offset: 141860},
																																			run: (*parser).callonusesAndComments73,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4095, col: 11, offset: 142115},
																																			run: (*parser).callonusesAndComments74,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3370, col: 12, offset: 114984},
																											run: (*parser).callonusesAndComments75,
																											expr: &seqExpr{
																												pos: position{line: 3370, col: 12, offset: 114984},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3370, col: 12, offset: 114984},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3370, col: 19, offset: 114991},
																															expr: &seqExpr{
																																pos: position{line: 3370, col: 20, offset: 114992},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3383, col: 13, offset: 115261},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3383, col: 13, offset: 115261},
																																				run: (*parser).callonusesAndComments81,
																																				expr: &litMatcher{
																																					pos:        position{line: 3383, col: 13, offset: 115261},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 757, col: 10, offset: 22837},
																																				run: (*parser).callonusesAndComments83,
																																				expr: &labeledExpr{
																																					pos:   position{line: 757, col: 10, offset: 22837},
																																					label: "identI",
																																					expr: &seqExpr{
																																						pos: position{line: 2408, col: 17, offset: 81561},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2391, col: 20, offset: 81316},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2408, col: 26, offset: 81570},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2391, col: 20, offset: 81316},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 759, col: 5, offset: 22931},
																																				run: (*parser).callonusesAndComments89,
																																				expr: &seqExpr{
																																					pos: position{line: 759, col: 5, offset: 22931},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 759, col: 5, offset: 22931},
																																							label: "identI",
																																							expr: &seqExpr{
																																								pos: position{line: 759, col: 13, offset: 22939},
																																								exprs: []interface{}{
																																									&zeroOrOneExpr{
																																										pos: position{line: 759, col: 13, offset: 22939},
																																										expr: &litMatcher{
																																											pos:        position{line: 759, col: 13, offset: 22939},
																																											val:        "$",
																																											ignoreCase: false,
																																											want:       "\"$\"",
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 759, col: 18, offset: 22944},
																																										expr: &choiceExpr{
																																											pos: position{line: 759, col: 19, offset: 22945},
																																											alternatives: []interface{}{
																																												&seqExpr{
																																													pos: position{line: 759, col: 19, offset: 22945},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 759, col: 19, offset: 22945},
																																															val:        "[\\pNd]",
																																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&charClassMatcher{
																																															pos:        position{line: 759, col: 28, offset: 22954},
																																															val:        "[_-\\pL]",
																																															chars:      []rune{'_', '-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 759, col: 38, offset: 22964},
																																													val:        "[_-\\pL]",
																																													chars:      []rune{'_', '-'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 759, col: 49, offset: 22975},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3797, col: 8, offset: 128940},
																																								run: (*parser).callonusesAndComments102,
																																								expr: &choiceExpr{
																																									pos: position{line: 3797, col: 9, offset: 128941},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3797, col: 9, offset: 128941},
																																											expr: &anyMatcher{
																																												line: 3797, col: 10, offset: 128942,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3797, col: 14, offset: 128946},
																																											expr: &anyMatcher{
																																												line: 3797, col: 15, offset: 128947,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3385, col: 13, offset: 115336},
																																				run: (*parser).callonusesAndComments108,
																																				expr: &seqExpr{
																																					pos: position{line: 3385, col: 13, offset: 115336},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3385, col: 13, offset: 115336},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3385, col: 13, offset: 115336},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3385, col: 22, offset: 115345},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3797, col: 8, offset: 128940},
																																								run: (*parser).callonusesAndComments113,
																																								expr: &choiceExpr{
																																									pos: position{line: 3797, col: 9, offset: 128941},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3797, col: 9, offset: 128941},
																																											expr: &anyMatcher{
																																												line: 3797, col: 10, offset: 128942,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3797, col: 14, offset: 128946},
																																											expr: &anyMatcher{
																																												line: 3797, col: 15, offset: 128947,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3370, col: 29, offset: 115001},
																																		expr: &litMatcher{
																																			pos:        position{line: 3370, col: 29, offset: 115001},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3370, col: 36, offset: 115008},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3235, col: 12, offset: 111017},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 826, col: 14, offset: 25024},
																																	run: (*parser).callonusesAndComments123,
																																	expr: &seqExpr{
																																		pos: position{line: 826, col: 14, offset: 25024},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 826, col: 14, offset: 25024},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 826, col: 18, offset: 25028},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 826, col: 23, offset: 25033},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2745, col: 27, offset: 94634},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 826, col: 47, offset: 25057},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 828, col: 5, offset: 25149},
																																	run: (*parser).callonusesAndComments130,
																																	expr: &seqExpr{
																																		pos: position{line: 828, col: 5, offset: 25149},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 828, col: 5, offset: 25149},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 828, col: 9, offset: 25153},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 828, col: 14, offset: 25158},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2745, col: 27, offset: 94634},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 828, col: 38, offset: 25182},
																																				expr: &seqExpr{
																																					pos: position{line: 3794, col: 12, offset: 128891},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3794, col: 12, offset: 128891},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3806, col: 36, offset: 129238},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3794, col: 16, offset: 128895},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3794, col: 16, offset: 128895},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3794, col: 16, offset: 128895},
																																											expr: &litMatcher{
																																												pos:        position{line: 3794, col: 16, offset: 128895},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3794, col: 22, offset: 128901},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3793, col: 12, offset: 128877},
																																									expr: &anyMatcher{
																																										line: 3793, col: 13, offset: 128878,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 847, col: 22, offset: 25586},
																																	run: (*parser).callonusesAndComments147,
																																	expr: &seqExpr{
																																		pos: position{line: 847, col: 22, offset: 25586},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 847, col: 22, offset: 25586},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 847, col: 26, offset: 25590},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 847, col: 31, offset: 25595},
																																					expr: &choiceExpr{
																																						pos: position{line: 847, col: 32, offset: 25596},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2484, col: 24, offset: 84297},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2484, col: 24, offset: 84297},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2485, col: 24, offset: 84364},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2485, col: 24, offset: 84364},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2486, col: 5, offset: 84401},
																																								run: (*parser).callonusesAndComments162,
																																								expr: &seqExpr{
																																									pos: position{line: 2486, col: 5, offset: 84401},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2486, col: 5, offset: 84401},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 14, offset: 84410},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 26, offset: 84422},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2503, col: 19, offset: 85039},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2503, col: 19, offset: 85039},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2504, col: 5, offset: 85098},
																																								run: (*parser).callonusesAndComments175,
																																								expr: &seqExpr{
																																									pos: position{line: 2504, col: 5, offset: 85098},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2504, col: 5, offset: 85098},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 14, offset: 85107},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 26, offset: 85119},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 38, offset: 85131},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 50, offset: 85143},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2533, col: 16, offset: 86279},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2533, col: 16, offset: 86279},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2534, col: 5, offset: 86382},
																																								run: (*parser).callonusesAndComments196,
																																								expr: &seqExpr{
																																									pos: position{line: 2534, col: 5, offset: 86382},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2534, col: 5, offset: 86382},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 14, offset: 86391},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 26, offset: 86403},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 38, offset: 86415},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 50, offset: 86427},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 62, offset: 86439},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 74, offset: 86451},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 86, offset: 86463},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 98, offset: 86475},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2761, col: 36, offset: 95412},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2761, col: 36, offset: 95412},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2761, col: 41, offset: 95417},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2759, col: 38, offset: 95304},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2648, col: 37, offset: 91062},
																																								run: (*parser).callonusesAndComments219,
																																								expr: &seqExpr{
																																									pos: position{line: 2648, col: 37, offset: 91062},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2648, col: 37, offset: 91062},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2672, col: 5, offset: 92079},
																																								run: (*parser).callonusesAndComments230,
																																								expr: &seqExpr{
																																									pos: position{line: 2672, col: 5, offset: 92079},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2672, col: 5, offset: 92079},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2693, col: 5, offset: 92921},
																																								run: (*parser).callonusesAndComments237,
																																								expr: &seqExpr{
																																									pos: position{line: 2693, col: 5, offset: 92921},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2693, col: 5, offset: 92921},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2711, col: 5, offset: 93607},
																																								run: (*parser).callonusesAndComments242,
																																								expr: &seqExpr{
																																									pos: position{line: 2711, col: 5, offset: 93607},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2711, col: 5, offset: 93607},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2711, col: 10, offset: 93612},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3795, col: 12, offset: 128924},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 847, col: 115, offset: 25679},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 849, col: 5, offset: 25771},
																																	run: (*parser).callonusesAndComments248,
																																	expr: &seqExpr{
																																		pos: position{line: 849, col: 5, offset: 25771},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 849, col: 5, offset: 25771},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 849, col: 9, offset: 25775},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 849, col: 14, offset: 25780},
																																					expr: &choiceExpr{
																																						pos: position{line: 849, col: 15, offset: 25781},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2484, col: 24, offset: 84297},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2484, col: 24, offset: 84297},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2401, col: 19, offset: 81486},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2485, col: 24, offset: 84364},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2485, col: 24, offset: 84364},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2486, col: 5, offset: 84401},
																																								run: (*parser).callonusesAndComments263,
																																								expr: &seqExpr{
																																									pos: position{line: 2486, col: 5, offset: 84401},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2486, col: 5, offset: 84401},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 14, offset: 84410},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2486, col: 26, offset: 84422},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2503, col: 19, offset: 85039},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2503, col: 19, offset: 85039},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2504, col: 5, offset: 85098},
																																								run: (*parser).callonusesAndComments276,
																																								expr: &seqExpr{
																																									pos: position{line: 2504, col: 5, offset: 85098},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2504, col: 5, offset: 85098},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 14, offset: 85107},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 26, offset: 85119},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 38, offset: 85131},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2504, col: 50, offset: 85143},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2533, col: 16, offset: 86279},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2533, col: 16, offset: 86279},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2402, col: 19, offset: 81510},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2534, col: 5, offset: 86382},
																																								run: (*parser).callonusesAndComments297,
																																								expr: &seqExpr{
																																									pos: position{line: 2534, col: 5, offset: 86382},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2534, col: 5, offset: 86382},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 14, offset: 86391},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 26, offset: 86403},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 38, offset: 86415},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 50, offset: 86427},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 62, offset: 86439},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 74, offset: 86451},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 86, offset: 86463},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2534, col: 98, offset: 86475},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2402, col: 19, offset: 81510},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2761, col: 36, offset: 95412},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2761, col: 36, offset: 95412},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2761, col: 41, offset: 95417},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2759, col: 38, offset: 95304},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2648, col: 37, offset: 91062},
																																								run: (*parser).callonusesAndComments320,
																																								expr: &seqExpr{
																																									pos: position{line: 2648, col: 37, offset: 91062},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2648, col: 37, offset: 91062},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2672, col: 5, offset: 92079},
																																								run: (*parser).callonusesAndComments331,
																																								expr: &seqExpr{
																																									pos: position{line: 2672, col: 5, offset: 92079},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2672, col: 5, offset: 92079},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2693, col: 5, offset: 92921},
																																								run: (*parser).callonusesAndComments338,
																																								expr: &seqExpr{
																																									pos: position{line: 2693, col: 5, offset: 92921},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2693, col: 5, offset: 92921},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2402, col: 19, offset: 81510},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2711, col: 5, offset: 93607},
																																								run: (*parser).callonusesAndComments343,
																																								expr: &seqExpr{
																																									pos: position{line: 2711, col: 5, offset: 93607},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2711, col: 5, offset: 93607},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2711, col: 10, offset: 93612},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3795, col: 12, offset: 128924},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 849, col: 98, offset: 25864},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3797, col: 8, offset: 128940},
																																					run: (*parser).callonusesAndComments349,
																																					expr: &choiceExpr{
																																						pos: position{line: 3797, col: 9, offset: 128941},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3797, col: 9, offset: 128941},
																																								expr: &anyMatcher{
																																									line: 3797, col: 10, offset: 128942,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3797, col: 14, offset: 128946},
																																								expr: &anyMatcher{
																																									line: 3797, col: 15, offset: 128947,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 849, col: 110, offset: 25876},
																																				expr: &seqExpr{
																																					pos: position{line: 3794, col: 12, offset: 128891},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3794, col: 12, offset: 128891},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3806, col: 36, offset: 129238},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3794, col: 16, offset: 128895},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3794, col: 16, offset: 128895},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3794, col: 16, offset: 128895},
																																											expr: &litMatcher{
																																												pos:        position{line: 3794, col: 16, offset: 128895},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3794, col: 22, offset: 128901},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3793, col: 12, offset: 128877},
																																									expr: &anyMatcher{
																																										line: 3793, col: 13, offset: 128878,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 868, col: 22, offset: 26282},
																																	run: (*parser).callonusesAndComments366,
																																	expr: &seqExpr{
																																		pos: position{line: 868, col: 22, offset: 26282},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 868, col: 22, offset: 26282},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 868, col: 27, offset: 26287},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 868, col: 32, offset: 26292},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 868, col: 32, offset: 26292},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 868, col: 42, offset: 26302},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 868, col: 47, offset: 26307},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3797, col: 8, offset: 128940},
																																					run: (*parser).callonusesAndComments374,
																																					expr: &choiceExpr{
																																						pos: position{line: 3797, col: 9, offset: 128941},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3797, col: 9, offset: 128941},
																																								expr: &anyMatcher{
																																									line: 3797, col: 10, offset: 128942,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3797, col: 14, offset: 128946},
																																								expr: &anyMatcher{
																																									line: 3797, col: 15, offset: 128947,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3235, col: 21, offset: 111026},
																																	run: (*parser).callonusesAndComments380,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3235, col: 21, offset: 111026},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3235, col: 27, offset: 111032},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3795, col: 12, offset: 128924},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3794, col: 12, offset: 128891},
																														expr: &charClassMatcher{
																															pos:        position{line: 3806, col: 36, offset: 129238},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3794, col: 16, offset: 128895},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3794, col: 16, offset: 128895},
																																		expr: &litMatcher{
																																			pos:        position{line: 3794, col: 16, offset: 128895},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3794, col: 22, offset: 128901},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3793, col: 12, offset: 128877},
																																expr: &anyMatcher{
																																	line: 3793, col: 13, offset: 128878,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4287, col: 11, offset: 149969},
																							run: (*parser).callonusesAndComments393,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3350, col: 5, offset: 114367},
																run: (*parser).callonusesAndComments394,
																expr: &seqExpr{
																	pos: position{line: 3350, col: 5, offset: 114367},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3350, col: 5, offset: 114367},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3350, col: 11, offset: 114373},
																			expr: &litMatcher{
																				pos:        position{line: 3350, col: 11, offset: 114373},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3350, col: 16, offset: 114378},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3370, col: 12, offset: 114984},
																				run: (*parser).callonusesAndComments400,
																				expr: &seqExpr{
																					pos: position{line: 3370, col: 12, offset: 114984},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3370, col: 12, offset: 114984},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3370, col: 19, offset: 114991},
																								expr: &seqExpr{
																									pos: position{line: 3370, col: 20, offset: 114992},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3383, col: 13, offset: 115261},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3383, col: 13, offset: 115261},
																													run: (*parser).callonusesAndComments406,
																													expr: &litMatcher{
																														pos:        position{line: 3383, col: 13, offset: 115261},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 757, col: 10, offset: 22837},
																													run: (*parser).callonusesAndComments408,
																													expr: &labeledExpr{
																														pos:   position{line: 757, col: 10, offset: 22837},
																														label: "identI",
																														expr: &seqExpr{
																															pos: position{line: 2408, col: 17, offset: 81561},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2391, col: 20, offset: 81316},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2408, col: 26, offset: 81570},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2391, col: 20, offset: 81316},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 759, col: 5, offset: 22931},
																													run: (*parser).callonusesAndComments414,
																													expr: &seqExpr{
																														pos: position{line: 759, col: 5, offset: 22931},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 759, col: 5, offset: 22931},
																																label: "identI",
																																expr: &seqExpr{
																																	pos: position{line: 759, col: 13, offset: 22939},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 759, col: 13, offset: 22939},
																																			expr: &litMatcher{
																																				pos:        position{line: 759, col: 13, offset: 22939},
																																				val:        "$",
																																				ignoreCase: false,
																																				want:       "\"$\"",
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 759, col: 18, offset: 22944},
																																			expr: &choiceExpr{
																																				pos: position{line: 759, col: 19, offset: 22945},
																																				alternatives: []interface{}{
																																					&seqExpr{
																																						pos: position{line: 759, col: 19, offset: 22945},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 759, col: 19, offset: 22945},
																																								val:        "[\\pNd]",
																																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 759, col: 28, offset: 22954},
																																								val:        "[_-\\pL]",
																																								chars:      []rune{'_', '-'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 759, col: 38, offset: 22964},
																																						val:        "[_-\\pL]",
																																						chars:      []rune{'_', '-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 759, col: 49, offset: 22975},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3797, col: 8, offset: 128940},
																																	run: (*parser).callonusesAndComments427,
																																	expr: &choiceExpr{
																																		pos: position{line: 3797, col: 9, offset: 128941},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3797, col: 9, offset: 128941},
																																				expr: &anyMatcher{
																																					line: 3797, col: 10, offset: 128942,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3797, col: 14, offset: 128946},
																																				expr: &anyMatcher{
																																					line: 3797, col: 15, offset: 128947,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3385, col: 13, offset: 115336},
																													run: (*parser).callonusesAndComments433,
																													expr: &seqExpr{
																														pos: position{line: 3385, col: 13, offset: 115336},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3385, col: 13, offset: 115336},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3385, col: 13, offset: 115336},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3385, col: 22, offset: 115345},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3797, col: 8, offset: 128940},
																																	run: (*parser).callonusesAndComments438,
																																	expr: &choiceExpr{
																																		pos: position{line: 3797, col: 9, offset: 128941},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3797, col: 9, offset: 128941},
																																				expr: &anyMatcher{
																																					line: 3797, col: 10, offset: 128942,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3797, col: 14, offset: 128946},
																																				expr: &anyMatcher{
																																					line: 3797, col: 15, offset: 128947,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3370, col: 29, offset: 115001},
																											expr: &litMatcher{
																												pos:        position{line: 3370, col: 29, offset: 115001},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3370, col: 36, offset: 115008},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3235, col: 12, offset: 111017},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 826, col: 14, offset: 25024},
																										run: (*parser).callonusesAndComments448,
																										expr: &seqExpr{
																											pos: position{line: 826, col: 14, offset: 25024},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 826, col: 14, offset: 25024},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 826, col: 18, offset: 25028},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 826, col: 23, offset: 25033},
																														expr: &charClassMatcher{
																															pos:        position{line: 2745, col: 27, offset: 94634},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 826, col: 47, offset: 25057},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 828, col: 5, offset: 25149},
																										run: (*parser).callonusesAndComments455,
																										expr: &seqExpr{
																											pos: position{line: 828, col: 5, offset: 25149},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 828, col: 5, offset: 25149},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 828, col: 9, offset: 25153},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 828, col: 14, offset: 25158},
																														expr: &charClassMatcher{
																															pos:        position{line: 2745, col: 27, offset: 94634},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 828, col: 38, offset: 25182},
																													expr: &seqExpr{
																														pos: position{line: 3794, col: 12, offset: 128891},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3794, col: 12, offset: 128891},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3806, col: 36, offset: 129238},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3794, col: 16, offset: 128895},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3794, col: 16, offset: 128895},
																																				expr: &litMatcher{
																																					pos:        position{line: 3794, col: 16, offset: 128895},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3794, col: 22, offset: 128901},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3793, col: 12, offset: 128877},
																																		expr: &anyMatcher{
																																			line: 3793, col: 13, offset: 128878,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 847, col: 22, offset: 25586},
																										run: (*parser).callonusesAndComments472,
																										expr: &seqExpr{
																											pos: position{line: 847, col: 22, offset: 25586},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 847, col: 22, offset: 25586},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 847, col: 26, offset: 25590},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 847, col: 31, offset: 25595},
																														expr: &choiceExpr{
																															pos: position{line: 847, col: 32, offset: 25596},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2484, col: 24, offset: 84297},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2484, col: 24, offset: 84297},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2485, col: 24, offset: 84364},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2485, col: 24, offset: 84364},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2486, col: 5, offset: 84401},
																																	run: (*parser).callonusesAndComments487,
																																	expr: &seqExpr{
																																		pos: position{line: 2486, col: 5, offset: 84401},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2486, col: 5, offset: 84401},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 14, offset: 84410},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 26, offset: 84422},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2503, col: 19, offset: 85039},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2503, col: 19, offset: 85039},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2504, col: 5, offset: 85098},
																																	run: (*parser).callonusesAndComments500,
																																	expr: &seqExpr{
																																		pos: position{line: 2504, col: 5, offset: 85098},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2504, col: 5, offset: 85098},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 14, offset: 85107},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 26, offset: 85119},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 38, offset: 85131},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 50, offset: 85143},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2533, col: 16, offset: 86279},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2533, col: 16, offset: 86279},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2534, col: 5, offset: 86382},
																																	run: (*parser).callonusesAndComments521,
																																	expr: &seqExpr{
																																		pos: position{line: 2534, col: 5, offset: 86382},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2534, col: 5, offset: 86382},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 14, offset: 86391},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 26, offset: 86403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 38, offset: 86415},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 50, offset: 86427},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 62, offset: 86439},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 74, offset: 86451},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 86, offset: 86463},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 98, offset: 86475},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2761, col: 36, offset: 95412},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2761, col: 36, offset: 95412},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2761, col: 41, offset: 95417},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2759, col: 38, offset: 95304},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2648, col: 37, offset: 91062},
																																	run: (*parser).callonusesAndComments544,
																																	expr: &seqExpr{
																																		pos: position{line: 2648, col: 37, offset: 91062},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2648, col: 37, offset: 91062},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2672, col: 5, offset: 92079},
																																	run: (*parser).callonusesAndComments555,
																																	expr: &seqExpr{
																																		pos: position{line: 2672, col: 5, offset: 92079},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2672, col: 5, offset: 92079},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2693, col: 5, offset: 92921},
																																	run: (*parser).callonusesAndComments562,
																																	expr: &seqExpr{
																																		pos: position{line: 2693, col: 5, offset: 92921},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2693, col: 5, offset: 92921},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2711, col: 5, offset: 93607},
																																	run: (*parser).callonusesAndComments567,
																																	expr: &seqExpr{
																																		pos: position{line: 2711, col: 5, offset: 93607},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2711, col: 5, offset: 93607},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2711, col: 10, offset: 93612},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3795, col: 12, offset: 128924},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 847, col: 115, offset: 25679},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 849, col: 5, offset: 25771},
																										run: (*parser).callonusesAndComments573,
																										expr: &seqExpr{
																											pos: position{line: 849, col: 5, offset: 25771},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 849, col: 5, offset: 25771},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 849, col: 9, offset: 25775},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 849, col: 14, offset: 25780},
																														expr: &choiceExpr{
																															pos: position{line: 849, col: 15, offset: 25781},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2484, col: 24, offset: 84297},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2484, col: 24, offset: 84297},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2401, col: 19, offset: 81486},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2485, col: 24, offset: 84364},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2485, col: 24, offset: 84364},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2486, col: 5, offset: 84401},
																																	run: (*parser).callonusesAndComments588,
																																	expr: &seqExpr{
																																		pos: position{line: 2486, col: 5, offset: 84401},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2486, col: 5, offset: 84401},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 14, offset: 84410},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2486, col: 26, offset: 84422},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2503, col: 19, offset: 85039},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2503, col: 19, offset: 85039},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2504, col: 5, offset: 85098},
																																	run: (*parser).callonusesAndComments601,
																																	expr: &seqExpr{
																																		pos: position{line: 2504, col: 5, offset: 85098},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2504, col: 5, offset: 85098},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 14, offset: 85107},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 26, offset: 85119},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 38, offset: 85131},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2504, col: 50, offset: 85143},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2533, col: 16, offset: 86279},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2533, col: 16, offset: 86279},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2402, col: 19, offset: 81510},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2534, col: 5, offset: 86382},
																																	run: (*parser).callonusesAndComments622,
																																	expr: &seqExpr{
																																		pos: position{line: 2534, col: 5, offset: 86382},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2534, col: 5, offset: 86382},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 14, offset: 86391},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 26, offset: 86403},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 38, offset: 86415},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 50, offset: 86427},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 62, offset: 86439},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 74, offset: 86451},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 86, offset: 86463},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2534, col: 98, offset: 86475},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2402, col: 19, offset: 81510},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2761, col: 36, offset: 95412},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2761, col: 36, offset: 95412},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2761, col: 41, offset: 95417},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2759, col: 38, offset: 95304},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2648, col: 37, offset: 91062},
																																	run: (*parser).callonusesAndComments645,
																																	expr: &seqExpr{
																																		pos: position{line: 2648, col: 37, offset: 91062},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2648, col: 37, offset: 91062},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2672, col: 5, offset: 92079},
																																	run: (*parser).callonusesAndComments656,
																																	expr: &seqExpr{
																																		pos: position{line: 2672, col: 5, offset: 92079},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2672, col: 5, offset: 92079},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2693, col: 5, offset: 92921},
																																	run: (*parser).callonusesAndComments663,
																																	expr: &seqExpr{
																																		pos: position{line: 2693, col: 5, offset: 92921},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2693, col: 5, offset: 92921},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2402, col: 19, offset: 81510},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2711, col: 5, offset: 93607},
																																	run: (*parser).callonusesAndComments668,
																																	expr: &seqExpr{
																																		pos: position{line: 2711, col: 5, offset: 93607},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2711, col: 5, offset: 93607},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2711, col: 10, offset: 93612},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3795, col: 12, offset: 128924},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 849, col: 98, offset: 25864},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3797, col: 8, offset: 128940},
																														run: (*parser).callonusesAndComments674,
																														expr: &choiceExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3797, col: 9, offset: 128941},
																																	expr: &anyMatcher{
																																		line: 3797, col: 10, offset: 128942,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3797, col: 14, offset: 128946},
																																	expr: &anyMatcher{
																																		line: 3797, col: 15, offset: 128947,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 849, col: 110, offset: 25876},
																													expr: &seqExpr{
																														pos: position{line: 3794, col: 12, offset: 128891},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3794, col: 12, offset: 128891},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3806, col: 36, offset: 129238},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3794, col: 16, offset: 128895},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3794, col: 16, offset: 128895},
																																				expr: &litMatcher{
																																					pos:        position{line: 3794, col: 16, offset: 128895},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3794, col: 22, offset: 128901},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3793, col: 12, offset: 128877},
																																		expr: &anyMatcher{
																																			line: 3793, col: 13, offset: 128878,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 868, col: 22, offset: 26282},
																										run: (*parser).callonusesAndComments691,
																										expr: &seqExpr{
																											pos: position{line: 868, col: 22, offset: 26282},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 868, col: 22, offset: 26282},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 868, col: 27, offset: 26287},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 868, col: 32, offset: 26292},
																														expr: &charClassMatcher{
																															pos:        position{line: 868, col: 32, offset: 26292},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 868, col: 42, offset: 26302},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 868, col: 47, offset: 26307},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3797, col: 8, offset: 128940},
																														run: (*parser).callonusesAndComments699,
																														expr: &choiceExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3797, col: 9, offset: 128941},
																																	expr: &anyMatcher{
																																		line: 3797, col: 10, offset: 128942,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3797, col: 14, offset: 128946},
																																	expr: &anyMatcher{
																																		line: 3797, col: 15, offset: 128947,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3235, col: 21, offset: 111026},
																										run: (*parser).callonusesAndComments705,
																										expr: &labeledExpr{
																											pos:   position{line: 3235, col: 21, offset: 111026},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3235, col: 27, offset: 111032},
																												expr: &charClassMatcher{
																													pos:        position{line: 3795, col: 12, offset: 128924},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3794, col: 12, offset: 128891},
																							expr: &charClassMatcher{
																								pos:        position{line: 3806, col: 36, offset: 129238},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3794, col: 16, offset: 128895},
																											expr: &litMatcher{
																												pos:        position{line: 3794, col: 16, offset: 128895},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3794, col: 22, offset: 128901},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3793, col: 12, offset: 128877},
																									expr: &anyMatcher{
																										line: 3793, col: 13, offset: 128878,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3355, col: 5, offset: 114508},
																run: (*parser).callonusesAndComments718,
																expr: &seqExpr{
																	pos: position{line: 3355, col: 5, offset: 114508},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3355, col: 5, offset: 114508},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3355, col: 11, offset: 114514},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonusesAndComments722,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3794, col: 12, offset: 128891},
																			expr: &charClassMatcher{
																				pos:        position{line: 3806, col: 36, offset: 129238},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							expr: &litMatcher{
																								pos:        position{line: 3794, col: 16, offset: 128895},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3794, col: 22, offset: 128901},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3793, col: 12, offset: 128877},
																					expr: &anyMatcher{
																						line: 3793, col: 13, offset: 128878,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codesAndComments",
			pos:  position{line: 83, col: 1, offset: 2341},
			expr: &actionExpr{
				pos: position{line: 83, col: 21, offset: 2361},
				run: (*parser).calloncodesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 83, col: 21, offset: 2361},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 83, col: 27, offset: 2367},
						expr: &seqExpr{
							pos: position{line: 83, col: 28, offset: 2368},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 83, col: 28, offset: 2368},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 28, offset: 2368},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 83, col: 43, offset: 2383},
									expr: &oneOrMoreExpr{
										pos: position{line: 3808, col: 36, offset: 129325},
										expr: &seqExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 52, offset: 2392},
									name: "Codes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "globalCodeAndFunc",
			pos:  position{line: 97, col: 1, offset: 2738},
			expr: &actionExpr{
				pos: position{line: 97, col: 22, offset: 2759},
				run: (*parser).callonglobalCodeAndFunc1,
				expr: &seqExpr{
					pos: position{line: 97, col: 22, offset: 2759},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 97, col: 22, offset: 2759},
							label: "codesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 97, col: 40, offset: 2777},
								expr: &ruleRefExpr{
									pos:  position{line: 97, col: 40, offset: 2777},
									name: "codesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 97, col: 58, offset: 2795},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 67, offset: 2804},
							label: "commentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 97, col: 77, offset: 2814},
								expr: &ruleRefExpr{
									pos:  position{line: 97, col: 77, offset: 2814},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 97, col: 92, offset: 2829},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 101, offset: 2838},
							label: "funcI",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 107, offset: 2844},
								name: "Func",
							},
						},
					},
				},
			},
		},
		{
			name: "preScope",
			pos:  position{line: 115, col: 1, offset: 3298},
			expr: &actionExpr{
				pos: position{line: 115, col: 13, offset: 3310},
				run: (*parser).callonpreScope1,
				expr: &seqExpr{
					pos: position{line: 115, col: 13, offset: 3310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 115, col: 13, offset: 3310},
							label: "itmsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 115, col: 19, offset: 3316},
								expr: &seqExpr{
									pos: position{line: 115, col: 20, offset: 3317},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 115, col: 21, offset: 3318},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 115, col: 21, offset: 3318},
													name: "CorgiComment",
												},
												&ruleRefExpr{
													pos:  position{line: 115, col: 36, offset: 3333},
													name: "Code",
												},
												&ruleRefExpr{
													pos:  position{line: 115, col: 43, offset: 3340},
													name: "Mixin",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 115, col: 50, offset: 3347},
											expr: &oneOrMoreExpr{
												pos: position{line: 3808, col: 36, offset: 129325},
												expr: &seqExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3808, col: 37, offset: 129326},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															expr: &litMatcher{
																pos:        position{line: 3807, col: 36, offset: 129279},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3807, col: 42, offset: 129285},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 61, offset: 3358},
							label: "doctypeI",
							expr: &choiceExpr{
								pos: position{line: 930, col: 12, offset: 28380},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 930, col: 12, offset: 28380},
										run: (*parser).callonpreScope20,
										expr: &seqExpr{
											pos: position{line: 930, col: 12, offset: 28380},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 930, col: 12, offset: 28380},
													val:        "doctype",
													ignoreCase: false,
													want:       "\"doctype\"",
												},
												&choiceExpr{
													pos: position{line: 943, col: 18, offset: 28803},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 943, col: 18, offset: 28803},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 943, col: 18, offset: 28803},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3794, col: 12, offset: 128891},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					expr: &litMatcher{
																						pos:        position{line: 3794, col: 16, offset: 128895},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3794, col: 22, offset: 128901},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3793, col: 12, offset: 128877},
																			expr: &anyMatcher{
																				line: 3793, col: 13, offset: 128878,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 944, col: 5, offset: 28821},
															run: (*parser).callonpreScope35,
															expr: &seqExpr{
																pos: position{line: 944, col: 5, offset: 28821},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 944, col: 5, offset: 28821},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 944, col: 9, offset: 28825},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3797, col: 8, offset: 128940},
																			run: (*parser).callonpreScope39,
																			expr: &choiceExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3797, col: 9, offset: 128941},
																						expr: &anyMatcher{
																							line: 3797, col: 10, offset: 128942,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3797, col: 14, offset: 128946},
																						expr: &anyMatcher{
																							line: 3797, col: 15, offset: 128947,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 944, col: 23, offset: 28839},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 954, col: 9, offset: 29220},
															run: (*parser).callonpreScope56,
															expr: &seqExpr{
																pos: position{line: 954, col: 9, offset: 29220},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 9, offset: 29220},
																		expr: &litMatcher{
																			pos:        position{line: 954, col: 9, offset: 29220},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 14, offset: 29225},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 932, col: 5, offset: 28457},
										run: (*parser).callonpreScope71,
										expr: &seqExpr{
											pos: position{line: 932, col: 5, offset: 28457},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 932, col: 5, offset: 28457},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 943, col: 18, offset: 28803},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 943, col: 18, offset: 28803},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 943, col: 18, offset: 28803},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3794, col: 12, offset: 128891},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					expr: &litMatcher{
																						pos:        position{line: 3794, col: 16, offset: 128895},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3794, col: 22, offset: 128901},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3793, col: 12, offset: 128877},
																			expr: &anyMatcher{
																				line: 3793, col: 13, offset: 128878,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 944, col: 5, offset: 28821},
															run: (*parser).callonpreScope86,
															expr: &seqExpr{
																pos: position{line: 944, col: 5, offset: 28821},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 944, col: 5, offset: 28821},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 944, col: 9, offset: 28825},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3797, col: 8, offset: 128940},
																			run: (*parser).callonpreScope90,
																			expr: &choiceExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3797, col: 9, offset: 128941},
																						expr: &anyMatcher{
																							line: 3797, col: 10, offset: 128942,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3797, col: 14, offset: 128946},
																						expr: &anyMatcher{
																							line: 3797, col: 15, offset: 128947,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 944, col: 23, offset: 28839},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 954, col: 9, offset: 29220},
															run: (*parser).callonpreScope107,
															expr: &seqExpr{
																pos: position{line: 954, col: 9, offset: 29220},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 9, offset: 29220},
																		expr: &litMatcher{
																			pos:        position{line: 954, col: 9, offset: 29220},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 14, offset: 29225},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 154, col: 1, offset: 4625},
			expr: &actionExpr{
				pos: position{line: 154, col: 10, offset: 4634},
				run: (*parser).callonScope1,
				expr: &labeledExpr{
					pos:   position{line: 154, col: 10, offset: 4634},
					label: "itemsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 154, col: 17, offset: 4641},
						expr: &seqExpr{
							pos: position{line: 154, col: 18, offset: 4642},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 18, offset: 4642},
									expr: &oneOrMoreExpr{
										pos: position{line: 3808, col: 36, offset: 129325},
										expr: &seqExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3895, col: 17, offset: 133132},
									run: (*parser).callonScope13,
									expr: &zeroOrMoreExpr{
										pos: position{line: 3895, col: 17, offset: 133132},
										expr: &charClassMatcher{
											pos:        position{line: 3806, col: 36, offset: 129238},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 3895, col: 41, offset: 133156},
									run: (*parser).callonScope16,
								},
								&choiceExpr{
									pos: position{line: 3947, col: 5, offset: 135066},
									alternatives: []interface{}{
										&andCodeExpr{
											pos: position{line: 3947, col: 5, offset: 135066},
											run: (*parser).callonScope18,
										},
										&seqExpr{
											pos: position{line: 3949, col: 9, offset: 135149},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3949, col: 9, offset: 135149},
													run: (*parser).callonScope20,
												},
												&stateCodeExpr{
													pos: position{line: 3951, col: 7, offset: 135272},
													run: (*parser).callonScope21,
												},
											},
										},
										&seqExpr{
											pos: position{line: 3958, col: 9, offset: 135608},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3958, col: 9, offset: 135608},
													run: (*parser).callonScope23,
												},
												&andCodeExpr{
													pos: position{line: 3960, col: 7, offset: 135716},
													run: (*parser).callonScope24,
												},
												&choiceExpr{
													pos: position{line: 4013, col: 9, offset: 138051},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 4013, col: 9, offset: 138051},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 4013, col: 9, offset: 138051},
																	run: (*parser).callonScope27,
																},
																&andCodeExpr{
																	pos: position{line: 4017, col: 11, offset: 138301},
																	run: (*parser).callonScope28,
																},
																&stateCodeExpr{
																	pos: position{line: 4083, col: 11, offset: 141507},
																	run: (*parser).callonScope29,
																},
															},
														},
														&seqExpr{
															pos: position{line: 4091, col: 13, offset: 141860},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 4091, col: 13, offset: 141860},
																	run: (*parser).callonScope31,
																},
																&andCodeExpr{
																	pos: position{line: 4095, col: 11, offset: 142115},
																	run: (*parser).callonScope32,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 39, offset: 4663},
									name: "scopeItem",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "scopeItem",
			pos:  position{line: 168, col: 1, offset: 4969},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 4988},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 169, col: 5, offset: 4988},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 169, col: 13, offset: 4996},
						name: "Prepend",
					},
					&ruleRefExpr{
						pos:  position{line: 169, col: 23, offset: 5006},
						name: "Append",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 5, offset: 5035},
						name: "Code",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 5, offset: 5081},
						name: "If",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 10, offset: 5086},
						name: "IfBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 20, offset: 5096},
						name: "Switch",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 29, offset: 5105},
						name: "For",
					},
					&ruleRefExpr{
						pos:  position{line: 172, col: 5, offset: 5141},
						name: "CorgiComment",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 5188},
						name: "HTMLComment",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 19, offset: 5202},
						name: "And",
					},
					&actionExpr{
						pos: position{line: 2278, col: 14, offset: 77714},
						run: (*parser).callonscopeItem13,
						expr: &seqExpr{
							pos: position{line: 2278, col: 14, offset: 77714},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2278, col: 14, offset: 77714},
									val:        ":raw",
									ignoreCase: false,
									want:       "\":raw\"",
								},
								&labeledExpr{
									pos:   position{line: 2278, col: 21, offset: 77721},
									label: "typI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2278, col: 26, offset: 77726},
										expr: &seqExpr{
											pos: position{line: 2278, col: 27, offset: 77727},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2278, col: 27, offset: 77727},
													expr: &litMatcher{
														pos:        position{line: 2278, col: 27, offset: 77727},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&choiceExpr{
													pos: position{line: 2291, col: 18, offset: 78041},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2291, col: 18, offset: 78041},
															run: (*parser).callonscopeItem22,
															expr: &choiceExpr{
																pos: position{line: 2291, col: 19, offset: 78042},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2291, col: 19, offset: 78042},
																		val:        "html",
																		ignoreCase: false,
																		want:       "\"html\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2291, col: 28, offset: 78051},
																		val:        "svg",
																		ignoreCase: false,
																		want:       "\"svg\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2291, col: 36, offset: 78059},
																		val:        "js",
																		ignoreCase: false,
																		want:       "\"js\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2291, col: 43, offset: 78066},
																		val:        "css",
																		ignoreCase: false,
																		want:       "\"css\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2293, col: 5, offset: 78130},
															run: (*parser).callonscopeItem28,
															expr: &oneOrMoreExpr{
																pos: position{line: 2293, col: 5, offset: 78130},
																expr: &charClassMatcher{
																	pos:        position{line: 3795, col: 12, offset: 128924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2278, col: 52, offset: 77752},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2278, col: 58, offset: 77758},
										expr: &actionExpr{
											pos: position{line: 2354, col: 15, offset: 80174},
											run: (*parser).callonscopeItem42,
											expr: &seqExpr{
												pos: position{line: 2354, col: 15, offset: 80174},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4282, col: 11, offset: 149864},
														run: (*parser).callonscopeItem44,
													},
													&labeledExpr{
														pos:   position{line: 2354, col: 22, offset: 80181},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2354, col: 29, offset: 80188},
															expr: &seqExpr{
																pos: position{line: 2354, col: 30, offset: 80189},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2354, col: 30, offset: 80189},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3808, col: 36, offset: 129325},
																			expr: &seqExpr{
																				pos: position{line: 3808, col: 37, offset: 129326},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3808, col: 37, offset: 129326},
																						expr: &charClassMatcher{
																							pos:        position{line: 3806, col: 36, offset: 129238},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3807, col: 36, offset: 129279},
																						expr: &litMatcher{
																							pos:        position{line: 3807, col: 36, offset: 129279},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3807, col: 42, offset: 129285},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2358, col: 15, offset: 80303},
																		run: (*parser).callonscopeItem56,
																		expr: &seqExpr{
																			pos: position{line: 2358, col: 15, offset: 80303},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3895, col: 17, offset: 133132},
																					run: (*parser).callonscopeItem58,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3895, col: 17, offset: 133132},
																						expr: &charClassMatcher{
																							pos:        position{line: 3806, col: 36, offset: 129238},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3895, col: 41, offset: 133156},
																					run: (*parser).callonscopeItem61,
																				},
																				&choiceExpr{
																					pos: position{line: 3947, col: 5, offset: 135066},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3947, col: 5, offset: 135066},
																							run: (*parser).callonscopeItem63,
																						},
																						&seqExpr{
																							pos: position{line: 3949, col: 9, offset: 135149},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3949, col: 9, offset: 135149},
																									run: (*parser).callonscopeItem65,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3951, col: 7, offset: 135272},
																									run: (*parser).callonscopeItem66,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3958, col: 9, offset: 135608},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3958, col: 9, offset: 135608},
																									run: (*parser).callonscopeItem68,
																								},
																								&andCodeExpr{
																									pos: position{line: 3960, col: 7, offset: 135716},
																									run: (*parser).callonscopeItem69,
																								},
																								&choiceExpr{
																									pos: position{line: 4013, col: 9, offset: 138051},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 4013, col: 9, offset: 138051},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4013, col: 9, offset: 138051},
																													run: (*parser).callonscopeItem72,
																												},
																												&andCodeExpr{
																													pos: position{line: 4017, col: 11, offset: 138301},
																													run: (*parser).callonscopeItem73,
																												},
																												&stateCodeExpr{
																													pos: position{line: 4083, col: 11, offset: 141507},
																													run: (*parser).callonscopeItem74,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 4091, col: 13, offset: 141860},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4091, col: 13, offset: 141860},
																													run: (*parser).callonscopeItem76,
																												},
																												&andCodeExpr{
																													pos: position{line: 4095, col: 11, offset: 142115},
																													run: (*parser).callonscopeItem77,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2358, col: 27, offset: 80315},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callonscopeItem79,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2358, col: 36, offset: 80324},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2358, col: 42, offset: 80330},
																						expr: &charClassMatcher{
																							pos:        position{line: 3795, col: 12, offset: 128924},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3794, col: 12, offset: 128891},
																					expr: &charClassMatcher{
																						pos:        position{line: 3806, col: 36, offset: 129238},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									expr: &litMatcher{
																										pos:        position{line: 3794, col: 16, offset: 128895},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3794, col: 22, offset: 128901},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3793, col: 12, offset: 128877},
																							expr: &anyMatcher{
																								line: 3793, col: 13, offset: 128878,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4287, col: 11, offset: 149969},
														run: (*parser).callonscopeItem97,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2313, col: 18, offset: 78820},
						run: (*parser).callonscopeItem98,
						expr: &seqExpr{
							pos: position{line: 2313, col: 18, offset: 78820},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2313, col: 18, offset: 78820},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 2313, col: 22, offset: 78824},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 2313, col: 28, offset: 78830},
										expr: &charClassMatcher{
											pos:        position{line: 2313, col: 28, offset: 78830},
											val:        "[^ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2313, col: 40, offset: 78842},
									label: "argsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2313, col: 46, offset: 78848},
										expr: &seqExpr{
											pos: position{line: 2313, col: 47, offset: 78849},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2313, col: 47, offset: 78849},
													expr: &litMatcher{
														pos:        position{line: 2313, col: 47, offset: 78849},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&choiceExpr{
													pos: position{line: 2322, col: 21, offset: 79141},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2324, col: 27, offset: 79204},
															run: (*parser).callonscopeItem110,
															expr: &labeledExpr{
																pos:   position{line: 2324, col: 27, offset: 79204},
																label: "stringI",
																expr: &choiceExpr{
																	pos: position{line: 820, col: 11, offset: 24937},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 826, col: 14, offset: 25024},
																			run: (*parser).callonscopeItem113,
																			expr: &seqExpr{
																				pos: position{line: 826, col: 14, offset: 25024},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 826, col: 14, offset: 25024},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 826, col: 18, offset: 25028},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 826, col: 23, offset: 25033},
																							expr: &charClassMatcher{
																								pos:        position{line: 2745, col: 27, offset: 94634},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 826, col: 47, offset: 25057},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 828, col: 5, offset: 25149},
																			run: (*parser).callonscopeItem120,
																			expr: &seqExpr{
																				pos: position{line: 828, col: 5, offset: 25149},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 828, col: 5, offset: 25149},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 828, col: 9, offset: 25153},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 828, col: 14, offset: 25158},
																							expr: &charClassMatcher{
																								pos:        position{line: 2745, col: 27, offset: 94634},
																								val:        "[^\\n`]",
																								chars:      []rune{'\n', '`'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 828, col: 38, offset: 25182},
																						expr: &seqExpr{
																							pos: position{line: 3794, col: 12, offset: 128891},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3794, col: 12, offset: 128891},
																									expr: &charClassMatcher{
																										pos:        position{line: 3806, col: 36, offset: 129238},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3794, col: 16, offset: 128895},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3794, col: 16, offset: 128895},
																													expr: &litMatcher{
																														pos:        position{line: 3794, col: 16, offset: 128895},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3794, col: 22, offset: 128901},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3793, col: 12, offset: 128877},
																											expr: &anyMatcher{
																												line: 3793, col: 13, offset: 128878,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 847, col: 22, offset: 25586},
																			run: (*parser).callonscopeItem137,
																			expr: &seqExpr{
																				pos: position{line: 847, col: 22, offset: 25586},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 847, col: 22, offset: 25586},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 847, col: 26, offset: 25590},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 847, col: 31, offset: 25595},
																							expr: &choiceExpr{
																								pos: position{line: 847, col: 32, offset: 25596},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2484, col: 24, offset: 84297},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2484, col: 24, offset: 84297},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2401, col: 19, offset: 81486},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2401, col: 19, offset: 81486},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2401, col: 19, offset: 81486},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2485, col: 24, offset: 84364},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2485, col: 24, offset: 84364},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2486, col: 5, offset: 84401},
																										run: (*parser).callonscopeItem152,
																										expr: &seqExpr{
																											pos: position{line: 2486, col: 5, offset: 84401},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2486, col: 5, offset: 84401},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2486, col: 14, offset: 84410},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2486, col: 26, offset: 84422},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2503, col: 19, offset: 85039},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2503, col: 19, offset: 85039},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2504, col: 5, offset: 85098},
																										run: (*parser).callonscopeItem165,
																										expr: &seqExpr{
																											pos: position{line: 2504, col: 5, offset: 85098},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2504, col: 5, offset: 85098},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 14, offset: 85107},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 26, offset: 85119},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 38, offset: 85131},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 50, offset: 85143},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2533, col: 16, offset: 86279},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2533, col: 16, offset: 86279},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2534, col: 5, offset: 86382},
																										run: (*parser).callonscopeItem186,
																										expr: &seqExpr{
																											pos: position{line: 2534, col: 5, offset: 86382},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2534, col: 5, offset: 86382},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 14, offset: 86391},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 26, offset: 86403},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 38, offset: 86415},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 50, offset: 86427},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 62, offset: 86439},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 74, offset: 86451},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 86, offset: 86463},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 98, offset: 86475},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2761, col: 36, offset: 95412},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2761, col: 36, offset: 95412},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2761, col: 41, offset: 95417},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2759, col: 38, offset: 95304},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2648, col: 37, offset: 91062},
																										run: (*parser).callonscopeItem209,
																										expr: &seqExpr{
																											pos: position{line: 2648, col: 37, offset: 91062},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2648, col: 37, offset: 91062},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2672, col: 5, offset: 92079},
																										run: (*parser).callonscopeItem220,
																										expr: &seqExpr{
																											pos: position{line: 2672, col: 5, offset: 92079},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2672, col: 5, offset: 92079},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2693, col: 5, offset: 92921},
																										run: (*parser).callonscopeItem227,
																										expr: &seqExpr{
																											pos: position{line: 2693, col: 5, offset: 92921},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2693, col: 5, offset: 92921},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2711, col: 5, offset: 93607},
																										run: (*parser).callonscopeItem232,
																										expr: &seqExpr{
																											pos: position{line: 2711, col: 5, offset: 93607},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2711, col: 5, offset: 93607},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2711, col: 10, offset: 93612},
																													expr: &charClassMatcher{
																														pos:        position{line: 3795, col: 12, offset: 128924},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 847, col: 115, offset: 25679},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 849, col: 5, offset: 25771},
																			run: (*parser).callonscopeItem238,
																			expr: &seqExpr{
																				pos: position{line: 849, col: 5, offset: 25771},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 849, col: 5, offset: 25771},
																						val:        "\"",
																						ignoreCase: false,
																						want:       "\"\\\"\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 849, col: 9, offset: 25775},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 849, col: 14, offset: 25780},
																							expr: &choiceExpr{
																								pos: position{line: 849, col: 15, offset: 25781},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2484, col: 24, offset: 84297},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2484, col: 24, offset: 84297},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2401, col: 19, offset: 81486},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2401, col: 19, offset: 81486},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2401, col: 19, offset: 81486},
																												val:        "[0-7]",
																												ranges:     []rune{'0', '7'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2485, col: 24, offset: 84364},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2485, col: 24, offset: 84364},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2486, col: 5, offset: 84401},
																										run: (*parser).callonscopeItem253,
																										expr: &seqExpr{
																											pos: position{line: 2486, col: 5, offset: 84401},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2486, col: 5, offset: 84401},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2486, col: 14, offset: 84410},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2486, col: 26, offset: 84422},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2503, col: 19, offset: 85039},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2503, col: 19, offset: 85039},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2504, col: 5, offset: 85098},
																										run: (*parser).callonscopeItem266,
																										expr: &seqExpr{
																											pos: position{line: 2504, col: 5, offset: 85098},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2504, col: 5, offset: 85098},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 14, offset: 85107},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 26, offset: 85119},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 38, offset: 85131},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2504, col: 50, offset: 85143},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2533, col: 16, offset: 86279},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2533, col: 16, offset: 86279},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2534, col: 5, offset: 86382},
																										run: (*parser).callonscopeItem287,
																										expr: &seqExpr{
																											pos: position{line: 2534, col: 5, offset: 86382},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2534, col: 5, offset: 86382},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 14, offset: 86391},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 26, offset: 86403},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 38, offset: 86415},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 50, offset: 86427},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 62, offset: 86439},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 74, offset: 86451},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 86, offset: 86463},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2534, col: 98, offset: 86475},
																													expr: &charClassMatcher{
																														pos:        position{line: 2402, col: 19, offset: 81510},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&seqExpr{
																										pos: position{line: 2761, col: 36, offset: 95412},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2761, col: 36, offset: 95412},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2761, col: 41, offset: 95417},
																												val:        "[abfnrtv\\\\\"]",
																												chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 2759, col: 38, offset: 95304},
																										val:        "[^\"\\\\\\n]",
																										chars:      []rune{'"', '\\', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																									&actionExpr{
																										pos: position{line: 2648, col: 37, offset: 91062},
																										run: (*parser).callonscopeItem310,
																										expr: &seqExpr{
																											pos: position{line: 2648, col: 37, offset: 91062},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2648, col: 37, offset: 91062},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2672, col: 5, offset: 92079},
																										run: (*parser).callonscopeItem321,
																										expr: &seqExpr{
																											pos: position{line: 2672, col: 5, offset: 92079},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2672, col: 5, offset: 92079},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2693, col: 5, offset: 92921},
																										run: (*parser).callonscopeItem328,
																										expr: &seqExpr{
																											pos: position{line: 2693, col: 5, offset: 92921},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2693, col: 5, offset: 92921},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2711, col: 5, offset: 93607},
																										run: (*parser).callonscopeItem333,
																										expr: &seqExpr{
																											pos: position{line: 2711, col: 5, offset: 93607},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2711, col: 5, offset: 93607},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&zeroOrOneExpr{
																													pos: position{line: 2711, col: 10, offset: 93612},
																													expr: &charClassMatcher{
																														pos:        position{line: 3795, col: 12, offset: 128924},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 849, col: 98, offset: 25864},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3797, col: 8, offset: 128940},
																							run: (*parser).callonscopeItem339,
																							expr: &choiceExpr{
																								pos: position{line: 3797, col: 9, offset: 128941},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3797, col: 9, offset: 128941},
																										expr: &anyMatcher{
																											line: 3797, col: 10, offset: 128942,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3797, col: 14, offset: 128946},
																										expr: &anyMatcher{
																											line: 3797, col: 15, offset: 128947,
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 849, col: 110, offset: 25876},
																						expr: &seqExpr{
																							pos: position{line: 3794, col: 12, offset: 128891},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 3794, col: 12, offset: 128891},
																									expr: &charClassMatcher{
																										pos:        position{line: 3806, col: 36, offset: 129238},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 3794, col: 16, offset: 128895},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3794, col: 16, offset: 128895},
																													expr: &litMatcher{
																														pos:        position{line: 3794, col: 16, offset: 128895},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3794, col: 22, offset: 128901},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3793, col: 12, offset: 128877},
																											expr: &anyMatcher{
																												line: 3793, col: 13, offset: 128878,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 868, col: 22, offset: 26282},
																			run: (*parser).callonscopeItem356,
																			expr: &seqExpr{
																				pos: position{line: 868, col: 22, offset: 26282},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 868, col: 22, offset: 26282},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 868, col: 27, offset: 26287},
																						label: "strI",
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 868, col: 32, offset: 26292},
																							expr: &charClassMatcher{
																								pos:        position{line: 868, col: 32, offset: 26292},
																								val:        "[^\\\\r\\n]",
																								chars:      []rune{'\'', '\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 868, col: 42, offset: 26302},
																						val:        "'",
																						ignoreCase: false,
																						want:       "\"'\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 868, col: 47, offset: 26307},
																						label: "endPosI",
																						expr: &actionExpr{
																							pos: position{line: 3797, col: 8, offset: 128940},
																							run: (*parser).callonscopeItem364,
																							expr: &choiceExpr{
																								pos: position{line: 3797, col: 9, offset: 128941},
																								alternatives: []interface{}{
																									&andExpr{
																										pos: position{line: 3797, col: 9, offset: 128941},
																										expr: &anyMatcher{
																											line: 3797, col: 10, offset: 128942,
																										},
																									},
																									&notExpr{
																										pos: position{line: 3797, col: 14, offset: 128946},
																										expr: &anyMatcher{
																											line: 3797, col: 15, offset: 128947,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2328, col: 15, offset: 79305},
															run: (*parser).callonscopeItem370,
															expr: &labeledExpr{
																pos:   position{line: 2328, col: 15, offset: 79305},
																label: "argI",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2328, col: 20, offset: 79310},
																	expr: &charClassMatcher{
																		pos:        position{line: 2328, col: 20, offset: 79310},
																		val:        "[^ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2313, col: 75, offset: 78877},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2313, col: 81, offset: 78883},
										expr: &actionExpr{
											pos: position{line: 2354, col: 15, offset: 80174},
											run: (*parser).callonscopeItem385,
											expr: &seqExpr{
												pos: position{line: 2354, col: 15, offset: 80174},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4282, col: 11, offset: 149864},
														run: (*parser).callonscopeItem387,
													},
													&labeledExpr{
														pos:   position{line: 2354, col: 22, offset: 80181},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2354, col: 29, offset: 80188},
															expr: &seqExpr{
																pos: position{line: 2354, col: 30, offset: 80189},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2354, col: 30, offset: 80189},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3808, col: 36, offset: 129325},
																			expr: &seqExpr{
																				pos: position{line: 3808, col: 37, offset: 129326},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3808, col: 37, offset: 129326},
																						expr: &charClassMatcher{
																							pos:        position{line: 3806, col: 36, offset: 129238},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3807, col: 36, offset: 129279},
																						expr: &litMatcher{
																							pos:        position{line: 3807, col: 36, offset: 129279},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3807, col: 42, offset: 129285},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2358, col: 15, offset: 80303},
																		run: (*parser).callonscopeItem399,
																		expr: &seqExpr{
																			pos: position{line: 2358, col: 15, offset: 80303},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3895, col: 17, offset: 133132},
																					run: (*parser).callonscopeItem401,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3895, col: 17, offset: 133132},
																						expr: &charClassMatcher{
																							pos:        position{line: 3806, col: 36, offset: 129238},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3895, col: 41, offset: 133156},
																					run: (*parser).callonscopeItem404,
																				},
																				&choiceExpr{
																					pos: position{line: 3947, col: 5, offset: 135066},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3947, col: 5, offset: 135066},
																							run: (*parser).callonscopeItem406,
																						},
																						&seqExpr{
																							pos: position{line: 3949, col: 9, offset: 135149},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3949, col: 9, offset: 135149},
																									run: (*parser).callonscopeItem408,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3951, col: 7, offset: 135272},
																									run: (*parser).callonscopeItem409,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3958, col: 9, offset: 135608},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3958, col: 9, offset: 135608},
																									run: (*parser).callonscopeItem411,
																								},
																								&andCodeExpr{
																									pos: position{line: 3960, col: 7, offset: 135716},
																									run: (*parser).callonscopeItem412,
																								},
																								&choiceExpr{
																									pos: position{line: 4013, col: 9, offset: 138051},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 4013, col: 9, offset: 138051},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4013, col: 9, offset: 138051},
																													run: (*parser).callonscopeItem415,
																												},
																												&andCodeExpr{
																													pos: position{line: 4017, col: 11, offset: 138301},
																													run: (*parser).callonscopeItem416,
																												},
																												&stateCodeExpr{
																													pos: position{line: 4083, col: 11, offset: 141507},
																													run: (*parser).callonscopeItem417,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 4091, col: 13, offset: 141860},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4091, col: 13, offset: 141860},
																													run: (*parser).callonscopeItem419,
																												},
																												&andCodeExpr{
																													pos: position{line: 4095, col: 11, offset: 142115},
																													run: (*parser).callonscopeItem420,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2358, col: 27, offset: 80315},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callonscopeItem422,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2358, col: 36, offset: 80324},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2358, col: 42, offset: 80330},
																						expr: &charClassMatcher{
																							pos:        position{line: 3795, col: 12, offset: 128924},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3794, col: 12, offset: 128891},
																					expr: &charClassMatcher{
																						pos:        position{line: 3806, col: 36, offset: 129238},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									expr: &litMatcher{
																										pos:        position{line: 3794, col: 16, offset: 128895},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3794, col: 22, offset: 128901},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3793, col: 12, offset: 128877},
																							expr: &anyMatcher{
																								line: 3793, col: 13, offset: 128878,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4287, col: 11, offset: 149969},
														run: (*parser).callonscopeItem440,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2336, col: 14, offset: 79605},
						run: (*parser).callonscopeItem441,
						expr: &seqExpr{
							pos: position{line: 2336, col: 14, offset: 79605},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2336, col: 14, offset: 79605},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2336, col: 22, offset: 79613},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2336, col: 28, offset: 79619},
										expr: &actionExpr{
											pos: position{line: 2354, col: 15, offset: 80174},
											run: (*parser).callonscopeItem455,
											expr: &seqExpr{
												pos: position{line: 2354, col: 15, offset: 80174},
												exprs: []interface{}{
													&stateCodeExpr{
														pos: position{line: 4282, col: 11, offset: 149864},
														run: (*parser).callonscopeItem457,
													},
													&labeledExpr{
														pos:   position{line: 2354, col: 22, offset: 80181},
														label: "linesI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2354, col: 29, offset: 80188},
															expr: &seqExpr{
																pos: position{line: 2354, col: 30, offset: 80189},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 2354, col: 30, offset: 80189},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3808, col: 36, offset: 129325},
																			expr: &seqExpr{
																				pos: position{line: 3808, col: 37, offset: 129326},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 3808, col: 37, offset: 129326},
																						expr: &charClassMatcher{
																							pos:        position{line: 3806, col: 36, offset: 129238},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 3807, col: 36, offset: 129279},
																						expr: &litMatcher{
																							pos:        position{line: 3807, col: 36, offset: 129279},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3807, col: 42, offset: 129285},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2358, col: 15, offset: 80303},
																		run: (*parser).callonscopeItem469,
																		expr: &seqExpr{
																			pos: position{line: 2358, col: 15, offset: 80303},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3895, col: 17, offset: 133132},
																					run: (*parser).callonscopeItem471,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 3895, col: 17, offset: 133132},
																						expr: &charClassMatcher{
																							pos:        position{line: 3806, col: 36, offset: 129238},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 3895, col: 41, offset: 133156},
																					run: (*parser).callonscopeItem474,
																				},
																				&choiceExpr{
																					pos: position{line: 3947, col: 5, offset: 135066},
																					alternatives: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 3947, col: 5, offset: 135066},
																							run: (*parser).callonscopeItem476,
																						},
																						&seqExpr{
																							pos: position{line: 3949, col: 9, offset: 135149},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3949, col: 9, offset: 135149},
																									run: (*parser).callonscopeItem478,
																								},
																								&stateCodeExpr{
																									pos: position{line: 3951, col: 7, offset: 135272},
																									run: (*parser).callonscopeItem479,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 3958, col: 9, offset: 135608},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 3958, col: 9, offset: 135608},
																									run: (*parser).callonscopeItem481,
																								},
																								&andCodeExpr{
																									pos: position{line: 3960, col: 7, offset: 135716},
																									run: (*parser).callonscopeItem482,
																								},
																								&choiceExpr{
																									pos: position{line: 4013, col: 9, offset: 138051},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 4013, col: 9, offset: 138051},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4013, col: 9, offset: 138051},
																													run: (*parser).callonscopeItem485,
																												},
																												&andCodeExpr{
																													pos: position{line: 4017, col: 11, offset: 138301},
																													run: (*parser).callonscopeItem486,
																												},
																												&stateCodeExpr{
																													pos: position{line: 4083, col: 11, offset: 141507},
																													run: (*parser).callonscopeItem487,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 4091, col: 13, offset: 141860},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 4091, col: 13, offset: 141860},
																													run: (*parser).callonscopeItem489,
																												},
																												&andCodeExpr{
																													pos: position{line: 4095, col: 11, offset: 142115},
																													run: (*parser).callonscopeItem490,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2358, col: 27, offset: 80315},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callonscopeItem492,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2358, col: 36, offset: 80324},
																					label: "lineI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2358, col: 42, offset: 80330},
																						expr: &charClassMatcher{
																							pos:        position{line: 3795, col: 12, offset: 128924},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3794, col: 12, offset: 128891},
																					expr: &charClassMatcher{
																						pos:        position{line: 3806, col: 36, offset: 129238},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 3794, col: 16, offset: 128895},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 3794, col: 16, offset: 128895},
																									expr: &litMatcher{
																										pos:        position{line: 3794, col: 16, offset: 128895},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 3794, col: 22, offset: 128901},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3793, col: 12, offset: 128877},
																							expr: &anyMatcher{
																								line: 3793, col: 13, offset: 128878,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&stateCodeExpr{
														pos: position{line: 4287, col: 11, offset: 149969},
														run: (*parser).callonscopeItem510,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2886, col: 12, offset: 99612},
						run: (*parser).callonscopeItem511,
						expr: &seqExpr{
							pos: position{line: 2886, col: 12, offset: 99612},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 99612},
									val:        "include",
									ignoreCase: false,
									want:       "\"include\"",
								},
								&labeledExpr{
									pos:   position{line: 2886, col: 22, offset: 99622},
									label: "pathI",
									expr: &choiceExpr{
										pos: position{line: 3221, col: 18, offset: 110591},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3221, col: 18, offset: 110591},
												run: (*parser).callonscopeItem516,
												expr: &seqExpr{
													pos: position{line: 3221, col: 18, offset: 110591},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 3221, col: 18, offset: 110591},
															expr: &litMatcher{
																pos:        position{line: 3221, col: 18, offset: 110591},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3221, col: 23, offset: 110596},
															label: "sI",
															expr: &choiceExpr{
																pos: position{line: 820, col: 11, offset: 24937},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 826, col: 14, offset: 25024},
																		run: (*parser).callonscopeItem522,
																		expr: &seqExpr{
																			pos: position{line: 826, col: 14, offset: 25024},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 826, col: 14, offset: 25024},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 826, col: 18, offset: 25028},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 826, col: 23, offset: 25033},
																						expr: &charClassMatcher{
																							pos:        position{line: 2745, col: 27, offset: 94634},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 826, col: 47, offset: 25057},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 828, col: 5, offset: 25149},
																		run: (*parser).callonscopeItem529,
																		expr: &seqExpr{
																			pos: position{line: 828, col: 5, offset: 25149},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 828, col: 5, offset: 25149},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 828, col: 9, offset: 25153},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 828, col: 14, offset: 25158},
																						expr: &charClassMatcher{
																							pos:        position{line: 2745, col: 27, offset: 94634},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 828, col: 38, offset: 25182},
																					expr: &seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 847, col: 22, offset: 25586},
																		run: (*parser).callonscopeItem546,
																		expr: &seqExpr{
																			pos: position{line: 847, col: 22, offset: 25586},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 847, col: 22, offset: 25586},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 847, col: 26, offset: 25590},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 847, col: 31, offset: 25595},
																						expr: &choiceExpr{
																							pos: position{line: 847, col: 32, offset: 25596},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2484, col: 24, offset: 84297},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2484, col: 24, offset: 84297},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2485, col: 24, offset: 84364},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2485, col: 24, offset: 84364},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2486, col: 5, offset: 84401},
																									run: (*parser).callonscopeItem561,
																									expr: &seqExpr{
																										pos: position{line: 2486, col: 5, offset: 84401},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2486, col: 5, offset: 84401},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 14, offset: 84410},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 26, offset: 84422},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2503, col: 19, offset: 85039},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2503, col: 19, offset: 85039},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2504, col: 5, offset: 85098},
																									run: (*parser).callonscopeItem574,
																									expr: &seqExpr{
																										pos: position{line: 2504, col: 5, offset: 85098},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2504, col: 5, offset: 85098},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 14, offset: 85107},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 26, offset: 85119},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 38, offset: 85131},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 50, offset: 85143},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2533, col: 16, offset: 86279},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2533, col: 16, offset: 86279},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2534, col: 5, offset: 86382},
																									run: (*parser).callonscopeItem595,
																									expr: &seqExpr{
																										pos: position{line: 2534, col: 5, offset: 86382},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2534, col: 5, offset: 86382},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 14, offset: 86391},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 26, offset: 86403},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 38, offset: 86415},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 50, offset: 86427},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 62, offset: 86439},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 74, offset: 86451},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 86, offset: 86463},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 98, offset: 86475},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2761, col: 36, offset: 95412},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2761, col: 36, offset: 95412},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2761, col: 41, offset: 95417},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2759, col: 38, offset: 95304},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2648, col: 37, offset: 91062},
																									run: (*parser).callonscopeItem618,
																									expr: &seqExpr{
																										pos: position{line: 2648, col: 37, offset: 91062},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2648, col: 37, offset: 91062},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2672, col: 5, offset: 92079},
																									run: (*parser).callonscopeItem629,
																									expr: &seqExpr{
																										pos: position{line: 2672, col: 5, offset: 92079},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2672, col: 5, offset: 92079},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2693, col: 5, offset: 92921},
																									run: (*parser).callonscopeItem636,
																									expr: &seqExpr{
																										pos: position{line: 2693, col: 5, offset: 92921},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2693, col: 5, offset: 92921},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2711, col: 5, offset: 93607},
																									run: (*parser).callonscopeItem641,
																									expr: &seqExpr{
																										pos: position{line: 2711, col: 5, offset: 93607},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2711, col: 5, offset: 93607},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2711, col: 10, offset: 93612},
																												expr: &charClassMatcher{
																													pos:        position{line: 3795, col: 12, offset: 128924},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 847, col: 115, offset: 25679},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 849, col: 5, offset: 25771},
																		run: (*parser).callonscopeItem647,
																		expr: &seqExpr{
																			pos: position{line: 849, col: 5, offset: 25771},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 849, col: 5, offset: 25771},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 849, col: 9, offset: 25775},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 849, col: 14, offset: 25780},
																						expr: &choiceExpr{
																							pos: position{line: 849, col: 15, offset: 25781},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2484, col: 24, offset: 84297},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2484, col: 24, offset: 84297},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2485, col: 24, offset: 84364},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2485, col: 24, offset: 84364},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2486, col: 5, offset: 84401},
																									run: (*parser).callonscopeItem662,
																									expr: &seqExpr{
																										pos: position{line: 2486, col: 5, offset: 84401},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2486, col: 5, offset: 84401},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 14, offset: 84410},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 26, offset: 84422},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2503, col: 19, offset: 85039},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2503, col: 19, offset: 85039},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2504, col: 5, offset: 85098},
																									run: (*parser).callonscopeItem675,
																									expr: &seqExpr{
																										pos: position{line: 2504, col: 5, offset: 85098},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2504, col: 5, offset: 85098},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 14, offset: 85107},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 26, offset: 85119},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 38, offset: 85131},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 50, offset: 85143},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2533, col: 16, offset: 86279},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2533, col: 16, offset: 86279},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2534, col: 5, offset: 86382},
																									run: (*parser).callonscopeItem696,
																									expr: &seqExpr{
																										pos: position{line: 2534, col: 5, offset: 86382},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2534, col: 5, offset: 86382},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 14, offset: 86391},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 26, offset: 86403},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 38, offset: 86415},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 50, offset: 86427},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 62, offset: 86439},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 74, offset: 86451},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 86, offset: 86463},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 98, offset: 86475},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2761, col: 36, offset: 95412},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2761, col: 36, offset: 95412},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2761, col: 41, offset: 95417},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2759, col: 38, offset: 95304},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2648, col: 37, offset: 91062},
																									run: (*parser).callonscopeItem719,
																									expr: &seqExpr{
																										pos: position{line: 2648, col: 37, offset: 91062},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2648, col: 37, offset: 91062},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2672, col: 5, offset: 92079},
																									run: (*parser).callonscopeItem730,
																									expr: &seqExpr{
																										pos: position{line: 2672, col: 5, offset: 92079},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2672, col: 5, offset: 92079},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2693, col: 5, offset: 92921},
																									run: (*parser).callonscopeItem737,
																									expr: &seqExpr{
																										pos: position{line: 2693, col: 5, offset: 92921},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2693, col: 5, offset: 92921},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2711, col: 5, offset: 93607},
																									run: (*parser).callonscopeItem742,
																									expr: &seqExpr{
																										pos: position{line: 2711, col: 5, offset: 93607},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2711, col: 5, offset: 93607},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2711, col: 10, offset: 93612},
																												expr: &charClassMatcher{
																													pos:        position{line: 3795, col: 12, offset: 128924},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 849, col: 98, offset: 25864},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callonscopeItem748,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 849, col: 110, offset: 25876},
																					expr: &seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 868, col: 22, offset: 26282},
																		run: (*parser).callonscopeItem765,
																		expr: &seqExpr{
																			pos: position{line: 868, col: 22, offset: 26282},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 868, col: 22, offset: 26282},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 868, col: 27, offset: 26287},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 868, col: 32, offset: 26292},
																						expr: &charClassMatcher{
																							pos:        position{line: 868, col: 32, offset: 26292},
																							val:        "[^\\\\r\\n]",
																							chars:      []rune{'\'', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 868, col: 42, offset: 26302},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 868, col: 47, offset: 26307},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callonscopeItem773,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3223, col: 5, offset: 110631},
												run: (*parser).callonscopeItem779,
												expr: &seqExpr{
													pos: position{line: 3223, col: 5, offset: 110631},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3223, col: 5, offset: 110631},
															expr: &litMatcher{
																pos:        position{line: 3223, col: 5, offset: 110631},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3223, col: 10, offset: 110636},
															label: "pathI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3223, col: 16, offset: 110642},
																expr: &charClassMatcher{
																	pos:        position{line: 3795, col: 12, offset: 128924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 5364},
						name: "Mixin",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 13, offset: 5372},
						name: "Return",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 22, offset: 5381},
						name: "MixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5413},
						name: "ArrowBlock",
					},
					&actionExpr{
						pos: position{line: 184, col: 17, offset: 5561},
						run: (*parser).callonscopeItem790,
						expr: &labeledExpr{
							pos:   position{line: 184, col: 17, offset: 5561},
							label: "doctypeI",
							expr: &choiceExpr{
								pos: position{line: 930, col: 12, offset: 28380},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 930, col: 12, offset: 28380},
										run: (*parser).callonscopeItem793,
										expr: &seqExpr{
											pos: position{line: 930, col: 12, offset: 28380},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 930, col: 12, offset: 28380},
													val:        "doctype",
													ignoreCase: false,
													want:       "\"doctype\"",
												},
												&choiceExpr{
													pos: position{line: 943, col: 18, offset: 28803},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 943, col: 18, offset: 28803},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 943, col: 18, offset: 28803},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3794, col: 12, offset: 128891},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					expr: &litMatcher{
																						pos:        position{line: 3794, col: 16, offset: 128895},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3794, col: 22, offset: 128901},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3793, col: 12, offset: 128877},
																			expr: &anyMatcher{
																				line: 3793, col: 13, offset: 128878,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 944, col: 5, offset: 28821},
															run: (*parser).callonscopeItem808,
															expr: &seqExpr{
																pos: position{line: 944, col: 5, offset: 28821},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 944, col: 5, offset: 28821},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 944, col: 9, offset: 28825},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3797, col: 8, offset: 128940},
																			run: (*parser).callonscopeItem812,
																			expr: &choiceExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3797, col: 9, offset: 128941},
																						expr: &anyMatcher{
																							line: 3797, col: 10, offset: 128942,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3797, col: 14, offset: 128946},
																						expr: &anyMatcher{
																							line: 3797, col: 15, offset: 128947,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 944, col: 23, offset: 28839},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 954, col: 9, offset: 29220},
															run: (*parser).callonscopeItem829,
															expr: &seqExpr{
																pos: position{line: 954, col: 9, offset: 29220},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 9, offset: 29220},
																		expr: &litMatcher{
																			pos:        position{line: 954, col: 9, offset: 29220},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 14, offset: 29225},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 932, col: 5, offset: 28457},
										run: (*parser).callonscopeItem844,
										expr: &seqExpr{
											pos: position{line: 932, col: 5, offset: 28457},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 932, col: 5, offset: 28457},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 943, col: 18, offset: 28803},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 943, col: 18, offset: 28803},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 943, col: 18, offset: 28803},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3794, col: 12, offset: 128891},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					expr: &litMatcher{
																						pos:        position{line: 3794, col: 16, offset: 128895},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3794, col: 22, offset: 128901},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3793, col: 12, offset: 128877},
																			expr: &anyMatcher{
																				line: 3793, col: 13, offset: 128878,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 944, col: 5, offset: 28821},
															run: (*parser).callonscopeItem859,
															expr: &seqExpr{
																pos: position{line: 944, col: 5, offset: 28821},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 944, col: 5, offset: 28821},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 944, col: 9, offset: 28825},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3797, col: 8, offset: 128940},
																			run: (*parser).callonscopeItem863,
																			expr: &choiceExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3797, col: 9, offset: 128941},
																						expr: &anyMatcher{
																							line: 3797, col: 10, offset: 128942,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3797, col: 14, offset: 128946},
																						expr: &anyMatcher{
																							line: 3797, col: 15, offset: 128947,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 944, col: 23, offset: 28839},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 954, col: 9, offset: 29220},
															run: (*parser).callonscopeItem880,
															expr: &seqExpr{
																pos: position{line: 954, col: 9, offset: 29220},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 9, offset: 29220},
																		expr: &litMatcher{
																			pos:        position{line: 954, col: 9, offset: 29220},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 954, col: 14, offset: 29225},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 5, offset: 5479},
						name: "DivShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 20, offset: 5494},
						name: "Element",
					},
					&ruleRefExpr{
						pos:  position{line: 181, col: 5, offset: 5534},
						name: "BadItem",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 206, col: 1, offset: 6389},
			expr: &actionExpr{
				pos: position{line: 206, col: 9, offset: 6397},
				run: (*parser).callonBody1,
				expr: &seqExpr{
					pos: position{line: 206, col: 9, offset: 6397},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4282, col: 11, offset: 149864},
							run: (*parser).callonBody3,
						},
						&labeledExpr{
							pos:   position{line: 206, col: 16, offset: 6404},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 23, offset: 6411},
								name: "Scope",
							},
						},
						&stateCodeExpr{
							pos: position{line: 4287, col: 11, offset: 149969},
							run: (*parser).callonBody6,
						},
					},
				},
			},
		},
		{
			name: "Beaitb",
			pos:  position{line: 210, col: 1, offset: 6452},
			expr: &choiceExpr{
				pos: position{line: 210, col: 11, offset: 6462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 210, col: 11, offset: 6462},
						run: (*parser).callonBeaitb2,
						expr: &labeledExpr{
							pos:   position{line: 210, col: 11, offset: 6462},
							label: "scopeItemI",
							expr: &choiceExpr{
								pos: position{line: 210, col: 23, offset: 6474},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 210, col: 23, offset: 6474},
										name: "BlockExpansion",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 40, offset: 6491},
										name: "InlineText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 212, col: 5, offset: 6569},
						run: (*parser).callonBeaitb7,
						expr: &seqExpr{
							pos: position{line: 212, col: 5, offset: 6569},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 212, col: 9, offset: 6573},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 15, offset: 6579},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 6612},
						run: (*parser).callonBeaitb20,
						expr: &seqExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6654},
						run: (*parser).callonBeaitb31,
						expr: &seqExpr{
							pos: position{line: 216, col: 5, offset: 6654},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 216, col: 5, offset: 6654},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 216, col: 11, offset: 6660},
										expr: &charClassMatcher{
											pos:        position{line: 3795, col: 12, offset: 128924},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 216, col: 24, offset: 6673},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 216, col: 30, offset: 6679},
										expr: &ruleRefExpr{
											pos:  position{line: 216, col: 30, offset: 6679},
											name: "Body",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Beait",
			pos:  position{line: 231, col: 1, offset: 7099},
			expr: &choiceExpr{
				pos: position{line: 231, col: 10, offset: 7108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 231, col: 10, offset: 7108},
						run: (*parser).callonBeait2,
						expr: &labeledExpr{
							pos:   position{line: 231, col: 10, offset: 7108},
							label: "scopeItemI",
							expr: &choiceExpr{
								pos: position{line: 231, col: 22, offset: 7120},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 231, col: 22, offset: 7120},
										name: "BlockExpansion",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 39, offset: 7137},
										name: "InlineText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 7211},
						run: (*parser).callonBeait7,
						expr: &seqExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 235, col: 5, offset: 7253},
						run: (*parser).callonBeait18,
						expr: &seqExpr{
							pos: position{line: 235, col: 5, offset: 7253},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 235, col: 5, offset: 7253},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 235, col: 11, offset: 7259},
										expr: &charClassMatcher{
											pos:        position{line: 3795, col: 12, offset: 128924},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BadItem",
			pos:  position{line: 248, col: 1, offset: 7630},
			expr: &actionExpr{
				pos: position{line: 248, col: 12, offset: 7641},
				run: (*parser).callonBadItem1,
				expr: &seqExpr{
					pos: position{line: 248, col: 12, offset: 7641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 248, col: 12, offset: 7641},
							label: "lineI",
							expr: &oneOrMoreExpr{
								pos: position{line: 248, col: 18, offset: 7647},
								expr: &charClassMatcher{
									pos:        position{line: 3795, col: 12, offset: 128924},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							expr: &charClassMatcher{
								pos:        position{line: 3806, col: 36, offset: 129238},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3794, col: 16, offset: 128895},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											expr: &litMatcher{
												pos:        position{line: 3794, col: 16, offset: 128895},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3794, col: 22, offset: 128901},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3793, col: 12, offset: 128877},
									expr: &anyMatcher{
										line: 3793, col: 13, offset: 128878,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 31, offset: 7660},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 37, offset: 7666},
								expr: &ruleRefExpr{
									pos:  position{line: 248, col: 37, offset: 7666},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 283, col: 1, offset: 9059},
			expr: &actionExpr{
				pos: position{line: 283, col: 10, offset: 9068},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 283, col: 10, offset: 9068},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 10, offset: 9068},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 304, col: 19, offset: 9660},
								run: (*parser).callonBlock4,
								expr: &seqExpr{
									pos: position{line: 304, col: 19, offset: 9660},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 304, col: 19, offset: 9660},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 304, col: 27, offset: 9668},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 329, col: 14, offset: 10241},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 329, col: 14, offset: 10241},
														run: (*parser).callonBlock9,
														expr: &seqExpr{
															pos: position{line: 329, col: 14, offset: 10241},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 329, col: 14, offset: 10241},
																	expr: &litMatcher{
																		pos:        position{line: 329, col: 14, offset: 10241},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 329, col: 19, offset: 10246},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 771, col: 14, offset: 23392},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 771, col: 14, offset: 23392},
																				run: (*parser).callonBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 771, col: 14, offset: 23392},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 757, col: 10, offset: 22837},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 757, col: 10, offset: 22837},
																								run: (*parser).callonBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 757, col: 10, offset: 22837},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2408, col: 17, offset: 81561},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2391, col: 20, offset: 81316},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2408, col: 26, offset: 81570},
																												expr: &charClassMatcher{
																													pos:        position{line: 2391, col: 20, offset: 81316},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 759, col: 5, offset: 22931},
																								run: (*parser).callonBlock24,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 5, offset: 22931},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 759, col: 5, offset: 22931},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 759, col: 13, offset: 22939},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 759, col: 13, offset: 22939},
																														expr: &litMatcher{
																															pos:        position{line: 759, col: 13, offset: 22939},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 759, col: 18, offset: 22944},
																														expr: &choiceExpr{
																															pos: position{line: 759, col: 19, offset: 22945},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 759, col: 19, offset: 22945},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 19, offset: 22945},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 28, offset: 22954},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 759, col: 38, offset: 22964},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 759, col: 49, offset: 22975},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3797, col: 8, offset: 128940},
																												run: (*parser).callonBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3797, col: 9, offset: 128941},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															expr: &anyMatcher{
																																line: 3797, col: 10, offset: 128942,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3797, col: 14, offset: 128946},
																															expr: &anyMatcher{
																																line: 3797, col: 15, offset: 128947,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 773, col: 5, offset: 23434},
																				run: (*parser).callonBlock43,
																				expr: &seqExpr{
																					pos: position{line: 773, col: 5, offset: 23434},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 773, col: 5, offset: 23434},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 773, col: 14, offset: 23443},
																							expr: &choiceExpr{
																								pos: position{line: 773, col: 16, offset: 23445},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 12, offset: 128891},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3794, col: 12, offset: 128891},
																												expr: &charClassMatcher{
																													pos:        position{line: 3806, col: 36, offset: 129238},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3794, col: 16, offset: 128895},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																expr: &litMatcher{
																																	pos:        position{line: 3794, col: 16, offset: 128895},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3794, col: 22, offset: 128901},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3793, col: 12, offset: 128877},
																														expr: &anyMatcher{
																															line: 3793, col: 13, offset: 128878,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 773, col: 22, offset: 23451},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 784, col: 5, offset: 23783},
																				run: (*parser).callonBlock65,
																				expr: &seqExpr{
																					pos: position{line: 784, col: 5, offset: 23783},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 784, col: 5, offset: 23783},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 784, col: 12, offset: 23790},
																								expr: &charClassMatcher{
																									pos:        position{line: 784, col: 12, offset: 23790},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 784, col: 29, offset: 23807},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 331, col: 5, offset: 10292},
														run: (*parser).callonBlock77,
														expr: &andExpr{
															pos: position{line: 331, col: 5, offset: 10292},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 32, offset: 9090},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 38, offset: 9096},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineBlock",
			pos:  position{line: 288, col: 1, offset: 9198},
			expr: &actionExpr{
				pos: position{line: 288, col: 16, offset: 9213},
				run: (*parser).callonInlineBlock1,
				expr: &seqExpr{
					pos: position{line: 288, col: 16, offset: 9213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 16, offset: 9213},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 304, col: 19, offset: 9660},
								run: (*parser).callonInlineBlock4,
								expr: &seqExpr{
									pos: position{line: 304, col: 19, offset: 9660},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 304, col: 19, offset: 9660},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 304, col: 27, offset: 9668},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 329, col: 14, offset: 10241},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 329, col: 14, offset: 10241},
														run: (*parser).callonInlineBlock9,
														expr: &seqExpr{
															pos: position{line: 329, col: 14, offset: 10241},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 329, col: 14, offset: 10241},
																	expr: &litMatcher{
																		pos:        position{line: 329, col: 14, offset: 10241},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 329, col: 19, offset: 10246},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 771, col: 14, offset: 23392},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 771, col: 14, offset: 23392},
																				run: (*parser).callonInlineBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 771, col: 14, offset: 23392},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 757, col: 10, offset: 22837},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 757, col: 10, offset: 22837},
																								run: (*parser).callonInlineBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 757, col: 10, offset: 22837},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2408, col: 17, offset: 81561},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2391, col: 20, offset: 81316},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2408, col: 26, offset: 81570},
																												expr: &charClassMatcher{
																													pos:        position{line: 2391, col: 20, offset: 81316},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 759, col: 5, offset: 22931},
																								run: (*parser).callonInlineBlock24,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 5, offset: 22931},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 759, col: 5, offset: 22931},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 759, col: 13, offset: 22939},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 759, col: 13, offset: 22939},
																														expr: &litMatcher{
																															pos:        position{line: 759, col: 13, offset: 22939},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 759, col: 18, offset: 22944},
																														expr: &choiceExpr{
																															pos: position{line: 759, col: 19, offset: 22945},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 759, col: 19, offset: 22945},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 19, offset: 22945},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 28, offset: 22954},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 759, col: 38, offset: 22964},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 759, col: 49, offset: 22975},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3797, col: 8, offset: 128940},
																												run: (*parser).callonInlineBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3797, col: 9, offset: 128941},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															expr: &anyMatcher{
																																line: 3797, col: 10, offset: 128942,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3797, col: 14, offset: 128946},
																															expr: &anyMatcher{
																																line: 3797, col: 15, offset: 128947,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 773, col: 5, offset: 23434},
																				run: (*parser).callonInlineBlock43,
																				expr: &seqExpr{
																					pos: position{line: 773, col: 5, offset: 23434},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 773, col: 5, offset: 23434},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonInlineBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 773, col: 14, offset: 23443},
																							expr: &choiceExpr{
																								pos: position{line: 773, col: 16, offset: 23445},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 12, offset: 128891},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3794, col: 12, offset: 128891},
																												expr: &charClassMatcher{
																													pos:        position{line: 3806, col: 36, offset: 129238},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3794, col: 16, offset: 128895},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																expr: &litMatcher{
																																	pos:        position{line: 3794, col: 16, offset: 128895},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3794, col: 22, offset: 128901},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3793, col: 12, offset: 128877},
																														expr: &anyMatcher{
																															line: 3793, col: 13, offset: 128878,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 773, col: 22, offset: 23451},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 784, col: 5, offset: 23783},
																				run: (*parser).callonInlineBlock65,
																				expr: &seqExpr{
																					pos: position{line: 784, col: 5, offset: 23783},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 784, col: 5, offset: 23783},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 784, col: 12, offset: 23790},
																								expr: &charClassMatcher{
																									pos:        position{line: 784, col: 12, offset: 23790},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 784, col: 29, offset: 23807},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonInlineBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 331, col: 5, offset: 10292},
														run: (*parser).callonInlineBlock77,
														expr: &andExpr{
															pos: position{line: 331, col: 5, offset: 10292},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 38, offset: 9235},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 45, offset: 9242},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "Prepend",
			pos:  position{line: 293, col: 1, offset: 9357},
			expr: &actionExpr{
				pos: position{line: 293, col: 12, offset: 9368},
				run: (*parser).callonPrepend1,
				expr: &seqExpr{
					pos: position{line: 293, col: 12, offset: 9368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 12, offset: 9368},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 312, col: 21, offset: 9854},
								run: (*parser).callonPrepend4,
								expr: &seqExpr{
									pos: position{line: 312, col: 21, offset: 9854},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 312, col: 21, offset: 9854},
											val:        "prepend",
											ignoreCase: false,
											want:       "\"prepend\"",
										},
										&labeledExpr{
											pos:   position{line: 312, col: 31, offset: 9864},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 329, col: 14, offset: 10241},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 329, col: 14, offset: 10241},
														run: (*parser).callonPrepend9,
														expr: &seqExpr{
															pos: position{line: 329, col: 14, offset: 10241},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 329, col: 14, offset: 10241},
																	expr: &litMatcher{
																		pos:        position{line: 329, col: 14, offset: 10241},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 329, col: 19, offset: 10246},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 771, col: 14, offset: 23392},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 771, col: 14, offset: 23392},
																				run: (*parser).callonPrepend15,
																				expr: &labeledExpr{
																					pos:   position{line: 771, col: 14, offset: 23392},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 757, col: 10, offset: 22837},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 757, col: 10, offset: 22837},
																								run: (*parser).callonPrepend18,
																								expr: &labeledExpr{
																									pos:   position{line: 757, col: 10, offset: 22837},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2408, col: 17, offset: 81561},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2391, col: 20, offset: 81316},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2408, col: 26, offset: 81570},
																												expr: &charClassMatcher{
																													pos:        position{line: 2391, col: 20, offset: 81316},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 759, col: 5, offset: 22931},
																								run: (*parser).callonPrepend24,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 5, offset: 22931},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 759, col: 5, offset: 22931},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 759, col: 13, offset: 22939},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 759, col: 13, offset: 22939},
																														expr: &litMatcher{
																															pos:        position{line: 759, col: 13, offset: 22939},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 759, col: 18, offset: 22944},
																														expr: &choiceExpr{
																															pos: position{line: 759, col: 19, offset: 22945},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 759, col: 19, offset: 22945},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 19, offset: 22945},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 28, offset: 22954},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 759, col: 38, offset: 22964},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 759, col: 49, offset: 22975},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3797, col: 8, offset: 128940},
																												run: (*parser).callonPrepend37,
																												expr: &choiceExpr{
																													pos: position{line: 3797, col: 9, offset: 128941},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															expr: &anyMatcher{
																																line: 3797, col: 10, offset: 128942,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3797, col: 14, offset: 128946},
																															expr: &anyMatcher{
																																line: 3797, col: 15, offset: 128947,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 773, col: 5, offset: 23434},
																				run: (*parser).callonPrepend43,
																				expr: &seqExpr{
																					pos: position{line: 773, col: 5, offset: 23434},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 773, col: 5, offset: 23434},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonPrepend46,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 773, col: 14, offset: 23443},
																							expr: &choiceExpr{
																								pos: position{line: 773, col: 16, offset: 23445},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 12, offset: 128891},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3794, col: 12, offset: 128891},
																												expr: &charClassMatcher{
																													pos:        position{line: 3806, col: 36, offset: 129238},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3794, col: 16, offset: 128895},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																expr: &litMatcher{
																																	pos:        position{line: 3794, col: 16, offset: 128895},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3794, col: 22, offset: 128901},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3793, col: 12, offset: 128877},
																														expr: &anyMatcher{
																															line: 3793, col: 13, offset: 128878,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 773, col: 22, offset: 23451},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 784, col: 5, offset: 23783},
																				run: (*parser).callonPrepend65,
																				expr: &seqExpr{
																					pos: position{line: 784, col: 5, offset: 23783},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 784, col: 5, offset: 23783},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 784, col: 12, offset: 23790},
																								expr: &charClassMatcher{
																									pos:        position{line: 784, col: 12, offset: 23790},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 784, col: 29, offset: 23807},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonPrepend71,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 331, col: 5, offset: 10292},
														run: (*parser).callonPrepend77,
														expr: &andExpr{
															pos: position{line: 331, col: 5, offset: 10292},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 36, offset: 9392},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 42, offset: 9398},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "Append",
			pos:  position{line: 298, col: 1, offset: 9500},
			expr: &actionExpr{
				pos: position{line: 298, col: 11, offset: 9510},
				run: (*parser).callonAppend1,
				expr: &seqExpr{
					pos: position{line: 298, col: 11, offset: 9510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 11, offset: 9510},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 320, col: 20, offset: 10051},
								run: (*parser).callonAppend4,
								expr: &seqExpr{
									pos: position{line: 320, col: 20, offset: 10051},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 320, col: 20, offset: 10051},
											val:        "append",
											ignoreCase: false,
											want:       "\"append\"",
										},
										&labeledExpr{
											pos:   position{line: 320, col: 29, offset: 10060},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 329, col: 14, offset: 10241},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 329, col: 14, offset: 10241},
														run: (*parser).callonAppend9,
														expr: &seqExpr{
															pos: position{line: 329, col: 14, offset: 10241},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 329, col: 14, offset: 10241},
																	expr: &litMatcher{
																		pos:        position{line: 329, col: 14, offset: 10241},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 329, col: 19, offset: 10246},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 771, col: 14, offset: 23392},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 771, col: 14, offset: 23392},
																				run: (*parser).callonAppend15,
																				expr: &labeledExpr{
																					pos:   position{line: 771, col: 14, offset: 23392},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 757, col: 10, offset: 22837},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 757, col: 10, offset: 22837},
																								run: (*parser).callonAppend18,
																								expr: &labeledExpr{
																									pos:   position{line: 757, col: 10, offset: 22837},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2408, col: 17, offset: 81561},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2391, col: 20, offset: 81316},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2408, col: 26, offset: 81570},
																												expr: &charClassMatcher{
																													pos:        position{line: 2391, col: 20, offset: 81316},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 759, col: 5, offset: 22931},
																								run: (*parser).callonAppend24,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 5, offset: 22931},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 759, col: 5, offset: 22931},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 759, col: 13, offset: 22939},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 759, col: 13, offset: 22939},
																														expr: &litMatcher{
																															pos:        position{line: 759, col: 13, offset: 22939},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 759, col: 18, offset: 22944},
																														expr: &choiceExpr{
																															pos: position{line: 759, col: 19, offset: 22945},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 759, col: 19, offset: 22945},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 19, offset: 22945},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 759, col: 28, offset: 22954},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 759, col: 38, offset: 22964},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 759, col: 49, offset: 22975},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3797, col: 8, offset: 128940},
																												run: (*parser).callonAppend37,
																												expr: &choiceExpr{
																													pos: position{line: 3797, col: 9, offset: 128941},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3797, col: 9, offset: 128941},
																															expr: &anyMatcher{
																																line: 3797, col: 10, offset: 128942,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3797, col: 14, offset: 128946},
																															expr: &anyMatcher{
																																line: 3797, col: 15, offset: 128947,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 773, col: 5, offset: 23434},
																				run: (*parser).callonAppend43,
																				expr: &seqExpr{
																					pos: position{line: 773, col: 5, offset: 23434},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 773, col: 5, offset: 23434},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonAppend46,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 773, col: 14, offset: 23443},
																							expr: &choiceExpr{
																								pos: position{line: 773, col: 16, offset: 23445},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 12, offset: 128891},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3794, col: 12, offset: 128891},
																												expr: &charClassMatcher{
																													pos:        position{line: 3806, col: 36, offset: 129238},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3794, col: 16, offset: 128895},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3794, col: 16, offset: 128895},
																																expr: &litMatcher{
																																	pos:        position{line: 3794, col: 16, offset: 128895},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3794, col: 22, offset: 128901},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3793, col: 12, offset: 128877},
																														expr: &anyMatcher{
																															line: 3793, col: 13, offset: 128878,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 773, col: 22, offset: 23451},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 784, col: 5, offset: 23783},
																				run: (*parser).callonAppend65,
																				expr: &seqExpr{
																					pos: position{line: 784, col: 5, offset: 23783},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 784, col: 5, offset: 23783},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 784, col: 12, offset: 23790},
																								expr: &charClassMatcher{
																									pos:        position{line: 784, col: 12, offset: 23790},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 784, col: 29, offset: 23807},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonAppend71,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 331, col: 5, offset: 10292},
														run: (*parser).callonAppend77,
														expr: &andExpr{
															pos: position{line: 331, col: 5, offset: 10292},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 34, offset: 9533},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 40, offset: 9539},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockExpansion",
			pos:  position{line: 346, col: 1, offset: 10739},
			expr: &actionExpr{
				pos: position{line: 346, col: 19, offset: 10757},
				run: (*parser).callonBlockExpansion1,
				expr: &seqExpr{
					pos: position{line: 346, col: 19, offset: 10757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 19, offset: 10757},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 23, offset: 10761},
							label: "sI",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 26, offset: 10764},
								name: "blockExpansionItem",
							},
						},
					},
				},
			},
		},
		{
			name: "blockExpansionItem",
			pos:  position{line: 353, col: 1, offset: 10892},
			expr: &choiceExpr{
				pos: position{line: 353, col: 23, offset: 10914},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 353, col: 23, offset: 10914},
						name: "InlineArrowBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 353, col: 42, offset: 10933},
						name: "spacedBlockExpansionItem",
					},
					&actionExpr{
						pos: position{line: 397, col: 22, offset: 12230},
						run: (*parser).callonblockExpansionItem4,
						expr: &seqExpr{
							pos: position{line: 397, col: 22, offset: 12230},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 397, col: 22, offset: 12230},
									label: "lineI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 397, col: 28, offset: 12236},
										expr: &charClassMatcher{
											pos:        position{line: 3795, col: 12, offset: 128924},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "spacedBlockExpansionItem",
			pos:  position{line: 355, col: 1, offset: 10979},
			expr: &choiceExpr{
				pos: position{line: 355, col: 29, offset: 11007},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 355, col: 29, offset: 11007},
						run: (*parser).callonspacedBlockExpansionItem2,
						expr: &seqExpr{
							pos: position{line: 355, col: 29, offset: 11007},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 355, col: 29, offset: 11007},
									expr: &litMatcher{
										pos:        position{line: 355, col: 29, offset: 11007},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 355, col: 34, offset: 11012},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 355, col: 37, offset: 11015},
										name: "_spacedBlockExpansionItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 11066},
						run: (*parser).callonspacedBlockExpansionItem8,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 11066},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 357, col: 5, offset: 11066},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonspacedBlockExpansionItem11,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 357, col: 14, offset: 11075},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 357, col: 17, offset: 11078},
										name: "_spacedBlockExpansionItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "_spacedBlockExpansionItem",
			pos:  position{line: 393, col: 1, offset: 11992},
			expr: &choiceExpr{
				pos: position{line: 393, col: 30, offset: 12021},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 393, col: 30, offset: 12021},
						name: "InlineBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 45, offset: 12036},
						name: "InlineAnd",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 57, offset: 12048},
						name: "InlineMixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 30, offset: 12095},
						name: "InlineIf",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 41, offset: 12106},
						name: "InlineIfBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 57, offset: 12122},
						name: "InlineFor",
					},
					&actionExpr{
						pos: position{line: 2886, col: 12, offset: 99612},
						run: (*parser).callon_spacedBlockExpansionItem8,
						expr: &seqExpr{
							pos: position{line: 2886, col: 12, offset: 99612},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2886, col: 12, offset: 99612},
									val:        "include",
									ignoreCase: false,
									want:       "\"include\"",
								},
								&labeledExpr{
									pos:   position{line: 2886, col: 22, offset: 99622},
									label: "pathI",
									expr: &choiceExpr{
										pos: position{line: 3221, col: 18, offset: 110591},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3221, col: 18, offset: 110591},
												run: (*parser).callon_spacedBlockExpansionItem13,
												expr: &seqExpr{
													pos: position{line: 3221, col: 18, offset: 110591},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 3221, col: 18, offset: 110591},
															expr: &litMatcher{
																pos:        position{line: 3221, col: 18, offset: 110591},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3221, col: 23, offset: 110596},
															label: "sI",
															expr: &choiceExpr{
																pos: position{line: 820, col: 11, offset: 24937},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 826, col: 14, offset: 25024},
																		run: (*parser).callon_spacedBlockExpansionItem19,
																		expr: &seqExpr{
																			pos: position{line: 826, col: 14, offset: 25024},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 826, col: 14, offset: 25024},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 826, col: 18, offset: 25028},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 826, col: 23, offset: 25033},
																						expr: &charClassMatcher{
																							pos:        position{line: 2745, col: 27, offset: 94634},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 826, col: 47, offset: 25057},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 828, col: 5, offset: 25149},
																		run: (*parser).callon_spacedBlockExpansionItem26,
																		expr: &seqExpr{
																			pos: position{line: 828, col: 5, offset: 25149},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 828, col: 5, offset: 25149},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 828, col: 9, offset: 25153},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 828, col: 14, offset: 25158},
																						expr: &charClassMatcher{
																							pos:        position{line: 2745, col: 27, offset: 94634},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 828, col: 38, offset: 25182},
																					expr: &seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 847, col: 22, offset: 25586},
																		run: (*parser).callon_spacedBlockExpansionItem43,
																		expr: &seqExpr{
																			pos: position{line: 847, col: 22, offset: 25586},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 847, col: 22, offset: 25586},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 847, col: 26, offset: 25590},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 847, col: 31, offset: 25595},
																						expr: &choiceExpr{
																							pos: position{line: 847, col: 32, offset: 25596},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2484, col: 24, offset: 84297},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2484, col: 24, offset: 84297},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2485, col: 24, offset: 84364},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2485, col: 24, offset: 84364},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2486, col: 5, offset: 84401},
																									run: (*parser).callon_spacedBlockExpansionItem58,
																									expr: &seqExpr{
																										pos: position{line: 2486, col: 5, offset: 84401},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2486, col: 5, offset: 84401},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 14, offset: 84410},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 26, offset: 84422},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2503, col: 19, offset: 85039},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2503, col: 19, offset: 85039},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2504, col: 5, offset: 85098},
																									run: (*parser).callon_spacedBlockExpansionItem71,
																									expr: &seqExpr{
																										pos: position{line: 2504, col: 5, offset: 85098},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2504, col: 5, offset: 85098},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 14, offset: 85107},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 26, offset: 85119},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 38, offset: 85131},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 50, offset: 85143},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2533, col: 16, offset: 86279},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2533, col: 16, offset: 86279},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2534, col: 5, offset: 86382},
																									run: (*parser).callon_spacedBlockExpansionItem92,
																									expr: &seqExpr{
																										pos: position{line: 2534, col: 5, offset: 86382},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2534, col: 5, offset: 86382},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 14, offset: 86391},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 26, offset: 86403},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 38, offset: 86415},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 50, offset: 86427},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 62, offset: 86439},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 74, offset: 86451},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 86, offset: 86463},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 98, offset: 86475},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2761, col: 36, offset: 95412},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2761, col: 36, offset: 95412},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2761, col: 41, offset: 95417},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2759, col: 38, offset: 95304},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2648, col: 37, offset: 91062},
																									run: (*parser).callon_spacedBlockExpansionItem115,
																									expr: &seqExpr{
																										pos: position{line: 2648, col: 37, offset: 91062},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2648, col: 37, offset: 91062},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2672, col: 5, offset: 92079},
																									run: (*parser).callon_spacedBlockExpansionItem126,
																									expr: &seqExpr{
																										pos: position{line: 2672, col: 5, offset: 92079},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2672, col: 5, offset: 92079},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2693, col: 5, offset: 92921},
																									run: (*parser).callon_spacedBlockExpansionItem133,
																									expr: &seqExpr{
																										pos: position{line: 2693, col: 5, offset: 92921},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2693, col: 5, offset: 92921},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2711, col: 5, offset: 93607},
																									run: (*parser).callon_spacedBlockExpansionItem138,
																									expr: &seqExpr{
																										pos: position{line: 2711, col: 5, offset: 93607},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2711, col: 5, offset: 93607},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2711, col: 10, offset: 93612},
																												expr: &charClassMatcher{
																													pos:        position{line: 3795, col: 12, offset: 128924},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 847, col: 115, offset: 25679},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 849, col: 5, offset: 25771},
																		run: (*parser).callon_spacedBlockExpansionItem144,
																		expr: &seqExpr{
																			pos: position{line: 849, col: 5, offset: 25771},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 849, col: 5, offset: 25771},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 849, col: 9, offset: 25775},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 849, col: 14, offset: 25780},
																						expr: &choiceExpr{
																							pos: position{line: 849, col: 15, offset: 25781},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2484, col: 24, offset: 84297},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2484, col: 24, offset: 84297},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2401, col: 19, offset: 81486},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2485, col: 24, offset: 84364},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2485, col: 24, offset: 84364},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2486, col: 5, offset: 84401},
																									run: (*parser).callon_spacedBlockExpansionItem159,
																									expr: &seqExpr{
																										pos: position{line: 2486, col: 5, offset: 84401},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2486, col: 5, offset: 84401},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 14, offset: 84410},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2486, col: 26, offset: 84422},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2503, col: 19, offset: 85039},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2503, col: 19, offset: 85039},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2504, col: 5, offset: 85098},
																									run: (*parser).callon_spacedBlockExpansionItem172,
																									expr: &seqExpr{
																										pos: position{line: 2504, col: 5, offset: 85098},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2504, col: 5, offset: 85098},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 14, offset: 85107},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 26, offset: 85119},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 38, offset: 85131},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2504, col: 50, offset: 85143},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2533, col: 16, offset: 86279},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2533, col: 16, offset: 86279},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2534, col: 5, offset: 86382},
																									run: (*parser).callon_spacedBlockExpansionItem193,
																									expr: &seqExpr{
																										pos: position{line: 2534, col: 5, offset: 86382},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2534, col: 5, offset: 86382},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 14, offset: 86391},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 26, offset: 86403},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 38, offset: 86415},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 50, offset: 86427},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 62, offset: 86439},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 74, offset: 86451},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 86, offset: 86463},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2534, col: 98, offset: 86475},
																												expr: &charClassMatcher{
																													pos:        position{line: 2402, col: 19, offset: 81510},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2761, col: 36, offset: 95412},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2761, col: 36, offset: 95412},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2761, col: 41, offset: 95417},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2759, col: 38, offset: 95304},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2648, col: 37, offset: 91062},
																									run: (*parser).callon_spacedBlockExpansionItem216,
																									expr: &seqExpr{
																										pos: position{line: 2648, col: 37, offset: 91062},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2648, col: 37, offset: 91062},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2672, col: 5, offset: 92079},
																									run: (*parser).callon_spacedBlockExpansionItem227,
																									expr: &seqExpr{
																										pos: position{line: 2672, col: 5, offset: 92079},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2672, col: 5, offset: 92079},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2693, col: 5, offset: 92921},
																									run: (*parser).callon_spacedBlockExpansionItem234,
																									expr: &seqExpr{
																										pos: position{line: 2693, col: 5, offset: 92921},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2693, col: 5, offset: 92921},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2402, col: 19, offset: 81510},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2711, col: 5, offset: 93607},
																									run: (*parser).callon_spacedBlockExpansionItem239,
																									expr: &seqExpr{
																										pos: position{line: 2711, col: 5, offset: 93607},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2711, col: 5, offset: 93607},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2711, col: 10, offset: 93612},
																												expr: &charClassMatcher{
																													pos:        position{line: 3795, col: 12, offset: 128924},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 849, col: 98, offset: 25864},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callon_spacedBlockExpansionItem245,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 849, col: 110, offset: 25876},
																					expr: &seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 868, col: 22, offset: 26282},
																		run: (*parser).callon_spacedBlockExpansionItem262,
																		expr: &seqExpr{
																			pos: position{line: 868, col: 22, offset: 26282},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 868, col: 22, offset: 26282},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 868, col: 27, offset: 26287},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 868, col: 32, offset: 26292},
																						expr: &charClassMatcher{
																							pos:        position{line: 868, col: 32, offset: 26292},
																							val:        "[^\\\\r\\n]",
																							chars:      []rune{'\'', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 868, col: 42, offset: 26302},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 868, col: 47, offset: 26307},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callon_spacedBlockExpansionItem270,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3223, col: 5, offset: 110631},
												run: (*parser).callon_spacedBlockExpansionItem276,
												expr: &seqExpr{
													pos: position{line: 3223, col: 5, offset: 110631},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3223, col: 5, offset: 110631},
															expr: &litMatcher{
																pos:        position{line: 3223, col: 5, offset: 110631},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3223, col: 10, offset: 110636},
															label: "pathI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3223, col: 16, offset: 110642},
																expr: &charClassMatcher{
																	pos:        position{line: 3795, col: 12, offset: 128924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 395, col: 30, offset: 12173},
						name: "InlineElement",
					},
					&ruleRefExpr{
						pos:  position{line: 395, col: 46, offset: 12189},
						name: "InlineDivShorthand",
					},
				},
			},
		},
		{
			name: "Codes",
			pos:  position{line: 427, col: 1, offset: 13128},
			expr: &actionExpr{
				pos: position{line: 427, col: 10, offset: 13137},
				run: (*parser).callonCodes1,
				expr: &labeledExpr{
					pos:   position{line: 427, col: 10, offset: 13137},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 427, col: 17, offset: 13144},
						expr: &seqExpr{
							pos: position{line: 427, col: 18, offset: 13145},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 427, col: 18, offset: 13145},
									expr: &oneOrMoreExpr{
										pos: position{line: 3808, col: 36, offset: 129325},
										expr: &seqExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 427, col: 27, offset: 13154},
									name: "Code",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 431, col: 1, offset: 13225},
			expr: &choiceExpr{
				pos: position{line: 431, col: 9, offset: 13233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 431, col: 9, offset: 13233},
						run: (*parser).callonCode2,
						expr: &seqExpr{
							pos: position{line: 431, col: 9, offset: 13233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 431, col: 9, offset: 13233},
									val:        "- ",
									ignoreCase: false,
									want:       "\"- \"",
								},
								&labeledExpr{
									pos:   position{line: 431, col: 14, offset: 13238},
									label: "firstLineI",
									expr: &actionExpr{
										pos: position{line: 457, col: 13, offset: 14068},
										run: (*parser).callonCode6,
										expr: &seqExpr{
											pos: position{line: 457, col: 13, offset: 14068},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 457, col: 13, offset: 14068},
													label: "code",
													expr: &oneOrMoreExpr{
														pos: position{line: 457, col: 18, offset: 14073},
														expr: &charClassMatcher{
															pos:        position{line: 3795, col: 12, offset: 128924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3794, col: 12, offset: 128891},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3794, col: 16, offset: 128895},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	expr: &litMatcher{
																		pos:        position{line: 3794, col: 16, offset: 128895},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3794, col: 22, offset: 128901},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3793, col: 12, offset: 128877},
															expr: &anyMatcher{
																line: 3793, col: 13, offset: 128878,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 431, col: 34, offset: 13258},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 431, col: 51, offset: 13275},
										expr: &seqExpr{
											pos: position{line: 431, col: 52, offset: 13276},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 431, col: 52, offset: 13276},
													expr: &oneOrMoreExpr{
														pos: position{line: 3808, col: 36, offset: 129325},
														expr: &seqExpr{
															pos: position{line: 3808, col: 37, offset: 129326},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3808, col: 37, offset: 129326},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 431, col: 61, offset: 13285},
													name: "INDENTATION2",
												},
												&actionExpr{
													pos: position{line: 457, col: 13, offset: 14068},
													run: (*parser).callonCode32,
													expr: &seqExpr{
														pos: position{line: 457, col: 13, offset: 14068},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 457, col: 13, offset: 14068},
																label: "code",
																expr: &oneOrMoreExpr{
																	pos: position{line: 457, col: 18, offset: 14073},
																	expr: &charClassMatcher{
																		pos:        position{line: 3795, col: 12, offset: 128924},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																expr: &charClassMatcher{
																	pos:        position{line: 3806, col: 36, offset: 129238},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				expr: &litMatcher{
																					pos:        position{line: 3794, col: 16, offset: 128895},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3794, col: 22, offset: 128901},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3793, col: 12, offset: 128877},
																		expr: &anyMatcher{
																			line: 3793, col: 13, offset: 128878,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 444, col: 5, offset: 13662},
						run: (*parser).callonCode46,
						expr: &seqExpr{
							pos: position{line: 444, col: 5, offset: 13662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 444, col: 5, offset: 13662},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&labeledExpr{
									pos:   position{line: 444, col: 9, offset: 13666},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonCode50,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 461, col: 1, offset: 14159},
			expr: &choiceExpr{
				pos: position{line: 461, col: 14, offset: 14172},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 461, col: 14, offset: 14172},
						run: (*parser).calloncondition2,
						expr: &seqExpr{
							pos: position{line: 461, col: 14, offset: 14172},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 461, col: 14, offset: 14172},
									expr: &litMatcher{
										pos:        position{line: 461, col: 14, offset: 14172},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 461, col: 19, offset: 14177},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 461, col: 25, offset: 14183},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 14224},
						run: (*parser).calloncondition8,
						expr: &seqExpr{
							pos: position{line: 463, col: 5, offset: 14224},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 463, col: 5, offset: 14224},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).calloncondition11,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 463, col: 14, offset: 14233},
									expr: &seqExpr{
										pos: position{line: 3794, col: 12, offset: 128891},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												expr: &charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3794, col: 16, offset: 128895},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																expr: &litMatcher{
																	pos:        position{line: 3794, col: 16, offset: 128895},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3794, col: 22, offset: 128901},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3793, col: 12, offset: 128877},
														expr: &anyMatcher{
															line: 3793, col: 13, offset: 128878,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 14516},
						run: (*parser).calloncondition28,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 5, offset: 14516},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).calloncondition30,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "then",
			pos:  position{line: 503, col: 1, offset: 15409},
			expr: &choiceExpr{
				pos: position{line: 503, col: 9, offset: 15417},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 503, col: 9, offset: 15417},
						run: (*parser).callonthen2,
						expr: &seqExpr{
							pos: position{line: 503, col: 9, offset: 15417},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 503, col: 13, offset: 15421},
									label: "scopeI",
									expr: &ruleRefExpr{
										pos:  position{line: 503, col: 20, offset: 15428},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 15462},
						run: (*parser).callonthen15,
						expr: &labeledExpr{
							pos:   position{line: 505, col: 5, offset: 15462},
							label: "beI",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 9, offset: 15466},
								name: "BlockExpansion",
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 15541},
						run: (*parser).callonthen18,
						expr: &seqExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 515, col: 5, offset: 15793},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 516, col: 6, offset: 15800},
								run: (*parser).callonthen30,
								expr: &oneOrMoreExpr{
									pos: position{line: 516, col: 6, offset: 15800},
									expr: &charClassMatcher{
										pos:        position{line: 516, col: 6, offset: 15800},
										val:        "[^:\\r\\n]",
										chars:      []rune{':', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 516, col: 40, offset: 15834},
								run: (*parser).callonthen33,
							},
							&ruleRefExpr{
								pos:  position{line: 525, col: 3, offset: 16109},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 534, col: 1, offset: 16310},
			expr: &actionExpr{
				pos: position{line: 534, col: 7, offset: 16316},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 534, col: 7, offset: 16316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 534, col: 7, offset: 16316},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&notExpr{
							pos: position{line: 534, col: 12, offset: 16321},
							expr: &litMatcher{
								pos:        position{line: 534, col: 13, offset: 16322},
								val:        " block",
								ignoreCase: false,
								want:       "\" block\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 22, offset: 16331},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 28, offset: 16337},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 38, offset: 16347},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 44, offset: 16353},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 49, offset: 16358},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 534, col: 58, offset: 16367},
								expr: &ruleRefExpr{
									pos:  position{line: 534, col: 58, offset: 16367},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 66, offset: 16375},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 534, col: 72, offset: 16381},
								expr: &ruleRefExpr{
									pos:  position{line: 534, col: 72, offset: 16381},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIf",
			pos:  position{line: 544, col: 1, offset: 16621},
			expr: &actionExpr{
				pos: position{line: 544, col: 13, offset: 16633},
				run: (*parser).callonInlineIf1,
				expr: &seqExpr{
					pos: position{line: 544, col: 13, offset: 16633},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 13, offset: 16633},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&notExpr{
							pos: position{line: 544, col: 18, offset: 16638},
							expr: &litMatcher{
								pos:        position{line: 544, col: 19, offset: 16639},
								val:        " block",
								ignoreCase: false,
								want:       "\" block\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 28, offset: 16648},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 34, offset: 16654},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 44, offset: 16664},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 50, offset: 16670},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 552, col: 1, offset: 16846},
			expr: &actionExpr{
				pos: position{line: 552, col: 11, offset: 16856},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 552, col: 11, offset: 16856},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 552, col: 11, offset: 16856},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3895, col: 17, offset: 133132},
							run: (*parser).callonElseIf11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3895, col: 17, offset: 133132},
								expr: &charClassMatcher{
									pos:        position{line: 3806, col: 36, offset: 129238},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3895, col: 41, offset: 133156},
							run: (*parser).callonElseIf14,
						},
						&choiceExpr{
							pos: position{line: 3947, col: 5, offset: 135066},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3947, col: 5, offset: 135066},
									run: (*parser).callonElseIf16,
								},
								&seqExpr{
									pos: position{line: 3949, col: 9, offset: 135149},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3949, col: 9, offset: 135149},
											run: (*parser).callonElseIf18,
										},
										&stateCodeExpr{
											pos: position{line: 3951, col: 7, offset: 135272},
											run: (*parser).callonElseIf19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3958, col: 9, offset: 135608},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3958, col: 9, offset: 135608},
											run: (*parser).callonElseIf21,
										},
										&andCodeExpr{
											pos: position{line: 3960, col: 7, offset: 135716},
											run: (*parser).callonElseIf22,
										},
										&choiceExpr{
											pos: position{line: 4013, col: 9, offset: 138051},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 4013, col: 9, offset: 138051},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4013, col: 9, offset: 138051},
															run: (*parser).callonElseIf25,
														},
														&andCodeExpr{
															pos: position{line: 4017, col: 11, offset: 138301},
															run: (*parser).callonElseIf26,
														},
														&stateCodeExpr{
															pos: position{line: 4083, col: 11, offset: 141507},
															run: (*parser).callonElseIf27,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4091, col: 13, offset: 141860},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4091, col: 13, offset: 141860},
															run: (*parser).callonElseIf29,
														},
														&andCodeExpr{
															pos: position{line: 4095, col: 11, offset: 142115},
															run: (*parser).callonElseIf30,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 552, col: 32, offset: 16877},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonElseIf32,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 552, col: 41, offset: 16886},
							val:        "else if",
							ignoreCase: false,
							want:       "\"else if\"",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 51, offset: 16896},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 57, offset: 16902},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 552, col: 67, offset: 16912},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 73, offset: 16918},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 560, col: 1, offset: 17081},
			expr: &actionExpr{
				pos: position{line: 560, col: 9, offset: 17089},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 560, col: 9, offset: 17089},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 560, col: 9, offset: 17089},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3895, col: 17, offset: 133132},
							run: (*parser).callonElse11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3895, col: 17, offset: 133132},
								expr: &charClassMatcher{
									pos:        position{line: 3806, col: 36, offset: 129238},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3895, col: 41, offset: 133156},
							run: (*parser).callonElse14,
						},
						&choiceExpr{
							pos: position{line: 3947, col: 5, offset: 135066},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3947, col: 5, offset: 135066},
									run: (*parser).callonElse16,
								},
								&seqExpr{
									pos: position{line: 3949, col: 9, offset: 135149},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3949, col: 9, offset: 135149},
											run: (*parser).callonElse18,
										},
										&stateCodeExpr{
											pos: position{line: 3951, col: 7, offset: 135272},
											run: (*parser).callonElse19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3958, col: 9, offset: 135608},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3958, col: 9, offset: 135608},
											run: (*parser).callonElse21,
										},
										&andCodeExpr{
											pos: position{line: 3960, col: 7, offset: 135716},
											run: (*parser).callonElse22,
										},
										&choiceExpr{
											pos: position{line: 4013, col: 9, offset: 138051},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 4013, col: 9, offset: 138051},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4013, col: 9, offset: 138051},
															run: (*parser).callonElse25,
														},
														&andCodeExpr{
															pos: position{line: 4017, col: 11, offset: 138301},
															run: (*parser).callonElse26,
														},
														&stateCodeExpr{
															pos: position{line: 4083, col: 11, offset: 141507},
															run: (*parser).callonElse27,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4091, col: 13, offset: 141860},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4091, col: 13, offset: 141860},
															run: (*parser).callonElse29,
														},
														&andCodeExpr{
															pos: position{line: 4095, col: 11, offset: 142115},
															run: (*parser).callonElse30,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 560, col: 30, offset: 17110},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&labeledExpr{
							pos:   position{line: 560, col: 37, offset: 17117},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 43, offset: 17123},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "IfBlock",
			pos:  position{line: 571, col: 1, offset: 17245},
			expr: &actionExpr{
				pos: position{line: 571, col: 12, offset: 17256},
				run: (*parser).callonIfBlock1,
				expr: &seqExpr{
					pos: position{line: 571, col: 12, offset: 17256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 12, offset: 17256},
							val:        "if block",
							ignoreCase: false,
							want:       "\"if block\"",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 23, offset: 17267},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 329, col: 14, offset: 10241},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 329, col: 14, offset: 10241},
										run: (*parser).callonIfBlock6,
										expr: &seqExpr{
											pos: position{line: 329, col: 14, offset: 10241},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 329, col: 14, offset: 10241},
													expr: &litMatcher{
														pos:        position{line: 329, col: 14, offset: 10241},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 329, col: 19, offset: 10246},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 771, col: 14, offset: 23392},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 771, col: 14, offset: 23392},
																run: (*parser).callonIfBlock12,
																expr: &labeledExpr{
																	pos:   position{line: 771, col: 14, offset: 23392},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 757, col: 10, offset: 22837},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 757, col: 10, offset: 22837},
																				run: (*parser).callonIfBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 757, col: 10, offset: 22837},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2408, col: 17, offset: 81561},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2391, col: 20, offset: 81316},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2408, col: 26, offset: 81570},
																								expr: &charClassMatcher{
																									pos:        position{line: 2391, col: 20, offset: 81316},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 759, col: 5, offset: 22931},
																				run: (*parser).callonIfBlock21,
																				expr: &seqExpr{
																					pos: position{line: 759, col: 5, offset: 22931},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 759, col: 5, offset: 22931},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 759, col: 13, offset: 22939},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 759, col: 13, offset: 22939},
																										expr: &litMatcher{
																											pos:        position{line: 759, col: 13, offset: 22939},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 759, col: 18, offset: 22944},
																										expr: &choiceExpr{
																											pos: position{line: 759, col: 19, offset: 22945},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 759, col: 19, offset: 22945},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 759, col: 19, offset: 22945},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 759, col: 28, offset: 22954},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 759, col: 38, offset: 22964},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 759, col: 49, offset: 22975},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonIfBlock34,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 773, col: 5, offset: 23434},
																run: (*parser).callonIfBlock40,
																expr: &seqExpr{
																	pos: position{line: 773, col: 5, offset: 23434},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 773, col: 5, offset: 23434},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonIfBlock43,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 773, col: 14, offset: 23443},
																			expr: &choiceExpr{
																				pos: position{line: 773, col: 16, offset: 23445},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 773, col: 22, offset: 23451},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 784, col: 5, offset: 23783},
																run: (*parser).callonIfBlock62,
																expr: &seqExpr{
																	pos: position{line: 784, col: 5, offset: 23783},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 784, col: 5, offset: 23783},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 784, col: 12, offset: 23790},
																				expr: &charClassMatcher{
																					pos:        position{line: 784, col: 12, offset: 23790},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 784, col: 29, offset: 23807},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonIfBlock68,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 331, col: 5, offset: 10292},
										run: (*parser).callonIfBlock74,
										expr: &andExpr{
											pos: position{line: 331, col: 5, offset: 10292},
											expr: &seqExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 39, offset: 17283},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 45, offset: 17289},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 50, offset: 17294},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 571, col: 59, offset: 17303},
								expr: &ruleRefExpr{
									pos:  position{line: 571, col: 59, offset: 17303},
									name: "ElseIfBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 72, offset: 17316},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 571, col: 78, offset: 17322},
								expr: &ruleRefExpr{
									pos:  position{line: 571, col: 78, offset: 17322},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfBlock",
			pos:  position{line: 581, col: 1, offset: 17562},
			expr: &actionExpr{
				pos: position{line: 581, col: 18, offset: 17579},
				run: (*parser).callonInlineIfBlock1,
				expr: &seqExpr{
					pos: position{line: 581, col: 18, offset: 17579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 18, offset: 17579},
							val:        "if block",
							ignoreCase: false,
							want:       "\"if block\"",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 29, offset: 17590},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 329, col: 14, offset: 10241},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 329, col: 14, offset: 10241},
										run: (*parser).callonInlineIfBlock6,
										expr: &seqExpr{
											pos: position{line: 329, col: 14, offset: 10241},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 329, col: 14, offset: 10241},
													expr: &litMatcher{
														pos:        position{line: 329, col: 14, offset: 10241},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 329, col: 19, offset: 10246},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 771, col: 14, offset: 23392},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 771, col: 14, offset: 23392},
																run: (*parser).callonInlineIfBlock12,
																expr: &labeledExpr{
																	pos:   position{line: 771, col: 14, offset: 23392},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 757, col: 10, offset: 22837},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 757, col: 10, offset: 22837},
																				run: (*parser).callonInlineIfBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 757, col: 10, offset: 22837},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2408, col: 17, offset: 81561},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2391, col: 20, offset: 81316},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2408, col: 26, offset: 81570},
																								expr: &charClassMatcher{
																									pos:        position{line: 2391, col: 20, offset: 81316},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 759, col: 5, offset: 22931},
																				run: (*parser).callonInlineIfBlock21,
																				expr: &seqExpr{
																					pos: position{line: 759, col: 5, offset: 22931},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 759, col: 5, offset: 22931},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 759, col: 13, offset: 22939},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 759, col: 13, offset: 22939},
																										expr: &litMatcher{
																											pos:        position{line: 759, col: 13, offset: 22939},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 759, col: 18, offset: 22944},
																										expr: &choiceExpr{
																											pos: position{line: 759, col: 19, offset: 22945},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 759, col: 19, offset: 22945},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 759, col: 19, offset: 22945},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 759, col: 28, offset: 22954},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 759, col: 38, offset: 22964},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 759, col: 49, offset: 22975},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonInlineIfBlock34,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 773, col: 5, offset: 23434},
																run: (*parser).callonInlineIfBlock40,
																expr: &seqExpr{
																	pos: position{line: 773, col: 5, offset: 23434},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 773, col: 5, offset: 23434},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonInlineIfBlock43,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 773, col: 14, offset: 23443},
																			expr: &choiceExpr{
																				pos: position{line: 773, col: 16, offset: 23445},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 773, col: 22, offset: 23451},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 784, col: 5, offset: 23783},
																run: (*parser).callonInlineIfBlock62,
																expr: &seqExpr{
																	pos: position{line: 784, col: 5, offset: 23783},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 784, col: 5, offset: 23783},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 784, col: 12, offset: 23790},
																				expr: &charClassMatcher{
																					pos:        position{line: 784, col: 12, offset: 23790},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 784, col: 29, offset: 23807},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonInlineIfBlock68,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 331, col: 5, offset: 10292},
										run: (*parser).callonInlineIfBlock74,
										expr: &andExpr{
											pos: position{line: 331, col: 5, offset: 10292},
											expr: &seqExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 45, offset: 17606},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 51, offset: 17612},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIfBlock",
			pos:  position{line: 589, col: 1, offset: 17783},
			expr: &actionExpr{
				pos: position{line: 589, col: 16, offset: 17798},
				run: (*parser).callonElseIfBlock1,
				expr: &seqExpr{
					pos: position{line: 589, col: 16, offset: 17798},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 589, col: 16, offset: 17798},
							expr: &oneOrMoreExpr{
								pos: position{line: 3808, col: 36, offset: 129325},
								expr: &seqExpr{
									pos: position{line: 3808, col: 37, offset: 129326},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3895, col: 17, offset: 133132},
							run: (*parser).callonElseIfBlock11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3895, col: 17, offset: 133132},
								expr: &charClassMatcher{
									pos:        position{line: 3806, col: 36, offset: 129238},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3895, col: 41, offset: 133156},
							run: (*parser).callonElseIfBlock14,
						},
						&choiceExpr{
							pos: position{line: 3947, col: 5, offset: 135066},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3947, col: 5, offset: 135066},
									run: (*parser).callonElseIfBlock16,
								},
								&seqExpr{
									pos: position{line: 3949, col: 9, offset: 135149},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3949, col: 9, offset: 135149},
											run: (*parser).callonElseIfBlock18,
										},
										&stateCodeExpr{
											pos: position{line: 3951, col: 7, offset: 135272},
											run: (*parser).callonElseIfBlock19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3958, col: 9, offset: 135608},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3958, col: 9, offset: 135608},
											run: (*parser).callonElseIfBlock21,
										},
										&andCodeExpr{
											pos: position{line: 3960, col: 7, offset: 135716},
											run: (*parser).callonElseIfBlock22,
										},
										&choiceExpr{
											pos: position{line: 4013, col: 9, offset: 138051},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 4013, col: 9, offset: 138051},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4013, col: 9, offset: 138051},
															run: (*parser).callonElseIfBlock25,
														},
														&andCodeExpr{
															pos: position{line: 4017, col: 11, offset: 138301},
															run: (*parser).callonElseIfBlock26,
														},
														&stateCodeExpr{
															pos: position{line: 4083, col: 11, offset: 141507},
															run: (*parser).callonElseIfBlock27,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4091, col: 13, offset: 141860},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4091, col: 13, offset: 141860},
															run: (*parser).callonElseIfBlock29,
														},
														&andCodeExpr{
															pos: position{line: 4095, col: 11, offset: 142115},
															run: (*parser).callonElseIfBlock30,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 37, offset: 17819},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonElseIfBlock32,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 589, col: 46, offset: 17828},
							val:        "else if block",
							ignoreCase: false,
							want:       "\"else if block\"",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 62, offset: 17844},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 329, col: 14, offset: 10241},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 329, col: 14, offset: 10241},
										run: (*parser).callonElseIfBlock41,
										expr: &seqExpr{
											pos: position{line: 329, col: 14, offset: 10241},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 329, col: 14, offset: 10241},
													expr: &litMatcher{
														pos:        position{line: 329, col: 14, offset: 10241},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 329, col: 19, offset: 10246},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 771, col: 14, offset: 23392},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 771, col: 14, offset: 23392},
																run: (*parser).callonElseIfBlock47,
																expr: &labeledExpr{
																	pos:   position{line: 771, col: 14, offset: 23392},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 757, col: 10, offset: 22837},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 757, col: 10, offset: 22837},
																				run: (*parser).callonElseIfBlock50,
																				expr: &labeledExpr{
																					pos:   position{line: 757, col: 10, offset: 22837},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2408, col: 17, offset: 81561},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2391, col: 20, offset: 81316},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2408, col: 26, offset: 81570},
																								expr: &charClassMatcher{
																									pos:        position{line: 2391, col: 20, offset: 81316},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 759, col: 5, offset: 22931},
																				run: (*parser).callonElseIfBlock56,
																				expr: &seqExpr{
																					pos: position{line: 759, col: 5, offset: 22931},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 759, col: 5, offset: 22931},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 759, col: 13, offset: 22939},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 759, col: 13, offset: 22939},
																										expr: &litMatcher{
																											pos:        position{line: 759, col: 13, offset: 22939},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 759, col: 18, offset: 22944},
																										expr: &choiceExpr{
																											pos: position{line: 759, col: 19, offset: 22945},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 759, col: 19, offset: 22945},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 759, col: 19, offset: 22945},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 759, col: 28, offset: 22954},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 759, col: 38, offset: 22964},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 759, col: 49, offset: 22975},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3797, col: 8, offset: 128940},
																								run: (*parser).callonElseIfBlock69,
																								expr: &choiceExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3797, col: 9, offset: 128941},
																											expr: &anyMatcher{
																												line: 3797, col: 10, offset: 128942,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3797, col: 14, offset: 128946},
																											expr: &anyMatcher{
																												line: 3797, col: 15, offset: 128947,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 773, col: 5, offset: 23434},
																run: (*parser).callonElseIfBlock75,
																expr: &seqExpr{
																	pos: position{line: 773, col: 5, offset: 23434},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 773, col: 5, offset: 23434},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonElseIfBlock78,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 773, col: 14, offset: 23443},
																			expr: &choiceExpr{
																				pos: position{line: 773, col: 16, offset: 23445},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3794, col: 12, offset: 128891},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3794, col: 12, offset: 128891},
																								expr: &charClassMatcher{
																									pos:        position{line: 3806, col: 36, offset: 129238},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3794, col: 16, offset: 128895},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3794, col: 16, offset: 128895},
																												expr: &litMatcher{
																													pos:        position{line: 3794, col: 16, offset: 128895},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3794, col: 22, offset: 128901},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3793, col: 12, offset: 128877},
																										expr: &anyMatcher{
																											line: 3793, col: 13, offset: 128878,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 773, col: 22, offset: 23451},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 784, col: 5, offset: 23783},
																run: (*parser).callonElseIfBlock97,
																expr: &seqExpr{
																	pos: position{line: 784, col: 5, offset: 23783},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 784, col: 5, offset: 23783},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 784, col: 12, offset: 23790},
																				expr: &charClassMatcher{
																					pos:        position{line: 784, col: 12, offset: 23790},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 784, col: 29, offset: 23807},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonElseIfBlock103,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 331, col: 5, offset: 10292},
										run: (*parser).callonElseIfBlock109,
										expr: &andExpr{
											pos: position{line: 331, col: 5, offset: 10292},
											expr: &seqExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 78, offset: 17860},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 84, offset: 17866},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 608, col: 1, offset: 18355},
			expr: &actionExpr{
				pos: position{line: 608, col: 11, offset: 18365},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 608, col: 11, offset: 18365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 11, offset: 18365},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 20, offset: 18374},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 32, offset: 18386},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 49, offset: 18403},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 55, offset: 18409},
								name: "switchBody",
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 633, col: 1, offset: 19026},
			expr: &choiceExpr{
				pos: position{line: 633, col: 21, offset: 19046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 633, col: 21, offset: 19046},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 635, col: 5, offset: 19096},
						run: (*parser).callonswitchComparator13,
						expr: &seqExpr{
							pos: position{line: 635, col: 5, offset: 19096},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 635, col: 5, offset: 19096},
									expr: &litMatcher{
										pos:        position{line: 635, col: 5, offset: 19096},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 635, col: 10, offset: 19101},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 16, offset: 19107},
										name: "IfExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 5, offset: 19188},
						run: (*parser).callonswitchComparator28,
						expr: &seqExpr{
							pos: position{line: 638, col: 5, offset: 19188},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 638, col: 5, offset: 19188},
									expr: &litMatcher{
										pos:        position{line: 638, col: 5, offset: 19188},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 638, col: 10, offset: 19193},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 638, col: 16, offset: 19199},
										name: "IfExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 638, col: 29, offset: 19212},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonswitchComparator35,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 638, col: 43, offset: 19226},
									expr: &charClassMatcher{
										pos:        position{line: 3795, col: 12, offset: 128924},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchBody",
			pos:  position{line: 649, col: 1, offset: 19549},
			expr: &actionExpr{
				pos: position{line: 649, col: 15, offset: 19563},
				run: (*parser).callonswitchBody1,
				expr: &seqExpr{
					pos: position{line: 649, col: 15, offset: 19563},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4282, col: 11, offset: 149864},
							run: (*parser).callonswitchBody3,
						},
						&labeledExpr{
							pos:   position{line: 649, col: 22, offset: 19570},
							label: "itms",
							expr: &zeroOrMoreExpr{
								pos: position{line: 649, col: 27, offset: 19575},
								expr: &seqExpr{
									pos: position{line: 649, col: 28, offset: 19576},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 649, col: 28, offset: 19576},
											expr: &oneOrMoreExpr{
												pos: position{line: 3808, col: 36, offset: 129325},
												expr: &seqExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3808, col: 37, offset: 129326},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															expr: &litMatcher{
																pos:        position{line: 3807, col: 36, offset: 129279},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3807, col: 42, offset: 129285},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 3895, col: 17, offset: 133132},
											run: (*parser).callonswitchBody15,
											expr: &zeroOrMoreExpr{
												pos: position{line: 3895, col: 17, offset: 133132},
												expr: &charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 3895, col: 41, offset: 133156},
											run: (*parser).callonswitchBody18,
										},
										&choiceExpr{
											pos: position{line: 3947, col: 5, offset: 135066},
											alternatives: []interface{}{
												&andCodeExpr{
													pos: position{line: 3947, col: 5, offset: 135066},
													run: (*parser).callonswitchBody20,
												},
												&seqExpr{
													pos: position{line: 3949, col: 9, offset: 135149},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3949, col: 9, offset: 135149},
															run: (*parser).callonswitchBody22,
														},
														&stateCodeExpr{
															pos: position{line: 3951, col: 7, offset: 135272},
															run: (*parser).callonswitchBody23,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3958, col: 9, offset: 135608},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3958, col: 9, offset: 135608},
															run: (*parser).callonswitchBody25,
														},
														&andCodeExpr{
															pos: position{line: 3960, col: 7, offset: 135716},
															run: (*parser).callonswitchBody26,
														},
														&choiceExpr{
															pos: position{line: 4013, col: 9, offset: 138051},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 4013, col: 9, offset: 138051},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 4013, col: 9, offset: 138051},
																			run: (*parser).callonswitchBody29,
																		},
																		&andCodeExpr{
																			pos: position{line: 4017, col: 11, offset: 138301},
																			run: (*parser).callonswitchBody30,
																		},
																		&stateCodeExpr{
																			pos: position{line: 4083, col: 11, offset: 141507},
																			run: (*parser).callonswitchBody31,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 4091, col: 13, offset: 141860},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 4091, col: 13, offset: 141860},
																			run: (*parser).callonswitchBody33,
																		},
																		&andCodeExpr{
																			pos: position{line: 4095, col: 11, offset: 142115},
																			run: (*parser).callonswitchBody34,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 649, col: 49, offset: 19597},
											name: "switchBodyItem",
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4287, col: 11, offset: 149969},
							run: (*parser).callonswitchBody36,
						},
					},
				},
			},
		},
		{
			name: "switchBodyItem",
			pos:  position{line: 687, col: 1, offset: 20862},
			expr: &choiceExpr{
				pos: position{line: 687, col: 19, offset: 20880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 687, col: 19, offset: 20880},
						run: (*parser).callonswitchBodyItem2,
						expr: &labeledExpr{
							pos:   position{line: 687, col: 19, offset: 20880},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 687, col: 26, offset: 20887},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 687, col: 26, offset: 20887},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 33, offset: 20894},
										name: "Default",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20944},
						run: (*parser).callonswitchBodyItem7,
						expr: &labeledExpr{
							pos:   position{line: 689, col: 5, offset: 20944},
							label: "caseI",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 11, offset: 20950},
								name: "BadCase",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 693, col: 1, offset: 20999},
			expr: &actionExpr{
				pos: position{line: 693, col: 9, offset: 21007},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 693, col: 9, offset: 21007},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 693, col: 9, offset: 21007},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 16, offset: 21014},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 22, offset: 21020},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 32, offset: 21030},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 693, col: 38, offset: 21036},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 38, offset: 21036},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 701, col: 1, offset: 21213},
			expr: &actionExpr{
				pos: position{line: 701, col: 12, offset: 21224},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 701, col: 12, offset: 21224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 701, col: 12, offset: 21224},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 22, offset: 21234},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 28, offset: 21240},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 28, offset: 21240},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchThen",
			pos:  position{line: 708, col: 1, offset: 21363},
			expr: &choiceExpr{
				pos: position{line: 708, col: 15, offset: 21377},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 708, col: 15, offset: 21377},
						run: (*parser).callonswitchThen2,
						expr: &seqExpr{
							pos: position{line: 708, col: 15, offset: 21377},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 708, col: 19, offset: 21381},
									label: "scopeI",
									expr: &ruleRefExpr{
										pos:  position{line: 708, col: 26, offset: 21388},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 21422},
						run: (*parser).callonswitchThen15,
						expr: &labeledExpr{
							pos:   position{line: 710, col: 5, offset: 21422},
							label: "beI",
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 9, offset: 21426},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "BadCase",
			pos:  position{line: 714, col: 1, offset: 21500},
			expr: &actionExpr{
				pos: position{line: 714, col: 12, offset: 21511},
				run: (*parser).callonBadCase1,
				expr: &seqExpr{
					pos: position{line: 714, col: 12, offset: 21511},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 714, col: 12, offset: 21511},
							expr: &charClassMatcher{
								pos:        position{line: 3795, col: 12, offset: 128924},
								val:        "[^\\r\\n]",
								chars:      []rune{'\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							expr: &charClassMatcher{
								pos:        position{line: 3806, col: 36, offset: 129238},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3794, col: 16, offset: 128895},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											expr: &litMatcher{
												pos:        position{line: 3794, col: 16, offset: 128895},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3794, col: 22, offset: 128901},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3793, col: 12, offset: 128877},
									expr: &anyMatcher{
										line: 3793, col: 13, offset: 128878,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 714, col: 25, offset: 21524},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 714, col: 31, offset: 21530},
								expr: &ruleRefExpr{
									pos:  position{line: 714, col: 31, offset: 21530},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "For",
			pos:  position{line: 737, col: 1, offset: 22217},
			expr: &actionExpr{
				pos: position{line: 737, col: 8, offset: 22224},
				run: (*parser).callonFor1,
				expr: &seqExpr{
					pos: position{line: 737, col: 8, offset: 22224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 737, col: 8, offset: 22224},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 737, col: 14, offset: 22230},
							expr: &litMatcher{
								pos:        position{line: 737, col: 14, offset: 22230},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 737, col: 19, offset: 22235},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 25, offset: 22241},
								name: "ForExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 737, col: 39, offset: 22255},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 45, offset: 22261},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFor",
			pos:  position{line: 745, col: 1, offset: 22409},
			expr: &actionExpr{
				pos: position{line: 745, col: 14, offset: 22422},
				run: (*parser).callonInlineFor1,
				expr: &seqExpr{
					pos: position{line: 745, col: 14, offset: 22422},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 745, col: 14, offset: 22422},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 745, col: 20, offset: 22428},
							expr: &litMatcher{
								pos:        position{line: 745, col: 20, offset: 22428},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 25, offset: 22433},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 31, offset: 22439},
								name: "SingleLineForExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 55, offset: 22463},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 61, offset: 22469},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComments",
			pos:  position{line: 901, col: 1, offset: 27398},
			expr: &actionExpr{
				pos: position{line: 901, col: 18, offset: 27415},
				run: (*parser).callonCorgiComments1,
				expr: &labeledExpr{
					pos:   position{line: 901, col: 18, offset: 27415},
					label: "commentsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 901, col: 28, offset: 27425},
						expr: &seqExpr{
							pos: position{line: 901, col: 29, offset: 27426},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 901, col: 29, offset: 27426},
									expr: &oneOrMoreExpr{
										pos: position{line: 3808, col: 36, offset: 129325},
										expr: &seqExpr{
											pos: position{line: 3808, col: 37, offset: 129326},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 901, col: 38, offset: 27435},
									name: "CorgiComment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComment",
			pos:  position{line: 905, col: 1, offset: 27526},
			expr: &actionExpr{
				pos: position{line: 905, col: 17, offset: 27542},
				run: (*parser).callonCorgiComment1,
				expr: &seqExpr{
					pos: position{line: 905, col: 17, offset: 27542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 905, col: 17, offset: 27542},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&notExpr{
							pos: position{line: 905, col: 22, offset: 27547},
							expr: &litMatcher{
								pos:        position{line: 905, col: 23, offset: 27548},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 905, col: 27, offset: 27552},
							label: "linesI",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 34, offset: 27559},
								name: "corgiCommentLines",
							},
						},
					},
				},
			},
		},
		{
			name: "corgiCommentLines",
			pos:  position{line: 912, col: 1, offset: 27698},
			expr: &choiceExpr{
				pos: position{line: 912, col: 22, offset: 27719},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 22, offset: 27719},
						run: (*parser).calloncorgiCommentLines2,
						expr: &seqExpr{
							pos: position{line: 912, col: 22, offset: 27719},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 912, col: 22, offset: 27719},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 912, col: 29, offset: 27726},
									label: "linesI",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 36, offset: 27733},
										name: "corgiCommentBlock",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 27780},
						run: (*parser).calloncorgiCommentLines17,
						expr: &labeledExpr{
							pos:   position{line: 914, col: 5, offset: 27780},
							label: "lineI",
							expr: &actionExpr{
								pos: position{line: 922, col: 21, offset: 28077},
								run: (*parser).calloncorgiCommentLines19,
								expr: &seqExpr{
									pos: position{line: 922, col: 21, offset: 28077},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 922, col: 21, offset: 28077},
											label: "commentI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 922, col: 30, offset: 28086},
												expr: &charClassMatcher{
													pos:        position{line: 3795, col: 12, offset: 128924},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 3794, col: 12, offset: 128891},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3794, col: 16, offset: 128895},
															expr: &litMatcher{
																pos:        position{line: 3794, col: 16, offset: 128895},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3794, col: 22, offset: 128901},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 3793, col: 12, offset: 128877},
													expr: &anyMatcher{
														line: 3793, col: 13, offset: 128878,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "corgiCommentBlock",
			pos:  position{line: 918, col: 1, offset: 27879},
			expr: &actionExpr{
				pos: position{line: 918, col: 22, offset: 27900},
				run: (*parser).calloncorgiCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 918, col: 22, offset: 27900},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4282, col: 11, offset: 149864},
							run: (*parser).calloncorgiCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 918, col: 29, offset: 27907},
							label: "linesI",
							expr: &oneOrMoreExpr{
								pos: position{line: 918, col: 36, offset: 27914},
								expr: &seqExpr{
									pos: position{line: 918, col: 37, offset: 27915},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 918, col: 37, offset: 27915},
											expr: &oneOrMoreExpr{
												pos: position{line: 3808, col: 36, offset: 129325},
												expr: &seqExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3808, col: 37, offset: 129326},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															expr: &litMatcher{
																pos:        position{line: 3807, col: 36, offset: 129279},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3807, col: 42, offset: 129285},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 46, offset: 27924},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 922, col: 21, offset: 28077},
											run: (*parser).calloncorgiCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 922, col: 21, offset: 28077},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 922, col: 21, offset: 28077},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 922, col: 30, offset: 28086},
															expr: &charClassMatcher{
																pos:        position{line: 3795, col: 12, offset: 128924},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4287, col: 11, offset: 149969},
							run: (*parser).calloncorgiCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "HTMLComment",
			pos:  position{line: 971, col: 1, offset: 29759},
			expr: &actionExpr{
				pos: position{line: 971, col: 16, offset: 29774},
				run: (*parser).callonHTMLComment1,
				expr: &seqExpr{
					pos: position{line: 971, col: 16, offset: 29774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 971, col: 16, offset: 29774},
							val:        "//-",
							ignoreCase: false,
							want:       "\"//-\"",
						},
						&labeledExpr{
							pos:   position{line: 971, col: 22, offset: 29780},
							label: "linesI",
							expr: &choiceExpr{
								pos: position{line: 972, col: 5, offset: 29793},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 972, col: 5, offset: 29793},
										run: (*parser).callonHTMLComment6,
										expr: &seqExpr{
											pos: position{line: 972, col: 5, offset: 29793},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3794, col: 12, offset: 128891},
													expr: &charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3794, col: 16, offset: 128895},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	expr: &litMatcher{
																		pos:        position{line: 3794, col: 16, offset: 128895},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3794, col: 22, offset: 128901},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3793, col: 12, offset: 128877},
															expr: &anyMatcher{
																line: 3793, col: 13, offset: 128878,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 972, col: 9, offset: 29797},
													label: "linesI",
													expr: &ruleRefExpr{
														pos:  position{line: 972, col: 16, offset: 29804},
														name: "htmlCommentBlock",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 974, col: 9, offset: 29858},
										run: (*parser).callonHTMLComment19,
										expr: &labeledExpr{
											pos:   position{line: 974, col: 9, offset: 29858},
											label: "lineI",
											expr: &actionExpr{
												pos: position{line: 988, col: 20, offset: 30276},
												run: (*parser).callonHTMLComment21,
												expr: &seqExpr{
													pos: position{line: 988, col: 20, offset: 30276},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 988, col: 20, offset: 30276},
															label: "commentI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 988, col: 29, offset: 30285},
																expr: &charClassMatcher{
																	pos:        position{line: 3795, col: 12, offset: 128924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3794, col: 12, offset: 128891},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3794, col: 16, offset: 128895},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			expr: &litMatcher{
																				pos:        position{line: 3794, col: 16, offset: 128895},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3794, col: 22, offset: 128901},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3793, col: 12, offset: 128877},
																	expr: &anyMatcher{
																		line: 3793, col: 13, offset: 128878,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "htmlCommentBlock",
			pos:  position{line: 984, col: 1, offset: 30082},
			expr: &actionExpr{
				pos: position{line: 984, col: 21, offset: 30102},
				run: (*parser).callonhtmlCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 984, col: 21, offset: 30102},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4282, col: 11, offset: 149864},
							run: (*parser).callonhtmlCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 984, col: 28, offset: 30109},
							label: "linesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 984, col: 35, offset: 30116},
								expr: &seqExpr{
									pos: position{line: 984, col: 36, offset: 30117},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 984, col: 36, offset: 30117},
											expr: &oneOrMoreExpr{
												pos: position{line: 3808, col: 36, offset: 129325},
												expr: &seqExpr{
													pos: position{line: 3808, col: 37, offset: 129326},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3808, col: 37, offset: 129326},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															expr: &litMatcher{
																pos:        position{line: 3807, col: 36, offset: 129279},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3807, col: 42, offset: 129285},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 984, col: 45, offset: 30126},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 988, col: 20, offset: 30276},
											run: (*parser).callonhtmlCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 988, col: 20, offset: 30276},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 988, col: 20, offset: 30276},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 988, col: 29, offset: 30285},
															expr: &charClassMatcher{
																pos:        position{line: 3795, col: 12, offset: 128924},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4287, col: 11, offset: 149969},
							run: (*parser).callonhtmlCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 996, col: 1, offset: 30567},
			expr: &actionExpr{
				pos: position{line: 996, col: 12, offset: 30578},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 996, col: 12, offset: 30578},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 996, col: 12, offset: 30578},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2877, col: 16, offset: 99243},
								expr: &charClassMatcher{
									pos:        position{line: 2863, col: 27, offset: 98582},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 30, offset: 30596},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 996, col: 37, offset: 30603},
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 37, offset: 30603},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 58, offset: 30624},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 996, col: 64, offset: 30630},
								expr: &litMatcher{
									pos:        position{line: 996, col: 64, offset: 30630},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 996, col: 69, offset: 30635},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 75, offset: 30641},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1006, col: 1, offset: 30872},
			expr: &actionExpr{
				pos: position{line: 1006, col: 18, offset: 30889},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 18, offset: 30889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1006, col: 18, offset: 30889},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2877, col: 16, offset: 99243},
								expr: &charClassMatcher{
									pos:        position{line: 2863, col: 27, offset: 98582},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1006, col: 36, offset: 30907},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1006, col: 43, offset: 30914},
								expr: &ruleRefExpr{
									pos:  position{line: 1006, col: 43, offset: 30914},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1006, col: 74, offset: 30945},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1006, col: 80, offset: 30951},
								expr: &litMatcher{
									pos:        position{line: 1006, col: 80, offset: 30951},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1006, col: 85, offset: 30956},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 91, offset: 30962},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "DivShorthand",
			pos:  position{line: 1020, col: 1, offset: 31379},
			expr: &actionExpr{
				pos: position{line: 1020, col: 17, offset: 31395},
				run: (*parser).callonDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 17, offset: 31395},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1020, col: 17, offset: 31395},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 1020, col: 29, offset: 31407},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1153, col: 19, offset: 36521},
										run: (*parser).callonDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1153, col: 19, offset: 36521},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1153, col: 19, offset: 36521},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1153, col: 23, offset: 36525},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1153, col: 29, offset: 36531},
														expr: &charClassMatcher{
															pos:        position{line: 1153, col: 29, offset: 36531},
															val:        "[^ \\t\\r\\n.()[]{}]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1158, col: 5, offset: 36655},
										run: (*parser).callonDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1158, col: 5, offset: 36655},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1158, col: 5, offset: 36655},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1158, col: 9, offset: 36659},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1134, col: 16, offset: 36075},
										run: (*parser).callonDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1134, col: 16, offset: 36075},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1134, col: 16, offset: 36075},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1134, col: 20, offset: 36079},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1134, col: 24, offset: 36083},
														expr: &charClassMatcher{
															pos:        position{line: 1134, col: 24, offset: 36083},
															val:        "[^ \\t\\r\\n.()[]{}]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1139, col: 5, offset: 36200},
										run: (*parser).callonDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1139, col: 5, offset: 36200},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 5, offset: 36200},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1139, col: 9, offset: 36204},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 59, offset: 31437},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1020, col: 70, offset: 31448},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 70, offset: 31448},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 91, offset: 31469},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 97, offset: 31475},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDivShorthand",
			pos:  position{line: 1028, col: 1, offset: 31736},
			expr: &actionExpr{
				pos: position{line: 1028, col: 23, offset: 31758},
				run: (*parser).callonInlineDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 23, offset: 31758},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1028, col: 23, offset: 31758},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 1028, col: 35, offset: 31770},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1153, col: 19, offset: 36521},
										run: (*parser).callonInlineDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1153, col: 19, offset: 36521},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1153, col: 19, offset: 36521},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1153, col: 23, offset: 36525},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1153, col: 29, offset: 36531},
														expr: &charClassMatcher{
															pos:        position{line: 1153, col: 29, offset: 36531},
															val:        "[^ \\t\\r\\n.()[]{}]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1158, col: 5, offset: 36655},
										run: (*parser).callonInlineDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1158, col: 5, offset: 36655},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1158, col: 5, offset: 36655},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1158, col: 9, offset: 36659},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonInlineDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1134, col: 16, offset: 36075},
										run: (*parser).callonInlineDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1134, col: 16, offset: 36075},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1134, col: 16, offset: 36075},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1134, col: 20, offset: 36079},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1134, col: 24, offset: 36083},
														expr: &charClassMatcher{
															pos:        position{line: 1134, col: 24, offset: 36083},
															val:        "[^ \\t\\r\\n.()[]{}]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1139, col: 5, offset: 36200},
										run: (*parser).callonInlineDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1139, col: 5, offset: 36200},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 5, offset: 36200},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1139, col: 9, offset: 36204},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonInlineDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1028, col: 65, offset: 31800},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1028, col: 76, offset: 31811},
								expr: &ruleRefExpr{
									pos:  position{line: 1028, col: 76, offset: 31811},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1028, col: 107, offset: 31842},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1028, col: 113, offset: 31848},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 1040, col: 1, offset: 32286},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 8, offset: 32293},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1040, col: 8, offset: 32293},
						run: (*parser).callonAnd2,
						expr: &seqExpr{
							pos: position{line: 1040, col: 8, offset: 32293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1040, col: 8, offset: 32293},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 12, offset: 32297},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1040, col: 19, offset: 32304},
										expr: &ruleRefExpr{
											pos:  position{line: 1040, col: 19, offset: 32304},
											name: "AttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1045, col: 5, offset: 32459},
						run: (*parser).callonAnd17,
						expr: &seqExpr{
							pos: position{line: 1045, col: 5, offset: 32459},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1045, col: 5, offset: 32459},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1045, col: 9, offset: 32463},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonAnd21,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 33059},
						run: (*parser).callonAnd36,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 33059},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 33059},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 9, offset: 33063},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1060, col: 16, offset: 33070},
										expr: &ruleRefExpr{
											pos:  position{line: 1060, col: 16, offset: 33070},
											name: "AttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 37, offset: 33091},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonAnd43,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1060, col: 46, offset: 33100},
									expr: &charClassMatcher{
										pos:        position{line: 3795, col: 12, offset: 128924},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAnd",
			pos:  position{line: 1082, col: 1, offset: 33970},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 14, offset: 33983},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 14, offset: 33983},
						run: (*parser).callonInlineAnd2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 14, offset: 33983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1082, col: 14, offset: 33983},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1082, col: 18, offset: 33987},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1082, col: 25, offset: 33994},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 25, offset: 33994},
											name: "SingleLineAttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 34159},
						run: (*parser).callonInlineAnd17,
						expr: &seqExpr{
							pos: position{line: 1087, col: 5, offset: 34159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1087, col: 5, offset: 34159},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 9, offset: 34163},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonInlineAnd21,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1102, col: 5, offset: 34759},
						run: (*parser).callonInlineAnd36,
						expr: &seqExpr{
							pos: position{line: 1102, col: 5, offset: 34759},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 5, offset: 34759},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 9, offset: 34763},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1102, col: 16, offset: 34770},
										expr: &ruleRefExpr{
											pos:  position{line: 1102, col: 16, offset: 34770},
											name: "SingleLineAttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 47, offset: 34801},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonInlineAnd43,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1102, col: 56, offset: 34810},
									expr: &charClassMatcher{
										pos:        position{line: 3795, col: 12, offset: 128924},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 1128, col: 1, offset: 35874},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 34, offset: 35907},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 16, offset: 36075},
						run: (*parser).callonAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 16, offset: 36075},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 16, offset: 36075},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 20, offset: 36079},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1134, col: 24, offset: 36083},
										expr: &charClassMatcher{
											pos:        position{line: 1134, col: 24, offset: 36083},
											val:        "[^ \\t\\r\\n.()[]{}]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 36200},
						run: (*parser).callonAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 36200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 36200},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 9, offset: 36204},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1153, col: 19, offset: 36521},
						run: (*parser).callonAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1153, col: 19, offset: 36521},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1153, col: 19, offset: 36521},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 23, offset: 36525},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1153, col: 29, offset: 36531},
										expr: &charClassMatcher{
											pos:        position{line: 1153, col: 29, offset: 36531},
											val:        "[^ \\t\\r\\n.()[]{}]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1158, col: 5, offset: 36655},
						run: (*parser).callonAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1158, col: 5, offset: 36655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 5, offset: 36655},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1158, col: 9, offset: 36659},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 65, offset: 35938},
						name: "AttributeList",
					},
				},
			},
		},
		{
			name: "SingleLineAttributeCollection",
			pos:  position{line: 1129, col: 1, offset: 35952},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 34, offset: 35985},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 16, offset: 36075},
						run: (*parser).callonSingleLineAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 16, offset: 36075},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 16, offset: 36075},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 20, offset: 36079},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1134, col: 24, offset: 36083},
										expr: &charClassMatcher{
											pos:        position{line: 1134, col: 24, offset: 36083},
											val:        "[^ \\t\\r\\n.()[]{}]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 36200},
						run: (*parser).callonSingleLineAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 36200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 36200},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 9, offset: 36204},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonSingleLineAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1153, col: 19, offset: 36521},
						run: (*parser).callonSingleLineAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1153, col: 19, offset: 36521},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1153, col: 19, offset: 36521},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 23, offset: 36525},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1153, col: 29, offset: 36531},
										expr: &charClassMatcher{
											pos:        position{line: 1153, col: 29, offset: 36531},
											val:        "[^ \\t\\r\\n.()[]{}]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '(', ')', '[', ']', '{', '}'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1158, col: 5, offset: 36655},
						run: (*parser).callonSingleLineAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1158, col: 5, offset: 36655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 5, offset: 36655},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1158, col: 9, offset: 36659},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonSingleLineAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 65, offset: 36016},
						name: "SingleLineAttributeList",
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 1172, col: 1, offset: 36978},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 18, offset: 36995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1172, col: 18, offset: 36995},
						run: (*parser).callonAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1172, col: 18, offset: 36995},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1172, col: 18, offset: 36995},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1172, col: 22, offset: 36999},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 26, offset: 37003},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1172, col: 38, offset: 37015},
										expr: &ruleRefExpr{
											pos:  position{line: 1172, col: 38, offset: 37015},
											name: "attributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1172, col: 50, offset: 37027},
									expr: &litMatcher{
										pos:        position{line: 1172, col: 50, offset: 37027},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1172, col: 55, offset: 37032},
									expr: &seqExpr{
										pos: position{line: 1172, col: 56, offset: 37033},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1172, col: 56, offset: 37033},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1172, col: 60, offset: 37037},
												expr: &choiceExpr{
													pos: position{line: 3810, col: 20, offset: 129356},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 66, offset: 37043},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonAttributeList28,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 5, offset: 37249},
						run: (*parser).callonAttributeList30,
						expr: &seqExpr{
							pos: position{line: 1178, col: 5, offset: 37249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1178, col: 5, offset: 37249},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1178, col: 9, offset: 37253},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1178, col: 13, offset: 37257},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1178, col: 25, offset: 37269},
										expr: &ruleRefExpr{
											pos:  position{line: 1178, col: 25, offset: 37269},
											name: "attributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1178, col: 37, offset: 37281},
									expr: &seqExpr{
										pos: position{line: 1178, col: 38, offset: 37282},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1178, col: 38, offset: 37282},
												expr: &litMatcher{
													pos:        position{line: 1178, col: 38, offset: 37282},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1178, col: 43, offset: 37287},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1178, col: 49, offset: 37293},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonAttributeList49,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 1197, col: 1, offset: 37872},
			expr: &actionExpr{
				pos: position{line: 1197, col: 15, offset: 37886},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 15, offset: 37886},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 15, offset: 37886},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 22, offset: 37893},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 32, offset: 37903},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1197, col: 38, offset: 37909},
								expr: &seqExpr{
									pos: position{line: 1197, col: 39, offset: 37910},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1197, col: 39, offset: 37910},
											expr: &litMatcher{
												pos:        position{line: 1197, col: 39, offset: 37910},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1197, col: 44, offset: 37915},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1197, col: 48, offset: 37919},
											expr: &choiceExpr{
												pos: position{line: 3810, col: 20, offset: 129356},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																expr: &litMatcher{
																	pos:        position{line: 3807, col: 36, offset: 129279},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3807, col: 42, offset: 129285},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1197, col: 52, offset: 37923},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineAttributeList",
			pos:  position{line: 1208, col: 1, offset: 38193},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 28, offset: 38220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1208, col: 28, offset: 38220},
						run: (*parser).callonSingleLineAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1208, col: 28, offset: 38220},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1208, col: 28, offset: 38220},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1208, col: 32, offset: 38224},
									expr: &litMatcher{
										pos:        position{line: 1208, col: 32, offset: 38224},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 37, offset: 38229},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1208, col: 49, offset: 38241},
										expr: &ruleRefExpr{
											pos:  position{line: 1208, col: 49, offset: 38241},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1208, col: 71, offset: 38263},
									expr: &litMatcher{
										pos:        position{line: 1208, col: 71, offset: 38263},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1208, col: 76, offset: 38268},
									expr: &seqExpr{
										pos: position{line: 1208, col: 77, offset: 38269},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1208, col: 77, offset: 38269},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1208, col: 81, offset: 38273},
												expr: &litMatcher{
													pos:        position{line: 1208, col: 81, offset: 38273},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 88, offset: 38280},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonSingleLineAttributeList18,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 38486},
						run: (*parser).callonSingleLineAttributeList20,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 38486},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1214, col: 5, offset: 38486},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1214, col: 9, offset: 38490},
									expr: &litMatcher{
										pos:        position{line: 1214, col: 9, offset: 38490},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 14, offset: 38495},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1214, col: 26, offset: 38507},
										expr: &ruleRefExpr{
											pos:  position{line: 1214, col: 26, offset: 38507},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1214, col: 48, offset: 38529},
									expr: &seqExpr{
										pos: position{line: 1214, col: 49, offset: 38530},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1214, col: 49, offset: 38530},
												expr: &litMatcher{
													pos:        position{line: 1214, col: 49, offset: 38530},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1214, col: 54, offset: 38535},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 60, offset: 38541},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonSingleLineAttributeList34,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineAttributes",
			pos:  position{line: 1233, col: 1, offset: 39094},
			expr: &actionExpr{
				pos: position{line: 1233, col: 25, offset: 39118},
				run: (*parser).callonsingleLineAttributes1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 25, offset: 39118},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1233, col: 25, offset: 39118},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 32, offset: 39125},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 42, offset: 39135},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1233, col: 48, offset: 39141},
								expr: &seqExpr{
									pos: position{line: 1233, col: 49, offset: 39142},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1233, col: 49, offset: 39142},
											expr: &litMatcher{
												pos:        position{line: 1233, col: 49, offset: 39142},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1233, col: 54, offset: 39147},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1233, col: 58, offset: 39151},
											expr: &litMatcher{
												pos:        position{line: 1233, col: 58, offset: 39151},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1233, col: 63, offset: 39156},
											name: "SingleLineAttribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 1248, col: 1, offset: 39620},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 24, offset: 39643},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1248, col: 24, offset: 39643},
						name: "MixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1312, col: 19, offset: 41747},
						run: (*parser).callonAttribute3,
						expr: &seqExpr{
							pos: position{line: 1312, col: 19, offset: 41747},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1312, col: 19, offset: 41747},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1312, col: 24, offset: 41752},
									expr: &choiceExpr{
										pos: position{line: 1312, col: 26, offset: 41754},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1312, col: 31, offset: 41759},
												val:        "[,)]",
												chars:      []rune{',', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 62, offset: 39681},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SingleLineAttribute",
			pos:  position{line: 1249, col: 1, offset: 39697},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 24, offset: 39720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1249, col: 24, offset: 39720},
						name: "SingleLineMixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1312, col: 19, offset: 41747},
						run: (*parser).callonSingleLineAttribute3,
						expr: &seqExpr{
							pos: position{line: 1312, col: 19, offset: 41747},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1312, col: 19, offset: 41747},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1312, col: 24, offset: 41752},
									expr: &choiceExpr{
										pos: position{line: 1312, col: 26, offset: 41754},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1312, col: 31, offset: 41759},
												val:        "[,)]",
												chars:      []rune{',', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 72, offset: 39768},
						name: "SingleLineSimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 1256, col: 1, offset: 39868},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 30, offset: 39897},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 30, offset: 39897},
						name: "simpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1301, col: 27, offset: 41567},
						run: (*parser).callonSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1301, col: 27, offset: 41567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1301, col: 27, offset: 41567},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1251, col: 18, offset: 39812},
										expr: &seqExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1251, col: 19, offset: 39813},
													expr: &charClassMatcher{
														pos:        position{line: 1251, col: 20, offset: 39814},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2884, col: 26, offset: 99523},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 27, offset: 98431},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2884, col: 101, offset: 99598,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1301, col: 47, offset: 41587},
									expr: &seqExpr{
										pos: position{line: 1301, col: 49, offset: 41589},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1301, col: 49, offset: 41589},
												expr: &litMatcher{
													pos:        position{line: 1301, col: 49, offset: 41589},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1301, col: 54, offset: 41594},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineSimpleAttribute",
			pos:  position{line: 1257, col: 1, offset: 39943},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 30, offset: 39972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 30, offset: 39972},
						name: "singleLineSimpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1301, col: 27, offset: 41567},
						run: (*parser).callonSingleLineSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1301, col: 27, offset: 41567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1301, col: 27, offset: 41567},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1251, col: 18, offset: 39812},
										expr: &seqExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1251, col: 19, offset: 39813},
													expr: &charClassMatcher{
														pos:        position{line: 1251, col: 20, offset: 39814},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2884, col: 26, offset: 99523},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 27, offset: 98431},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2884, col: 101, offset: 99598,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1301, col: 47, offset: 41587},
									expr: &seqExpr{
										pos: position{line: 1301, col: 49, offset: 41589},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1301, col: 49, offset: 41589},
												expr: &litMatcher{
													pos:        position{line: 1301, col: 49, offset: 41589},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1301, col: 54, offset: 41594},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleValueAttribute",
			pos:  position{line: 1259, col: 1, offset: 40029},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 25, offset: 40053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1259, col: 25, offset: 40053},
						run: (*parser).callonsimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1259, col: 25, offset: 40053},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 25, offset: 40053},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1251, col: 18, offset: 39812},
										expr: &seqExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1251, col: 19, offset: 39813},
													expr: &charClassMatcher{
														pos:        position{line: 1251, col: 20, offset: 39814},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2884, col: 26, offset: 99523},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 27, offset: 98431},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2884, col: 101, offset: 99598,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1259, col: 45, offset: 40073},
									expr: &litMatcher{
										pos:        position{line: 1259, col: 45, offset: 40073},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 50, offset: 40078},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 65, offset: 40093},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1259, col: 69, offset: 40097},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 73, offset: 40101},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsimpleValueAttribute30,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 82, offset: 40110},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 88, offset: 40116},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1266, col: 5, offset: 40333},
						run: (*parser).callonsimpleValueAttribute38,
						expr: &seqExpr{
							pos: position{line: 1266, col: 5, offset: 40333},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1266, col: 5, offset: 40333},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1251, col: 18, offset: 39812},
										expr: &seqExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1251, col: 19, offset: 39813},
													expr: &charClassMatcher{
														pos:        position{line: 1251, col: 20, offset: 39814},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2884, col: 26, offset: 99523},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 27, offset: 98431},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2884, col: 101, offset: 99598,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1266, col: 25, offset: 40353},
									expr: &litMatcher{
										pos:        position{line: 1266, col: 25, offset: 40353},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 30, offset: 40358},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsimpleValueAttribute51,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 45, offset: 40373},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 49, offset: 40377},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsimpleValueAttribute59,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineSimpleValueAttribute",
			pos:  position{line: 1280, col: 1, offset: 40774},
			expr: &choiceExpr{
				pos: position{line: 1280, col: 35, offset: 40808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1280, col: 35, offset: 40808},
						run: (*parser).callonsingleLineSimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1280, col: 35, offset: 40808},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1280, col: 35, offset: 40808},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1251, col: 18, offset: 39812},
										expr: &seqExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1251, col: 19, offset: 39813},
													expr: &charClassMatcher{
														pos:        position{line: 1251, col: 20, offset: 39814},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2884, col: 26, offset: 99523},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 27, offset: 98431},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2884, col: 101, offset: 99598,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1280, col: 55, offset: 40828},
									expr: &litMatcher{
										pos:        position{line: 1280, col: 55, offset: 40828},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 60, offset: 40833},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsingleLineSimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1280, col: 75, offset: 40848},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1280, col: 79, offset: 40852},
									expr: &litMatcher{
										pos:        position{line: 1280, col: 79, offset: 40852},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 84, offset: 40857},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1280, col: 90, offset: 40863},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 41084},
						run: (*parser).callonsingleLineSimpleValueAttribute26,
						expr: &seqExpr{
							pos: position{line: 1287, col: 5, offset: 41084},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1287, col: 5, offset: 41084},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1251, col: 18, offset: 39812},
										expr: &seqExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1251, col: 19, offset: 39813},
													expr: &charClassMatcher{
														pos:        position{line: 1251, col: 20, offset: 39814},
														val:        "[()]",
														chars:      []rune{'(', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2884, col: 26, offset: 99523},
													expr: &charClassMatcher{
														pos:        position{line: 2860, col: 27, offset: 98431},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2884, col: 101, offset: 99598,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1287, col: 25, offset: 41104},
									expr: &litMatcher{
										pos:        position{line: 1287, col: 25, offset: 41104},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 30, offset: 41109},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsingleLineSimpleValueAttribute39,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 45, offset: 41124},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 49, offset: 41128},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsingleLineSimpleValueAttribute47,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCallAttribute",
			pos:  position{line: 1320, col: 1, offset: 41858},
			expr: &actionExpr{
				pos: position{line: 1320, col: 23, offset: 41880},
				run: (*parser).callonMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 23, offset: 41880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1320, col: 23, offset: 41880},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1251, col: 18, offset: 39812},
								expr: &seqExpr{
									pos: position{line: 1251, col: 19, offset: 39813},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											expr: &charClassMatcher{
												pos:        position{line: 1251, col: 20, offset: 39814},
												val:        "[()]",
												chars:      []rune{'(', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2884, col: 26, offset: 99523},
											expr: &charClassMatcher{
												pos:        position{line: 2860, col: 27, offset: 98431},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2884, col: 101, offset: 99598,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1320, col: 43, offset: 41900},
							expr: &litMatcher{
								pos:        position{line: 1320, col: 43, offset: 41900},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 48, offset: 41905},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1320, col: 63, offset: 41920},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1320, col: 67, offset: 41924},
							expr: &choiceExpr{
								pos: position{line: 3810, col: 20, offset: 129356},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3807, col: 36, offset: 129279},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												expr: &litMatcher{
													pos:        position{line: 3807, col: 36, offset: 129279},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3807, col: 42, offset: 129285},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 71, offset: 41928},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 77, offset: 41934},
								name: "mixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineMixinCallAttribute",
			pos:  position{line: 1330, col: 1, offset: 42216},
			expr: &actionExpr{
				pos: position{line: 1330, col: 33, offset: 42248},
				run: (*parser).callonSingleLineMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 33, offset: 42248},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1330, col: 33, offset: 42248},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1251, col: 18, offset: 39812},
								expr: &seqExpr{
									pos: position{line: 1251, col: 19, offset: 39813},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1251, col: 19, offset: 39813},
											expr: &charClassMatcher{
												pos:        position{line: 1251, col: 20, offset: 39814},
												val:        "[()]",
												chars:      []rune{'(', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2884, col: 26, offset: 99523},
											expr: &charClassMatcher{
												pos:        position{line: 2860, col: 27, offset: 98431},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2884, col: 101, offset: 99598,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1330, col: 53, offset: 42268},
							expr: &litMatcher{
								pos:        position{line: 1330, col: 53, offset: 42268},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 58, offset: 42273},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonSingleLineMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1330, col: 73, offset: 42288},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1330, col: 77, offset: 42292},
							expr: &litMatcher{
								pos:        position{line: 1330, col: 77, offset: 42292},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 82, offset: 42297},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 88, offset: 42303},
								name: "singleLineMixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeCall",
			pos:  position{line: 1341, col: 1, offset: 42596},
			expr: &actionExpr{
				pos: position{line: 1341, col: 27, offset: 42622},
				run: (*parser).callonmixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 27, offset: 42622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1341, col: 27, offset: 42622},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 31, offset: 42626},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 42, offset: 42637},
								expr: &seqExpr{
									pos: position{line: 1341, col: 43, offset: 42638},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 757, col: 10, offset: 22837},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 757, col: 10, offset: 22837},
													run: (*parser).callonmixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 757, col: 10, offset: 22837},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 759, col: 5, offset: 22931},
													run: (*parser).callonmixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 759, col: 5, offset: 22931},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 759, col: 13, offset: 22939},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 759, col: 13, offset: 22939},
																			expr: &litMatcher{
																				pos:        position{line: 759, col: 13, offset: 22939},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 759, col: 18, offset: 22944},
																			expr: &choiceExpr{
																				pos: position{line: 759, col: 19, offset: 22945},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 759, col: 19, offset: 22945},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 759, col: 19, offset: 22945},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 759, col: 28, offset: 22954},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 759, col: 38, offset: 22964},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 759, col: 49, offset: 22975},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonmixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1341, col: 49, offset: 42644},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 55, offset: 42650},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 771, col: 14, offset: 23392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 771, col: 14, offset: 23392},
										run: (*parser).callonmixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 771, col: 14, offset: 23392},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 757, col: 10, offset: 22837},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														run: (*parser).callonmixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 757, col: 10, offset: 22837},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														run: (*parser).callonmixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 22931},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 22931},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 759, col: 13, offset: 22939},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				expr: &litMatcher{
																					pos:        position{line: 759, col: 13, offset: 22939},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 759, col: 18, offset: 22944},
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 19, offset: 22945},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 759, col: 19, offset: 22945},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 28, offset: 22954},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 759, col: 38, offset: 22964},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 49, offset: 22975},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonmixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 773, col: 5, offset: 23434},
										run: (*parser).callonmixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 773, col: 5, offset: 23434},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 773, col: 5, offset: 23434},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonmixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 773, col: 14, offset: 23443},
													expr: &choiceExpr{
														pos: position{line: 773, col: 16, offset: 23445},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 773, col: 22, offset: 23451},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 784, col: 5, offset: 23783},
										run: (*parser).callonmixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 784, col: 5, offset: 23783},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 784, col: 5, offset: 23783},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 784, col: 12, offset: 23790},
														expr: &charClassMatcher{
															pos:        position{line: 784, col: 12, offset: 23790},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 784, col: 29, offset: 23807},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonmixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 71, offset: 42666},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 77, offset: 42672},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 77, offset: 42672},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 91, offset: 42686},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1341, col: 98, offset: 42693},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 98, offset: 42693},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinCallAttributeCall",
			pos:  position{line: 1361, col: 1, offset: 43260},
			expr: &actionExpr{
				pos: position{line: 1361, col: 37, offset: 43296},
				run: (*parser).callonsingleLineMixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 37, offset: 43296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1361, col: 37, offset: 43296},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 41, offset: 43300},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1361, col: 52, offset: 43311},
								expr: &seqExpr{
									pos: position{line: 1361, col: 53, offset: 43312},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 757, col: 10, offset: 22837},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 757, col: 10, offset: 22837},
													run: (*parser).callonsingleLineMixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 757, col: 10, offset: 22837},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 759, col: 5, offset: 22931},
													run: (*parser).callonsingleLineMixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 759, col: 5, offset: 22931},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 759, col: 13, offset: 22939},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 759, col: 13, offset: 22939},
																			expr: &litMatcher{
																				pos:        position{line: 759, col: 13, offset: 22939},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 759, col: 18, offset: 22944},
																			expr: &choiceExpr{
																				pos: position{line: 759, col: 19, offset: 22945},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 759, col: 19, offset: 22945},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 759, col: 19, offset: 22945},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 759, col: 28, offset: 22954},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 759, col: 38, offset: 22964},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 759, col: 49, offset: 22975},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonsingleLineMixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1361, col: 59, offset: 43318},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 65, offset: 43324},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 771, col: 14, offset: 23392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 771, col: 14, offset: 23392},
										run: (*parser).callonsingleLineMixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 771, col: 14, offset: 23392},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 757, col: 10, offset: 22837},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														run: (*parser).callonsingleLineMixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 757, col: 10, offset: 22837},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														run: (*parser).callonsingleLineMixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 22931},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 22931},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 759, col: 13, offset: 22939},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				expr: &litMatcher{
																					pos:        position{line: 759, col: 13, offset: 22939},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 759, col: 18, offset: 22944},
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 19, offset: 22945},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 759, col: 19, offset: 22945},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 28, offset: 22954},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 759, col: 38, offset: 22964},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 49, offset: 22975},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonsingleLineMixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 773, col: 5, offset: 23434},
										run: (*parser).callonsingleLineMixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 773, col: 5, offset: 23434},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 773, col: 5, offset: 23434},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonsingleLineMixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 773, col: 14, offset: 23443},
													expr: &choiceExpr{
														pos: position{line: 773, col: 16, offset: 23445},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 773, col: 22, offset: 23451},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 784, col: 5, offset: 23783},
										run: (*parser).callonsingleLineMixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 784, col: 5, offset: 23783},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 784, col: 5, offset: 23783},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 784, col: 12, offset: 23790},
														expr: &charClassMatcher{
															pos:        position{line: 784, col: 12, offset: 23790},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 784, col: 29, offset: 23807},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonsingleLineMixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 81, offset: 43340},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1361, col: 87, offset: 43346},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 87, offset: 43346},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 111, offset: 43370},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1361, col: 118, offset: 43377},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 118, offset: 43377},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeValue",
			pos:  position{line: 1382, col: 1, offset: 43945},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 28, offset: 43972},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3719, col: 27, offset: 126212},
						run: (*parser).callonmixinCallAttributeValue2,
						expr: &seqExpr{
							pos: position{line: 3719, col: 27, offset: 126212},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3719, col: 27, offset: 126212},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3822, col: 14, offset: 129732},
										run: (*parser).callonmixinCallAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 3822, col: 14, offset: 129732},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3719, col: 50, offset: 126235},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3719, col: 56, offset: 126241},
										expr: &charClassMatcher{
											pos:        position{line: 3719, col: 56, offset: 126241},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3719, col: 67, offset: 126252},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 14, offset: 129772},
										run: (*parser).callonmixinCallAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 14, offset: 129772},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3725, col: 5, offset: 126463},
						run: (*parser).callonmixinCallAttributeValue13,
						expr: &seqExpr{
							pos: position{line: 3725, col: 5, offset: 126463},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3725, col: 5, offset: 126463},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3822, col: 14, offset: 129732},
										run: (*parser).callonmixinCallAttributeValue16,
										expr: &litMatcher{
											pos:        position{line: 3822, col: 14, offset: 129732},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 28, offset: 126486},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3725, col: 34, offset: 126492},
										expr: &charClassMatcher{
											pos:        position{line: 3725, col: 34, offset: 126492},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 53, offset: 43997},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1395, col: 1, offset: 44282},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 15, offset: 44296},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1395, col: 15, offset: 44296},
						run: (*parser).callonExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1395, col: 15, offset: 44296},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1395, col: 22, offset: 44303},
								name: "ChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 5, offset: 44424},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "SingleLineExpression",
			pos:  position{line: 1399, col: 1, offset: 44438},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 25, offset: 44462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1399, col: 25, offset: 44462},
						run: (*parser).callonSingleLineExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1399, col: 25, offset: 44462},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1399, col: 32, offset: 44469},
								name: "SingleLineChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 5, offset: 44600},
						name: "SingleLineGoExpression",
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1411, col: 1, offset: 45008},
			expr: &actionExpr{
				pos: position{line: 1411, col: 17, offset: 45024},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1411, col: 17, offset: 45024},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1411, col: 24, offset: 45031},
						expr: &choiceExpr{
							pos: position{line: 1412, col: 6, offset: 45038},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1412, col: 6, offset: 45038},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1412, col: 20, offset: 45052},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1412, col: 39, offset: 45071},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callonGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callonGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callonGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callonGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callonGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callonGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callonGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callonGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callonGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callonGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callonGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callonGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callonGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callonGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callonGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callonGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1413, col: 6, offset: 45109},
									run: (*parser).callonGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1413, col: 6, offset: 45109},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1413, col: 6, offset: 45109},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1413, col: 15, offset: 45118},
												expr: &choiceExpr{
													pos: position{line: 1403, col: 25, offset: 44648},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1403, col: 25, offset: 44648},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1403, col: 40, offset: 44663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1403, col: 40, offset: 44663},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1403, col: 44, offset: 44667},
																	expr: &litMatcher{
																		pos:        position{line: 1403, col: 45, offset: 44668},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3795, col: 12, offset: 128924},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1413, col: 45, offset: 45148},
												expr: &seqExpr{
													pos: position{line: 1413, col: 46, offset: 45149},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1413, col: 46, offset: 45149},
															expr: &choiceExpr{
																pos: position{line: 1403, col: 25, offset: 44648},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1403, col: 25, offset: 44648},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1403, col: 40, offset: 44663},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1403, col: 40, offset: 44663},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1403, col: 44, offset: 44667},
																				expr: &litMatcher{
																					pos:        position{line: 1403, col: 45, offset: 44668},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1413, col: 68, offset: 45171},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1413, col: 73, offset: 45176},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParenExpr",
			pos:  position{line: 1420, col: 1, offset: 45341},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 16, offset: 45356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1420, col: 16, offset: 45356},
						run: (*parser).callongoParenExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1420, col: 16, offset: 45356},
							label: "exprI",
							expr: &choiceExpr{
								pos: position{line: 1420, col: 23, offset: 45363},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1420, col: 23, offset: 45363},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1420, col: 23, offset: 45363},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 27, offset: 45367},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 27, offset: 45367},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3797, col: 8, offset: 128940},
												run: (*parser).callongoParenExpr9,
												expr: &choiceExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															expr: &anyMatcher{
																line: 3797, col: 10, offset: 128942,
															},
														},
														&notExpr{
															pos: position{line: 3797, col: 14, offset: 128946},
															expr: &anyMatcher{
																line: 3797, col: 15, offset: 128947,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1420, col: 48, offset: 45388},
												val:        ")",
												ignoreCase: false,
												want:       "\")\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1420, col: 54, offset: 45394},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1420, col: 54, offset: 45394},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 58, offset: 45398},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 58, offset: 45398},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3797, col: 8, offset: 128940},
												run: (*parser).callongoParenExpr20,
												expr: &choiceExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															expr: &anyMatcher{
																line: 3797, col: 10, offset: 128942,
															},
														},
														&notExpr{
															pos: position{line: 3797, col: 14, offset: 128946},
															expr: &anyMatcher{
																line: 3797, col: 15, offset: 128947,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1420, col: 79, offset: 45419},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1420, col: 85, offset: 45425},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1420, col: 85, offset: 45425},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 89, offset: 45429},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 89, offset: 45429},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3797, col: 8, offset: 128940},
												run: (*parser).callongoParenExpr31,
												expr: &choiceExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															expr: &anyMatcher{
																line: 3797, col: 10, offset: 128942,
															},
														},
														&notExpr{
															pos: position{line: 3797, col: 14, offset: 128946},
															expr: &anyMatcher{
																line: 3797, col: 15, offset: 128947,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1420, col: 110, offset: 45450},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1443, col: 5, offset: 46133},
						run: (*parser).callongoParenExpr38,
						expr: &seqExpr{
							pos: position{line: 1443, col: 5, offset: 46133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1443, col: 5, offset: 46133},
									label: "parenI",
									expr: &charClassMatcher{
										pos:        position{line: 1443, col: 12, offset: 46140},
										val:        "[([{]",
										chars:      []rune{'(', '[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 18, offset: 46146},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callongoParenExpr43,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 32, offset: 46160},
									label: "exprI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1443, col: 38, offset: 46166},
										expr: &ruleRefExpr{
											pos:  position{line: 1443, col: 38, offset: 46166},
											name: "goSubExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goSubExpression",
			pos:  position{line: 1479, col: 1, offset: 47230},
			expr: &actionExpr{
				pos: position{line: 1479, col: 20, offset: 47249},
				run: (*parser).callongoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1479, col: 20, offset: 47249},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1479, col: 27, offset: 47256},
						expr: &choiceExpr{
							pos: position{line: 1480, col: 5, offset: 47262},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1480, col: 5, offset: 47262},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1480, col: 19, offset: 47276},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1480, col: 38, offset: 47295},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callongoSubExpression8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callongoSubExpression11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callongoSubExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callongoSubExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callongoSubExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callongoSubExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callongoSubExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callongoSubExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callongoSubExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callongoSubExpression116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callongoSubExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callongoSubExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callongoSubExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callongoSubExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callongoSubExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callongoSubExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callongoSubExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callongoSubExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1481, col: 5, offset: 47332},
									run: (*parser).callongoSubExpression224,
									expr: &seqExpr{
										pos: position{line: 1481, col: 5, offset: 47332},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 5, offset: 47332},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callongoSubExpression227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1481, col: 14, offset: 47341},
												val:        "[^)}]]",
												chars:      []rune{')', '}', ']'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1481, col: 22, offset: 47349},
												expr: &charClassMatcher{
													pos:        position{line: 1481, col: 22, offset: 47349},
													val:        "[^\\\"`?([{}])]",
													chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "multiLineGoExpression",
			pos:  position{line: 1488, col: 1, offset: 47517},
			expr: &actionExpr{
				pos: position{line: 1488, col: 26, offset: 47542},
				run: (*parser).callonmultiLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1488, col: 26, offset: 47542},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1488, col: 33, offset: 47549},
						expr: &choiceExpr{
							pos: position{line: 1489, col: 5, offset: 47555},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1489, col: 5, offset: 47555},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1489, col: 19, offset: 47569},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1489, col: 38, offset: 47588},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callonmultiLineGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonmultiLineGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callonmultiLineGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callonmultiLineGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callonmultiLineGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callonmultiLineGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callonmultiLineGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callonmultiLineGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callonmultiLineGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callonmultiLineGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callonmultiLineGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callonmultiLineGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callonmultiLineGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callonmultiLineGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callonmultiLineGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callonmultiLineGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callonmultiLineGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonmultiLineGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1490, col: 5, offset: 47625},
									run: (*parser).callonmultiLineGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1490, col: 5, offset: 47625},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1490, col: 5, offset: 47625},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonmultiLineGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1490, col: 14, offset: 47634},
												expr: &choiceExpr{
													pos: position{line: 1403, col: 25, offset: 44648},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1403, col: 25, offset: 44648},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1403, col: 40, offset: 44663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1403, col: 40, offset: 44663},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1403, col: 44, offset: 44667},
																	expr: &litMatcher{
																		pos:        position{line: 1403, col: 45, offset: 44668},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 1490, col: 36, offset: 47656,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1490, col: 38, offset: 47658},
												expr: &seqExpr{
													pos: position{line: 1490, col: 39, offset: 47659},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1490, col: 39, offset: 47659},
															expr: &choiceExpr{
																pos: position{line: 1403, col: 25, offset: 44648},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1403, col: 25, offset: 44648},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1403, col: 40, offset: 44663},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1403, col: 40, offset: 44663},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1403, col: 44, offset: 44667},
																				expr: &litMatcher{
																					pos:        position{line: 1403, col: 45, offset: 44668},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1490, col: 61, offset: 47681},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineGoExpression",
			pos:  position{line: 1497, col: 1, offset: 47846},
			expr: &actionExpr{
				pos: position{line: 1497, col: 27, offset: 47872},
				run: (*parser).callonSingleLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1497, col: 27, offset: 47872},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1497, col: 34, offset: 47879},
						expr: &choiceExpr{
							pos: position{line: 1498, col: 5, offset: 47885},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1498, col: 5, offset: 47885},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1498, col: 29, offset: 47909},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1498, col: 48, offset: 47928},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callonSingleLineGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonSingleLineGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callonSingleLineGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callonSingleLineGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callonSingleLineGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callonSingleLineGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callonSingleLineGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callonSingleLineGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callonSingleLineGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callonSingleLineGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callonSingleLineGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callonSingleLineGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callonSingleLineGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callonSingleLineGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callonSingleLineGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callonSingleLineGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callonSingleLineGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonSingleLineGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1499, col: 5, offset: 47975},
									run: (*parser).callonSingleLineGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1499, col: 5, offset: 47975},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1499, col: 5, offset: 47975},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonSingleLineGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1499, col: 14, offset: 47984},
												expr: &choiceExpr{
													pos: position{line: 1403, col: 25, offset: 44648},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1403, col: 25, offset: 44648},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1403, col: 40, offset: 44663},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1403, col: 40, offset: 44663},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1403, col: 44, offset: 44667},
																	expr: &litMatcher{
																		pos:        position{line: 1403, col: 45, offset: 44668},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3795, col: 12, offset: 128924},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1499, col: 44, offset: 48014},
												expr: &seqExpr{
													pos: position{line: 1499, col: 45, offset: 48015},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1499, col: 45, offset: 48015},
															expr: &choiceExpr{
																pos: position{line: 1403, col: 25, offset: 44648},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1403, col: 25, offset: 44648},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1403, col: 40, offset: 44663},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1403, col: 40, offset: 44663},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1403, col: 44, offset: 44667},
																				expr: &litMatcher{
																					pos:        position{line: 1403, col: 45, offset: 44668},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1499, col: 67, offset: 48037},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1499, col: 72, offset: 48042},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoParenExpr",
			pos:  position{line: 1506, col: 1, offset: 48207},
			expr: &choiceExpr{
				pos: position{line: 1506, col: 26, offset: 48232},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1506, col: 26, offset: 48232},
						run: (*parser).callonsingleLineGoParenExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1506, col: 26, offset: 48232},
							label: "exprI",
							expr: &choiceExpr{
								pos: position{line: 1506, col: 33, offset: 48239},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1506, col: 33, offset: 48239},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1506, col: 33, offset: 48239},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1506, col: 37, offset: 48243},
												expr: &ruleRefExpr{
													pos:  position{line: 1506, col: 37, offset: 48243},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3797, col: 8, offset: 128940},
												run: (*parser).callonsingleLineGoParenExpr9,
												expr: &choiceExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															expr: &anyMatcher{
																line: 3797, col: 10, offset: 128942,
															},
														},
														&notExpr{
															pos: position{line: 3797, col: 14, offset: 128946},
															expr: &anyMatcher{
																line: 3797, col: 15, offset: 128947,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1506, col: 68, offset: 48274},
												val:        ")",
												ignoreCase: false,
												want:       "\")\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1506, col: 74, offset: 48280},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1506, col: 74, offset: 48280},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1506, col: 78, offset: 48284},
												expr: &ruleRefExpr{
													pos:  position{line: 1506, col: 78, offset: 48284},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3797, col: 8, offset: 128940},
												run: (*parser).callonsingleLineGoParenExpr20,
												expr: &choiceExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															expr: &anyMatcher{
																line: 3797, col: 10, offset: 128942,
															},
														},
														&notExpr{
															pos: position{line: 3797, col: 14, offset: 128946},
															expr: &anyMatcher{
																line: 3797, col: 15, offset: 128947,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1506, col: 109, offset: 48315},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1506, col: 115, offset: 48321},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1506, col: 115, offset: 48321},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1506, col: 119, offset: 48325},
												expr: &ruleRefExpr{
													pos:  position{line: 1506, col: 119, offset: 48325},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3797, col: 8, offset: 128940},
												run: (*parser).callonsingleLineGoParenExpr31,
												expr: &choiceExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															expr: &anyMatcher{
																line: 3797, col: 10, offset: 128942,
															},
														},
														&notExpr{
															pos: position{line: 3797, col: 14, offset: 128946},
															expr: &anyMatcher{
																line: 3797, col: 15, offset: 128947,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1506, col: 150, offset: 48356},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1529, col: 5, offset: 49005},
						run: (*parser).callonsingleLineGoParenExpr38,
						expr: &seqExpr{
							pos: position{line: 1529, col: 5, offset: 49005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1529, col: 5, offset: 49005},
									label: "parenI",
									expr: &charClassMatcher{
										pos:        position{line: 1529, col: 12, offset: 49012},
										val:        "[([{]",
										chars:      []rune{'(', '[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1529, col: 18, offset: 49018},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsingleLineGoParenExpr43,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1529, col: 32, offset: 49032},
									label: "exprI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1529, col: 38, offset: 49038},
										expr: &ruleRefExpr{
											pos:  position{line: 1529, col: 38, offset: 49038},
											name: "singleLineGoSubExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoSubExpression",
			pos:  position{line: 1560, col: 1, offset: 49934},
			expr: &actionExpr{
				pos: position{line: 1560, col: 30, offset: 49963},
				run: (*parser).callonsingleLineGoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1560, col: 30, offset: 49963},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1560, col: 37, offset: 49970},
						expr: &choiceExpr{
							pos: position{line: 1561, col: 5, offset: 49976},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1561, col: 5, offset: 49976},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1561, col: 29, offset: 50000},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1561, col: 48, offset: 50019},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callonsingleLineGoSubExpression8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonsingleLineGoSubExpression11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callonsingleLineGoSubExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callonsingleLineGoSubExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callonsingleLineGoSubExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callonsingleLineGoSubExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callonsingleLineGoSubExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callonsingleLineGoSubExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callonsingleLineGoSubExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callonsingleLineGoSubExpression116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callonsingleLineGoSubExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callonsingleLineGoSubExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callonsingleLineGoSubExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callonsingleLineGoSubExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callonsingleLineGoSubExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callonsingleLineGoSubExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callonsingleLineGoSubExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonsingleLineGoSubExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1562, col: 5, offset: 50066},
									run: (*parser).callonsingleLineGoSubExpression224,
									expr: &seqExpr{
										pos: position{line: 1562, col: 5, offset: 50066},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1562, col: 5, offset: 50066},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonsingleLineGoSubExpression227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1562, col: 14, offset: 50075},
												expr: &seqExpr{
													pos: position{line: 3794, col: 12, offset: 128891},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3794, col: 12, offset: 128891},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3794, col: 16, offset: 128895},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			expr: &litMatcher{
																				pos:        position{line: 3794, col: 16, offset: 128895},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3794, col: 22, offset: 128901},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3793, col: 12, offset: 128877},
																	expr: &anyMatcher{
																		line: 3793, col: 13, offset: 128878,
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1562, col: 19, offset: 50080},
												val:        "[^)}]]",
												chars:      []rune{')', '}', ']'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1562, col: 27, offset: 50088},
												expr: &seqExpr{
													pos: position{line: 1562, col: 28, offset: 50089},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1562, col: 28, offset: 50089},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1562, col: 33, offset: 50094},
															val:        "[^\\\"`?([{}])]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfExpression",
			pos:  position{line: 1575, col: 1, offset: 50496},
			expr: &choiceExpr{
				pos: position{line: 1575, col: 17, offset: 50512},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1575, col: 17, offset: 50512},
						run: (*parser).callonIfExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1575, col: 17, offset: 50512},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 24, offset: 50519},
								name: "ChainExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1592, col: 5, offset: 51124},
						run: (*parser).callonIfExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1592, col: 5, offset: 51124},
							label: "exprsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1592, col: 12, offset: 51131},
								expr: &choiceExpr{
									pos: position{line: 1593, col: 5, offset: 51137},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1593, col: 5, offset: 51137},
											name: "singleLineGoParenExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 29, offset: 51161},
											name: "StringExpression",
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 48, offset: 51180},
											name: "TernaryExpression",
										},
										&actionExpr{
											pos: position{line: 1475, col: 15, offset: 47112},
											run: (*parser).callonIfExpression12,
											expr: &seqExpr{
												pos: position{line: 1475, col: 15, offset: 47112},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1475, col: 15, offset: 47112},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3797, col: 8, offset: 128940},
															run: (*parser).callonIfExpression15,
															expr: &choiceExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		expr: &anyMatcher{
																			line: 3797, col: 10, offset: 128942,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3797, col: 14, offset: 128946},
																		expr: &anyMatcher{
																			line: 3797, col: 15, offset: 128947,
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2455, col: 14, offset: 82888},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2455, col: 14, offset: 82888},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&choiceExpr{
																		pos: position{line: 2455, col: 20, offset: 82894},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2503, col: 19, offset: 85039},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2503, col: 19, offset: 85039},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2504, col: 5, offset: 85098},
																				run: (*parser).callonIfExpression31,
																				expr: &seqExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2504, col: 5, offset: 85098},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 14, offset: 85107},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 26, offset: 85119},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 38, offset: 85131},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 50, offset: 85143},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2533, col: 16, offset: 86279},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2533, col: 16, offset: 86279},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2534, col: 5, offset: 86382},
																				run: (*parser).callonIfExpression52,
																				expr: &seqExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2534, col: 5, offset: 86382},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 14, offset: 86391},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 26, offset: 86403},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 38, offset: 86415},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 50, offset: 86427},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 62, offset: 86439},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 74, offset: 86451},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 86, offset: 86463},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 98, offset: 86475},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2568, col: 24, offset: 87860},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2568, col: 24, offset: 87860},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2568, col: 29, offset: 87865},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2482, col: 75, offset: 84151},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2484, col: 24, offset: 84297},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2484, col: 24, offset: 84297},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2401, col: 19, offset: 81486},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2401, col: 19, offset: 81486},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2401, col: 19, offset: 81486},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2485, col: 24, offset: 84364},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2485, col: 24, offset: 84364},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2486, col: 5, offset: 84401},
																				run: (*parser).callonIfExpression84,
																				expr: &seqExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2486, col: 5, offset: 84401},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2486, col: 14, offset: 84410},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2486, col: 26, offset: 84422},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2569, col: 24, offset: 87943},
																				run: (*parser).callonIfExpression91,
																				expr: &seqExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2569, col: 24, offset: 87943},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2593, col: 5, offset: 88959},
																				run: (*parser).callonIfExpression102,
																				expr: &seqExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2593, col: 5, offset: 88959},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2614, col: 5, offset: 89800},
																				run: (*parser).callonIfExpression109,
																				expr: &seqExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2614, col: 5, offset: 89800},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2632, col: 5, offset: 90485},
																				run: (*parser).callonIfExpression114,
																				expr: &seqExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2632, col: 5, offset: 90485},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2632, col: 10, offset: 90490},
																							expr: &charClassMatcher{
																								pos:        position{line: 3795, col: 12, offset: 128924},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2455, col: 76, offset: 82950},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2456, col: 5, offset: 82961},
																run: (*parser).callonIfExpression120,
																expr: &seqExpr{
																	pos: position{line: 2456, col: 5, offset: 82961},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2456, col: 5, offset: 82961},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2456, col: 10, offset: 82966},
																			label: "valsI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2456, col: 16, offset: 82972},
																				expr: &choiceExpr{
																					pos: position{line: 2456, col: 17, offset: 82973},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2503, col: 19, offset: 85039},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2503, col: 19, offset: 85039},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2504, col: 5, offset: 85098},
																							run: (*parser).callonIfExpression132,
																							expr: &seqExpr{
																								pos: position{line: 2504, col: 5, offset: 85098},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2504, col: 5, offset: 85098},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 14, offset: 85107},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 26, offset: 85119},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 38, offset: 85131},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 50, offset: 85143},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2533, col: 16, offset: 86279},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2533, col: 16, offset: 86279},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2534, col: 5, offset: 86382},
																							run: (*parser).callonIfExpression153,
																							expr: &seqExpr{
																								pos: position{line: 2534, col: 5, offset: 86382},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2534, col: 5, offset: 86382},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 14, offset: 86391},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 26, offset: 86403},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 38, offset: 86415},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 50, offset: 86427},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 62, offset: 86439},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 74, offset: 86451},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 86, offset: 86463},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 98, offset: 86475},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2568, col: 24, offset: 87860},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2568, col: 24, offset: 87860},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2568, col: 29, offset: 87865},
																									val:        "[abfnrtv\\\\\\]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2482, col: 75, offset: 84151},
																							val:        "[^\\\\\\\\n]",
																							chars:      []rune{'\'', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&seqExpr{
																							pos: position{line: 2484, col: 24, offset: 84297},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2484, col: 24, offset: 84297},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2401, col: 19, offset: 81486},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2401, col: 19, offset: 81486},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2401, col: 19, offset: 81486},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2485, col: 24, offset: 84364},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2485, col: 24, offset: 84364},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2486, col: 5, offset: 84401},
																							run: (*parser).callonIfExpression185,
																							expr: &seqExpr{
																								pos: position{line: 2486, col: 5, offset: 84401},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2486, col: 5, offset: 84401},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2486, col: 14, offset: 84410},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2486, col: 26, offset: 84422},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2569, col: 24, offset: 87943},
																							run: (*parser).callonIfExpression192,
																							expr: &seqExpr{
																								pos: position{line: 2569, col: 24, offset: 87943},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2569, col: 24, offset: 87943},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2593, col: 5, offset: 88959},
																							run: (*parser).callonIfExpression203,
																							expr: &seqExpr{
																								pos: position{line: 2593, col: 5, offset: 88959},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2593, col: 5, offset: 88959},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2614, col: 5, offset: 89800},
																							run: (*parser).callonIfExpression210,
																							expr: &seqExpr{
																								pos: position{line: 2614, col: 5, offset: 89800},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2614, col: 5, offset: 89800},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2632, col: 5, offset: 90485},
																							run: (*parser).callonIfExpression215,
																							expr: &seqExpr{
																								pos: position{line: 2632, col: 5, offset: 90485},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2632, col: 5, offset: 90485},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2632, col: 10, offset: 90490},
																										expr: &charClassMatcher{
																											pos:        position{line: 3795, col: 12, offset: 128924},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2456, col: 74, offset: 83030},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2456, col: 79, offset: 83035},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonIfExpression222,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1594, col: 5, offset: 51217},
											run: (*parser).callonIfExpression228,
											expr: &seqExpr{
												pos: position{line: 1594, col: 5, offset: 51217},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1594, col: 5, offset: 51217},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3797, col: 8, offset: 128940},
															run: (*parser).callonIfExpression231,
															expr: &choiceExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		expr: &anyMatcher{
																			line: 3797, col: 10, offset: 128942,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3797, col: 14, offset: 128946},
																		expr: &anyMatcher{
																			line: 3797, col: 15, offset: 128947,
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1594, col: 14, offset: 51226},
														expr: &choiceExpr{
															pos: position{line: 1573, col: 27, offset: 50477},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1573, col: 27, offset: 50477},
																	val:        "[)}]]",
																	chars:      []rune{')', '}', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1573, col: 36, offset: 50486},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1573, col: 36, offset: 50486},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1573, col: 40, offset: 50490},
																			expr: &litMatcher{
																				pos:        position{line: 1573, col: 41, offset: 50491},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3795, col: 12, offset: 128924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1594, col: 46, offset: 51258},
														expr: &seqExpr{
															pos: position{line: 1594, col: 47, offset: 51259},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1594, col: 47, offset: 51259},
																	expr: &choiceExpr{
																		pos: position{line: 1573, col: 27, offset: 50477},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 1573, col: 27, offset: 50477},
																				val:        "[)}]]",
																				chars:      []rune{')', '}', ']'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 1573, col: 36, offset: 50486},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1573, col: 36, offset: 50486},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&notExpr{
																						pos: position{line: 1573, col: 40, offset: 50490},
																						expr: &litMatcher{
																							pos:        position{line: 1573, col: 41, offset: 50491},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1594, col: 71, offset: 51283},
																	expr: &seqExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3794, col: 12, offset: 128891},
																				expr: &charClassMatcher{
																					pos:        position{line: 3806, col: 36, offset: 129238},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								expr: &litMatcher{
																									pos:        position{line: 3794, col: 16, offset: 128895},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3794, col: 22, offset: 128901},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3793, col: 12, offset: 128877},
																						expr: &anyMatcher{
																							line: 3793, col: 13, offset: 128878,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1594, col: 76, offset: 51288},
																	val:        "[^\\\"`?([{]",
																	chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineIfExpression",
			pos:  position{line: 1601, col: 1, offset: 51453},
			expr: &choiceExpr{
				pos: position{line: 1601, col: 27, offset: 51479},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1601, col: 27, offset: 51479},
						run: (*parser).callonSingleLineIfExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1601, col: 27, offset: 51479},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 34, offset: 51486},
								name: "SingleLineChainExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1618, col: 5, offset: 52101},
						run: (*parser).callonSingleLineIfExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1618, col: 5, offset: 52101},
							label: "exprsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1618, col: 12, offset: 52108},
								expr: &choiceExpr{
									pos: position{line: 1619, col: 5, offset: 52114},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1619, col: 5, offset: 52114},
											name: "goParenExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 19, offset: 52128},
											name: "StringExpression",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 38, offset: 52147},
											name: "SingleLineTernaryExpression",
										},
										&actionExpr{
											pos: position{line: 1475, col: 15, offset: 47112},
											run: (*parser).callonSingleLineIfExpression12,
											expr: &seqExpr{
												pos: position{line: 1475, col: 15, offset: 47112},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1475, col: 15, offset: 47112},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3797, col: 8, offset: 128940},
															run: (*parser).callonSingleLineIfExpression15,
															expr: &choiceExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		expr: &anyMatcher{
																			line: 3797, col: 10, offset: 128942,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3797, col: 14, offset: 128946},
																		expr: &anyMatcher{
																			line: 3797, col: 15, offset: 128947,
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2455, col: 14, offset: 82888},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2455, col: 14, offset: 82888},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&choiceExpr{
																		pos: position{line: 2455, col: 20, offset: 82894},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2503, col: 19, offset: 85039},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2503, col: 19, offset: 85039},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2504, col: 5, offset: 85098},
																				run: (*parser).callonSingleLineIfExpression31,
																				expr: &seqExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2504, col: 5, offset: 85098},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 14, offset: 85107},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 26, offset: 85119},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 38, offset: 85131},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2504, col: 50, offset: 85143},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2533, col: 16, offset: 86279},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2533, col: 16, offset: 86279},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2534, col: 5, offset: 86382},
																				run: (*parser).callonSingleLineIfExpression52,
																				expr: &seqExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2534, col: 5, offset: 86382},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 14, offset: 86391},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 26, offset: 86403},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 38, offset: 86415},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 50, offset: 86427},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 62, offset: 86439},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 74, offset: 86451},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 86, offset: 86463},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2534, col: 98, offset: 86475},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2568, col: 24, offset: 87860},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2568, col: 24, offset: 87860},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2568, col: 29, offset: 87865},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2482, col: 75, offset: 84151},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2484, col: 24, offset: 84297},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2484, col: 24, offset: 84297},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2401, col: 19, offset: 81486},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2401, col: 19, offset: 81486},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2401, col: 19, offset: 81486},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2485, col: 24, offset: 84364},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2485, col: 24, offset: 84364},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2486, col: 5, offset: 84401},
																				run: (*parser).callonSingleLineIfExpression84,
																				expr: &seqExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2486, col: 5, offset: 84401},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2486, col: 14, offset: 84410},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2486, col: 26, offset: 84422},
																							expr: &charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2569, col: 24, offset: 87943},
																				run: (*parser).callonSingleLineIfExpression91,
																				expr: &seqExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2569, col: 24, offset: 87943},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2593, col: 5, offset: 88959},
																				run: (*parser).callonSingleLineIfExpression102,
																				expr: &seqExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2593, col: 5, offset: 88959},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2614, col: 5, offset: 89800},
																				run: (*parser).callonSingleLineIfExpression109,
																				expr: &seqExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2614, col: 5, offset: 89800},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2632, col: 5, offset: 90485},
																				run: (*parser).callonSingleLineIfExpression114,
																				expr: &seqExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2632, col: 5, offset: 90485},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2632, col: 10, offset: 90490},
																							expr: &charClassMatcher{
																								pos:        position{line: 3795, col: 12, offset: 128924},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2455, col: 76, offset: 82950},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2456, col: 5, offset: 82961},
																run: (*parser).callonSingleLineIfExpression120,
																expr: &seqExpr{
																	pos: position{line: 2456, col: 5, offset: 82961},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2456, col: 5, offset: 82961},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2456, col: 10, offset: 82966},
																			label: "valsI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2456, col: 16, offset: 82972},
																				expr: &choiceExpr{
																					pos: position{line: 2456, col: 17, offset: 82973},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2503, col: 19, offset: 85039},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2503, col: 19, offset: 85039},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2504, col: 5, offset: 85098},
																							run: (*parser).callonSingleLineIfExpression132,
																							expr: &seqExpr{
																								pos: position{line: 2504, col: 5, offset: 85098},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2504, col: 5, offset: 85098},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 14, offset: 85107},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 26, offset: 85119},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 38, offset: 85131},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2504, col: 50, offset: 85143},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2533, col: 16, offset: 86279},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2533, col: 16, offset: 86279},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2534, col: 5, offset: 86382},
																							run: (*parser).callonSingleLineIfExpression153,
																							expr: &seqExpr{
																								pos: position{line: 2534, col: 5, offset: 86382},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2534, col: 5, offset: 86382},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 14, offset: 86391},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 26, offset: 86403},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 38, offset: 86415},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 50, offset: 86427},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 62, offset: 86439},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 74, offset: 86451},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 86, offset: 86463},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2534, col: 98, offset: 86475},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2568, col: 24, offset: 87860},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2568, col: 24, offset: 87860},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2568, col: 29, offset: 87865},
																									val:        "[abfnrtv\\\\\\]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2482, col: 75, offset: 84151},
																							val:        "[^\\\\\\\\n]",
																							chars:      []rune{'\'', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&seqExpr{
																							pos: position{line: 2484, col: 24, offset: 84297},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2484, col: 24, offset: 84297},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2401, col: 19, offset: 81486},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2401, col: 19, offset: 81486},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2401, col: 19, offset: 81486},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2485, col: 24, offset: 84364},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2485, col: 24, offset: 84364},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2486, col: 5, offset: 84401},
																							run: (*parser).callonSingleLineIfExpression185,
																							expr: &seqExpr{
																								pos: position{line: 2486, col: 5, offset: 84401},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2486, col: 5, offset: 84401},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2486, col: 14, offset: 84410},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2486, col: 26, offset: 84422},
																										expr: &charClassMatcher{
																											pos:        position{line: 2402, col: 19, offset: 81510},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2569, col: 24, offset: 87943},
																							run: (*parser).callonSingleLineIfExpression192,
																							expr: &seqExpr{
																								pos: position{line: 2569, col: 24, offset: 87943},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2569, col: 24, offset: 87943},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2593, col: 5, offset: 88959},
																							run: (*parser).callonSingleLineIfExpression203,
																							expr: &seqExpr{
																								pos: position{line: 2593, col: 5, offset: 88959},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2593, col: 5, offset: 88959},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2614, col: 5, offset: 89800},
																							run: (*parser).callonSingleLineIfExpression210,
																							expr: &seqExpr{
																								pos: position{line: 2614, col: 5, offset: 89800},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2614, col: 5, offset: 89800},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2402, col: 19, offset: 81510},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2632, col: 5, offset: 90485},
																							run: (*parser).callonSingleLineIfExpression215,
																							expr: &seqExpr{
																								pos: position{line: 2632, col: 5, offset: 90485},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2632, col: 5, offset: 90485},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2632, col: 10, offset: 90490},
																										expr: &charClassMatcher{
																											pos:        position{line: 3795, col: 12, offset: 128924},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2456, col: 74, offset: 83030},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2456, col: 79, offset: 83035},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonSingleLineIfExpression222,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1620, col: 5, offset: 52194},
											run: (*parser).callonSingleLineIfExpression228,
											expr: &seqExpr{
												pos: position{line: 1620, col: 5, offset: 52194},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1620, col: 5, offset: 52194},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3797, col: 8, offset: 128940},
															run: (*parser).callonSingleLineIfExpression231,
															expr: &choiceExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		expr: &anyMatcher{
																			line: 3797, col: 10, offset: 128942,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3797, col: 14, offset: 128946},
																		expr: &anyMatcher{
																			line: 3797, col: 15, offset: 128947,
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1620, col: 14, offset: 52203},
														expr: &choiceExpr{
															pos: position{line: 1573, col: 27, offset: 50477},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1573, col: 27, offset: 50477},
																	val:        "[)}]]",
																	chars:      []rune{')', '}', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1573, col: 36, offset: 50486},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1573, col: 36, offset: 50486},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1573, col: 40, offset: 50490},
																			expr: &litMatcher{
																				pos:        position{line: 1573, col: 41, offset: 50491},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3795, col: 12, offset: 128924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1620, col: 46, offset: 52235},
														expr: &seqExpr{
															pos: position{line: 1620, col: 47, offset: 52236},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1620, col: 47, offset: 52236},
																	expr: &choiceExpr{
																		pos: position{line: 1573, col: 27, offset: 50477},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 1573, col: 27, offset: 50477},
																				val:        "[)}]]",
																				chars:      []rune{')', '}', ']'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 1573, col: 36, offset: 50486},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1573, col: 36, offset: 50486},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&notExpr{
																						pos: position{line: 1573, col: 40, offset: 50490},
																						expr: &litMatcher{
																							pos:        position{line: 1573, col: 41, offset: 50491},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1620, col: 71, offset: 52260},
																	expr: &seqExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3794, col: 12, offset: 128891},
																				expr: &charClassMatcher{
																					pos:        position{line: 3806, col: 36, offset: 129238},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								expr: &litMatcher{
																									pos:        position{line: 3794, col: 16, offset: 128895},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3794, col: 22, offset: 128901},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3793, col: 12, offset: 128877},
																						expr: &anyMatcher{
																							line: 3793, col: 13, offset: 128878,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1620, col: 76, offset: 52265},
																	val:        "[^\\\"`?([{]",
																	chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ForExpression",
			pos:  position{line: 1631, col: 1, offset: 52619},
			expr: &choiceExpr{
				pos: position{line: 1631, col: 18, offset: 52636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1631, col: 18, offset: 52636},
						run: (*parser).callonForExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1631, col: 18, offset: 52636},
							label: "rExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 25, offset: 52643},
								name: "RangeExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1633, col: 5, offset: 52765},
						run: (*parser).callonForExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1633, col: 5, offset: 52765},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1633, col: 11, offset: 52771},
								name: "IfExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1635, col: 5, offset: 52835},
						run: (*parser).callonForExpression8,
						expr: &andExpr{
							pos: position{line: 1635, col: 5, offset: 52835},
							expr: &choiceExpr{
								pos: position{line: 1635, col: 7, offset: 52837},
								alternatives: []interface{}{
									&anyMatcher{
										line: 1635, col: 7, offset: 52837,
									},
									&notExpr{
										pos: position{line: 1635, col: 11, offset: 52841},
										expr: &anyMatcher{
											line: 1635, col: 12, offset: 52842,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineForExpression",
			pos:  position{line: 1639, col: 1, offset: 52890},
			expr: &choiceExpr{
				pos: position{line: 1639, col: 28, offset: 52917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1639, col: 28, offset: 52917},
						run: (*parser).callonSingleLineForExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1639, col: 28, offset: 52917},
							label: "rExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 35, offset: 52924},
								name: "SingleLineRangeExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1641, col: 5, offset: 53056},
						run: (*parser).callonSingleLineForExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1641, col: 5, offset: 53056},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1641, col: 11, offset: 53062},
								name: "SingleLineIfExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1643, col: 5, offset: 53136},
						run: (*parser).callonSingleLineForExpression8,
						expr: &andExpr{
							pos: position{line: 1643, col: 5, offset: 53136},
							expr: &choiceExpr{
								pos: position{line: 1643, col: 7, offset: 53138},
								alternatives: []interface{}{
									&anyMatcher{
										line: 1643, col: 7, offset: 53138,
									},
									&notExpr{
										pos: position{line: 1643, col: 11, offset: 53142},
										expr: &anyMatcher{
											line: 1643, col: 12, offset: 53143,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RangeExpression",
			pos:  position{line: 1647, col: 1, offset: 53191},
			expr: &actionExpr{
				pos: position{line: 1647, col: 20, offset: 53210},
				run: (*parser).callonRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 20, offset: 53210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 20, offset: 53210},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 26, offset: 53216},
								expr: &actionExpr{
									pos: position{line: 1681, col: 24, offset: 54182},
									run: (*parser).callonRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1681, col: 24, offset: 54182},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1681, col: 24, offset: 54182},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 2369, col: 12, offset: 80635},
													run: (*parser).callonRangeExpression8,
													expr: &labeledExpr{
														pos:   position{line: 2369, col: 12, offset: 80635},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 38, offset: 54196},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1681, col: 44, offset: 54202},
													expr: &seqExpr{
														pos: position{line: 1681, col: 45, offset: 54203},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1681, col: 45, offset: 54203},
																expr: &litMatcher{
																	pos:        position{line: 1681, col: 45, offset: 54203},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&litMatcher{
																pos:        position{line: 1681, col: 50, offset: 54208},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1681, col: 54, offset: 54212},
																expr: &litMatcher{
																	pos:        position{line: 1681, col: 54, offset: 54212},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&actionExpr{
																pos: position{line: 2369, col: 12, offset: 80635},
																run: (*parser).callonRangeExpression22,
																expr: &labeledExpr{
																	pos:   position{line: 2369, col: 12, offset: 80635},
																	label: "ident",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1681, col: 69, offset: 54227},
												expr: &litMatcher{
													pos:        position{line: 1681, col: 69, offset: 54227},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 74, offset: 54232},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonRangeExpression31,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 85, offset: 54243},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1681, col: 95, offset: 54253},
													expr: &litMatcher{
														pos:        position{line: 1681, col: 95, offset: 54253},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1681, col: 100, offset: 54258},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1681, col: 104, offset: 54262},
												expr: &litMatcher{
													pos:        position{line: 1681, col: 104, offset: 54262},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 47, offset: 53237},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 56, offset: 53246},
								expr: &seqExpr{
									pos: position{line: 1647, col: 57, offset: 53247},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1647, col: 57, offset: 53247},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1647, col: 67, offset: 53257},
											expr: &litMatcher{
												pos:        position{line: 1647, col: 67, offset: 53257},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1647, col: 74, offset: 53264},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1647, col: 82, offset: 53272},
							expr: &litMatcher{
								pos:        position{line: 1647, col: 82, offset: 53272},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 87, offset: 53277},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 93, offset: 53283},
								name: "SingleLineExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRangeExpression",
			pos:  position{line: 1664, col: 1, offset: 53670},
			expr: &actionExpr{
				pos: position{line: 1664, col: 30, offset: 53699},
				run: (*parser).callonSingleLineRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 30, offset: 53699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1664, col: 30, offset: 53699},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1664, col: 36, offset: 53705},
								expr: &actionExpr{
									pos: position{line: 1681, col: 24, offset: 54182},
									run: (*parser).callonSingleLineRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1681, col: 24, offset: 54182},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1681, col: 24, offset: 54182},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 2369, col: 12, offset: 80635},
													run: (*parser).callonSingleLineRangeExpression8,
													expr: &labeledExpr{
														pos:   position{line: 2369, col: 12, offset: 80635},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 38, offset: 54196},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1681, col: 44, offset: 54202},
													expr: &seqExpr{
														pos: position{line: 1681, col: 45, offset: 54203},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1681, col: 45, offset: 54203},
																expr: &litMatcher{
																	pos:        position{line: 1681, col: 45, offset: 54203},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&litMatcher{
																pos:        position{line: 1681, col: 50, offset: 54208},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1681, col: 54, offset: 54212},
																expr: &litMatcher{
																	pos:        position{line: 1681, col: 54, offset: 54212},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&actionExpr{
																pos: position{line: 2369, col: 12, offset: 80635},
																run: (*parser).callonSingleLineRangeExpression22,
																expr: &labeledExpr{
																	pos:   position{line: 2369, col: 12, offset: 80635},
																	label: "ident",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1681, col: 69, offset: 54227},
												expr: &litMatcher{
													pos:        position{line: 1681, col: 69, offset: 54227},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 74, offset: 54232},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonSingleLineRangeExpression31,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1681, col: 85, offset: 54243},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1681, col: 95, offset: 54253},
													expr: &litMatcher{
														pos:        position{line: 1681, col: 95, offset: 54253},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1681, col: 100, offset: 54258},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1681, col: 104, offset: 54262},
												expr: &litMatcher{
													pos:        position{line: 1681, col: 104, offset: 54262},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 57, offset: 53726},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1664, col: 66, offset: 53735},
								expr: &seqExpr{
									pos: position{line: 1664, col: 67, offset: 53736},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1664, col: 67, offset: 53736},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1664, col: 77, offset: 53746},
											expr: &litMatcher{
												pos:        position{line: 1664, col: 77, offset: 53746},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1664, col: 84, offset: 53753},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1664, col: 92, offset: 53761},
							expr: &litMatcher{
								pos:        position{line: 1664, col: 92, offset: 53761},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 97, offset: 53766},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 103, offset: 53772},
								name: "SingleLineExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpression",
			pos:  position{line: 1702, col: 1, offset: 54791},
			expr: &choiceExpr{
				pos: position{line: 1702, col: 21, offset: 54811},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1702, col: 21, offset: 54811},
						name: "InterpretedStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1702, col: 51, offset: 54841},
						name: "RawStringExpression",
					},
				},
			},
		},
		{
			name: "InterpretedStringExpression",
			pos:  position{line: 1704, col: 1, offset: 54862},
			expr: &choiceExpr{
				pos: position{line: 1704, col: 32, offset: 54893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1704, col: 32, offset: 54893},
						run: (*parser).callonInterpretedStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1704, col: 32, offset: 54893},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1704, col: 32, offset: 54893},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1704, col: 36, offset: 54897},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1704, col: 46, offset: 54907},
										expr: &ruleRefExpr{
											pos:  position{line: 1704, col: 46, offset: 54907},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1704, col: 79, offset: 54940},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1710, col: 5, offset: 55109},
						run: (*parser).callonInterpretedStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1710, col: 5, offset: 55109},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1710, col: 5, offset: 55109},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1710, col: 9, offset: 55113},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonInterpretedStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1710, col: 23, offset: 55127},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1710, col: 33, offset: 55137},
										expr: &ruleRefExpr{
											pos:  position{line: 1710, col: 33, offset: 55137},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawStringExpression",
			pos:  position{line: 1730, col: 1, offset: 55787},
			expr: &choiceExpr{
				pos: position{line: 1730, col: 24, offset: 55810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1730, col: 24, offset: 55810},
						run: (*parser).callonRawStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1730, col: 24, offset: 55810},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1730, col: 24, offset: 55810},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1730, col: 28, offset: 55814},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1730, col: 38, offset: 55824},
										expr: &ruleRefExpr{
											pos:  position{line: 1730, col: 38, offset: 55824},
											name: "RawStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1730, col: 63, offset: 55849},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1736, col: 5, offset: 56018},
						run: (*parser).callonRawStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1736, col: 5, offset: 56018},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1736, col: 5, offset: 56018},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1736, col: 9, offset: 56022},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonRawStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1736, col: 23, offset: 56036},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1736, col: 33, offset: 56046},
										expr: &ruleRefExpr{
											pos:  position{line: 1736, col: 33, offset: 56046},
											name: "RawStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringExpressionItem",
			pos:  position{line: 1757, col: 1, offset: 56688},
			expr: &choiceExpr{
				pos: position{line: 1757, col: 36, offset: 56723},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1760, col: 36, offset: 56914},
						run: (*parser).callonInterpretedStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1760, col: 36, offset: 56914},
							expr: &choiceExpr{
								pos: position{line: 1760, col: 37, offset: 56915},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1760, col: 37, offset: 56915},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1760, col: 44, offset: 56922},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1760, col: 44, offset: 56922},
												expr: &litMatcher{
													pos:        position{line: 1760, col: 45, offset: 56923},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&choiceExpr{
												pos: position{line: 2758, col: 36, offset: 95236},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2503, col: 19, offset: 85039},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2503, col: 19, offset: 85039},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2504, col: 5, offset: 85098},
														run: (*parser).callonInterpretedStringExpressionItem16,
														expr: &seqExpr{
															pos: position{line: 2504, col: 5, offset: 85098},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2504, col: 5, offset: 85098},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 14, offset: 85107},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 26, offset: 85119},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 38, offset: 85131},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 50, offset: 85143},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2533, col: 16, offset: 86279},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2533, col: 16, offset: 86279},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2534, col: 5, offset: 86382},
														run: (*parser).callonInterpretedStringExpressionItem37,
														expr: &seqExpr{
															pos: position{line: 2534, col: 5, offset: 86382},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2534, col: 5, offset: 86382},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 14, offset: 86391},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 26, offset: 86403},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 38, offset: 86415},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 50, offset: 86427},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 62, offset: 86439},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 74, offset: 86451},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 86, offset: 86463},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 98, offset: 86475},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2761, col: 36, offset: 95412},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2761, col: 36, offset: 95412},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2761, col: 41, offset: 95417},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2759, col: 38, offset: 95304},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2484, col: 24, offset: 84297},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2484, col: 24, offset: 84297},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&charClassMatcher{
												pos:        position{line: 2401, col: 19, offset: 81486},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2401, col: 19, offset: 81486},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2401, col: 19, offset: 81486},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2485, col: 24, offset: 84364},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2485, col: 24, offset: 84364},
												val:        "\\x",
												ignoreCase: false,
												want:       "\"\\\\x\"",
											},
											&charClassMatcher{
												pos:        position{line: 2402, col: 19, offset: 81510},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2402, col: 19, offset: 81510},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2486, col: 5, offset: 84401},
										run: (*parser).callonInterpretedStringExpressionItem69,
										expr: &seqExpr{
											pos: position{line: 2486, col: 5, offset: 84401},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2486, col: 5, offset: 84401},
													val:        "\\x",
													ignoreCase: false,
													want:       "\"\\\\x\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2486, col: 14, offset: 84410},
													expr: &charClassMatcher{
														pos:        position{line: 2402, col: 19, offset: 81510},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2486, col: 26, offset: 84422},
													expr: &charClassMatcher{
														pos:        position{line: 2402, col: 19, offset: 81510},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2648, col: 37, offset: 91062},
										run: (*parser).callonInterpretedStringExpressionItem76,
										expr: &seqExpr{
											pos: position{line: 2648, col: 37, offset: 91062},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2648, col: 37, offset: 91062},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2672, col: 5, offset: 92079},
										run: (*parser).callonInterpretedStringExpressionItem87,
										expr: &seqExpr{
											pos: position{line: 2672, col: 5, offset: 92079},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2672, col: 5, offset: 92079},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 5, offset: 92921},
										run: (*parser).callonInterpretedStringExpressionItem94,
										expr: &seqExpr{
											pos: position{line: 2693, col: 5, offset: 92921},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2693, col: 5, offset: 92921},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2402, col: 19, offset: 81510},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2711, col: 5, offset: 93607},
										run: (*parser).callonInterpretedStringExpressionItem99,
										expr: &seqExpr{
											pos: position{line: 2711, col: 5, offset: 93607},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2711, col: 5, offset: 93607},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2711, col: 10, offset: 93612},
													expr: &charClassMatcher{
														pos:        position{line: 3795, col: 12, offset: 128924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1757, col: 70, offset: 56757},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringExpressionItem",
			pos:  position{line: 1758, col: 1, offset: 56787},
			expr: &choiceExpr{
				pos: position{line: 1758, col: 36, offset: 56822},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1766, col: 28, offset: 57146},
						run: (*parser).callonRawStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1766, col: 28, offset: 57146},
							expr: &choiceExpr{
								pos: position{line: 1766, col: 29, offset: 57147},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1766, col: 29, offset: 57147},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1766, col: 36, offset: 57154},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1766, col: 36, offset: 57154},
												expr: &litMatcher{
													pos:        position{line: 1766, col: 37, offset: 57155},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2745, col: 27, offset: 94634},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 62, offset: 56848},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "StringExpressionInterpolation",
			pos:  position{line: 1773, col: 1, offset: 57294},
			expr: &choiceExpr{
				pos: position{line: 1773, col: 34, offset: 57327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1773, col: 34, offset: 57327},
						run: (*parser).callonStringExpressionInterpolation2,
						expr: &seqExpr{
							pos: position{line: 1773, col: 34, offset: 57327},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1773, col: 34, offset: 57327},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1773, col: 38, offset: 57331},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1773, col: 52, offset: 57345},
										expr: &choiceExpr{
											pos: position{line: 1838, col: 17, offset: 59931},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1838, col: 17, offset: 59931},
													run: (*parser).callonStringExpressionInterpolation8,
													expr: &seqExpr{
														pos: position{line: 1838, col: 17, offset: 59931},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1838, col: 17, offset: 59931},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1838, col: 21, offset: 59935},
																expr: &charClassMatcher{
																	pos:        position{line: 1854, col: 12, offset: 60612},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1838, col: 30, offset: 59944},
																expr: &seqExpr{
																	pos: position{line: 1838, col: 31, offset: 59945},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1838, col: 31, offset: 59945},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1838, col: 36, offset: 59950},
																			expr: &charClassMatcher{
																				pos:        position{line: 1838, col: 36, offset: 59950},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1838, col: 45, offset: 59959},
																expr: &seqExpr{
																	pos: position{line: 1838, col: 46, offset: 59960},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1838, col: 46, offset: 59960},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1838, col: 50, offset: 59964},
																			expr: &charClassMatcher{
																				pos:        position{line: 1838, col: 50, offset: 59964},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1855, col: 12, offset: 60631},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1855, col: 12, offset: 60631},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1855, col: 74, offset: 60693},
																		run: (*parser).callonStringExpressionInterpolation25,
																		expr: &andExpr{
																			pos: position{line: 1855, col: 74, offset: 60693},
																			expr: &charClassMatcher{
																				pos:        position{line: 1855, col: 76, offset: 60695},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1867, col: 5, offset: 61232},
																		run: (*parser).callonStringExpressionInterpolation28,
																		expr: &anyMatcher{
																			line: 1867, col: 5, offset: 61232,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1840, col: 5, offset: 60022},
													run: (*parser).callonStringExpressionInterpolation30,
													expr: &seqExpr{
														pos: position{line: 1840, col: 5, offset: 60022},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1840, col: 5, offset: 60022},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1840, col: 9, offset: 60026},
																expr: &charClassMatcher{
																	pos:        position{line: 1840, col: 9, offset: 60026},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1840, col: 17, offset: 60034},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonStringExpressionInterpolation36,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1773, col: 66, offset: 57359},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3819, col: 12, offset: 129653},
										run: (*parser).callonStringExpressionInterpolation43,
										expr: &litMatcher{
											pos:        position{line: 3819, col: 12, offset: 129653},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1773, col: 85, offset: 57378},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1773, col: 91, offset: 57384},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1773, col: 112, offset: 57405},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3820, col: 12, offset: 129691},
										run: (*parser).callonStringExpressionInterpolation48,
										expr: &litMatcher{
											pos:        position{line: 3820, col: 12, offset: 129691},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1781, col: 5, offset: 57715},
						run: (*parser).callonStringExpressionInterpolation50,
						expr: &seqExpr{
							pos: position{line: 1781, col: 5, offset: 57715},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1781, col: 5, offset: 57715},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1781, col: 9, offset: 57719},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1781, col: 23, offset: 57733},
										expr: &choiceExpr{
											pos: position{line: 1838, col: 17, offset: 59931},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1838, col: 17, offset: 59931},
													run: (*parser).callonStringExpressionInterpolation56,
													expr: &seqExpr{
														pos: position{line: 1838, col: 17, offset: 59931},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1838, col: 17, offset: 59931},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1838, col: 21, offset: 59935},
																expr: &charClassMatcher{
																	pos:        position{line: 1854, col: 12, offset: 60612},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1838, col: 30, offset: 59944},
																expr: &seqExpr{
																	pos: position{line: 1838, col: 31, offset: 59945},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1838, col: 31, offset: 59945},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1838, col: 36, offset: 59950},
																			expr: &charClassMatcher{
																				pos:        position{line: 1838, col: 36, offset: 59950},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1838, col: 45, offset: 59959},
																expr: &seqExpr{
																	pos: position{line: 1838, col: 46, offset: 59960},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1838, col: 46, offset: 59960},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1838, col: 50, offset: 59964},
																			expr: &charClassMatcher{
																				pos:        position{line: 1838, col: 50, offset: 59964},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1855, col: 12, offset: 60631},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1855, col: 12, offset: 60631},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1855, col: 74, offset: 60693},
																		run: (*parser).callonStringExpressionInterpolation73,
																		expr: &andExpr{
																			pos: position{line: 1855, col: 74, offset: 60693},
																			expr: &charClassMatcher{
																				pos:        position{line: 1855, col: 76, offset: 60695},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1867, col: 5, offset: 61232},
																		run: (*parser).callonStringExpressionInterpolation76,
																		expr: &anyMatcher{
																			line: 1867, col: 5, offset: 61232,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1840, col: 5, offset: 60022},
													run: (*parser).callonStringExpressionInterpolation78,
													expr: &seqExpr{
														pos: position{line: 1840, col: 5, offset: 60022},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1840, col: 5, offset: 60022},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1840, col: 9, offset: 60026},
																expr: &charClassMatcher{
																	pos:        position{line: 1840, col: 9, offset: 60026},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1840, col: 17, offset: 60034},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonStringExpressionInterpolation84,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1781, col: 37, offset: 57747},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonStringExpressionInterpolation91,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1808, col: 5, offset: 58750},
						run: (*parser).callonStringExpressionInterpolation97,
						expr: &seqExpr{
							pos: position{line: 1808, col: 5, offset: 58750},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1808, col: 5, offset: 58750},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1808, col: 9, offset: 58754},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1808, col: 23, offset: 58768},
										expr: &choiceExpr{
											pos: position{line: 1838, col: 17, offset: 59931},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1838, col: 17, offset: 59931},
													run: (*parser).callonStringExpressionInterpolation103,
													expr: &seqExpr{
														pos: position{line: 1838, col: 17, offset: 59931},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1838, col: 17, offset: 59931},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1838, col: 21, offset: 59935},
																expr: &charClassMatcher{
																	pos:        position{line: 1854, col: 12, offset: 60612},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1838, col: 30, offset: 59944},
																expr: &seqExpr{
																	pos: position{line: 1838, col: 31, offset: 59945},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1838, col: 31, offset: 59945},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1838, col: 36, offset: 59950},
																			expr: &charClassMatcher{
																				pos:        position{line: 1838, col: 36, offset: 59950},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1838, col: 45, offset: 59959},
																expr: &seqExpr{
																	pos: position{line: 1838, col: 46, offset: 59960},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1838, col: 46, offset: 59960},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1838, col: 50, offset: 59964},
																			expr: &charClassMatcher{
																				pos:        position{line: 1838, col: 50, offset: 59964},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1855, col: 12, offset: 60631},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1855, col: 12, offset: 60631},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1855, col: 74, offset: 60693},
																		run: (*parser).callonStringExpressionInterpolation120,
																		expr: &andExpr{
																			pos: position{line: 1855, col: 74, offset: 60693},
																			expr: &charClassMatcher{
																				pos:        position{line: 1855, col: 76, offset: 60695},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1867, col: 5, offset: 61232},
																		run: (*parser).callonStringExpressionInterpolation123,
																		expr: &anyMatcher{
																			line: 1867, col: 5, offset: 61232,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1840, col: 5, offset: 60022},
													run: (*parser).callonStringExpressionInterpolation125,
													expr: &seqExpr{
														pos: position{line: 1840, col: 5, offset: 60022},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1840, col: 5, offset: 60022},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1840, col: 9, offset: 60026},
																expr: &charClassMatcher{
																	pos:        position{line: 1840, col: 9, offset: 60026},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1840, col: 17, offset: 60034},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonStringExpressionInterpolation131,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1808, col: 37, offset: 58782},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonStringExpressionInterpolation138,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1808, col: 51, offset: 58796},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3819, col: 12, offset: 129653},
										run: (*parser).callonStringExpressionInterpolation145,
										expr: &litMatcher{
											pos:        position{line: 3819, col: 12, offset: 129653},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1808, col: 70, offset: 58815},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonStringExpressionInterpolation148,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1808, col: 84, offset: 58829},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1808, col: 90, offset: 58835},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TernaryExpression",
			pos:  position{line: 1891, col: 1, offset: 62047},
			expr: &choiceExpr{
				pos: position{line: 1891, col: 22, offset: 62068},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1891, col: 22, offset: 62068},
						run: (*parser).callonTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1891, col: 22, offset: 62068},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1891, col: 22, offset: 62068},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1891, col: 27, offset: 62073},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 31, offset: 62077},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1891, col: 42, offset: 62088},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1891, col: 64, offset: 62110},
									expr: &litMatcher{
										pos:        position{line: 1891, col: 64, offset: 62110},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1891, col: 69, offset: 62115},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1891, col: 73, offset: 62119},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 77, offset: 62123},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1891, col: 85, offset: 62131},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1891, col: 107, offset: 62153},
									expr: &litMatcher{
										pos:        position{line: 1891, col: 107, offset: 62153},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1891, col: 112, offset: 62158},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1891, col: 116, offset: 62162},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 120, offset: 62166},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1891, col: 129, offset: 62175},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1891, col: 151, offset: 62197},
									expr: &litMatcher{
										pos:        position{line: 1891, col: 151, offset: 62197},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1891, col: 156, offset: 62202},
									expr: &seqExpr{
										pos: position{line: 1891, col: 157, offset: 62203},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1891, col: 157, offset: 62203},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1891, col: 161, offset: 62207},
												expr: &choiceExpr{
													pos: position{line: 3810, col: 20, offset: 129356},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1891, col: 167, offset: 62213},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonTernaryExpression51,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1899, col: 5, offset: 62494},
						run: (*parser).callonTernaryExpression53,
						expr: &seqExpr{
							pos: position{line: 1899, col: 5, offset: 62494},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1899, col: 5, offset: 62494},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1899, col: 10, offset: 62499},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonTernaryExpression57,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1899, col: 24, offset: 62513},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1899, col: 28, offset: 62517},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonTernaryExpression71,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1913, col: 5, offset: 63108},
						run: (*parser).callonTernaryExpression73,
						expr: &seqExpr{
							pos: position{line: 1913, col: 5, offset: 63108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1913, col: 5, offset: 63108},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1913, col: 10, offset: 63113},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1913, col: 14, offset: 63117},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1913, col: 25, offset: 63128},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1913, col: 47, offset: 63150},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1885, col: 13, offset: 61958},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1885, col: 13, offset: 61958},
												run: (*parser).callonTernaryExpression87,
												expr: &seqExpr{
													pos: position{line: 1885, col: 13, offset: 61958},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 13, offset: 61958},
															expr: &litMatcher{
																pos:        position{line: 1885, col: 13, offset: 61958},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1885, col: 18, offset: 61963},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1885, col: 22, offset: 61967},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonTernaryExpression93,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 31, offset: 61976},
															expr: &choiceExpr{
																pos: position{line: 3810, col: 20, offset: 129356},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3807, col: 36, offset: 129279},
																				expr: &litMatcher{
																					pos:        position{line: 3807, col: 36, offset: 129279},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3807, col: 42, offset: 129285},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1887, col: 5, offset: 62007},
												run: (*parser).callonTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1887, col: 5, offset: 62007},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1887, col: 5, offset: 62007},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonTernaryExpression109,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1887, col: 14, offset: 62016},
															expr: &litMatcher{
																pos:        position{line: 1887, col: 14, offset: 62016},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1913, col: 66, offset: 63169},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonTernaryExpression118,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1928, col: 5, offset: 63795},
						run: (*parser).callonTernaryExpression120,
						expr: &seqExpr{
							pos: position{line: 1928, col: 5, offset: 63795},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1928, col: 5, offset: 63795},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1928, col: 10, offset: 63800},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1928, col: 14, offset: 63804},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1928, col: 25, offset: 63815},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1928, col: 47, offset: 63837},
									expr: &litMatcher{
										pos:        position{line: 1928, col: 47, offset: 63837},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1928, col: 52, offset: 63842},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1928, col: 56, offset: 63846},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1928, col: 60, offset: 63850},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1928, col: 68, offset: 63858},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1928, col: 90, offset: 63880},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1885, col: 13, offset: 61958},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1885, col: 13, offset: 61958},
												run: (*parser).callonTernaryExpression146,
												expr: &seqExpr{
													pos: position{line: 1885, col: 13, offset: 61958},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 13, offset: 61958},
															expr: &litMatcher{
																pos:        position{line: 1885, col: 13, offset: 61958},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1885, col: 18, offset: 61963},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1885, col: 22, offset: 61967},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonTernaryExpression152,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 31, offset: 61976},
															expr: &choiceExpr{
																pos: position{line: 3810, col: 20, offset: 129356},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3807, col: 36, offset: 129279},
																				expr: &litMatcher{
																					pos:        position{line: 3807, col: 36, offset: 129279},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3807, col: 42, offset: 129285},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1887, col: 5, offset: 62007},
												run: (*parser).callonTernaryExpression165,
												expr: &seqExpr{
													pos: position{line: 1887, col: 5, offset: 62007},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1887, col: 5, offset: 62007},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonTernaryExpression168,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1887, col: 14, offset: 62016},
															expr: &litMatcher{
																pos:        position{line: 1887, col: 14, offset: 62016},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1928, col: 109, offset: 63899},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonTernaryExpression177,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineTernaryExpression",
			pos:  position{line: 1946, col: 1, offset: 64546},
			expr: &choiceExpr{
				pos: position{line: 1946, col: 32, offset: 64577},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1946, col: 32, offset: 64577},
						run: (*parser).callonSingleLineTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1946, col: 32, offset: 64577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1946, col: 32, offset: 64577},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1946, col: 37, offset: 64582},
									expr: &litMatcher{
										pos:        position{line: 1946, col: 37, offset: 64582},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 42, offset: 64587},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 53, offset: 64598},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1946, col: 76, offset: 64621},
									expr: &litMatcher{
										pos:        position{line: 1946, col: 76, offset: 64621},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1946, col: 81, offset: 64626},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1946, col: 85, offset: 64630},
									expr: &litMatcher{
										pos:        position{line: 1946, col: 85, offset: 64630},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 90, offset: 64635},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 98, offset: 64643},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1946, col: 121, offset: 64666},
									expr: &litMatcher{
										pos:        position{line: 1946, col: 121, offset: 64666},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1946, col: 126, offset: 64671},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1946, col: 130, offset: 64675},
									expr: &litMatcher{
										pos:        position{line: 1946, col: 130, offset: 64675},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 135, offset: 64680},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 144, offset: 64689},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1946, col: 167, offset: 64712},
									expr: &litMatcher{
										pos:        position{line: 1946, col: 167, offset: 64712},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1946, col: 172, offset: 64717},
									expr: &seqExpr{
										pos: position{line: 1946, col: 173, offset: 64718},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1946, col: 173, offset: 64718},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1946, col: 177, offset: 64722},
												expr: &litMatcher{
													pos:        position{line: 1946, col: 177, offset: 64722},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 184, offset: 64729},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonSingleLineTernaryExpression31,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 5, offset: 65010},
						run: (*parser).callonSingleLineTernaryExpression33,
						expr: &seqExpr{
							pos: position{line: 1954, col: 5, offset: 65010},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1954, col: 5, offset: 65010},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1954, col: 10, offset: 65015},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonSingleLineTernaryExpression37,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1954, col: 24, offset: 65029},
									expr: &litMatcher{
										pos:        position{line: 1954, col: 24, offset: 65029},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1954, col: 29, offset: 65034},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonSingleLineTernaryExpression46,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1968, col: 5, offset: 65625},
						run: (*parser).callonSingleLineTernaryExpression48,
						expr: &seqExpr{
							pos: position{line: 1968, col: 5, offset: 65625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1968, col: 5, offset: 65625},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1968, col: 10, offset: 65630},
									expr: &litMatcher{
										pos:        position{line: 1968, col: 10, offset: 65630},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1968, col: 15, offset: 65635},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1968, col: 26, offset: 65646},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1968, col: 49, offset: 65669},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1885, col: 13, offset: 61958},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1885, col: 13, offset: 61958},
												run: (*parser).callonSingleLineTernaryExpression57,
												expr: &seqExpr{
													pos: position{line: 1885, col: 13, offset: 61958},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 13, offset: 61958},
															expr: &litMatcher{
																pos:        position{line: 1885, col: 13, offset: 61958},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1885, col: 18, offset: 61963},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1885, col: 22, offset: 61967},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonSingleLineTernaryExpression63,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 31, offset: 61976},
															expr: &choiceExpr{
																pos: position{line: 3810, col: 20, offset: 129356},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3807, col: 36, offset: 129279},
																				expr: &litMatcher{
																					pos:        position{line: 3807, col: 36, offset: 129279},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3807, col: 42, offset: 129285},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1887, col: 5, offset: 62007},
												run: (*parser).callonSingleLineTernaryExpression76,
												expr: &seqExpr{
													pos: position{line: 1887, col: 5, offset: 62007},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1887, col: 5, offset: 62007},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonSingleLineTernaryExpression79,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1887, col: 14, offset: 62016},
															expr: &litMatcher{
																pos:        position{line: 1887, col: 14, offset: 62016},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1968, col: 68, offset: 65688},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonSingleLineTernaryExpression88,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1983, col: 5, offset: 66314},
						run: (*parser).callonSingleLineTernaryExpression90,
						expr: &seqExpr{
							pos: position{line: 1983, col: 5, offset: 66314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1983, col: 5, offset: 66314},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1983, col: 10, offset: 66319},
									expr: &litMatcher{
										pos:        position{line: 1983, col: 10, offset: 66319},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1983, col: 15, offset: 66324},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1983, col: 26, offset: 66335},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1983, col: 49, offset: 66358},
									expr: &litMatcher{
										pos:        position{line: 1983, col: 49, offset: 66358},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1983, col: 54, offset: 66363},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1983, col: 58, offset: 66367},
									expr: &litMatcher{
										pos:        position{line: 1983, col: 58, offset: 66367},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1983, col: 63, offset: 66372},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1983, col: 71, offset: 66380},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1983, col: 94, offset: 66403},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1885, col: 13, offset: 61958},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1885, col: 13, offset: 61958},
												run: (*parser).callonSingleLineTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1885, col: 13, offset: 61958},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 13, offset: 61958},
															expr: &litMatcher{
																pos:        position{line: 1885, col: 13, offset: 61958},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1885, col: 18, offset: 61963},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1885, col: 22, offset: 61967},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonSingleLineTernaryExpression112,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1885, col: 31, offset: 61976},
															expr: &choiceExpr{
																pos: position{line: 3810, col: 20, offset: 129356},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3807, col: 36, offset: 129279},
																				expr: &litMatcher{
																					pos:        position{line: 3807, col: 36, offset: 129279},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3807, col: 42, offset: 129285},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1887, col: 5, offset: 62007},
												run: (*parser).callonSingleLineTernaryExpression125,
												expr: &seqExpr{
													pos: position{line: 1887, col: 5, offset: 62007},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1887, col: 5, offset: 62007},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonSingleLineTernaryExpression128,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1887, col: 14, offset: 62016},
															expr: &litMatcher{
																pos:        position{line: 1887, col: 14, offset: 62016},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1983, col: 113, offset: 66422},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonSingleLineTernaryExpression137,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 2005, col: 1, offset: 67260},
			expr: &choiceExpr{
				pos: position{line: 2005, col: 20, offset: 67279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2005, col: 20, offset: 67279},
						run: (*parser).callonChainExpression2,
						expr: &seqExpr{
							pos: position{line: 2005, col: 20, offset: 67279},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2005, col: 20, offset: 67279},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2005, col: 28, offset: 67287},
										expr: &litMatcher{
											pos:        position{line: 2005, col: 28, offset: 67287},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2005, col: 33, offset: 67292},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2005, col: 39, offset: 67298},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2005, col: 59, offset: 67318},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2005, col: 70, offset: 67329},
										expr: &litMatcher{
											pos:        position{line: 2005, col: 70, offset: 67329},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2005, col: 75, offset: 67334},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2005, col: 82, offset: 67341},
										expr: &ruleRefExpr{
											pos:  position{line: 2005, col: 82, offset: 67341},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2006, col: 20, offset: 67381},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2006, col: 29, offset: 67390},
										expr: &seqExpr{
											pos: position{line: 2006, col: 30, offset: 67391},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 2006, col: 30, offset: 67391},
													expr: &litMatcher{
														pos:        position{line: 2006, col: 30, offset: 67391},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2006, col: 35, offset: 67396},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonChainExpression21,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2006, col: 51, offset: 67412},
													val:        "~",
													ignoreCase: false,
													want:       "\"~\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2006, col: 55, offset: 67416},
													expr: &choiceExpr{
														pos: position{line: 3810, col: 20, offset: 129356},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		expr: &litMatcher{
																			pos:        position{line: 3807, col: 36, offset: 129279},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3807, col: 42, offset: 129285},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2006, col: 59, offset: 67420},
													name: "GoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2006, col: 74, offset: 67435},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonChainExpression37,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2006, col: 86, offset: 67447},
									expr: &choiceExpr{
										pos: position{line: 2006, col: 88, offset: 67449},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 2006, col: 94, offset: 67455},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 2006, col: 94, offset: 67455},
														expr: &litMatcher{
															pos:        position{line: 2006, col: 94, offset: 67455},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
													},
													&choiceExpr{
														pos: position{line: 1403, col: 25, offset: 44648},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1403, col: 25, offset: 44648},
																val:        "[)}],]",
																chars:      []rune{')', '}', ']', ','},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 1403, col: 40, offset: 44663},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1403, col: 40, offset: 44663},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																	&notExpr{
																		pos: position{line: 1403, col: 44, offset: 44667},
																		expr: &litMatcher{
																			pos:        position{line: 1403, col: 45, offset: 44668},
																			val:        "=",
																			ignoreCase: false,
																			want:       "\"=\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2006, col: 121, offset: 67482},
									run: (*parser).callonChainExpression64,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2024, col: 5, offset: 68115},
						run: (*parser).callonChainExpression65,
						expr: &seqExpr{
							pos: position{line: 2024, col: 5, offset: 68115},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2024, col: 5, offset: 68115},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonChainExpression68,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2024, col: 19, offset: 68129},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2024, col: 27, offset: 68137},
										expr: &litMatcher{
											pos:        position{line: 2024, col: 27, offset: 68137},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2024, col: 32, offset: 68142},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2024, col: 38, offset: 68148},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2024, col: 58, offset: 68168},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2024, col: 69, offset: 68179},
										expr: &litMatcher{
											pos:        position{line: 2024, col: 69, offset: 68179},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2024, col: 74, offset: 68184},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2024, col: 81, offset: 68191},
										expr: &ruleRefExpr{
											pos:  position{line: 2024, col: 81, offset: 68191},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2024, col: 102, offset: 68212},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonChainExpression86,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2024, col: 114, offset: 68224},
									run: (*parser).callonChainExpression92,
								},
								&labeledExpr{
									pos:   position{line: 2026, col: 3, offset: 68331},
									label: "malStartPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonChainExpression94,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 20, offset: 68348},
									name: "GoExpression",
								},
								&labeledExpr{
									pos:   position{line: 2026, col: 33, offset: 68361},
									label: "malEndPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonChainExpression102,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 2067, col: 1, offset: 69812},
			expr: &choiceExpr{
				pos: position{line: 2067, col: 24, offset: 69835},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2067, col: 24, offset: 69835},
						run: (*parser).callonchainExpressionRoot2,
						expr: &seqExpr{
							pos: position{line: 2067, col: 24, offset: 69835},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2067, col: 24, offset: 69835},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2067, col: 28, offset: 69839},
									expr: &ruleRefExpr{
										pos:  position{line: 2067, col: 28, offset: 69839},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 2067, col: 61, offset: 69872},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2072, col: 5, offset: 69985},
						run: (*parser).callonchainExpressionRoot8,
						expr: &labeledExpr{
							pos:   position{line: 2072, col: 5, offset: 69985},
							label: "identI",
							expr: &actionExpr{
								pos: position{line: 2369, col: 12, offset: 80635},
								run: (*parser).callonchainExpressionRoot10,
								expr: &labeledExpr{
									pos:   position{line: 2369, col: 12, offset: 80635},
									label: "ident",
									expr: &seqExpr{
										pos: position{line: 2408, col: 17, offset: 81561},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2391, col: 20, offset: 81316},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2408, col: 26, offset: 81570},
												expr: &charClassMatcher{
													pos:        position{line: 2391, col: 20, offset: 81316},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 2079, col: 1, offset: 70147},
			expr: &choiceExpr{
				pos: position{line: 2079, col: 36, offset: 70182},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2079, col: 36, offset: 70182},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2079, col: 36, offset: 70182},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2079, col: 40, offset: 70186},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2079, col: 72, offset: 70218},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2080, col: 36, offset: 70259},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2080, col: 36, offset: 70259},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2080, col: 40, offset: 70263},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2080, col: 72, offset: 70295},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2081, col: 36, offset: 70336},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2081, col: 36, offset: 70336},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2081, col: 40, offset: 70340},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2081, col: 72, offset: 70372},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2082, col: 36, offset: 70413},
						expr: &charClassMatcher{
							pos:        position{line: 2082, col: 36, offset: 70413},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpression",
			pos:  position{line: 2084, col: 1, offset: 70426},
			expr: &choiceExpr{
				pos: position{line: 2084, col: 30, offset: 70455},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2084, col: 30, offset: 70455},
						run: (*parser).callonSingleLineChainExpression2,
						expr: &seqExpr{
							pos: position{line: 2084, col: 30, offset: 70455},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2084, col: 30, offset: 70455},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2084, col: 38, offset: 70463},
										expr: &litMatcher{
											pos:        position{line: 2084, col: 38, offset: 70463},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2084, col: 43, offset: 70468},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2084, col: 49, offset: 70474},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2084, col: 69, offset: 70494},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2084, col: 80, offset: 70505},
										expr: &litMatcher{
											pos:        position{line: 2084, col: 80, offset: 70505},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2084, col: 85, offset: 70510},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2084, col: 92, offset: 70517},
										expr: &ruleRefExpr{
											pos:  position{line: 2084, col: 92, offset: 70517},
											name: "SingleLineChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2085, col: 30, offset: 70577},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2085, col: 39, offset: 70586},
										expr: &seqExpr{
											pos: position{line: 2085, col: 40, offset: 70587},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 2085, col: 40, offset: 70587},
													expr: &litMatcher{
														pos:        position{line: 2085, col: 40, offset: 70587},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2085, col: 45, offset: 70592},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonSingleLineChainExpression21,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2085, col: 61, offset: 70608},
													val:        "~",
													ignoreCase: false,
													want:       "\"~\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2085, col: 65, offset: 70612},
													expr: &litMatcher{
														pos:        position{line: 2085, col: 65, offset: 70612},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2085, col: 70, offset: 70617},
													name: "SingleLineGoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2085, col: 95, offset: 70642},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonSingleLineChainExpression32,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2085, col: 107, offset: 70654},
									expr: &choiceExpr{
										pos: position{line: 2085, col: 109, offset: 70656},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1403, col: 25, offset: 44648},
												val:        "[)}],]",
												chars:      []rune{')', '}', ']', ','},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 1403, col: 40, offset: 44663},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1403, col: 40, offset: 44663},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&notExpr{
														pos: position{line: 1403, col: 44, offset: 44667},
														expr: &litMatcher{
															pos:        position{line: 1403, col: 45, offset: 44668},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2085, col: 137, offset: 70684},
									run: (*parser).callonSingleLineChainExpression55,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 2103, col: 5, offset: 71276},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 2103, col: 5, offset: 71276},
								label: "startPosI",
								expr: &actionExpr{
									pos: position{line: 3797, col: 8, offset: 128940},
									run: (*parser).callonSingleLineChainExpression58,
									expr: &choiceExpr{
										pos: position{line: 3797, col: 9, offset: 128941},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3797, col: 9, offset: 128941},
												expr: &anyMatcher{
													line: 3797, col: 10, offset: 128942,
												},
											},
											&notExpr{
												pos: position{line: 3797, col: 14, offset: 128946},
												expr: &anyMatcher{
													line: 3797, col: 15, offset: 128947,
												},
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2103, col: 19, offset: 71290},
								label: "derefsI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2103, col: 27, offset: 71298},
									expr: &litMatcher{
										pos:        position{line: 2103, col: 27, offset: 71298},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2103, col: 32, offset: 71303},
								label: "rootI",
								expr: &ruleRefExpr{
									pos:  position{line: 2103, col: 38, offset: 71309},
									name: "chainExpressionRoot",
								},
							},
							&labeledExpr{
								pos:   position{line: 2103, col: 58, offset: 71329},
								label: "checkRootI",
								expr: &zeroOrOneExpr{
									pos: position{line: 2103, col: 69, offset: 71340},
									expr: &litMatcher{
										pos:        position{line: 2103, col: 69, offset: 71340},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2103, col: 74, offset: 71345},
								label: "chainI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2103, col: 81, offset: 71352},
									expr: &ruleRefExpr{
										pos:  position{line: 2103, col: 81, offset: 71352},
										name: "SingleLineChainExpressionItem",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2103, col: 112, offset: 71383},
								label: "endPosI",
								expr: &actionExpr{
									pos: position{line: 3797, col: 8, offset: 128940},
									run: (*parser).callonSingleLineChainExpression76,
									expr: &choiceExpr{
										pos: position{line: 3797, col: 9, offset: 128941},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3797, col: 9, offset: 128941},
												expr: &anyMatcher{
													line: 3797, col: 10, offset: 128942,
												},
											},
											&notExpr{
												pos: position{line: 3797, col: 14, offset: 128946},
												expr: &anyMatcher{
													line: 3797, col: 15, offset: 128947,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2103, col: 124, offset: 71395},
								run: (*parser).callonSingleLineChainExpression82,
							},
							&labeledExpr{
								pos:   position{line: 2105, col: 3, offset: 71461},
								label: "malStartPosI",
								expr: &actionExpr{
									pos: position{line: 3797, col: 8, offset: 128940},
									run: (*parser).callonSingleLineChainExpression84,
									expr: &choiceExpr{
										pos: position{line: 3797, col: 9, offset: 128941},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3797, col: 9, offset: 128941},
												expr: &anyMatcher{
													line: 3797, col: 10, offset: 128942,
												},
											},
											&notExpr{
												pos: position{line: 3797, col: 14, offset: 128946},
												expr: &anyMatcher{
													line: 3797, col: 15, offset: 128947,
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2105, col: 20, offset: 71478},
								name: "SingleLineGoExpression",
							},
							&labeledExpr{
								pos:   position{line: 2105, col: 43, offset: 71501},
								label: "malEndPosI",
								expr: &actionExpr{
									pos: position{line: 3797, col: 8, offset: 128940},
									run: (*parser).callonSingleLineChainExpression92,
									expr: &choiceExpr{
										pos: position{line: 3797, col: 9, offset: 128941},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3797, col: 9, offset: 128941},
												expr: &anyMatcher{
													line: 3797, col: 10, offset: 128942,
												},
											},
											&notExpr{
												pos: position{line: 3797, col: 14, offset: 128946},
												expr: &anyMatcher{
													line: 3797, col: 15, offset: 128947,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2105, col: 58, offset: 71516},
								run: (*parser).callonSingleLineChainExpression98,
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineChainExpressionRootParenContent",
			pos:  position{line: 2145, col: 1, offset: 72891},
			expr: &choiceExpr{
				pos: position{line: 2145, col: 46, offset: 72936},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2145, col: 46, offset: 72936},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2145, col: 46, offset: 72936},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2145, col: 50, offset: 72940},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2145, col: 92, offset: 72982},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2146, col: 46, offset: 73033},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2146, col: 46, offset: 73033},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2146, col: 50, offset: 73037},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2146, col: 92, offset: 73079},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2147, col: 46, offset: 73130},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2147, col: 46, offset: 73130},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2147, col: 50, offset: 73134},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2147, col: 92, offset: 73176},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2148, col: 46, offset: 73227},
						expr: &charClassMatcher{
							pos:        position{line: 2148, col: 46, offset: 73227},
							val:        "[^({[]})\\r\\n]",
							chars:      []rune{'(', '{', '[', ']', '}', ')', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionItem",
			pos:  position{line: 2154, col: 1, offset: 73276},
			expr: &choiceExpr{
				pos: position{line: 2154, col: 34, offset: 73309},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2154, col: 34, offset: 73309},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 2198, col: 23, offset: 75171},
						run: (*parser).callonChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2198, col: 23, offset: 75171},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2198, col: 23, offset: 75171},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2198, col: 27, offset: 75175},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2198, col: 31, offset: 75179},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 2369, col: 12, offset: 80635},
										run: (*parser).callonChainExpressionItem14,
										expr: &labeledExpr{
											pos:   position{line: 2369, col: 12, offset: 80635},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2408, col: 17, offset: 81561},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2391, col: 20, offset: 81316},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2408, col: 26, offset: 81570},
														expr: &charClassMatcher{
															pos:        position{line: 2391, col: 20, offset: 81316},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2198, col: 46, offset: 75194},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2198, col: 53, offset: 75201},
										expr: &litMatcher{
											pos:        position{line: 2198, col: 53, offset: 75201},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2154, col: 73, offset: 73348},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 2254, col: 28, offset: 76887},
						run: (*parser).callonChainExpressionItem24,
						expr: &seqExpr{
							pos: position{line: 2254, col: 28, offset: 76887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2254, col: 28, offset: 76887},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2254, col: 33, offset: 76892},
									expr: &litMatcher{
										pos:        position{line: 2254, col: 33, offset: 76892},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 38, offset: 76897},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2254, col: 44, offset: 76903},
										expr: &litMatcher{
											pos:        position{line: 2254, col: 44, offset: 76903},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2254, col: 49, offset: 76908},
									expr: &litMatcher{
										pos:        position{line: 2254, col: 49, offset: 76908},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 54, offset: 76913},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2254, col: 63, offset: 76922},
										expr: &seqExpr{
											pos: position{line: 2254, col: 64, offset: 76923},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2369, col: 12, offset: 80635},
													run: (*parser).callonChainExpressionItem37,
													expr: &labeledExpr{
														pos:   position{line: 2369, col: 12, offset: 80635},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2254, col: 72, offset: 76931},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2254, col: 76, offset: 76935},
													expr: &litMatcher{
														pos:        position{line: 2254, col: 76, offset: 76935},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 83, offset: 76942},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 2369, col: 12, offset: 80635},
										run: (*parser).callonChainExpressionItem47,
										expr: &labeledExpr{
											pos:   position{line: 2369, col: 12, offset: 80635},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2408, col: 17, offset: 81561},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2391, col: 20, offset: 81316},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2408, col: 26, offset: 81570},
														expr: &charClassMatcher{
															pos:        position{line: 2391, col: 20, offset: 81316},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2254, col: 97, offset: 76956},
									expr: &litMatcher{
										pos:        position{line: 2254, col: 97, offset: 76956},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 102, offset: 76961},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonChainExpressionItem56,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 121, offset: 76980},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2254, col: 128, offset: 76987},
										expr: &litMatcher{
											pos:        position{line: 2254, col: 128, offset: 76987},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpressionItem",
			pos:  position{line: 2155, col: 1, offset: 73390},
			expr: &choiceExpr{
				pos: position{line: 2155, col: 34, offset: 73423},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2155, col: 34, offset: 73423},
						name: "SingleLineIndexExpression",
					},
					&actionExpr{
						pos: position{line: 2206, col: 33, offset: 75384},
						run: (*parser).callonSingleLineChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2206, col: 33, offset: 75384},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2206, col: 33, offset: 75384},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2206, col: 37, offset: 75388},
									expr: &litMatcher{
										pos:        position{line: 2206, col: 37, offset: 75388},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2206, col: 42, offset: 75393},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 2369, col: 12, offset: 80635},
										run: (*parser).callonSingleLineChainExpressionItem9,
										expr: &labeledExpr{
											pos:   position{line: 2369, col: 12, offset: 80635},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2408, col: 17, offset: 81561},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2391, col: 20, offset: 81316},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2408, col: 26, offset: 81570},
														expr: &charClassMatcher{
															pos:        position{line: 2391, col: 20, offset: 81316},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2206, col: 57, offset: 75408},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2206, col: 64, offset: 75415},
										expr: &litMatcher{
											pos:        position{line: 2206, col: 64, offset: 75415},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2156, col: 34, offset: 73515},
						name: "SingleLineParenExpression",
					},
					&actionExpr{
						pos: position{line: 2254, col: 28, offset: 76887},
						run: (*parser).callonSingleLineChainExpressionItem19,
						expr: &seqExpr{
							pos: position{line: 2254, col: 28, offset: 76887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2254, col: 28, offset: 76887},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2254, col: 33, offset: 76892},
									expr: &litMatcher{
										pos:        position{line: 2254, col: 33, offset: 76892},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 38, offset: 76897},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2254, col: 44, offset: 76903},
										expr: &litMatcher{
											pos:        position{line: 2254, col: 44, offset: 76903},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2254, col: 49, offset: 76908},
									expr: &litMatcher{
										pos:        position{line: 2254, col: 49, offset: 76908},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 54, offset: 76913},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2254, col: 63, offset: 76922},
										expr: &seqExpr{
											pos: position{line: 2254, col: 64, offset: 76923},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2369, col: 12, offset: 80635},
													run: (*parser).callonSingleLineChainExpressionItem32,
													expr: &labeledExpr{
														pos:   position{line: 2369, col: 12, offset: 80635},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2254, col: 72, offset: 76931},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2254, col: 76, offset: 76935},
													expr: &litMatcher{
														pos:        position{line: 2254, col: 76, offset: 76935},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 83, offset: 76942},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 2369, col: 12, offset: 80635},
										run: (*parser).callonSingleLineChainExpressionItem42,
										expr: &labeledExpr{
											pos:   position{line: 2369, col: 12, offset: 80635},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2408, col: 17, offset: 81561},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2391, col: 20, offset: 81316},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2408, col: 26, offset: 81570},
														expr: &charClassMatcher{
															pos:        position{line: 2391, col: 20, offset: 81316},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2254, col: 97, offset: 76956},
									expr: &litMatcher{
										pos:        position{line: 2254, col: 97, offset: 76956},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 102, offset: 76961},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonSingleLineChainExpressionItem51,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2254, col: 121, offset: 76980},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2254, col: 128, offset: 76987},
										expr: &litMatcher{
											pos:        position{line: 2254, col: 128, offset: 76987},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 2158, col: 1, offset: 73578},
			expr: &actionExpr{
				pos: position{line: 2158, col: 20, offset: 73597},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2158, col: 20, offset: 73597},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3822, col: 14, offset: 129732},
							run: (*parser).callonIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3822, col: 14, offset: 129732},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2158, col: 30, offset: 73607},
							expr: &choiceExpr{
								pos: position{line: 3810, col: 20, offset: 129356},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3807, col: 36, offset: 129279},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												expr: &litMatcher{
													pos:        position{line: 3807, col: 36, offset: 129279},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3807, col: 42, offset: 129285},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2158, col: 34, offset: 73611},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2158, col: 40, offset: 73617},
								name: "indexExpressionIndex",
							},
						},
						&labeledExpr{
							pos:   position{line: 2158, col: 61, offset: 73638},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2158, col: 73, offset: 73650},
								expr: &litMatcher{
									pos:        position{line: 2158, col: 73, offset: 73650},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2158, col: 78, offset: 73655},
							expr: &seqExpr{
								pos: position{line: 2158, col: 79, offset: 73656},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2158, col: 79, offset: 73656},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2158, col: 83, offset: 73660},
										expr: &choiceExpr{
											pos: position{line: 3810, col: 20, offset: 129356},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															expr: &litMatcher{
																pos:        position{line: 3807, col: 36, offset: 129279},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3807, col: 42, offset: 129285},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2158, col: 89, offset: 73666},
							expr: &litMatcher{
								pos:        position{line: 2158, col: 89, offset: 73666},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2158, col: 94, offset: 73671},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3823, col: 14, offset: 129772},
								run: (*parser).callonIndexExpression30,
								expr: &litMatcher{
									pos:        position{line: 3823, col: 14, offset: 129772},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2158, col: 115, offset: 73692},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2158, col: 127, offset: 73704},
								expr: &litMatcher{
									pos:        position{line: 2158, col: 127, offset: 73704},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "indexExpressionIndex",
			pos:  position{line: 2170, col: 1, offset: 74017},
			expr: &actionExpr{
				pos: position{line: 2170, col: 25, offset: 74041},
				run: (*parser).callonindexExpressionIndex1,
				expr: &labeledExpr{
					pos:   position{line: 2170, col: 25, offset: 74041},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 2170, col: 32, offset: 74048},
						expr: &choiceExpr{
							pos: position{line: 2171, col: 5, offset: 74054},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2171, col: 5, offset: 74054},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 2171, col: 19, offset: 74068},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 2171, col: 38, offset: 74087},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callonindexExpressionIndex8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonindexExpressionIndex11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callonindexExpressionIndex27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callonindexExpressionIndex48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callonindexExpressionIndex80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callonindexExpressionIndex87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callonindexExpressionIndex98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callonindexExpressionIndex105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callonindexExpressionIndex110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callonindexExpressionIndex116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callonindexExpressionIndex128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callonindexExpressionIndex149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callonindexExpressionIndex181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callonindexExpressionIndex188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callonindexExpressionIndex199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callonindexExpressionIndex206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callonindexExpressionIndex211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonindexExpressionIndex218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2172, col: 5, offset: 74124},
									run: (*parser).callonindexExpressionIndex224,
									expr: &seqExpr{
										pos: position{line: 2172, col: 5, offset: 74124},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2172, col: 5, offset: 74124},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonindexExpressionIndex227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2172, col: 14, offset: 74133},
												expr: &choiceExpr{
													pos: position{line: 2168, col: 35, offset: 73986},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2168, col: 35, offset: 73986},
															val:        "[)}]?,]",
															chars:      []rune{')', '}', ']', '?', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2168, col: 56, offset: 74007},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2168, col: 56, offset: 74007},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2168, col: 60, offset: 74011},
																	expr: &litMatcher{
																		pos:        position{line: 2168, col: 61, offset: 74012},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 2172, col: 46, offset: 74165,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2172, col: 48, offset: 74167},
												expr: &seqExpr{
													pos: position{line: 2172, col: 49, offset: 74168},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 2172, col: 49, offset: 74168},
															expr: &choiceExpr{
																pos: position{line: 2168, col: 35, offset: 73986},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2168, col: 35, offset: 73986},
																		val:        "[)}]?,]",
																		chars:      []rune{')', '}', ']', '?', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2168, col: 56, offset: 74007},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2168, col: 56, offset: 74007},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2168, col: 60, offset: 74011},
																				expr: &litMatcher{
																					pos:        position{line: 2168, col: 61, offset: 74012},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2172, col: 81, offset: 74200},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineIndexExpression",
			pos:  position{line: 2179, col: 1, offset: 74365},
			expr: &actionExpr{
				pos: position{line: 2179, col: 30, offset: 74394},
				run: (*parser).callonSingleLineIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2179, col: 30, offset: 74394},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3822, col: 14, offset: 129732},
							run: (*parser).callonSingleLineIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3822, col: 14, offset: 129732},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2179, col: 40, offset: 74404},
							expr: &choiceExpr{
								pos: position{line: 3810, col: 20, offset: 129356},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3807, col: 36, offset: 129279},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												expr: &litMatcher{
													pos:        position{line: 3807, col: 36, offset: 129279},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3807, col: 42, offset: 129285},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2179, col: 44, offset: 74408},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2179, col: 50, offset: 74414},
								name: "singleLineIndexExpressionIndex",
							},
						},
						&labeledExpr{
							pos:   position{line: 2179, col: 81, offset: 74445},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2179, col: 93, offset: 74457},
								expr: &litMatcher{
									pos:        position{line: 2179, col: 93, offset: 74457},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2179, col: 98, offset: 74462},
							expr: &seqExpr{
								pos: position{line: 2179, col: 99, offset: 74463},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2179, col: 99, offset: 74463},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2179, col: 103, offset: 74467},
										expr: &litMatcher{
											pos:        position{line: 2179, col: 103, offset: 74467},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2179, col: 110, offset: 74474},
							expr: &litMatcher{
								pos:        position{line: 2179, col: 110, offset: 74474},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2179, col: 115, offset: 74479},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3823, col: 14, offset: 129772},
								run: (*parser).callonSingleLineIndexExpression25,
								expr: &litMatcher{
									pos:        position{line: 3823, col: 14, offset: 129772},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2179, col: 136, offset: 74500},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2179, col: 148, offset: 74512},
								expr: &litMatcher{
									pos:        position{line: 2179, col: 148, offset: 74512},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineIndexExpressionIndex",
			pos:  position{line: 2189, col: 1, offset: 74760},
			expr: &actionExpr{
				pos: position{line: 2189, col: 35, offset: 74794},
				run: (*parser).callonsingleLineIndexExpressionIndex1,
				expr: &labeledExpr{
					pos:   position{line: 2189, col: 35, offset: 74794},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 2189, col: 42, offset: 74801},
						expr: &choiceExpr{
							pos: position{line: 2190, col: 5, offset: 74807},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2190, col: 5, offset: 74807},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 2190, col: 29, offset: 74831},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 2190, col: 48, offset: 74850},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1475, col: 15, offset: 47112},
									run: (*parser).callonsingleLineIndexExpressionIndex8,
									expr: &seqExpr{
										pos: position{line: 1475, col: 15, offset: 47112},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1475, col: 15, offset: 47112},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonsingleLineIndexExpressionIndex11,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2455, col: 14, offset: 82888},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2455, col: 14, offset: 82888},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2455, col: 14, offset: 82888},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2455, col: 20, offset: 82894},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2503, col: 19, offset: 85039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2503, col: 19, offset: 85039},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2504, col: 5, offset: 85098},
																		run: (*parser).callonsingleLineIndexExpressionIndex27,
																		expr: &seqExpr{
																			pos: position{line: 2504, col: 5, offset: 85098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2504, col: 5, offset: 85098},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 14, offset: 85107},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 26, offset: 85119},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 38, offset: 85131},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2504, col: 50, offset: 85143},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2533, col: 16, offset: 86279},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2533, col: 16, offset: 86279},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2534, col: 5, offset: 86382},
																		run: (*parser).callonsingleLineIndexExpressionIndex48,
																		expr: &seqExpr{
																			pos: position{line: 2534, col: 5, offset: 86382},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2534, col: 5, offset: 86382},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 14, offset: 86391},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 26, offset: 86403},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 38, offset: 86415},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 50, offset: 86427},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 62, offset: 86439},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 74, offset: 86451},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 86, offset: 86463},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2534, col: 98, offset: 86475},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2568, col: 24, offset: 87860},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2568, col: 24, offset: 87860},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2568, col: 29, offset: 87865},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2482, col: 75, offset: 84151},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2484, col: 24, offset: 84297},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2484, col: 24, offset: 84297},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2401, col: 19, offset: 81486},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2485, col: 24, offset: 84364},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2485, col: 24, offset: 84364},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2402, col: 19, offset: 81510},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2486, col: 5, offset: 84401},
																		run: (*parser).callonsingleLineIndexExpressionIndex80,
																		expr: &seqExpr{
																			pos: position{line: 2486, col: 5, offset: 84401},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2486, col: 5, offset: 84401},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 14, offset: 84410},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2486, col: 26, offset: 84422},
																					expr: &charClassMatcher{
																						pos:        position{line: 2402, col: 19, offset: 81510},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2569, col: 24, offset: 87943},
																		run: (*parser).callonsingleLineIndexExpressionIndex87,
																		expr: &seqExpr{
																			pos: position{line: 2569, col: 24, offset: 87943},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2569, col: 24, offset: 87943},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2593, col: 5, offset: 88959},
																		run: (*parser).callonsingleLineIndexExpressionIndex98,
																		expr: &seqExpr{
																			pos: position{line: 2593, col: 5, offset: 88959},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2593, col: 5, offset: 88959},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2614, col: 5, offset: 89800},
																		run: (*parser).callonsingleLineIndexExpressionIndex105,
																		expr: &seqExpr{
																			pos: position{line: 2614, col: 5, offset: 89800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2614, col: 5, offset: 89800},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2402, col: 19, offset: 81510},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2632, col: 5, offset: 90485},
																		run: (*parser).callonsingleLineIndexExpressionIndex110,
																		expr: &seqExpr{
																			pos: position{line: 2632, col: 5, offset: 90485},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2632, col: 5, offset: 90485},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2632, col: 10, offset: 90490},
																					expr: &charClassMatcher{
																						pos:        position{line: 3795, col: 12, offset: 128924},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2455, col: 76, offset: 82950},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2456, col: 5, offset: 82961},
														run: (*parser).callonsingleLineIndexExpressionIndex116,
														expr: &seqExpr{
															pos: position{line: 2456, col: 5, offset: 82961},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2456, col: 5, offset: 82961},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 10, offset: 82966},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2456, col: 16, offset: 82972},
																		expr: &choiceExpr{
																			pos: position{line: 2456, col: 17, offset: 82973},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2503, col: 19, offset: 85039},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2503, col: 19, offset: 85039},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2504, col: 5, offset: 85098},
																					run: (*parser).callonsingleLineIndexExpressionIndex128,
																					expr: &seqExpr{
																						pos: position{line: 2504, col: 5, offset: 85098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2504, col: 5, offset: 85098},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 14, offset: 85107},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 26, offset: 85119},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 38, offset: 85131},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2504, col: 50, offset: 85143},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2533, col: 16, offset: 86279},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2533, col: 16, offset: 86279},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2534, col: 5, offset: 86382},
																					run: (*parser).callonsingleLineIndexExpressionIndex149,
																					expr: &seqExpr{
																						pos: position{line: 2534, col: 5, offset: 86382},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2534, col: 5, offset: 86382},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 14, offset: 86391},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 26, offset: 86403},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 38, offset: 86415},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 50, offset: 86427},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 62, offset: 86439},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 74, offset: 86451},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 86, offset: 86463},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2534, col: 98, offset: 86475},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2568, col: 24, offset: 87860},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2568, col: 24, offset: 87860},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2568, col: 29, offset: 87865},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2482, col: 75, offset: 84151},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2484, col: 24, offset: 84297},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2484, col: 24, offset: 84297},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2401, col: 19, offset: 81486},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2485, col: 24, offset: 84364},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2485, col: 24, offset: 84364},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2402, col: 19, offset: 81510},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2486, col: 5, offset: 84401},
																					run: (*parser).callonsingleLineIndexExpressionIndex181,
																					expr: &seqExpr{
																						pos: position{line: 2486, col: 5, offset: 84401},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2486, col: 5, offset: 84401},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 14, offset: 84410},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2486, col: 26, offset: 84422},
																								expr: &charClassMatcher{
																									pos:        position{line: 2402, col: 19, offset: 81510},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2569, col: 24, offset: 87943},
																					run: (*parser).callonsingleLineIndexExpressionIndex188,
																					expr: &seqExpr{
																						pos: position{line: 2569, col: 24, offset: 87943},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2569, col: 24, offset: 87943},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2593, col: 5, offset: 88959},
																					run: (*parser).callonsingleLineIndexExpressionIndex199,
																					expr: &seqExpr{
																						pos: position{line: 2593, col: 5, offset: 88959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2593, col: 5, offset: 88959},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2614, col: 5, offset: 89800},
																					run: (*parser).callonsingleLineIndexExpressionIndex206,
																					expr: &seqExpr{
																						pos: position{line: 2614, col: 5, offset: 89800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2614, col: 5, offset: 89800},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2402, col: 19, offset: 81510},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2632, col: 5, offset: 90485},
																					run: (*parser).callonsingleLineIndexExpressionIndex211,
																					expr: &seqExpr{
																						pos: position{line: 2632, col: 5, offset: 90485},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2632, col: 5, offset: 90485},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2632, col: 10, offset: 90490},
																								expr: &charClassMatcher{
																									pos:        position{line: 3795, col: 12, offset: 128924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2456, col: 74, offset: 83030},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2456, col: 79, offset: 83035},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonsingleLineIndexExpressionIndex218,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2191, col: 5, offset: 74897},
									run: (*parser).callonsingleLineIndexExpressionIndex224,
									expr: &seqExpr{
										pos: position{line: 2191, col: 5, offset: 74897},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2191, col: 5, offset: 74897},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3797, col: 8, offset: 128940},
													run: (*parser).callonsingleLineIndexExpressionIndex227,
													expr: &choiceExpr{
														pos: position{line: 3797, col: 9, offset: 128941},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3797, col: 9, offset: 128941},
																expr: &anyMatcher{
																	line: 3797, col: 10, offset: 128942,
																},
															},
															&notExpr{
																pos: position{line: 3797, col: 14, offset: 128946},
																expr: &anyMatcher{
																	line: 3797, col: 15, offset: 128947,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2191, col: 14, offset: 74906},
												expr: &choiceExpr{
													pos: position{line: 2168, col: 35, offset: 73986},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2168, col: 35, offset: 73986},
															val:        "[)}]?,]",
															chars:      []rune{')', '}', ']', '?', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2168, col: 56, offset: 74007},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2168, col: 56, offset: 74007},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2168, col: 60, offset: 74011},
																	expr: &litMatcher{
																		pos:        position{line: 2168, col: 61, offset: 74012},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3795, col: 12, offset: 128924},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2191, col: 54, offset: 74946},
												expr: &seqExpr{
													pos: position{line: 2191, col: 55, offset: 74947},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 2191, col: 55, offset: 74947},
															expr: &choiceExpr{
																pos: position{line: 2168, col: 35, offset: 73986},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2168, col: 35, offset: 73986},
																		val:        "[)}]?,]",
																		chars:      []rune{')', '}', ']', '?', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2168, col: 56, offset: 74007},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2168, col: 56, offset: 74007},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2168, col: 60, offset: 74011},
																				expr: &litMatcher{
																					pos:        position{line: 2168, col: 61, offset: 74012},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2191, col: 87, offset: 74979},
															expr: &seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2191, col: 92, offset: 74984},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 2214, col: 1, offset: 75566},
			expr: &actionExpr{
				pos: position{line: 2214, col: 20, offset: 75585},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2214, col: 20, offset: 75585},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3816, col: 12, offset: 129576},
							run: (*parser).callonParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3816, col: 12, offset: 129576},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2214, col: 28, offset: 75593},
							expr: &litMatcher{
								pos:        position{line: 2214, col: 28, offset: 75593},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2214, col: 33, offset: 75598},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2214, col: 39, offset: 75604},
								expr: &ruleRefExpr{
									pos:  position{line: 2214, col: 39, offset: 75604},
									name: "parenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2214, col: 60, offset: 75625},
							expr: &litMatcher{
								pos:        position{line: 2214, col: 60, offset: 75625},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2214, col: 65, offset: 75630},
							expr: &seqExpr{
								pos: position{line: 2214, col: 66, offset: 75631},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2214, col: 66, offset: 75631},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2214, col: 70, offset: 75635},
										expr: &choiceExpr{
											pos: position{line: 3810, col: 20, offset: 129356},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															expr: &litMatcher{
																pos:        position{line: 3807, col: 36, offset: 129279},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3807, col: 42, offset: 129285},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2214, col: 76, offset: 75641},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3817, col: 12, offset: 129614},
								run: (*parser).callonParenExpression23,
								expr: &litMatcher{
									pos:        position{line: 3817, col: 12, offset: 129614},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2214, col: 95, offset: 75660},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2214, col: 102, offset: 75667},
								expr: &litMatcher{
									pos:        position{line: 2214, col: 102, offset: 75667},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 2222, col: 1, offset: 75858},
			expr: &actionExpr{
				pos: position{line: 2222, col: 24, offset: 75881},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2222, col: 24, offset: 75881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2222, col: 24, offset: 75881},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2222, col: 31, offset: 75888},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2222, col: 44, offset: 75901},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2222, col: 50, offset: 75907},
								expr: &seqExpr{
									pos: position{line: 2222, col: 51, offset: 75908},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2222, col: 51, offset: 75908},
											expr: &litMatcher{
												pos:        position{line: 2222, col: 51, offset: 75908},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2222, col: 56, offset: 75913},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2222, col: 60, offset: 75917},
											expr: &choiceExpr{
												pos: position{line: 3810, col: 20, offset: 129356},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																expr: &litMatcher{
																	pos:        position{line: 3807, col: 36, offset: 129279},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3807, col: 42, offset: 129285},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2222, col: 64, offset: 75921},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineParenExpression",
			pos:  position{line: 2234, col: 1, offset: 76188},
			expr: &actionExpr{
				pos: position{line: 2234, col: 30, offset: 76217},
				run: (*parser).callonSingleLineParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2234, col: 30, offset: 76217},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3816, col: 12, offset: 129576},
							run: (*parser).callonSingleLineParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3816, col: 12, offset: 129576},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2234, col: 38, offset: 76225},
							expr: &litMatcher{
								pos:        position{line: 2234, col: 38, offset: 76225},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2234, col: 43, offset: 76230},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2234, col: 49, offset: 76236},
								expr: &ruleRefExpr{
									pos:  position{line: 2234, col: 49, offset: 76236},
									name: "singleLinearenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2234, col: 79, offset: 76266},
							expr: &litMatcher{
								pos:        position{line: 2234, col: 79, offset: 76266},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2234, col: 84, offset: 76271},
							expr: &seqExpr{
								pos: position{line: 2234, col: 85, offset: 76272},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2234, col: 85, offset: 76272},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2234, col: 89, offset: 76276},
										expr: &litMatcher{
											pos:        position{line: 2234, col: 89, offset: 76276},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2234, col: 96, offset: 76283},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3817, col: 12, offset: 129614},
								run: (*parser).callonSingleLineParenExpression18,
								expr: &litMatcher{
									pos:        position{line: 3817, col: 12, offset: 129614},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2234, col: 115, offset: 76302},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2234, col: 122, offset: 76309},
								expr: &litMatcher{
									pos:        position{line: 2234, col: 122, offset: 76309},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLinearenExpressionArgs",
			pos:  position{line: 2242, col: 1, offset: 76500},
			expr: &actionExpr{
				pos: position{line: 2242, col: 33, offset: 76532},
				run: (*parser).callonsingleLinearenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2242, col: 33, offset: 76532},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2242, col: 33, offset: 76532},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2242, col: 40, offset: 76539},
								name: "SingleLineGoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2242, col: 63, offset: 76562},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2242, col: 69, offset: 76568},
								expr: &seqExpr{
									pos: position{line: 2242, col: 70, offset: 76569},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2242, col: 70, offset: 76569},
											expr: &litMatcher{
												pos:        position{line: 2242, col: 70, offset: 76569},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2242, col: 75, offset: 76574},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2242, col: 79, offset: 76578},
											expr: &litMatcher{
												pos:        position{line: 2242, col: 79, offset: 76578},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2242, col: 84, offset: 76583},
											name: "SingleLineGoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoType",
			pos:  position{line: 2377, col: 1, offset: 80909},
			expr: &actionExpr{
				pos: position{line: 2377, col: 11, offset: 80919},
				run: (*parser).callonGoType1,
				expr: &labeledExpr{
					pos:   position{line: 2377, col: 11, offset: 80919},
					label: "goTypeI",
					expr: &ruleRefExpr{
						pos:  position{line: 2377, col: 19, offset: 80927},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 2767, col: 1, offset: 95489},
			expr: &choiceExpr{
				pos: position{line: 2767, col: 15, offset: 95503},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2767, col: 16, offset: 95504},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2768, col: 15, offset: 95586},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 2425, col: 21, offset: 82113},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2391, col: 20, offset: 81316},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2408, col: 26, offset: 81570},
												expr: &charClassMatcher{
													pos:        position{line: 2391, col: 20, offset: 81316},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2425, col: 35, offset: 82127},
												expr: &litMatcher{
													pos:        position{line: 2425, col: 35, offset: 82127},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 2425, col: 40, offset: 82132},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2425, col: 44, offset: 82136},
												expr: &litMatcher{
													pos:        position{line: 2425, col: 44, offset: 82136},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2391, col: 20, offset: 81316},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2408, col: 26, offset: 81570},
												expr: &charClassMatcher{
													pos:        position{line: 2391, col: 20, offset: 81316},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2408, col: 17, offset: 81561},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2391, col: 20, offset: 81316},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2408, col: 26, offset: 81570},
												expr: &charClassMatcher{
													pos:        position{line: 2391, col: 20, offset: 81316},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2767, col: 27, offset: 95515},
								expr: &litMatcher{
									pos:        position{line: 2767, col: 27, offset: 95515},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 2767, col: 32, offset: 95520},
								expr: &ruleRefExpr{
									pos:  position{line: 2767, col: 32, offset: 95520},
									name: "goTypeArgs",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2767, col: 47, offset: 95535},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 2767, col: 59, offset: 95547},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2767, col: 59, offset: 95547},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2767, col: 63, offset: 95551},
								expr: &litMatcher{
									pos:        position{line: 2767, col: 63, offset: 95551},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2767, col: 68, offset: 95556},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2767, col: 75, offset: 95563},
								expr: &litMatcher{
									pos:        position{line: 2767, col: 75, offset: 95563},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&litMatcher{
								pos:        position{line: 2767, col: 80, offset: 95568},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 2769, col: 1, offset: 95618},
			expr: &seqExpr{
				pos: position{line: 2769, col: 15, offset: 95632},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2769, col: 15, offset: 95632},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2769, col: 19, offset: 95636},
						expr: &litMatcher{
							pos:        position{line: 2769, col: 19, offset: 95636},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2769, col: 24, offset: 95641},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2769, col: 35, offset: 95652},
						expr: &litMatcher{
							pos:        position{line: 2769, col: 35, offset: 95652},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2769, col: 40, offset: 95657},
						expr: &seqExpr{
							pos: position{line: 2769, col: 41, offset: 95658},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2769, col: 41, offset: 95658},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2769, col: 45, offset: 95662},
									expr: &litMatcher{
										pos:        position{line: 2769, col: 45, offset: 95662},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2769, col: 52, offset: 95669},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 2770, col: 1, offset: 95673},
			expr: &seqExpr{
				pos: position{line: 2770, col: 15, offset: 95687},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2770, col: 15, offset: 95687},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2770, col: 22, offset: 95694},
						expr: &litMatcher{
							pos:        position{line: 2770, col: 22, offset: 95694},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2770, col: 27, offset: 95699},
						expr: &seqExpr{
							pos: position{line: 2770, col: 28, offset: 95700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2770, col: 28, offset: 95700},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2770, col: 32, offset: 95704},
									expr: &litMatcher{
										pos:        position{line: 2770, col: 32, offset: 95704},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2770, col: 37, offset: 95709},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 2771, col: 1, offset: 95718},
			expr: &choiceExpr{
				pos: position{line: 2771, col: 16, offset: 95733},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2771, col: 16, offset: 95733},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 30, offset: 95747},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 45, offset: 95762},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 61, offset: 95778},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 78, offset: 95795},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 96, offset: 95813},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 110, offset: 95827},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 2771, col: 122, offset: 95839},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 2777, col: 1, offset: 95877},
			expr: &seqExpr{
				pos: position{line: 2777, col: 18, offset: 95894},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2777, col: 18, offset: 95894},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2777, col: 22, offset: 95898},
						expr: &litMatcher{
							pos:        position{line: 2777, col: 22, offset: 95898},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 27, offset: 95903},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2777, col: 41, offset: 95917},
						expr: &litMatcher{
							pos:        position{line: 2777, col: 41, offset: 95917},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2777, col: 46, offset: 95922},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2777, col: 50, offset: 95926},
						expr: &litMatcher{
							pos:        position{line: 2777, col: 50, offset: 95926},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 55, offset: 95931},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 2778, col: 1, offset: 95945},
			expr: &seqExpr{
				pos: position{line: 2778, col: 18, offset: 95962},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 2778, col: 18, offset: 95962},
						expr: &charClassMatcher{
							pos:        position{line: 2778, col: 18, offset: 95962},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2778, col: 25, offset: 95969},
						expr: &seqExpr{
							pos: position{line: 2778, col: 26, offset: 95970},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2778, col: 26, offset: 95970},
									expr: &litMatcher{
										pos:        position{line: 2778, col: 26, offset: 95970},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2778, col: 32, offset: 95976},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2778, col: 32, offset: 95976},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 2778, col: 39, offset: 95983},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 2778, col: 46, offset: 95990},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2778, col: 69, offset: 96013},
									expr: &litMatcher{
										pos:        position{line: 2778, col: 69, offset: 96013},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2778, col: 74, offset: 96018},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 2779, col: 1, offset: 96115},
			expr: &ruleRefExpr{
				pos:  position{line: 2779, col: 18, offset: 96132},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 2785, col: 1, offset: 96162},
			expr: &seqExpr{
				pos: position{line: 2785, col: 16, offset: 96177},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2785, col: 16, offset: 96177},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2785, col: 21, offset: 96182},
						expr: &litMatcher{
							pos:        position{line: 2785, col: 21, offset: 96182},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2785, col: 26, offset: 96187},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 2791, col: 1, offset: 96225},
			expr: &seqExpr{
				pos: position{line: 2791, col: 20, offset: 96244},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2791, col: 20, offset: 96244},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2791, col: 29, offset: 96253},
						expr: &litMatcher{
							pos:        position{line: 2791, col: 29, offset: 96253},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2791, col: 34, offset: 96258},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2791, col: 38, offset: 96262},
						expr: &seqExpr{
							pos: position{line: 2791, col: 39, offset: 96263},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2791, col: 39, offset: 96263},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2791, col: 43, offset: 96267},
									expr: &ruleRefExpr{
										pos:  position{line: 2791, col: 43, offset: 96267},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 2791, col: 57, offset: 96281},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2791, col: 57, offset: 96281},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3807, col: 36, offset: 129279},
													expr: &litMatcher{
														pos:        position{line: 3807, col: 36, offset: 129279},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3807, col: 42, offset: 129285},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2791, col: 71, offset: 96295},
						expr: &choiceExpr{
							pos: position{line: 3810, col: 20, offset: 129356},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3806, col: 36, offset: 129238},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3807, col: 36, offset: 129279},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2791, col: 75, offset: 96299},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 2792, col: 1, offset: 96303},
			expr: &seqExpr{
				pos: position{line: 2792, col: 20, offset: 96322},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 2792, col: 21, offset: 96323},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2792, col: 21, offset: 96323},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2391, col: 20, offset: 81316},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2408, col: 26, offset: 81570},
										expr: &charClassMatcher{
											pos:        position{line: 2391, col: 20, offset: 81316},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2843, col: 34, offset: 97554},
										expr: &litMatcher{
											pos:        position{line: 2843, col: 34, offset: 97554},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2843, col: 39, offset: 97559},
										expr: &seqExpr{
											pos: position{line: 2843, col: 40, offset: 97560},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2843, col: 40, offset: 97560},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2843, col: 44, offset: 97564},
													expr: &choiceExpr{
														pos: position{line: 3810, col: 20, offset: 129356},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3807, col: 36, offset: 129279},
																		expr: &litMatcher{
																			pos:        position{line: 3807, col: 36, offset: 129279},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3807, col: 42, offset: 129285},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 2391, col: 20, offset: 81316},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2408, col: 26, offset: 81570},
													expr: &charClassMatcher{
														pos:        position{line: 2391, col: 20, offset: 81316},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2792, col: 38, offset: 96340},
										expr: &litMatcher{
											pos:        position{line: 2792, col: 38, offset: 96340},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2792, col: 43, offset: 96345},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2792, col: 52, offset: 96354},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2792, col: 69, offset: 96371},
						expr: &choiceExpr{
							pos: position{line: 2732, col: 16, offset: 94191},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2734, col: 19, offset: 94250},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2734, col: 19, offset: 94250},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2734, col: 23, offset: 94254},
											expr: &charClassMatcher{
												pos:        position{line: 2745, col: 27, offset: 94634},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 2734, col: 47, offset: 94278},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2735, col: 5, offset: 94288},
									run: (*parser).callongoFieldDecl33,
									expr: &seqExpr{
										pos: position{line: 2735, col: 5, offset: 94288},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2735, col: 5, offset: 94288},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2735, col: 9, offset: 94292},
												expr: &charClassMatcher{
													pos:        position{line: 2745, col: 27, offset: 94634},
													val:        "[^\\n`]",
													chars:      []rune{'\n', '`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												expr: &charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3794, col: 16, offset: 128895},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																expr: &litMatcher{
																	pos:        position{line: 3794, col: 16, offset: 128895},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3794, col: 22, offset: 128901},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3793, col: 12, offset: 128877},
														expr: &anyMatcher{
															line: 3793, col: 13, offset: 128878,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 2747, col: 27, offset: 94718},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2747, col: 27, offset: 94718},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2747, col: 31, offset: 94722},
											expr: &choiceExpr{
												pos: position{line: 2747, col: 32, offset: 94723},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2503, col: 19, offset: 85039},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2503, col: 19, offset: 85039},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2504, col: 5, offset: 85098},
														run: (*parser).callongoFieldDecl57,
														expr: &seqExpr{
															pos: position{line: 2504, col: 5, offset: 85098},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2504, col: 5, offset: 85098},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 14, offset: 85107},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 26, offset: 85119},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 38, offset: 85131},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2504, col: 50, offset: 85143},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2533, col: 16, offset: 86279},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2533, col: 16, offset: 86279},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2534, col: 5, offset: 86382},
														run: (*parser).callongoFieldDecl78,
														expr: &seqExpr{
															pos: position{line: 2534, col: 5, offset: 86382},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2534, col: 5, offset: 86382},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 14, offset: 86391},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 26, offset: 86403},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 38, offset: 86415},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 50, offset: 86427},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 62, offset: 86439},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 74, offset: 86451},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 86, offset: 86463},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2534, col: 98, offset: 86475},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2761, col: 36, offset: 95412},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2761, col: 36, offset: 95412},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2761, col: 41, offset: 95417},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2759, col: 38, offset: 95304},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 2484, col: 24, offset: 84297},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2484, col: 24, offset: 84297},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2401, col: 19, offset: 81486},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2401, col: 19, offset: 81486},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2401, col: 19, offset: 81486},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 2485, col: 24, offset: 84364},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2485, col: 24, offset: 84364},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2402, col: 19, offset: 81510},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2486, col: 5, offset: 84401},
														run: (*parser).callongoFieldDecl110,
														expr: &seqExpr{
															pos: position{line: 2486, col: 5, offset: 84401},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2486, col: 5, offset: 84401},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2486, col: 14, offset: 84410},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2486, col: 26, offset: 84422},
																	expr: &charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2648, col: 37, offset: 91062},
														run: (*parser).callongoFieldDecl117,
														expr: &seqExpr{
															pos: position{line: 2648, col: 37, offset: 91062},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2648, col: 37, offset: 91062},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2672, col: 5, offset: 92079},
														run: (*parser).callongoFieldDecl128,
														expr: &seqExpr{
															pos: position{line: 2672, col: 5, offset: 92079},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2672, col: 5, offset: 92079},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2693, col: 5, offset: 92921},
														run: (*parser).callongoFieldDecl135,
														expr: &seqExpr{
															pos: position{line: 2693, col: 5, offset: 92921},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2693, col: 5, offset: 92921},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2711, col: 5, offset: 93607},
														run: (*parser).callongoFieldDecl140,
														expr: &seqExpr{
															pos: position{line: 2711, col: 5, offset: 93607},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2711, col: 5, offset: 93607},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2711, col: 10, offset: 93612},
																	expr: &charClassMatcher{
																		pos:        position{line: 3795, col: 12, offset: 128924},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2747, col: 115, offset: 94806},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2748, col: 5, offset: 94816},
									run: (*parser).callongoFieldDecl146,
									expr: &seqExpr{
										pos: position{line: 2748, col: 5, offset: 94816},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2748, col: 5, offset: 94816},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2748, col: 9, offset: 94820},
												expr: &choiceExpr{
													pos: position{line: 2748, col: 10, offset: 94821},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2503, col: 19, offset: 85039},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2503, col: 19, offset: 85039},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2504, col: 5, offset: 85098},
															run: (*parser).callongoFieldDecl157,
															expr: &seqExpr{
																pos: position{line: 2504, col: 5, offset: 85098},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2504, col: 5, offset: 85098},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2504, col: 14, offset: 85107},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2504, col: 26, offset: 85119},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2504, col: 38, offset: 85131},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2504, col: 50, offset: 85143},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2533, col: 16, offset: 86279},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2533, col: 16, offset: 86279},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2534, col: 5, offset: 86382},
															run: (*parser).callongoFieldDecl178,
															expr: &seqExpr{
																pos: position{line: 2534, col: 5, offset: 86382},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2534, col: 5, offset: 86382},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 14, offset: 86391},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 26, offset: 86403},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 38, offset: 86415},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 50, offset: 86427},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 62, offset: 86439},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 74, offset: 86451},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 86, offset: 86463},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2534, col: 98, offset: 86475},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2761, col: 36, offset: 95412},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2761, col: 36, offset: 95412},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2761, col: 41, offset: 95417},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2759, col: 38, offset: 95304},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 2484, col: 24, offset: 84297},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2484, col: 24, offset: 84297},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2401, col: 19, offset: 81486},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2401, col: 19, offset: 81486},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2401, col: 19, offset: 81486},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 2485, col: 24, offset: 84364},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2485, col: 24, offset: 84364},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2402, col: 19, offset: 81510},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2486, col: 5, offset: 84401},
															run: (*parser).callongoFieldDecl210,
															expr: &seqExpr{
																pos: position{line: 2486, col: 5, offset: 84401},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2486, col: 5, offset: 84401},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2486, col: 14, offset: 84410},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2486, col: 26, offset: 84422},
																		expr: &charClassMatcher{
																			pos:        position{line: 2402, col: 19, offset: 81510},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2648, col: 37, offset: 91062},
															run: (*parser).callongoFieldDecl217,
															expr: &seqExpr{
																pos: position{line: 2648, col: 37, offset: 91062},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2648, col: 37, offset: 91062},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2672, col: 5, offset: 92079},
															run: (*parser).callongoFieldDecl228,
															expr: &seqExpr{
																pos: position{line: 2672, col: 5, offset: 92079},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2672, col: 5, offset: 92079},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2693, col: 5, offset: 92921},
															run: (*parser).callongoFieldDecl235,
															expr: &seqExpr{
																pos: position{line: 2693, col: 5, offset: 92921},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2693, col: 5, offset: 92921},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2402, col: 19, offset: 81510},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2711, col: 5, offset: 93607},
															run: (*parser).callongoFieldDecl240,
															expr: &seqExpr{
																pos: position{line: 2711, col: 5, offset: 93607},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2711, col: 5, offset: 93607},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2711, col: 10, offset: 93612},
																		expr: &charClassMatcher{
																			pos:        position{line: 3795, col: 12, offset: 128924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3793, col: 12, offset: 128877},
												expr: &anyMatcher{
													line: 3793, col: 13, offset: 128878,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 2793, col: 1, offset: 96378},
			expr: &seqExpr{
				pos: position{line: 2793, col: 20, offset: 96397},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2793, col: 20, offset: 96397},
						expr: &litMatcher{
							pos:        position{line: 2793, col: 20, offset: 96397},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2793, col: 25, offset: 96402},
						expr: &litMatcher{
							pos:        position{line: 2793, col: 25, offset: 96402},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&choiceExpr{
						pos: position{line: 2768, col: 15, offset: 95586},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2425, col: 21, offset: 82113},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2391, col: 20, offset: 81316},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2408, col: 26, offset: 81570},
										expr: &charClassMatcher{
											pos:        position{line: 2391, col: 20, offset: 81316},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2425, col: 35, offset: 82127},
										expr: &litMatcher{
											pos:        position{line: 2425, col: 35, offset: 82127},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&litMatcher{
										pos:        position{line: 2425, col: 40, offset: 82132},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2425, col: 44, offset: 82136},
										expr: &litMatcher{
											pos:        position{line: 2425, col: 44, offset: 82136},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&charClassMatcher{
										pos:        position{line: 2391, col: 20, offset: 81316},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2408, col: 26, offset: 81570},
										expr: &charClassMatcher{
											pos:        position{line: 2391, col: 20, offset: 81316},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 2408, col: 17, offset: 81561},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2391, col: 20, offset: 81316},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2408, col: 26, offset: 81570},
										expr: &charClassMatcher{
											pos:        position{line: 2391, col: 20, offset: 81316},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2793, col: 41, offset: 96418},
						expr: &litMatcher{
							pos:        position{line: 2793, col: 41, offset: 96418},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2793, col: 46, offset: 96423},
						expr: &ruleRefExpr{
							pos:  position{line: 2793, col: 46, offset: 96423},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 2800, col: 1, offset: 96491},
			expr: &seqExpr{
				pos: position{line: 2800, col: 18, offset: 96508},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2800, col: 18, offset: 96508},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2800, col: 22, offset: 96512},
						expr: &litMatcher{
							pos:        position{line: 2800, col: 22, offset: 96512},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2800, col: 27, offset: 96517},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 2801, col: 1, offset: 96528},
			expr: &ruleRefExpr{
				pos:  position{line: 2801, col: 18, offset: 96545},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 2807, col: 1, offset: 96578},
			expr: &seqExpr{
				pos: position{line: 2807, col: 20, offset: 96597},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2807, col: 20, offset: 96597},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2807, col: 27, offset: 96604},
						expr: &litMatcher{
							pos:        position{line: 2807, col: 27, offset: 96604},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2807, col: 32, offset: 96609},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 2808, col: 1, offset: 96621},
			expr: &seqExpr{
				pos: position{line: 2808, col: 20, offset: 96640},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2808, col: 20, offset: 96640},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2808, col: 33, offset: 96653},
						expr: &litMatcher{
							pos:        position{line: 2808, col: 33, offset: 96653},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2808, col: 38, offset: 96658},
						expr: &ruleRefExpr{
							pos:  position{line: 2808, col: 38, offset: 96658},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 2809, col: 1, offset: 96668},
			expr: &choiceExpr{
				pos: position{line: 2809, col: 20, offset: 96687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2809, col: 20, offset: 96687},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 2809, col: 35, offset: 96702},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 2810, col: 1, offset: 96709},
			expr: &seqExpr{
				pos: position{line: 2810, col: 20, offset: 96728},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2810, col: 20, offset: 96728},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2810, col: 24, offset: 96732},
						expr: &choiceExpr{
							pos: position{line: 3810, col: 20, offset: 129356},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3806, col: 36, offset: 129238},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3807, col: 36, offset: 129279},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2810, col: 28, offset: 96736},
						expr: &seqExpr{
							pos: position{line: 2810, col: 29, offset: 96737},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2810, col: 29, offset: 96737},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2810, col: 45, offset: 96753},
									expr: &litMatcher{
										pos:        position{line: 2810, col: 45, offset: 96753},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2810, col: 50, offset: 96758},
									expr: &seqExpr{
										pos: position{line: 2810, col: 51, offset: 96759},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2810, col: 51, offset: 96759},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2810, col: 55, offset: 96763},
												expr: &choiceExpr{
													pos: position{line: 3810, col: 20, offset: 129356},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2810, col: 63, offset: 96771},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 2811, col: 1, offset: 96775},
			expr: &seqExpr{
				pos: position{line: 2811, col: 20, offset: 96794},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2811, col: 20, offset: 96794},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2811, col: 36, offset: 96810},
						expr: &litMatcher{
							pos:        position{line: 2811, col: 36, offset: 96810},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2811, col: 41, offset: 96815},
						expr: &seqExpr{
							pos: position{line: 2811, col: 42, offset: 96816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2811, col: 42, offset: 96816},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2811, col: 46, offset: 96820},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2811, col: 50, offset: 96824},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 2812, col: 1, offset: 96842},
			expr: &seqExpr{
				pos: position{line: 2812, col: 20, offset: 96861},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2812, col: 20, offset: 96861},
						expr: &seqExpr{
							pos: position{line: 2843, col: 21, offset: 97541},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2391, col: 20, offset: 81316},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 2408, col: 26, offset: 81570},
									expr: &charClassMatcher{
										pos:        position{line: 2391, col: 20, offset: 81316},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2843, col: 34, offset: 97554},
									expr: &litMatcher{
										pos:        position{line: 2843, col: 34, offset: 97554},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2843, col: 39, offset: 97559},
									expr: &seqExpr{
										pos: position{line: 2843, col: 40, offset: 97560},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2843, col: 40, offset: 97560},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2843, col: 44, offset: 97564},
												expr: &choiceExpr{
													pos: position{line: 3810, col: 20, offset: 129356},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2391, col: 20, offset: 81316},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2408, col: 26, offset: 81570},
												expr: &charClassMatcher{
													pos:        position{line: 2391, col: 20, offset: 81316},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2812, col: 38, offset: 96879},
						expr: &litMatcher{
							pos:        position{line: 2812, col: 38, offset: 96879},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2812, col: 43, offset: 96884},
						expr: &litMatcher{
							pos:        position{line: 2812, col: 43, offset: 96884},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2812, col: 50, offset: 96891},
						expr: &litMatcher{
							pos:        position{line: 2812, col: 50, offset: 96891},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2812, col: 55, offset: 96896},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 2818, col: 1, offset: 96930},
			expr: &seqExpr{
				pos: position{line: 2818, col: 21, offset: 96950},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2818, col: 21, offset: 96950},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2818, col: 33, offset: 96962},
						expr: &litMatcher{
							pos:        position{line: 2818, col: 33, offset: 96962},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2818, col: 38, offset: 96967},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2818, col: 42, offset: 96971},
						expr: &seqExpr{
							pos: position{line: 2818, col: 43, offset: 96972},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2818, col: 43, offset: 96972},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2818, col: 47, offset: 96976},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2818, col: 63, offset: 96992},
									expr: &litMatcher{
										pos:        position{line: 2818, col: 63, offset: 96992},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2818, col: 69, offset: 96998},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2818, col: 69, offset: 96998},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 3808, col: 36, offset: 129325},
											expr: &seqExpr{
												pos: position{line: 3808, col: 37, offset: 129326},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3808, col: 37, offset: 129326},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2818, col: 86, offset: 97015},
						expr: &choiceExpr{
							pos: position{line: 3810, col: 20, offset: 129356},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3806, col: 36, offset: 129238},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3807, col: 36, offset: 129279},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3807, col: 36, offset: 129279},
											expr: &litMatcher{
												pos:        position{line: 3807, col: 36, offset: 129279},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3807, col: 42, offset: 129285},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2818, col: 90, offset: 97019},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 2819, col: 1, offset: 97023},
			expr: &choiceExpr{
				pos: position{line: 2819, col: 21, offset: 97043},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2819, col: 21, offset: 97043},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 2819, col: 36, offset: 97058},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 2820, col: 1, offset: 97069},
			expr: &seqExpr{
				pos: position{line: 2820, col: 21, offset: 97089},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2391, col: 20, offset: 81316},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 2408, col: 26, offset: 81570},
						expr: &charClassMatcher{
							pos:        position{line: 2391, col: 20, offset: 81316},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2820, col: 34, offset: 97102},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 2822, col: 1, offset: 97147},
			expr: &seqExpr{
				pos: position{line: 2822, col: 21, offset: 97167},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2822, col: 21, offset: 97167},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2822, col: 32, offset: 97178},
						expr: &seqExpr{
							pos: position{line: 2822, col: 33, offset: 97179},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2822, col: 33, offset: 97179},
									expr: &litMatcher{
										pos:        position{line: 2822, col: 33, offset: 97179},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 2822, col: 38, offset: 97184},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2822, col: 42, offset: 97188},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2822, col: 46, offset: 97192},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 2823, col: 1, offset: 97205},
			expr: &choiceExpr{
				pos: position{line: 2823, col: 21, offset: 97225},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2823, col: 21, offset: 97225},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 2823, col: 30, offset: 97234},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 2824, col: 1, offset: 97251},
			expr: &seqExpr{
				pos: position{line: 2824, col: 21, offset: 97271},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2824, col: 21, offset: 97271},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2824, col: 25, offset: 97275},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 2830, col: 1, offset: 97303},
			expr: &seqExpr{
				pos: position{line: 2830, col: 14, offset: 97316},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2830, col: 14, offset: 97316},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2830, col: 20, offset: 97322},
						expr: &litMatcher{
							pos:        position{line: 2830, col: 20, offset: 97322},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2830, col: 25, offset: 97327},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2830, col: 29, offset: 97331},
						expr: &litMatcher{
							pos:        position{line: 2830, col: 29, offset: 97331},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2830, col: 34, offset: 97336},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2830, col: 44, offset: 97346},
						expr: &litMatcher{
							pos:        position{line: 2830, col: 44, offset: 97346},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2830, col: 49, offset: 97351},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2830, col: 53, offset: 97355},
						expr: &litMatcher{
							pos:        position{line: 2830, col: 53, offset: 97355},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2830, col: 58, offset: 97360},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 2831, col: 1, offset: 97374},
			expr: &ruleRefExpr{
				pos:  position{line: 2831, col: 14, offset: 97387},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 2837, col: 1, offset: 97419},
			expr: &seqExpr{
				pos: position{line: 2837, col: 18, offset: 97436},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2837, col: 18, offset: 97436},
						expr: &seqExpr{
							pos: position{line: 2837, col: 19, offset: 97437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2837, col: 19, offset: 97437},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2837, col: 24, offset: 97442},
									expr: &litMatcher{
										pos:        position{line: 2837, col: 24, offset: 97442},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2837, col: 31, offset: 97449},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2837, col: 38, offset: 97456},
						expr: &litMatcher{
							pos:        position{line: 2837, col: 38, offset: 97456},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2837, col: 43, offset: 97461},
						expr: &seqExpr{
							pos: position{line: 2837, col: 44, offset: 97462},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2837, col: 44, offset: 97462},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2837, col: 49, offset: 97467},
									expr: &litMatcher{
										pos:        position{line: 2837, col: 49, offset: 97467},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2837, col: 56, offset: 97474},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "Mixin",
			pos:  position{line: 2897, col: 1, offset: 99924},
			expr: &choiceExpr{
				pos: position{line: 2897, col: 10, offset: 99933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2897, col: 10, offset: 99933},
						run: (*parser).callonMixin2,
						expr: &seqExpr{
							pos: position{line: 2897, col: 10, offset: 99933},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2897, col: 10, offset: 99933},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2897, col: 18, offset: 99941},
									expr: &litMatcher{
										pos:        position{line: 2897, col: 18, offset: 99941},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2897, col: 23, offset: 99946},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 771, col: 14, offset: 23392},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 771, col: 14, offset: 23392},
												run: (*parser).callonMixin9,
												expr: &labeledExpr{
													pos:   position{line: 771, col: 14, offset: 23392},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 757, col: 10, offset: 22837},
																run: (*parser).callonMixin12,
																expr: &labeledExpr{
																	pos:   position{line: 757, col: 10, offset: 22837},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 5, offset: 22931},
																run: (*parser).callonMixin18,
																expr: &seqExpr{
																	pos: position{line: 759, col: 5, offset: 22931},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 759, col: 5, offset: 22931},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 759, col: 13, offset: 22939},
																						expr: &litMatcher{
																							pos:        position{line: 759, col: 13, offset: 22939},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 759, col: 18, offset: 22944},
																						expr: &choiceExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 759, col: 19, offset: 22945},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 759, col: 19, offset: 22945},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 759, col: 28, offset: 22954},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 38, offset: 22964},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 759, col: 49, offset: 22975},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonMixin31,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 773, col: 5, offset: 23434},
												run: (*parser).callonMixin37,
												expr: &seqExpr{
													pos: position{line: 773, col: 5, offset: 23434},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 773, col: 5, offset: 23434},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonMixin40,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 773, col: 14, offset: 23443},
															expr: &choiceExpr{
																pos: position{line: 773, col: 16, offset: 23445},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3794, col: 12, offset: 128891},
																				expr: &charClassMatcher{
																					pos:        position{line: 3806, col: 36, offset: 129238},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3794, col: 16, offset: 128895},
																								expr: &litMatcher{
																									pos:        position{line: 3794, col: 16, offset: 128895},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3794, col: 22, offset: 128901},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3793, col: 12, offset: 128877},
																						expr: &anyMatcher{
																							line: 3793, col: 13, offset: 128878,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 773, col: 22, offset: 23451},
																		val:        "[:!=()]",
																		chars:      []rune{':', '!', '=', '(', ')'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 784, col: 5, offset: 23783},
												run: (*parser).callonMixin59,
												expr: &seqExpr{
													pos: position{line: 784, col: 5, offset: 23783},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 784, col: 5, offset: 23783},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 784, col: 12, offset: 23790},
																expr: &charClassMatcher{
																	pos:        position{line: 784, col: 12, offset: 23790},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 784, col: 29, offset: 23807},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonMixin65,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2897, col: 39, offset: 99962},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2897, col: 47, offset: 99970},
										expr: &ruleRefExpr{
											pos:  position{line: 2897, col: 47, offset: 99970},
											name: "mixinParamList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2897, col: 63, offset: 99986},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2897, col: 69, offset: 99992},
										name: "Beaitb",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2907, col: 5, offset: 100286},
						run: (*parser).callonMixin76,
						expr: &seqExpr{
							pos: position{line: 2907, col: 5, offset: 100286},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2907, col: 5, offset: 100286},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&labeledExpr{
									pos:   position{line: 2907, col: 13, offset: 100294},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonMixin80,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2907, col: 22, offset: 100303},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2907, col: 28, offset: 100309},
										name: "Beaitb",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamList",
			pos:  position{line: 2923, col: 1, offset: 100722},
			expr: &choiceExpr{
				pos: position{line: 2923, col: 19, offset: 100740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2923, col: 19, offset: 100740},
						run: (*parser).callonmixinParamList2,
						expr: &seqExpr{
							pos: position{line: 2923, col: 19, offset: 100740},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2923, col: 19, offset: 100740},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2923, col: 23, offset: 100744},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2923, col: 27, offset: 100748},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2923, col: 35, offset: 100756},
										expr: &ruleRefExpr{
											pos:  position{line: 2923, col: 35, offset: 100756},
											name: "mixinParams",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2923, col: 48, offset: 100769},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2923, col: 51, offset: 100772},
									expr: &seqExpr{
										pos: position{line: 2923, col: 52, offset: 100773},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2923, col: 52, offset: 100773},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2923, col: 56, offset: 100777},
												expr: &choiceExpr{
													pos: position{line: 3810, col: 20, offset: 129356},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2923, col: 62, offset: 100783},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonmixinParamList28,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2929, col: 5, offset: 100984},
						run: (*parser).callonmixinParamList30,
						expr: &seqExpr{
							pos: position{line: 2929, col: 5, offset: 100984},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2929, col: 5, offset: 100984},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2929, col: 9, offset: 100988},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2929, col: 13, offset: 100992},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2929, col: 21, offset: 101000},
										expr: &ruleRefExpr{
											pos:  position{line: 2929, col: 21, offset: 101000},
											name: "mixinParams",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2929, col: 34, offset: 101013},
									expr: &seqExpr{
										pos: position{line: 2929, col: 35, offset: 101014},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2929, col: 35, offset: 101014},
												expr: &charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2929, col: 38, offset: 101017},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2929, col: 44, offset: 101023},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonmixinParamList49,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParams",
			pos:  position{line: 2948, col: 1, offset: 101568},
			expr: &actionExpr{
				pos: position{line: 2948, col: 16, offset: 101583},
				run: (*parser).callonmixinParams1,
				expr: &seqExpr{
					pos: position{line: 2948, col: 16, offset: 101583},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2948, col: 16, offset: 101583},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2948, col: 23, offset: 101590},
								name: "mixinParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 2948, col: 34, offset: 101601},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2948, col: 40, offset: 101607},
								expr: &seqExpr{
									pos: position{line: 2948, col: 41, offset: 101608},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2948, col: 41, offset: 101608},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2948, col: 44, offset: 101611},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2948, col: 48, offset: 101615},
											expr: &choiceExpr{
												pos: position{line: 3810, col: 20, offset: 129356},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																expr: &litMatcher{
																	pos:        position{line: 3807, col: 36, offset: 129279},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3807, col: 42, offset: 129285},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2948, col: 52, offset: 101619},
											name: "mixinParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParam",
			pos:  position{line: 2959, col: 1, offset: 101897},
			expr: &actionExpr{
				pos: position{line: 2959, col: 15, offset: 101911},
				run: (*parser).callonmixinParam1,
				expr: &seqExpr{
					pos: position{line: 2959, col: 15, offset: 101911},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2959, col: 15, offset: 101911},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 799, col: 20, offset: 24253},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 799, col: 20, offset: 24253},
										run: (*parser).callonmixinParam5,
										expr: &labeledExpr{
											pos:   position{line: 799, col: 20, offset: 24253},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 757, col: 10, offset: 22837},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														run: (*parser).callonmixinParam8,
														expr: &labeledExpr{
															pos:   position{line: 757, col: 10, offset: 22837},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														run: (*parser).callonmixinParam14,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 22931},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 22931},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 759, col: 13, offset: 22939},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				expr: &litMatcher{
																					pos:        position{line: 759, col: 13, offset: 22939},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 759, col: 18, offset: 22944},
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 19, offset: 22945},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 759, col: 19, offset: 22945},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 28, offset: 22954},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 759, col: 38, offset: 22964},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 49, offset: 22975},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonmixinParam27,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 801, col: 5, offset: 24295},
										run: (*parser).callonmixinParam33,
										expr: &seqExpr{
											pos: position{line: 801, col: 5, offset: 24295},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 801, col: 5, offset: 24295},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 801, col: 12, offset: 24302},
														expr: &charClassMatcher{
															pos:        position{line: 801, col: 12, offset: 24302},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 801, col: 29, offset: 24319},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonmixinParam39,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2959, col: 37, offset: 101933},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonmixinParam46,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2959, col: 46, offset: 101942},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2959, col: 52, offset: 101948},
								expr: &seqExpr{
									pos: position{line: 2959, col: 53, offset: 101949},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2959, col: 53, offset: 101949},
											expr: &litMatcher{
												pos:        position{line: 2959, col: 53, offset: 101949},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2959, col: 58, offset: 101954},
											name: "GoType",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2959, col: 67, offset: 101963},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2959, col: 76, offset: 101972},
								expr: &seqExpr{
									pos: position{line: 2959, col: 77, offset: 101973},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2959, col: 77, offset: 101973},
											expr: &litMatcher{
												pos:        position{line: 2959, col: 77, offset: 101973},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2959, col: 82, offset: 101978},
											name: "mixinParamDefault",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamDefault",
			pos:  position{line: 2997, col: 1, offset: 103198},
			expr: &choiceExpr{
				pos: position{line: 2997, col: 22, offset: 103219},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2997, col: 22, offset: 103219},
						run: (*parser).callonmixinParamDefault2,
						expr: &seqExpr{
							pos: position{line: 2997, col: 22, offset: 103219},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2997, col: 22, offset: 103219},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2997, col: 26, offset: 103223},
									expr: &litMatcher{
										pos:        position{line: 2997, col: 26, offset: 103223},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2997, col: 31, offset: 103228},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 2997, col: 37, offset: 103234},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3002, col: 5, offset: 103375},
						run: (*parser).callonmixinParamDefault9,
						expr: &seqExpr{
							pos: position{line: 3002, col: 5, offset: 103375},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3002, col: 5, offset: 103375},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 3002, col: 9, offset: 103379},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonmixinParamDefault13,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 3027, col: 1, offset: 104171},
			expr: &actionExpr{
				pos: position{line: 3027, col: 11, offset: 104181},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 3027, col: 11, offset: 104181},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3027, col: 11, offset: 104181},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 3027, col: 20, offset: 104190},
							label: "errExprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3027, col: 29, offset: 104199},
								expr: &ruleRefExpr{
									pos:  position{line: 3027, col: 29, offset: 104199},
									name: "Expression",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 3027, col: 41, offset: 104211},
							expr: &actionExpr{
								pos: position{line: 1384, col: 21, offset: 44047},
								run: (*parser).callonReturn8,
								expr: &oneOrMoreExpr{
									pos: position{line: 1384, col: 21, offset: 44047},
									expr: &charClassMatcher{
										pos:        position{line: 3795, col: 12, offset: 128924},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							expr: &charClassMatcher{
								pos:        position{line: 3806, col: 36, offset: 129238},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3794, col: 16, offset: 128895},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											expr: &litMatcher{
												pos:        position{line: 3794, col: 16, offset: 128895},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3794, col: 22, offset: 128901},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3793, col: 12, offset: 128877},
									expr: &anyMatcher{
										line: 3793, col: 13, offset: 128878,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCall",
			pos:  position{line: 3038, col: 1, offset: 104534},
			expr: &actionExpr{
				pos: position{line: 3038, col: 14, offset: 104547},
				run: (*parser).callonMixinCall1,
				expr: &seqExpr{
					pos: position{line: 3038, col: 14, offset: 104547},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3038, col: 14, offset: 104547},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3038, col: 18, offset: 104551},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3038, col: 29, offset: 104562},
								expr: &seqExpr{
									pos: position{line: 3038, col: 30, offset: 104563},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 757, col: 10, offset: 22837},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 757, col: 10, offset: 22837},
													run: (*parser).callonMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 757, col: 10, offset: 22837},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 759, col: 5, offset: 22931},
													run: (*parser).callonMixinCall14,
													expr: &seqExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 759, col: 5, offset: 22931},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 759, col: 13, offset: 22939},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 759, col: 13, offset: 22939},
																			expr: &litMatcher{
																				pos:        position{line: 759, col: 13, offset: 22939},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 759, col: 18, offset: 22944},
																			expr: &choiceExpr{
																				pos: position{line: 759, col: 19, offset: 22945},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 759, col: 19, offset: 22945},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 759, col: 19, offset: 22945},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 759, col: 28, offset: 22954},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 759, col: 38, offset: 22964},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 759, col: 49, offset: 22975},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3038, col: 36, offset: 104569},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3038, col: 42, offset: 104575},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 771, col: 14, offset: 23392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 771, col: 14, offset: 23392},
										run: (*parser).callonMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 771, col: 14, offset: 23392},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 757, col: 10, offset: 22837},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														run: (*parser).callonMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 757, col: 10, offset: 22837},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														run: (*parser).callonMixinCall45,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 22931},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 22931},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 759, col: 13, offset: 22939},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				expr: &litMatcher{
																					pos:        position{line: 759, col: 13, offset: 22939},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 759, col: 18, offset: 22944},
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 19, offset: 22945},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 759, col: 19, offset: 22945},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 28, offset: 22954},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 759, col: 38, offset: 22964},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 49, offset: 22975},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 773, col: 5, offset: 23434},
										run: (*parser).callonMixinCall64,
										expr: &seqExpr{
											pos: position{line: 773, col: 5, offset: 23434},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 773, col: 5, offset: 23434},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 773, col: 14, offset: 23443},
													expr: &choiceExpr{
														pos: position{line: 773, col: 16, offset: 23445},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 773, col: 22, offset: 23451},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 784, col: 5, offset: 23783},
										run: (*parser).callonMixinCall86,
										expr: &seqExpr{
											pos: position{line: 784, col: 5, offset: 23783},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 784, col: 5, offset: 23783},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 784, col: 12, offset: 23790},
														expr: &charClassMatcher{
															pos:        position{line: 784, col: 12, offset: 23790},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 784, col: 29, offset: 23807},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3038, col: 58, offset: 104591},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3038, col: 64, offset: 104597},
								expr: &ruleRefExpr{
									pos:  position{line: 3038, col: 64, offset: 104597},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3038, col: 78, offset: 104611},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 3038, col: 84, offset: 104617},
								name: "mixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMixinCall",
			pos:  position{line: 3057, col: 1, offset: 105067},
			expr: &actionExpr{
				pos: position{line: 3057, col: 20, offset: 105086},
				run: (*parser).callonInlineMixinCall1,
				expr: &seqExpr{
					pos: position{line: 3057, col: 20, offset: 105086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3057, col: 20, offset: 105086},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3057, col: 24, offset: 105090},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3057, col: 35, offset: 105101},
								expr: &seqExpr{
									pos: position{line: 3057, col: 36, offset: 105102},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 757, col: 10, offset: 22837},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 757, col: 10, offset: 22837},
													run: (*parser).callonInlineMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 757, col: 10, offset: 22837},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 759, col: 5, offset: 22931},
													run: (*parser).callonInlineMixinCall14,
													expr: &seqExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 759, col: 5, offset: 22931},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 759, col: 13, offset: 22939},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 759, col: 13, offset: 22939},
																			expr: &litMatcher{
																				pos:        position{line: 759, col: 13, offset: 22939},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 759, col: 18, offset: 22944},
																			expr: &choiceExpr{
																				pos: position{line: 759, col: 19, offset: 22945},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 759, col: 19, offset: 22945},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 759, col: 19, offset: 22945},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 759, col: 28, offset: 22954},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 759, col: 38, offset: 22964},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 759, col: 49, offset: 22975},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonInlineMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3057, col: 42, offset: 105108},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3057, col: 48, offset: 105114},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 771, col: 14, offset: 23392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 771, col: 14, offset: 23392},
										run: (*parser).callonInlineMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 771, col: 14, offset: 23392},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 757, col: 10, offset: 22837},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														run: (*parser).callonInlineMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 757, col: 10, offset: 22837},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														run: (*parser).callonInlineMixinCall45,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 22931},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 22931},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 759, col: 13, offset: 22939},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				expr: &litMatcher{
																					pos:        position{line: 759, col: 13, offset: 22939},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 759, col: 18, offset: 22944},
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 19, offset: 22945},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 759, col: 19, offset: 22945},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 28, offset: 22954},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 759, col: 38, offset: 22964},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 49, offset: 22975},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonInlineMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 773, col: 5, offset: 23434},
										run: (*parser).callonInlineMixinCall64,
										expr: &seqExpr{
											pos: position{line: 773, col: 5, offset: 23434},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 773, col: 5, offset: 23434},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonInlineMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 773, col: 14, offset: 23443},
													expr: &choiceExpr{
														pos: position{line: 773, col: 16, offset: 23445},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 773, col: 22, offset: 23451},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 784, col: 5, offset: 23783},
										run: (*parser).callonInlineMixinCall86,
										expr: &seqExpr{
											pos: position{line: 784, col: 5, offset: 23783},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 784, col: 5, offset: 23783},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 784, col: 12, offset: 23790},
														expr: &charClassMatcher{
															pos:        position{line: 784, col: 12, offset: 23790},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 784, col: 29, offset: 23807},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonInlineMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3057, col: 64, offset: 105130},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3057, col: 70, offset: 105136},
								expr: &ruleRefExpr{
									pos:  position{line: 3057, col: 70, offset: 105136},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3057, col: 94, offset: 105160},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 3057, col: 100, offset: 105166},
								name: "singleLineMixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgList",
			pos:  position{line: 3076, col: 1, offset: 105626},
			expr: &choiceExpr{
				pos: position{line: 3076, col: 17, offset: 105642},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3076, col: 17, offset: 105642},
						run: (*parser).callonmixinArgList2,
						expr: &seqExpr{
							pos: position{line: 3076, col: 17, offset: 105642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3076, col: 17, offset: 105642},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3076, col: 21, offset: 105646},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3076, col: 25, offset: 105650},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3076, col: 31, offset: 105656},
										expr: &ruleRefExpr{
											pos:  position{line: 3076, col: 31, offset: 105656},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3076, col: 42, offset: 105667},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3076, col: 45, offset: 105670},
									expr: &seqExpr{
										pos: position{line: 3076, col: 46, offset: 105671},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3076, col: 46, offset: 105671},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 3076, col: 50, offset: 105675},
												expr: &choiceExpr{
													pos: position{line: 3810, col: 20, offset: 129356},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3807, col: 36, offset: 129279},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3076, col: 56, offset: 105681},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonmixinArgList28,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3082, col: 5, offset: 105880},
						run: (*parser).callonmixinArgList30,
						expr: &seqExpr{
							pos: position{line: 3082, col: 5, offset: 105880},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3082, col: 5, offset: 105880},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3082, col: 9, offset: 105884},
									expr: &choiceExpr{
										pos: position{line: 3810, col: 20, offset: 129356},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3807, col: 36, offset: 129279},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														expr: &litMatcher{
															pos:        position{line: 3807, col: 36, offset: 129279},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3807, col: 42, offset: 129285},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 13, offset: 105888},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3082, col: 19, offset: 105894},
										expr: &ruleRefExpr{
											pos:  position{line: 3082, col: 19, offset: 105894},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3082, col: 30, offset: 105905},
									expr: &seqExpr{
										pos: position{line: 3082, col: 31, offset: 105906},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3082, col: 31, offset: 105906},
												expr: &charClassMatcher{
													pos:        position{line: 3806, col: 36, offset: 129238},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 3082, col: 34, offset: 105909},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 40, offset: 105915},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonmixinArgList49,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgList",
			pos:  position{line: 3100, col: 1, offset: 106451},
			expr: &choiceExpr{
				pos: position{line: 3100, col: 27, offset: 106477},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3100, col: 27, offset: 106477},
						run: (*parser).callonsingleLineMixinArgList2,
						expr: &seqExpr{
							pos: position{line: 3100, col: 27, offset: 106477},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3100, col: 27, offset: 106477},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3100, col: 31, offset: 106481},
									expr: &litMatcher{
										pos:        position{line: 3100, col: 31, offset: 106481},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3100, col: 36, offset: 106486},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3100, col: 42, offset: 106492},
										expr: &ruleRefExpr{
											pos:  position{line: 3100, col: 42, offset: 106492},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3100, col: 63, offset: 106513},
									expr: &litMatcher{
										pos:        position{line: 3100, col: 63, offset: 106513},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3100, col: 68, offset: 106518},
									expr: &seqExpr{
										pos: position{line: 3100, col: 69, offset: 106519},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3100, col: 69, offset: 106519},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 3100, col: 73, offset: 106523},
												expr: &litMatcher{
													pos:        position{line: 3100, col: 73, offset: 106523},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3100, col: 80, offset: 106530},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3817, col: 12, offset: 129614},
										run: (*parser).callonsingleLineMixinArgList18,
										expr: &litMatcher{
											pos:        position{line: 3817, col: 12, offset: 129614},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3106, col: 5, offset: 106729},
						run: (*parser).callonsingleLineMixinArgList20,
						expr: &seqExpr{
							pos: position{line: 3106, col: 5, offset: 106729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3106, col: 5, offset: 106729},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3106, col: 9, offset: 106733},
									expr: &litMatcher{
										pos:        position{line: 3106, col: 9, offset: 106733},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3106, col: 14, offset: 106738},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3106, col: 20, offset: 106744},
										expr: &ruleRefExpr{
											pos:  position{line: 3106, col: 20, offset: 106744},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3106, col: 41, offset: 106765},
									expr: &seqExpr{
										pos: position{line: 3106, col: 42, offset: 106766},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3106, col: 42, offset: 106766},
												expr: &litMatcher{
													pos:        position{line: 3106, col: 42, offset: 106766},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3106, col: 47, offset: 106771},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3106, col: 53, offset: 106777},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsingleLineMixinArgList34,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgs",
			pos:  position{line: 3125, col: 1, offset: 107314},
			expr: &actionExpr{
				pos: position{line: 3125, col: 14, offset: 107327},
				run: (*parser).callonmixinArgs1,
				expr: &seqExpr{
					pos: position{line: 3125, col: 14, offset: 107327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3125, col: 14, offset: 107327},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3125, col: 21, offset: 107334},
								name: "mixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 3125, col: 30, offset: 107343},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3125, col: 36, offset: 107349},
								expr: &seqExpr{
									pos: position{line: 3125, col: 37, offset: 107350},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3125, col: 37, offset: 107350},
											expr: &charClassMatcher{
												pos:        position{line: 3806, col: 36, offset: 129238},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 3125, col: 40, offset: 107353},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3125, col: 44, offset: 107357},
											expr: &choiceExpr{
												pos: position{line: 3810, col: 20, offset: 129356},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																expr: &litMatcher{
																	pos:        position{line: 3807, col: 36, offset: 129279},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3807, col: 42, offset: 129285},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3125, col: 48, offset: 107361},
											name: "mixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgs",
			pos:  position{line: 3135, col: 1, offset: 107622},
			expr: &actionExpr{
				pos: position{line: 3135, col: 24, offset: 107645},
				run: (*parser).callonsingleLineMixinArgs1,
				expr: &seqExpr{
					pos: position{line: 3135, col: 24, offset: 107645},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3135, col: 24, offset: 107645},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3135, col: 31, offset: 107652},
								name: "singleLineMixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 3135, col: 50, offset: 107671},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3135, col: 56, offset: 107677},
								expr: &seqExpr{
									pos: position{line: 3135, col: 57, offset: 107678},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3135, col: 57, offset: 107678},
											expr: &litMatcher{
												pos:        position{line: 3135, col: 57, offset: 107678},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 3135, col: 62, offset: 107683},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3135, col: 66, offset: 107687},
											expr: &litMatcher{
												pos:        position{line: 3135, col: 66, offset: 107687},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3135, col: 71, offset: 107692},
											name: "singleLineMixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArg",
			pos:  position{line: 3146, col: 1, offset: 107964},
			expr: &choiceExpr{
				pos: position{line: 3146, col: 13, offset: 107976},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3146, col: 13, offset: 107976},
						run: (*parser).callonmixinArg2,
						expr: &seqExpr{
							pos: position{line: 3146, col: 13, offset: 107976},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3146, col: 13, offset: 107976},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 799, col: 20, offset: 24253},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 799, col: 20, offset: 24253},
												run: (*parser).callonmixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 799, col: 20, offset: 24253},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 757, col: 10, offset: 22837},
																run: (*parser).callonmixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 757, col: 10, offset: 22837},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 5, offset: 22931},
																run: (*parser).callonmixinArg15,
																expr: &seqExpr{
																	pos: position{line: 759, col: 5, offset: 22931},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 759, col: 5, offset: 22931},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 759, col: 13, offset: 22939},
																						expr: &litMatcher{
																							pos:        position{line: 759, col: 13, offset: 22939},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 759, col: 18, offset: 22944},
																						expr: &choiceExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 759, col: 19, offset: 22945},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 759, col: 19, offset: 22945},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 759, col: 28, offset: 22954},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 38, offset: 22964},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 759, col: 49, offset: 22975},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonmixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 801, col: 5, offset: 24295},
												run: (*parser).callonmixinArg34,
												expr: &seqExpr{
													pos: position{line: 801, col: 5, offset: 24295},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 801, col: 5, offset: 24295},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 801, col: 12, offset: 24302},
																expr: &charClassMatcher{
																	pos:        position{line: 801, col: 12, offset: 24302},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 801, col: 29, offset: 24319},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonmixinArg40,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3146, col: 35, offset: 107998},
									expr: &litMatcher{
										pos:        position{line: 3146, col: 35, offset: 107998},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3146, col: 40, offset: 108003},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3146, col: 44, offset: 108007},
									expr: &litMatcher{
										pos:        position{line: 3146, col: 44, offset: 108007},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3146, col: 49, offset: 108012},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3146, col: 54, offset: 108017},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3151, col: 5, offset: 108144},
						run: (*parser).callonmixinArg53,
						expr: &seqExpr{
							pos: position{line: 3151, col: 5, offset: 108144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3151, col: 5, offset: 108144},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 799, col: 20, offset: 24253},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 799, col: 20, offset: 24253},
												run: (*parser).callonmixinArg57,
												expr: &labeledExpr{
													pos:   position{line: 799, col: 20, offset: 24253},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 757, col: 10, offset: 22837},
																run: (*parser).callonmixinArg60,
																expr: &labeledExpr{
																	pos:   position{line: 757, col: 10, offset: 22837},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 5, offset: 22931},
																run: (*parser).callonmixinArg66,
																expr: &seqExpr{
																	pos: position{line: 759, col: 5, offset: 22931},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 759, col: 5, offset: 22931},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 759, col: 13, offset: 22939},
																						expr: &litMatcher{
																							pos:        position{line: 759, col: 13, offset: 22939},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 759, col: 18, offset: 22944},
																						expr: &choiceExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 759, col: 19, offset: 22945},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 759, col: 19, offset: 22945},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 759, col: 28, offset: 22954},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 38, offset: 22964},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 759, col: 49, offset: 22975},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonmixinArg79,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 801, col: 5, offset: 24295},
												run: (*parser).callonmixinArg85,
												expr: &seqExpr{
													pos: position{line: 801, col: 5, offset: 24295},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 801, col: 5, offset: 24295},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 801, col: 12, offset: 24302},
																expr: &charClassMatcher{
																	pos:        position{line: 801, col: 12, offset: 24302},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 801, col: 29, offset: 24319},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonmixinArg91,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3151, col: 27, offset: 108166},
									expr: &seqExpr{
										pos: position{line: 3151, col: 28, offset: 108167},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3151, col: 28, offset: 108167},
												expr: &litMatcher{
													pos:        position{line: 3151, col: 28, offset: 108167},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3151, col: 33, offset: 108172},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3151, col: 39, offset: 108178},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonmixinArg103,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArg",
			pos:  position{line: 3166, col: 1, offset: 108672},
			expr: &choiceExpr{
				pos: position{line: 3166, col: 23, offset: 108694},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3166, col: 23, offset: 108694},
						run: (*parser).callonsingleLineMixinArg2,
						expr: &seqExpr{
							pos: position{line: 3166, col: 23, offset: 108694},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3166, col: 23, offset: 108694},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 799, col: 20, offset: 24253},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 799, col: 20, offset: 24253},
												run: (*parser).callonsingleLineMixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 799, col: 20, offset: 24253},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 757, col: 10, offset: 22837},
																run: (*parser).callonsingleLineMixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 757, col: 10, offset: 22837},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 5, offset: 22931},
																run: (*parser).callonsingleLineMixinArg15,
																expr: &seqExpr{
																	pos: position{line: 759, col: 5, offset: 22931},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 759, col: 5, offset: 22931},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 759, col: 13, offset: 22939},
																						expr: &litMatcher{
																							pos:        position{line: 759, col: 13, offset: 22939},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 759, col: 18, offset: 22944},
																						expr: &choiceExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 759, col: 19, offset: 22945},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 759, col: 19, offset: 22945},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 759, col: 28, offset: 22954},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 38, offset: 22964},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 759, col: 49, offset: 22975},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonsingleLineMixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 801, col: 5, offset: 24295},
												run: (*parser).callonsingleLineMixinArg34,
												expr: &seqExpr{
													pos: position{line: 801, col: 5, offset: 24295},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 801, col: 5, offset: 24295},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 801, col: 12, offset: 24302},
																expr: &charClassMatcher{
																	pos:        position{line: 801, col: 12, offset: 24302},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 801, col: 29, offset: 24319},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonsingleLineMixinArg40,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3166, col: 45, offset: 108716},
									expr: &litMatcher{
										pos:        position{line: 3166, col: 45, offset: 108716},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3166, col: 50, offset: 108721},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3166, col: 54, offset: 108725},
									expr: &litMatcher{
										pos:        position{line: 3166, col: 54, offset: 108725},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3166, col: 59, offset: 108730},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3166, col: 64, offset: 108735},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3171, col: 5, offset: 108872},
						run: (*parser).callonsingleLineMixinArg53,
						expr: &seqExpr{
							pos: position{line: 3171, col: 5, offset: 108872},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3171, col: 5, offset: 108872},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 799, col: 20, offset: 24253},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 799, col: 20, offset: 24253},
												run: (*parser).callonsingleLineMixinArg57,
												expr: &labeledExpr{
													pos:   position{line: 799, col: 20, offset: 24253},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 757, col: 10, offset: 22837},
																run: (*parser).callonsingleLineMixinArg60,
																expr: &labeledExpr{
																	pos:   position{line: 757, col: 10, offset: 22837},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2408, col: 17, offset: 81561},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2391, col: 20, offset: 81316},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2408, col: 26, offset: 81570},
																				expr: &charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 5, offset: 22931},
																run: (*parser).callonsingleLineMixinArg66,
																expr: &seqExpr{
																	pos: position{line: 759, col: 5, offset: 22931},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 759, col: 5, offset: 22931},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 759, col: 13, offset: 22939},
																						expr: &litMatcher{
																							pos:        position{line: 759, col: 13, offset: 22939},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 759, col: 18, offset: 22944},
																						expr: &choiceExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 759, col: 19, offset: 22945},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 759, col: 19, offset: 22945},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 759, col: 28, offset: 22954},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 38, offset: 22964},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 759, col: 49, offset: 22975},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3797, col: 8, offset: 128940},
																				run: (*parser).callonsingleLineMixinArg79,
																				expr: &choiceExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							expr: &anyMatcher{
																								line: 3797, col: 10, offset: 128942,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3797, col: 14, offset: 128946},
																							expr: &anyMatcher{
																								line: 3797, col: 15, offset: 128947,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 801, col: 5, offset: 24295},
												run: (*parser).callonsingleLineMixinArg85,
												expr: &seqExpr{
													pos: position{line: 801, col: 5, offset: 24295},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 801, col: 5, offset: 24295},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 801, col: 12, offset: 24302},
																expr: &charClassMatcher{
																	pos:        position{line: 801, col: 12, offset: 24302},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 801, col: 29, offset: 24319},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3797, col: 8, offset: 128940},
																run: (*parser).callonsingleLineMixinArg91,
																expr: &choiceExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			expr: &anyMatcher{
																				line: 3797, col: 10, offset: 128942,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3797, col: 14, offset: 128946},
																			expr: &anyMatcher{
																				line: 3797, col: 15, offset: 128947,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3171, col: 27, offset: 108894},
									expr: &seqExpr{
										pos: position{line: 3171, col: 28, offset: 108895},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3171, col: 28, offset: 108895},
												expr: &litMatcher{
													pos:        position{line: 3171, col: 28, offset: 108895},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3171, col: 33, offset: 108900},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3171, col: 39, offset: 108906},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonsingleLineMixinArg103,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallBody",
			pos:  position{line: 3187, col: 1, offset: 109401},
			expr: &choiceExpr{
				pos: position{line: 3187, col: 18, offset: 109418},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3187, col: 18, offset: 109418},
						run: (*parser).callonmixinCallBody2,
						expr: &labeledExpr{
							pos:   position{line: 3187, col: 18, offset: 109418},
							label: "shI",
							expr: &ruleRefExpr{
								pos:  position{line: 3187, col: 22, offset: 109422},
								name: "MixinMainBlockShorthand",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3189, col: 5, offset: 109515},
						name: "Beaitb",
					},
				},
			},
		},
		{
			name: "singleLineMixinCallBody",
			pos:  position{line: 3190, col: 1, offset: 109522},
			expr: &ruleRefExpr{
				pos:  position{line: 3190, col: 28, offset: 109549},
				name: "Beait",
			},
		},
		{
			name: "MixinMainBlockShorthand",
			pos:  position{line: 3196, col: 1, offset: 109757},
			expr: &choiceExpr{
				pos: position{line: 3196, col: 28, offset: 109784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3196, col: 28, offset: 109784},
						run: (*parser).callonMixinMainBlockShorthand2,
						expr: &seqExpr{
							pos: position{line: 3196, col: 28, offset: 109784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3196, col: 28, offset: 109784},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3196, col: 33, offset: 109789},
									expr: &actionExpr{
										pos: position{line: 1384, col: 21, offset: 44047},
										run: (*parser).callonMixinMainBlockShorthand6,
										expr: &oneOrMoreExpr{
											pos: position{line: 1384, col: 21, offset: 44047},
											expr: &charClassMatcher{
												pos:        position{line: 3795, col: 12, offset: 128924},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3196, col: 55, offset: 109811},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 3196, col: 61, offset: 109817},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3201, col: 5, offset: 109940},
						run: (*parser).callonMixinMainBlockShorthand20,
						expr: &seqExpr{
							pos: position{line: 3201, col: 5, offset: 109940},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3201, col: 5, offset: 109940},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3201, col: 10, offset: 109945},
									expr: &actionExpr{
										pos: position{line: 1384, col: 21, offset: 44047},
										run: (*parser).callonMixinMainBlockShorthand24,
										expr: &oneOrMoreExpr{
											pos: position{line: 1384, col: 21, offset: 44047},
											expr: &charClassMatcher{
												pos:        position{line: 3795, col: 12, offset: 128924},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3201, col: 28, offset: 109963},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonMixinMainBlockShorthand28,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Func",
			pos:  position{line: 3403, col: 1, offset: 115922},
			expr: &choiceExpr{
				pos: position{line: 3403, col: 9, offset: 115930},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3403, col: 9, offset: 115930},
						run: (*parser).callonFunc2,
						expr: &seqExpr{
							pos: position{line: 3403, col: 9, offset: 115930},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3403, col: 9, offset: 115930},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 3403, col: 16, offset: 115937},
									expr: &litMatcher{
										pos:        position{line: 3403, col: 16, offset: 115937},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3403, col: 21, offset: 115942},
									label: "nameI",
									expr: &actionExpr{
										pos: position{line: 2369, col: 12, offset: 80635},
										run: (*parser).callonFunc8,
										expr: &labeledExpr{
											pos:   position{line: 2369, col: 12, offset: 80635},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2408, col: 17, offset: 81561},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2391, col: 20, offset: 81316},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2408, col: 26, offset: 81570},
														expr: &charClassMatcher{
															pos:        position{line: 2391, col: 20, offset: 81316},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3403, col: 35, offset: 115956},
									label: "paramsI",
									expr: &choiceExpr{
										pos: position{line: 3404, col: 5, offset: 115970},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3404, col: 5, offset: 115970},
												run: (*parser).callonFunc16,
												expr: &seqExpr{
													pos: position{line: 3404, col: 5, offset: 115970},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3404, col: 5, offset: 115970},
															label: "lParenPosI",
															expr: &actionExpr{
																pos: position{line: 3816, col: 12, offset: 129576},
																run: (*parser).callonFunc19,
																expr: &litMatcher{
																	pos:        position{line: 3816, col: 12, offset: 129576},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3404, col: 24, offset: 115989},
															label: "paramsI",
															expr: &choiceExpr{
																pos: position{line: 3405, col: 9, offset: 116007},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3405, col: 9, offset: 116007},
																		run: (*parser).callonFunc23,
																		expr: &seqExpr{
																			pos: position{line: 3405, col: 9, offset: 116007},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3405, col: 9, offset: 116007},
																					expr: &choiceExpr{
																						pos: position{line: 3810, col: 20, offset: 129356},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 3806, col: 36, offset: 129238},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&seqExpr{
																								pos: position{line: 3807, col: 36, offset: 129279},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3807, col: 36, offset: 129279},
																										expr: &litMatcher{
																											pos:        position{line: 3807, col: 36, offset: 129279},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 3807, col: 42, offset: 129285},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3405, col: 13, offset: 116011},
																					label: "paramsI",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 3405, col: 21, offset: 116019},
																						expr: &ruleRefExpr{
																							pos:  position{line: 3405, col: 21, offset: 116019},
																							name: "funcParamList",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3405, col: 36, offset: 116034},
																					expr: &litMatcher{
																						pos:        position{line: 3405, col: 36, offset: 116034},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 3405, col: 41, offset: 116039},
																					expr: &seqExpr{
																						pos: position{line: 3405, col: 42, offset: 116040},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3405, col: 42, offset: 116040},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 3405, col: 46, offset: 116044},
																								expr: &choiceExpr{
																									pos: position{line: 3810, col: 20, offset: 129356},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 3806, col: 36, offset: 129238},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 3807, col: 36, offset: 129279},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3807, col: 36, offset: 129279},
																													expr: &litMatcher{
																														pos:        position{line: 3807, col: 36, offset: 129279},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3807, col: 42, offset: 129285},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3407, col: 13, offset: 116128},
																		run: (*parser).callonFunc47,
																		expr: &seqExpr{
																			pos: position{line: 3407, col: 13, offset: 116128},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3407, col: 13, offset: 116128},
																					expr: &charClassMatcher{
																						pos:        position{line: 3407, col: 13, offset: 116128},
																						val:        "[^)]",
																						chars:      []rune{')'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3407, col: 19, offset: 116134},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3797, col: 8, offset: 128940},
																						run: (*parser).callonFunc52,
																						expr: &choiceExpr{
																							pos: position{line: 3797, col: 9, offset: 128941},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3797, col: 9, offset: 128941},
																									expr: &anyMatcher{
																										line: 3797, col: 10, offset: 128942,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3797, col: 14, offset: 128946},
																									expr: &anyMatcher{
																										line: 3797, col: 15, offset: 128947,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3417, col: 7, offset: 116527},
															label: "rParenPosI",
															expr: &actionExpr{
																pos: position{line: 3817, col: 12, offset: 129614},
																run: (*parser).callonFunc59,
																expr: &litMatcher{
																	pos:        position{line: 3817, col: 12, offset: 129614},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3423, col: 9, offset: 116747},
												run: (*parser).callonFunc61,
												expr: &zeroOrMoreExpr{
													pos: position{line: 3423, col: 9, offset: 116747},
													expr: &charClassMatcher{
														pos:        position{line: 3795, col: 12, offset: 128924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3442, col: 5, offset: 117291},
						run: (*parser).callonFunc73,
						expr: &seqExpr{
							pos: position{line: 3442, col: 5, offset: 117291},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3442, col: 5, offset: 117291},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&labeledExpr{
									pos:   position{line: 3442, col: 12, offset: 117298},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonFunc77,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParamList",
			pos:  position{line: 3454, col: 1, offset: 117647},
			expr: &choiceExpr{
				pos: position{line: 3454, col: 18, offset: 117664},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3454, col: 18, offset: 117664},
						name: "funcOtherParamList",
					},
					&ruleRefExpr{
						pos:  position{line: 3454, col: 39, offset: 117685},
						name: "funcOnlyVariadicParamList",
					},
				},
			},
		},
		{
			name: "funcOnlyVariadicParamList",
			pos:  position{line: 3455, col: 1, offset: 117711},
			expr: &actionExpr{
				pos: position{line: 3455, col: 30, offset: 117740},
				run: (*parser).callonfuncOnlyVariadicParamList1,
				expr: &labeledExpr{
					pos:   position{line: 3455, col: 30, offset: 117740},
					label: "variadicI",
					expr: &ruleRefExpr{
						pos:  position{line: 3455, col: 40, offset: 117750},
						name: "funcVariadicParam",
					},
				},
			},
		},
		{
			name: "funcOtherParamList",
			pos:  position{line: 3458, col: 1, offset: 117833},
			expr: &actionExpr{
				pos: position{line: 3458, col: 23, offset: 117855},
				run: (*parser).callonfuncOtherParamList1,
				expr: &seqExpr{
					pos: position{line: 3458, col: 23, offset: 117855},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3458, col: 23, offset: 117855},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3458, col: 30, offset: 117862},
								name: "funcParam",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3458, col: 40, offset: 117872},
							expr: &litMatcher{
								pos:        position{line: 3458, col: 40, offset: 117872},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 3458, col: 45, offset: 117877},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3458, col: 51, offset: 117883},
								expr: &seqExpr{
									pos: position{line: 3458, col: 52, offset: 117884},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3458, col: 52, offset: 117884},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3458, col: 56, offset: 117888},
											expr: &choiceExpr{
												pos: position{line: 3810, col: 20, offset: 129356},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																expr: &litMatcher{
																	pos:        position{line: 3807, col: 36, offset: 129279},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3807, col: 42, offset: 129285},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3458, col: 60, offset: 117892},
											name: "funcParam",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3458, col: 72, offset: 117904},
							label: "variadicI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3458, col: 82, offset: 117914},
								expr: &seqExpr{
									pos: position{line: 3458, col: 83, offset: 117915},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3458, col: 83, offset: 117915},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3458, col: 87, offset: 117919},
											expr: &choiceExpr{
												pos: position{line: 3810, col: 20, offset: 129356},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3806, col: 36, offset: 129238},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3807, col: 36, offset: 129279},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3807, col: 36, offset: 129279},
																expr: &litMatcher{
																	pos:        position{line: 3807, col: 36, offset: 129279},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3807, col: 42, offset: 129285},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3458, col: 91, offset: 117923},
											name: "funcVariadicParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParam",
			pos:  position{line: 3479, col: 1, offset: 118374},
			expr: &choiceExpr{
				pos: position{line: 3479, col: 14, offset: 118387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3479, col: 14, offset: 118387},
						run: (*parser).callonfuncParam2,
						expr: &seqExpr{
							pos: position{line: 3479, col: 14, offset: 118387},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3479, col: 14, offset: 118387},
									label: "namesI",
									expr: &actionExpr{
										pos: position{line: 3502, col: 18, offset: 118967},
										run: (*parser).callonfuncParam5,
										expr: &seqExpr{
											pos: position{line: 3502, col: 18, offset: 118967},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3502, col: 18, offset: 118967},
													label: "firstI",
													expr: &actionExpr{
														pos: position{line: 2369, col: 12, offset: 80635},
														run: (*parser).callonfuncParam8,
														expr: &labeledExpr{
															pos:   position{line: 2369, col: 12, offset: 80635},
															label: "ident",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3502, col: 33, offset: 118982},
													label: "restI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3502, col: 39, offset: 118988},
														expr: &seqExpr{
															pos: position{line: 3502, col: 40, offset: 118989},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3502, col: 40, offset: 118989},
																	expr: &litMatcher{
																		pos:        position{line: 3502, col: 40, offset: 118989},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3502, col: 45, offset: 118994},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3502, col: 49, offset: 118998},
																	expr: &choiceExpr{
																		pos: position{line: 3810, col: 20, offset: 129356},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 3806, col: 36, offset: 129238},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 3807, col: 36, offset: 129279},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3807, col: 36, offset: 129279},
																						expr: &litMatcher{
																							pos:        position{line: 3807, col: 36, offset: 129279},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3807, col: 42, offset: 129285},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2369, col: 12, offset: 80635},
																	run: (*parser).callonfuncParam27,
																	expr: &labeledExpr{
																		pos:   position{line: 2369, col: 12, offset: 80635},
																		label: "ident",
																		expr: &seqExpr{
																			pos: position{line: 2408, col: 17, offset: 81561},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2391, col: 20, offset: 81316},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2408, col: 26, offset: 81570},
																					expr: &charClassMatcher{
																						pos:        position{line: 2391, col: 20, offset: 81316},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 3479, col: 35, offset: 118408},
									expr: &litMatcher{
										pos:        position{line: 3479, col: 35, offset: 118408},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3479, col: 40, offset: 118413},
									label: "typeI",
									expr: &ruleRefExpr{
										pos:  position{line: 3479, col: 46, offset: 118419},
										name: "funcType",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3484, col: 5, offset: 118547},
						run: (*parser).callonfuncParam37,
						expr: &labeledExpr{
							pos:   position{line: 3484, col: 5, offset: 118547},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3484, col: 11, offset: 118553},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcVariadicParam",
			pos:  position{line: 3489, col: 1, offset: 118639},
			expr: &actionExpr{
				pos: position{line: 3489, col: 22, offset: 118660},
				run: (*parser).callonfuncVariadicParam1,
				expr: &seqExpr{
					pos: position{line: 3489, col: 22, offset: 118660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3489, col: 22, offset: 118660},
							label: "nameI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3489, col: 28, offset: 118666},
								expr: &seqExpr{
									pos: position{line: 3489, col: 29, offset: 118667},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 2369, col: 12, offset: 80635},
											run: (*parser).callonfuncVariadicParam6,
											expr: &labeledExpr{
												pos:   position{line: 2369, col: 12, offset: 80635},
												label: "ident",
												expr: &seqExpr{
													pos: position{line: 2408, col: 17, offset: 81561},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2391, col: 20, offset: 81316},
															val:        "[_\\pL]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 2408, col: 26, offset: 81570},
															expr: &charClassMatcher{
																pos:        position{line: 2391, col: 20, offset: 81316},
																val:        "[_\\pL\\pNd]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 3489, col: 37, offset: 118675},
											expr: &litMatcher{
												pos:        position{line: 3489, col: 37, offset: 118675},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3489, col: 44, offset: 118682},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
						&labeledExpr{
							pos:   position{line: 3489, col: 50, offset: 118688},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3489, col: 56, offset: 118694},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcType",
			pos:  position{line: 3514, col: 1, offset: 119273},
			expr: &choiceExpr{
				pos: position{line: 3514, col: 13, offset: 119285},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3514, col: 13, offset: 119285},
						name: "GoType",
					},
					&actionExpr{
						pos: position{line: 3514, col: 22, offset: 119294},
						run: (*parser).callonfuncType3,
						expr: &seqExpr{
							pos: position{line: 3514, col: 22, offset: 119294},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3514, col: 22, offset: 119294},
									label: "typeI",
									expr: &oneOrMoreExpr{
										pos: position{line: 3514, col: 28, offset: 119300},
										expr: &charClassMatcher{
											pos:        position{line: 3514, col: 28, offset: 119300},
											val:        "[^,)]",
											chars:      []rune{',', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3514, col: 35, offset: 119307},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonfuncType9,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 3532, col: 1, offset: 119825},
			expr: &actionExpr{
				pos: position{line: 3532, col: 15, offset: 119839},
				run: (*parser).callonInlineText1,
				expr: &seqExpr{
					pos: position{line: 3532, col: 15, offset: 119839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3532, col: 15, offset: 119839},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
						&labeledExpr{
							pos:   position{line: 3532, col: 19, offset: 119843},
							label: "lineI",
							expr: &ruleRefExpr{
								pos:  position{line: 3532, col: 25, offset: 119849},
								name: "TextLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 3543, col: 1, offset: 120151},
			expr: &choiceExpr{
				pos: position{line: 3543, col: 15, offset: 120165},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3543, col: 15, offset: 120165},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3543, col: 15, offset: 120165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3543, col: 15, offset: 120165},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3543, col: 20, offset: 120170},
									label: "firstLineI",
									expr: &choiceExpr{
										pos: position{line: 3543, col: 32, offset: 120182},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3543, col: 32, offset: 120182},
												name: "TextLine",
											},
											&seqExpr{
												pos: position{line: 3794, col: 12, offset: 128891},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3794, col: 12, offset: 128891},
														expr: &charClassMatcher{
															pos:        position{line: 3806, col: 36, offset: 129238},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3794, col: 16, offset: 128895},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 16, offset: 128895},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		expr: &litMatcher{
																			pos:        position{line: 3794, col: 16, offset: 128895},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3794, col: 22, offset: 128901},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3793, col: 12, offset: 128877},
																expr: &anyMatcher{
																	line: 3793, col: 13, offset: 128878,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3543, col: 48, offset: 120198},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3543, col: 65, offset: 120215},
										expr: &seqExpr{
											pos: position{line: 3543, col: 66, offset: 120216},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3543, col: 66, offset: 120216},
													expr: &oneOrMoreExpr{
														pos: position{line: 3808, col: 36, offset: 129325},
														expr: &seqExpr{
															pos: position{line: 3808, col: 37, offset: 129326},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3808, col: 37, offset: 129326},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3807, col: 36, offset: 129279},
																	expr: &litMatcher{
																		pos:        position{line: 3807, col: 36, offset: 129279},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3807, col: 42, offset: 129285},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 3543, col: 75, offset: 120225},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 3543, col: 88, offset: 120238},
													name: "TextLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3564, col: 5, offset: 120753},
						run: (*parser).callonArrowBlock31,
						expr: &seqExpr{
							pos: position{line: 3564, col: 5, offset: 120753},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3564, col: 5, offset: 120753},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineArrowBlock",
			pos:  position{line: 3568, col: 1, offset: 120816},
			expr: &choiceExpr{
				pos: position{line: 3568, col: 21, offset: 120836},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3568, col: 21, offset: 120836},
						run: (*parser).callonInlineArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3568, col: 21, offset: 120836},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3568, col: 21, offset: 120836},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3568, col: 26, offset: 120841},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3568, col: 32, offset: 120847},
										name: "TextLine",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3573, col: 5, offset: 120982},
						run: (*parser).callonInlineArrowBlock7,
						expr: &seqExpr{
							pos: position{line: 3573, col: 5, offset: 120982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3573, col: 5, offset: 120982},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&labeledExpr{
									pos:   position{line: 3573, col: 9, offset: 120986},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3797, col: 8, offset: 128940},
										run: (*parser).callonInlineArrowBlock11,
										expr: &choiceExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3797, col: 9, offset: 128941},
													expr: &anyMatcher{
														line: 3797, col: 10, offset: 128942,
													},
												},
												&notExpr{
													pos: position{line: 3797, col: 14, offset: 128946},
													expr: &anyMatcher{
														line: 3797, col: 15, offset: 128947,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3573, col: 18, offset: 120995},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3573, col: 24, offset: 121001},
										name: "TextLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextLine",
			pos:  position{line: 3591, col: 1, offset: 121581},
			expr: &actionExpr{
				pos: position{line: 3591, col: 13, offset: 121593},
				run: (*parser).callonTextLine1,
				expr: &seqExpr{
					pos: position{line: 3591, col: 13, offset: 121593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3591, col: 13, offset: 121593},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3591, col: 20, offset: 121600},
								expr: &ruleRefExpr{
									pos:  position{line: 3591, col: 20, offset: 121600},
									name: "TextItem",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3794, col: 12, offset: 128891},
							expr: &charClassMatcher{
								pos:        position{line: 3806, col: 36, offset: 129238},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3794, col: 16, offset: 128895},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											expr: &litMatcher{
												pos:        position{line: 3794, col: 16, offset: 128895},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3794, col: 22, offset: 128901},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3793, col: 12, offset: 128877},
									expr: &anyMatcher{
										line: 3793, col: 13, offset: 128878,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextItem",
			pos:  position{line: 3599, col: 1, offset: 121867},
			expr: &choiceExpr{
				pos: position{line: 3599, col: 13, offset: 121879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3605, col: 9, offset: 122088},
						run: (*parser).callonTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 3605, col: 9, offset: 122088},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3605, col: 15, offset: 122094},
								expr: &choiceExpr{
									pos: position{line: 3605, col: 16, offset: 122095},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 3605, col: 16, offset: 122095},
											expr: &seqExpr{
												pos: position{line: 3605, col: 17, offset: 122096},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 3605, col: 17, offset: 122096},
														expr: &seqExpr{
															pos: position{line: 3794, col: 12, offset: 128891},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3794, col: 12, offset: 128891},
																	expr: &charClassMatcher{
																		pos:        position{line: 3806, col: 36, offset: 129238},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3794, col: 16, offset: 128895},
																					expr: &litMatcher{
																						pos:        position{line: 3794, col: 16, offset: 128895},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3794, col: 22, offset: 128901},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3793, col: 12, offset: 128877},
																			expr: &anyMatcher{
																				line: 3793, col: 13, offset: 128878,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3605, col: 22, offset: 122101},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3605, col: 31, offset: 122110},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3599, col: 20, offset: 121886},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 3616, col: 1, offset: 122398},
			expr: &choiceExpr{
				pos: position{line: 3616, col: 18, offset: 122415},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3616, col: 18, offset: 122415},
						name: "SimpleInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3616, col: 40, offset: 122437},
						name: "ElementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3616, col: 63, offset: 122460},
						name: "MixinCallInterpolation",
					},
					&actionExpr{
						pos: position{line: 3618, col: 21, offset: 122523},
						run: (*parser).callonInterpolation5,
						expr: &litMatcher{
							pos:        position{line: 3618, col: 21, offset: 122523},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SimpleInterpolation",
			pos:  position{line: 3642, col: 1, offset: 123370},
			expr: &choiceExpr{
				pos: position{line: 3642, col: 24, offset: 123393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3642, col: 24, offset: 123393},
						run: (*parser).callonSimpleInterpolation2,
						expr: &seqExpr{
							pos: position{line: 3642, col: 24, offset: 123393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3642, col: 24, offset: 123393},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 3642, col: 28, offset: 123397},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3642, col: 38, offset: 123407},
										expr: &litMatcher{
											pos:        position{line: 3642, col: 38, offset: 123407},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3642, col: 43, offset: 123412},
									label: "valueI",
									expr: &choiceExpr{
										pos: position{line: 3719, col: 27, offset: 126212},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3719, col: 27, offset: 126212},
												run: (*parser).callonSimpleInterpolation10,
												expr: &seqExpr{
													pos: position{line: 3719, col: 27, offset: 126212},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3719, col: 27, offset: 126212},
															label: "lBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3822, col: 14, offset: 129732},
																run: (*parser).callonSimpleInterpolation13,
																expr: &litMatcher{
																	pos:        position{line: 3822, col: 14, offset: 129732},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3719, col: 50, offset: 126235},
															label: "textI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3719, col: 56, offset: 126241},
																expr: &charClassMatcher{
																	pos:        position{line: 3719, col: 56, offset: 126241},
																	val:        "[^]\\r\\n]",
																	chars:      []rune{']', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3719, col: 67, offset: 126252},
															label: "rBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3823, col: 14, offset: 129772},
																run: (*parser).callonSimpleInterpolation19,
																expr: &litMatcher{
																	pos:        position{line: 3823, col: 14, offset: 129772},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3725, col: 5, offset: 126463},
												run: (*parser).callonSimpleInterpolation21,
												expr: &seqExpr{
													pos: position{line: 3725, col: 5, offset: 126463},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3725, col: 5, offset: 126463},
															label: "lBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3822, col: 14, offset: 129732},
																run: (*parser).callonSimpleInterpolation24,
																expr: &litMatcher{
																	pos:        position{line: 3822, col: 14, offset: 129732},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3725, col: 28, offset: 126486},
															label: "textI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3725, col: 34, offset: 126492},
																expr: &charClassMatcher{
																	pos:        position{line: 3725, col: 34, offset: 126492},
																	val:        "[^]\\r\\n]",
																	chars:      []rune{']', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3794, col: 12, offset: 128891},
															expr: &charClassMatcher{
																pos:        position{line: 3806, col: 36, offset: 129238},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3794, col: 16, offset: 128895},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3794, col: 16, offset: 128895},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3794, col: 16, offset: 128895},
																			expr: &litMatcher{
																				pos:        position{line: 3794, col: 16, offset: 128895},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3794, col: 22, offset: 128901},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3793, col: 12, offset: 128877},
																	expr: &anyMatcher{
																		line: 3793, col: 13, offset: 128878,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3648, col: 5, offset: 123607},
						run: (*parser).callonSimpleInterpolation38,
						expr: &seqExpr{
							pos: position{line: 3648, col: 5, offset: 123607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3648, col: 5, offset: 123607},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 3648, col: 9, offset: 123611},
									label: "valueI",
									expr: &choiceExpr{
										pos: position{line: 3648, col: 17, offset: 123619},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3648, col: 17, offset: 123619},
												name: "expressionInterpolationValue",
											},
											&ruleRefExpr{
												pos:  position{line: 3648, col: 48, offset: 123650},
												name: "fmtExpressionInterpolationValue",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 3659, col: 1, offset: 124006},
			expr: &actionExpr{
				pos: position{line: 3659, col: 25, offset: 124030},
				run: (*parser).callonElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3659, col: 25, offset: 124030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3659, col: 25, offset: 124030},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3659, col: 29, offset: 124034},
							label: "elPosI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonElementInterpolation5,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3659, col: 40, offset: 124045},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2877, col: 16, offset: 99243},
								expr: &charClassMatcher{
									pos:        position{line: 2863, col: 27, offset: 98582},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3659, col: 58, offset: 124063},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3659, col: 65, offset: 124070},
								expr: &ruleRefExpr{
									pos:  position{line: 3659, col: 65, offset: 124070},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3659, col: 96, offset: 124101},
							label: "valueI",
							expr: &ruleRefExpr{
								pos:  position{line: 3659, col: 103, offset: 124108},
								name: "elementInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "elementInterpolationValue",
			pos:  position{line: 3672, col: 1, offset: 124513},
			expr: &choiceExpr{
				pos: position{line: 3672, col: 30, offset: 124542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3719, col: 27, offset: 126212},
						run: (*parser).callonelementInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3719, col: 27, offset: 126212},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3719, col: 27, offset: 126212},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3822, col: 14, offset: 129732},
										run: (*parser).callonelementInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3822, col: 14, offset: 129732},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3719, col: 50, offset: 126235},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3719, col: 56, offset: 126241},
										expr: &charClassMatcher{
											pos:        position{line: 3719, col: 56, offset: 126241},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3719, col: 67, offset: 126252},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 14, offset: 129772},
										run: (*parser).callonelementInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 14, offset: 129772},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3725, col: 5, offset: 126463},
						run: (*parser).callonelementInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3725, col: 5, offset: 126463},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3725, col: 5, offset: 126463},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3822, col: 14, offset: 129732},
										run: (*parser).callonelementInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3822, col: 14, offset: 129732},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 28, offset: 126486},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3725, col: 34, offset: 126492},
										expr: &charClassMatcher{
											pos:        position{line: 3725, col: 34, offset: 126492},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3672, col: 55, offset: 124567},
						name: "expressionInterpolationValue",
					},
					&actionExpr{
						pos: position{line: 3672, col: 86, offset: 124598},
						run: (*parser).callonelementInterpolationValue31,
						expr: &litMatcher{
							pos:        position{line: 3672, col: 86, offset: 124598},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 3674, col: 5, offset: 124650},
						run: (*parser).callonelementInterpolationValue33,
						expr: &andExpr{
							pos: position{line: 3674, col: 5, offset: 124650},
							expr: &choiceExpr{
								pos: position{line: 3674, col: 7, offset: 124652},
								alternatives: []interface{}{
									&anyMatcher{
										line: 3674, col: 7, offset: 124652,
									},
									&notExpr{
										pos: position{line: 3674, col: 11, offset: 124656},
										expr: &anyMatcher{
											line: 3674, col: 12, offset: 124657,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCallInterpolation",
			pos:  position{line: 3688, col: 1, offset: 125137},
			expr: &actionExpr{
				pos: position{line: 3688, col: 27, offset: 125163},
				run: (*parser).callonMixinCallInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3688, col: 27, offset: 125163},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3688, col: 27, offset: 125163},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3688, col: 31, offset: 125167},
							label: "mcPosI",
							expr: &actionExpr{
								pos: position{line: 3797, col: 8, offset: 128940},
								run: (*parser).callonMixinCallInterpolation5,
								expr: &choiceExpr{
									pos: position{line: 3797, col: 9, offset: 128941},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3797, col: 9, offset: 128941},
											expr: &anyMatcher{
												line: 3797, col: 10, offset: 128942,
											},
										},
										&notExpr{
											pos: position{line: 3797, col: 14, offset: 128946},
											expr: &anyMatcher{
												line: 3797, col: 15, offset: 128947,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3688, col: 42, offset: 125178},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3688, col: 46, offset: 125182},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3688, col: 57, offset: 125193},
								expr: &seqExpr{
									pos: position{line: 3688, col: 58, offset: 125194},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 757, col: 10, offset: 22837},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 757, col: 10, offset: 22837},
													run: (*parser).callonMixinCallInterpolation16,
													expr: &labeledExpr{
														pos:   position{line: 757, col: 10, offset: 22837},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2408, col: 17, offset: 81561},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2391, col: 20, offset: 81316},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2408, col: 26, offset: 81570},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 759, col: 5, offset: 22931},
													run: (*parser).callonMixinCallInterpolation22,
													expr: &seqExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 759, col: 5, offset: 22931},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 759, col: 13, offset: 22939},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 759, col: 13, offset: 22939},
																			expr: &litMatcher{
																				pos:        position{line: 759, col: 13, offset: 22939},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 759, col: 18, offset: 22944},
																			expr: &choiceExpr{
																				pos: position{line: 759, col: 19, offset: 22945},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 759, col: 19, offset: 22945},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 759, col: 19, offset: 22945},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 759, col: 28, offset: 22954},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 759, col: 38, offset: 22964},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 759, col: 49, offset: 22975},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3797, col: 8, offset: 128940},
																	run: (*parser).callonMixinCallInterpolation35,
																	expr: &choiceExpr{
																		pos: position{line: 3797, col: 9, offset: 128941},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3797, col: 9, offset: 128941},
																				expr: &anyMatcher{
																					line: 3797, col: 10, offset: 128942,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3797, col: 14, offset: 128946},
																				expr: &anyMatcher{
																					line: 3797, col: 15, offset: 128947,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3688, col: 64, offset: 125200},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3688, col: 70, offset: 125206},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 771, col: 14, offset: 23392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 771, col: 14, offset: 23392},
										run: (*parser).callonMixinCallInterpolation44,
										expr: &labeledExpr{
											pos:   position{line: 771, col: 14, offset: 23392},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 757, col: 10, offset: 22837},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 757, col: 10, offset: 22837},
														run: (*parser).callonMixinCallInterpolation47,
														expr: &labeledExpr{
															pos:   position{line: 757, col: 10, offset: 22837},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2408, col: 17, offset: 81561},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2391, col: 20, offset: 81316},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2408, col: 26, offset: 81570},
																		expr: &charClassMatcher{
																			pos:        position{line: 2391, col: 20, offset: 81316},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 759, col: 5, offset: 22931},
														run: (*parser).callonMixinCallInterpolation53,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 22931},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 22931},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 759, col: 13, offset: 22939},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 759, col: 13, offset: 22939},
																				expr: &litMatcher{
																					pos:        position{line: 759, col: 13, offset: 22939},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 759, col: 18, offset: 22944},
																				expr: &choiceExpr{
																					pos: position{line: 759, col: 19, offset: 22945},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 759, col: 19, offset: 22945},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 759, col: 19, offset: 22945},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 759, col: 28, offset: 22954},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 759, col: 38, offset: 22964},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 759, col: 49, offset: 22975},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3797, col: 8, offset: 128940},
																		run: (*parser).callonMixinCallInterpolation66,
																		expr: &choiceExpr{
																			pos: position{line: 3797, col: 9, offset: 128941},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3797, col: 9, offset: 128941},
																					expr: &anyMatcher{
																						line: 3797, col: 10, offset: 128942,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3797, col: 14, offset: 128946},
																					expr: &anyMatcher{
																						line: 3797, col: 15, offset: 128947,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 773, col: 5, offset: 23434},
										run: (*parser).callonMixinCallInterpolation72,
										expr: &seqExpr{
											pos: position{line: 773, col: 5, offset: 23434},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 773, col: 5, offset: 23434},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonMixinCallInterpolation75,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 773, col: 14, offset: 23443},
													expr: &choiceExpr{
														pos: position{line: 773, col: 16, offset: 23445},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3794, col: 12, offset: 128891},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3794, col: 12, offset: 128891},
																		expr: &charClassMatcher{
																			pos:        position{line: 3806, col: 36, offset: 129238},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3794, col: 16, offset: 128895},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3794, col: 16, offset: 128895},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3794, col: 16, offset: 128895},
																						expr: &litMatcher{
																							pos:        position{line: 3794, col: 16, offset: 128895},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3794, col: 22, offset: 128901},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3793, col: 12, offset: 128877},
																				expr: &anyMatcher{
																					line: 3793, col: 13, offset: 128878,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 773, col: 22, offset: 23451},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 784, col: 5, offset: 23783},
										run: (*parser).callonMixinCallInterpolation94,
										expr: &seqExpr{
											pos: position{line: 784, col: 5, offset: 23783},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 784, col: 5, offset: 23783},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 784, col: 12, offset: 23790},
														expr: &charClassMatcher{
															pos:        position{line: 784, col: 12, offset: 23790},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 784, col: 29, offset: 23807},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonMixinCallInterpolation100,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3688, col: 86, offset: 125222},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3688, col: 92, offset: 125228},
								expr: &ruleRefExpr{
									pos:  position{line: 3688, col: 92, offset: 125228},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3688, col: 116, offset: 125252},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3688, col: 123, offset: 125259},
								expr: &ruleRefExpr{
									pos:  position{line: 3688, col: 123, offset: 125259},
									name: "mixinCallInterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallInterpolationValue",
			pos:  position{line: 3710, col: 1, offset: 125877},
			expr: &choiceExpr{
				pos: position{line: 3710, col: 32, offset: 125908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3719, col: 27, offset: 126212},
						run: (*parser).callonmixinCallInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3719, col: 27, offset: 126212},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3719, col: 27, offset: 126212},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3822, col: 14, offset: 129732},
										run: (*parser).callonmixinCallInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3822, col: 14, offset: 129732},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3719, col: 50, offset: 126235},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3719, col: 56, offset: 126241},
										expr: &charClassMatcher{
											pos:        position{line: 3719, col: 56, offset: 126241},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3719, col: 67, offset: 126252},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 14, offset: 129772},
										run: (*parser).callonmixinCallInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 14, offset: 129772},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3725, col: 5, offset: 126463},
						run: (*parser).callonmixinCallInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3725, col: 5, offset: 126463},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3725, col: 5, offset: 126463},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3822, col: 14, offset: 129732},
										run: (*parser).callonmixinCallInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3822, col: 14, offset: 129732},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 28, offset: 126486},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3725, col: 34, offset: 126492},
										expr: &charClassMatcher{
											pos:        position{line: 3725, col: 34, offset: 126492},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3710, col: 57, offset: 125933},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "expressionInterpolationValue",
			pos:  position{line: 3753, col: 1, offset: 127314},
			expr: &choiceExpr{
				pos: position{line: 3753, col: 33, offset: 127346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3753, col: 33, offset: 127346},
						run: (*parser).callonexpressionInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3753, col: 33, offset: 127346},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3753, col: 33, offset: 127346},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3819, col: 12, offset: 129653},
										run: (*parser).callonexpressionInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3819, col: 12, offset: 129653},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3753, col: 52, offset: 127365},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3753, col: 58, offset: 127371},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 3753, col: 79, offset: 127392},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3820, col: 12, offset: 129691},
										run: (*parser).callonexpressionInterpolationValue10,
										expr: &litMatcher{
											pos:        position{line: 3820, col: 12, offset: 129691},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3759, col: 5, offset: 127613},
						run: (*parser).callonexpressionInterpolationValue12,
						expr: &seqExpr{
							pos: position{line: 3759, col: 5, offset: 127613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3759, col: 5, offset: 127613},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3819, col: 12, offset: 129653},
										run: (*parser).callonexpressionInterpolationValue15,
										expr: &litMatcher{
											pos:        position{line: 3819, col: 12, offset: 129653},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3759, col: 24, offset: 127632},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3759, col: 30, offset: 127638},
										name: "SingleLineExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3794, col: 12, offset: 128891},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3794, col: 16, offset: 128895},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3794, col: 16, offset: 128895},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3794, col: 16, offset: 128895},
													expr: &litMatcher{
														pos:        position{line: 3794, col: 16, offset: 128895},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3794, col: 22, offset: 128901},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3793, col: 12, offset: 128877},
											expr: &anyMatcher{
												line: 3793, col: 13, offset: 128878,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fmtExpressionInterpolationValue",
			pos:  position{line: 3783, col: 1, offset: 128455},
			expr: &actionExpr{
				pos: position{line: 3783, col: 36, offset: 128490},
				run: (*parser).callonfmtExpressionInterpolationValue1,
				expr: &seqExpr{
					pos: position{line: 3783, col: 36, offset: 128490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3783, col: 36, offset: 128490},
							label: "fmtDirectiveI",
							expr: &choiceExpr{
								pos: position{line: 1838, col: 17, offset: 59931},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1838, col: 17, offset: 59931},
										run: (*parser).callonfmtExpressionInterpolationValue5,
										expr: &seqExpr{
											pos: position{line: 1838, col: 17, offset: 59931},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1838, col: 17, offset: 59931},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1838, col: 21, offset: 59935},
													expr: &charClassMatcher{
														pos:        position{line: 1854, col: 12, offset: 60612},
														val:        "[ 0+-#]",
														chars:      []rune{' ', '0'},
														ranges:     []rune{'+', '#'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 1838, col: 30, offset: 59944},
													expr: &seqExpr{
														pos: position{line: 1838, col: 31, offset: 59945},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1838, col: 31, offset: 59945},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 1838, col: 36, offset: 59950},
																expr: &charClassMatcher{
																	pos:        position{line: 1838, col: 36, offset: 59950},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 1838, col: 45, offset: 59959},
													expr: &seqExpr{
														pos: position{line: 1838, col: 46, offset: 59960},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1838, col: 46, offset: 59960},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1838, col: 50, offset: 59964},
																expr: &charClassMatcher{
																	pos:        position{line: 1838, col: 50, offset: 59964},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1855, col: 12, offset: 60631},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1855, col: 12, offset: 60631},
															val:        "[vTtbcdoOqxXUeEfFgGsp]",
															chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
															ignoreCase: false,
															inverted:   false,
														},
														&actionExpr{
															pos: position{line: 1855, col: 74, offset: 60693},
															run: (*parser).callonfmtExpressionInterpolationValue22,
															expr: &andExpr{
																pos: position{line: 1855, col: 74, offset: 60693},
																expr: &charClassMatcher{
																	pos:        position{line: 1855, col: 76, offset: 60695},
																	val:        "[{\"`]",
																	chars:      []rune{'{', '"', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1867, col: 5, offset: 61232},
															run: (*parser).callonfmtExpressionInterpolationValue25,
															expr: &anyMatcher{
																line: 1867, col: 5, offset: 61232,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1840, col: 5, offset: 60022},
										run: (*parser).callonfmtExpressionInterpolationValue27,
										expr: &seqExpr{
											pos: position{line: 1840, col: 5, offset: 60022},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1840, col: 5, offset: 60022},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1840, col: 9, offset: 60026},
													expr: &charClassMatcher{
														pos:        position{line: 1840, col: 9, offset: 60026},
														val:        "[^`\"{]",
														chars:      []rune{'`', '"', '{'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&labeledExpr{
													pos:   position{line: 1840, col: 17, offset: 60034},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3797, col: 8, offset: 128940},
														run: (*parser).callonfmtExpressionInterpolationValue33,
														expr: &choiceExpr{
															pos: position{line: 3797, col: 9, offset: 128941},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3797, col: 9, offset: 128941},
																	expr: &anyMatcher{
																		line: 3797, col: 10, offset: 128942,
																	},
																},
																&notExpr{
																	pos: position{line: 3797, col: 14, offset: 128946},
																	expr: &anyMatcher{
																		line: 3797, col: 15, offset: 128947,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3783, col: 63, offset: 128517},
							label: "eivI",
							expr: &ruleRefExpr{
								pos:  position{line: 3783, col: 68, offset: 128522},
								name: "expressionInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION_IGNORE_ADDITIONAL",
			pos:  position{line: 4117, col: 1, offset: 142812},
			expr: &choiceExpr{
				pos: position{line: 4117, col: 34, offset: 142845},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4117, col: 34, offset: 142845},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4117, col: 34, offset: 142845},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL3,
							},
							&actionExpr{
								pos: position{line: 3895, col: 17, offset: 133132},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 3895, col: 17, offset: 133132},
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 3895, col: 41, offset: 133156},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL7,
							},
							&choiceExpr{
								pos: position{line: 3947, col: 5, offset: 135066},
								alternatives: []interface{}{
									&andCodeExpr{
										pos: position{line: 3947, col: 5, offset: 135066},
										run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL9,
									},
									&seqExpr{
										pos: position{line: 3949, col: 9, offset: 135149},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3949, col: 9, offset: 135149},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL11,
											},
											&stateCodeExpr{
												pos: position{line: 3951, col: 7, offset: 135272},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL12,
											},
										},
									},
									&seqExpr{
										pos: position{line: 3958, col: 9, offset: 135608},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3958, col: 9, offset: 135608},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL14,
											},
											&andCodeExpr{
												pos: position{line: 3960, col: 7, offset: 135716},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL15,
											},
											&choiceExpr{
												pos: position{line: 4013, col: 9, offset: 138051},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 4013, col: 9, offset: 138051},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 4013, col: 9, offset: 138051},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL18,
															},
															&andCodeExpr{
																pos: position{line: 4017, col: 11, offset: 138301},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL19,
															},
															&stateCodeExpr{
																pos: position{line: 4083, col: 11, offset: 141507},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL20,
															},
														},
													},
													&seqExpr{
														pos: position{line: 4091, col: 13, offset: 141860},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 4091, col: 13, offset: 141860},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL22,
															},
															&andCodeExpr{
																pos: position{line: 4095, col: 11, offset: 142115},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL23,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 4120, col: 17, offset: 142996},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4120, col: 17, offset: 142996},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL25,
							},
							&ruleRefExpr{
								pos:  position{line: 4122, col: 3, offset: 143062},
								name: "_INDENTATION_IGNORE_ADDITIONAL",
							},
						},
					},
				},
			},
		},
		{
			name: "_INDENTATION_IGNORE_ADDITIONAL",
			pos:  position{line: 4124, col: 1, offset: 143094},
			expr: &choiceExpr{
				pos: position{line: 4124, col: 35, offset: 143128},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4125, col: 5, offset: 143134},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 4126, col: 9, offset: 143144},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 4126, col: 9, offset: 143144},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4126, col: 9, offset: 143144},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL5,
											},
											&choiceExpr{
												pos: position{line: 4131, col: 13, offset: 143408},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 4131, col: 13, offset: 143408},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 4131, col: 13, offset: 143408},
																expr: &charClassMatcher{
																	pos:        position{line: 3806, col: 36, offset: 129238},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 4131, col: 16, offset: 143411},
																run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL10,
															},
														},
													},
													&seqExpr{
														pos: position{line: 4142, col: 17, offset: 143805},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 4142, col: 17, offset: 143805},
																expr: &charClassMatcher{
																	pos:        position{line: 3806, col: 36, offset: 129238},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 4142, col: 20, offset: 143808},
																run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL14,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 4207, col: 11, offset: 147039},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL15,
											},
										},
									},
									&seqExpr{
										pos: position{line: 4214, col: 13, offset: 147361},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4214, col: 13, offset: 147361},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL17,
											},
											&andCodeExpr{
												pos: position{line: 4218, col: 11, offset: 147616},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL18,
											},
										},
									},
								},
							},
							&stateCodeExpr{
								pos: position{line: 4223, col: 7, offset: 147797},
								run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL19,
							},
						},
					},
					&seqExpr{
						pos: position{line: 4227, col: 5, offset: 147874},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 4227, col: 5, offset: 147874},
								label: "spaceI",
								expr: &actionExpr{
									pos: position{line: 4227, col: 13, offset: 147882},
									run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL22,
									expr: &charClassMatcher{
										pos:        position{line: 3806, col: 36, offset: 129238},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 4227, col: 39, offset: 147908},
								run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL24,
							},
							&stateCodeExpr{
								pos: position{line: 4277, col: 3, offset: 149720},
								run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL25,
							},
							&ruleRefExpr{
								pos:  position{line: 4280, col: 3, offset: 149822},
								name: "_INDENTATION_IGNORE_ADDITIONAL",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 4300, col: 1, offset: 150491},
			expr: &choiceExpr{
				pos: position{line: 4300, col: 17, offset: 150507},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4300, col: 17, offset: 150507},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4300, col: 17, offset: 150507},
								run: (*parser).callonINDENTATION23,
							},
							&litMatcher{
								pos:        position{line: 4302, col: 3, offset: 150568},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 4302, col: 10, offset: 150575},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 4302, col: 10, offset: 150575},
								name: "INDENTATION_IGNORE_ADDITIONAL",
							},
							&litMatcher{
								pos:        position{line: 4302, col: 40, offset: 150605},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onFile3() error {
	c.state["Indentation.Level"] = 0       // the lvl we are in rn
	c.state["Indentation.Char"] = byte(0)  // the char used for indentation
	c.state["Indentation.Repetitions"] = 0 // num of repetitions of char per lvl
	c.state["Indentation.RefLine"] = 0     // the line no where we got char and repetitions from

	// a stack containing the actual number of repetitions of char per lvl
	// used to recover from inconsistent indentations errs
	c.state["Indentation.ActualRepetitions"] = &stack.Stack[int]{}
	c.state["Indentation.TotalRepetitions"] = 0 // sum of the stack above

	// used by INDENTATION_NO_INCREASE to count how many chars it has found
	c.state["Indentation.CharCount"] = 0
	return nil
}

func (p *parser) callonFile3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile3()
}

func (c *current) onFile36(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonFile36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile36(stack["strI"])
}

func (c *current) onFile43(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonFile43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile43(stack["strI"])
}

func (c *current) onFile75() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonFile75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile75()
}

func (c *current) onFile88() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile88()
}

func (c *current) onFile109() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile109()
}

func (c *current) onFile132() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile132()
}

func (c *current) onFile143() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile143()
}

func (c *current) onFile150() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile150()
}

func (c *current) onFile155() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonFile155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile155()
}

func (c *current) onFile60(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonFile60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile60(stack["strI"])
}

func (c *current) onFile176() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonFile176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile176()
}

func (c *current) onFile189() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile189()
}

func (c *current) onFile210() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonFile210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile210()
}

func (c *current) onFile233() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile233()
}

func (c *current) onFile244() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile244()
}

func (c *current) onFile251() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonFile251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile251()
}

func (c *current) onFile256() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonFile256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile256()
}

func (c *current) onFile262() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile262()
}

func (c *current) onFile161(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonFile161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile161(stack["strI"], stack["endPosI"])
}

func (c *current) onFile287() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFile287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile287()
}

func (c *current) onFile279(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonFile279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile279(stack["strI"], stack["endPosI"])
}

func (c *current) onFile30(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonFile30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile30(stack["sI"])
}

func (c *current) onFile293(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonFile293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile293(stack["pathI"])
}

func (c *current) onFile25(extendI interface{}) (interface{}, error) {
	return file.Extend{Path: extendI.(file.String), Position: pos(c)}, nil
}

func (p *parser) callonFile25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile25(stack["extendI"])
}

func (c *current) onFile1(extendComments, extendI, importsAndCommentsI, usesAndCommentsI, globalCodeAndFuncI, preScopeI, scopeI interface{}) (interface{}, error) {
	var f file.File

	f.TopLevelComments = append(f.TopLevelComments, castedOrZero[[]file.CorgiComment](extendComments)...)

	f.Extend = ptrOrNil[file.Extend](extendI)

	if importsAndCommentsI != nil {
		f.Imports = getTuple[[]file.Import](importsAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](importsAndCommentsI, 1)...)
	}

	if usesAndCommentsI != nil {
		f.Uses = getTuple[[]file.Use](usesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](usesAndCommentsI, 1)...)
	}

	if globalCodeAndFuncI != nil {
		partFile := globalCodeAndFuncI.(file.File)

		f.TopLevelComments = append(f.TopLevelComments, partFile.TopLevelComments...)
		f.GlobalCode = partFile.GlobalCode
		f.Func = partFile.Func
	}

	preScope := castedOrZero[file.Scope](preScopeI)
	s := castedOrZero[file.Scope](scopeI)

	f.Scope = append(preScope, s...)

	return &f, nil
}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["extendComments"], stack["extendI"], stack["importsAndCommentsI"], stack["usesAndCommentsI"], stack["globalCodeAndFuncI"], stack["preScopeI"], stack["scopeI"])
}

func (c *current) onimportsAndComments43() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonimportsAndComments43() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments43()
}

func (c *current) onimportsAndComments55() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonimportsAndComments55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments55()
}

func (c *current) onimportsAndComments58() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonimportsAndComments58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments58()
}

func (c *current) onimportsAndComments60() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonimportsAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments60()
}

func (c *current) onimportsAndComments62() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonimportsAndComments62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments62()
}

func (c *current) onimportsAndComments63() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonimportsAndComments63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments63()
}

func (c *current) onimportsAndComments65() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonimportsAndComments65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments65()
}

func (c *current) onimportsAndComments66() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments66()
}

func (c *current) onimportsAndComments69() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonimportsAndComments69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments69()
}

func (c *current) onimportsAndComments70() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments70()
}

func (c *current) onimportsAndComments71() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonimportsAndComments71() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments71()
}

func (c *current) onimportsAndComments73() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonimportsAndComments73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments73()
}

func (c *current) onimportsAndComments74() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonimportsAndComments74() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments74()
}

func (c *current) onimportsAndComments81() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments81()
}

func (c *current) onimportsAndComments83(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments83(stack["ident"])
}

func (c *current) onimportsAndComments94() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments94()
}

func (c *current) onimportsAndComments89(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments89(stack["endPosI"])
}

func (c *current) onimportsAndComments104(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments104(stack["strI"])
}

func (c *current) onimportsAndComments111(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments111(stack["strI"])
}

func (c *current) onimportsAndComments143() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments143()
}

func (c *current) onimportsAndComments156() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments156()
}

func (c *current) onimportsAndComments177() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments177()
}

func (c *current) onimportsAndComments200() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments200()
}

func (c *current) onimportsAndComments211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments211()
}

func (c *current) onimportsAndComments218() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments218()
}

func (c *current) onimportsAndComments223() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments223()
}

func (c *current) onimportsAndComments128(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments128(stack["strI"])
}

func (c *current) onimportsAndComments244() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments244()
}

func (c *current) onimportsAndComments257() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments257()
}

func (c *current) onimportsAndComments278() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments278()
}

func (c *current) onimportsAndComments301() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments301()
}

func (c *current) onimportsAndComments312() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments312()
}

func (c *current) onimportsAndComments319() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments319()
}

func (c *current) onimportsAndComments324() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments324()
}

func (c *current) onimportsAndComments330() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments330()
}

func (c *current) onimportsAndComments229(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments229(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments355() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments355()
}

func (c *current) onimportsAndComments347(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments347(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments361(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments361(stack["pathI"])
}

func (c *current) onimportsAndComments75(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments75(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments374(importsI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonimportsAndComments374() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments374(stack["importsI"])
}

func (c *current) onimportsAndComments41(importsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.ImportSpec](importsI, -1), nil
}

func (p *parser) callonimportsAndComments41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments41(stack["importsI"])
}

func (c *current) onimportsAndComments28(specsI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  specsI.([]file.ImportSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments28(stack["specsI"])
}

func (c *current) onimportsAndComments387() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments387()
}

func (c *current) onimportsAndComments389(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments389(stack["ident"])
}

func (c *current) onimportsAndComments400() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments400()
}

func (c *current) onimportsAndComments395(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments395(stack["endPosI"])
}

func (c *current) onimportsAndComments410(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments410(stack["strI"])
}

func (c *current) onimportsAndComments417(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments417(stack["strI"])
}

func (c *current) onimportsAndComments449() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments449() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments449()
}

func (c *current) onimportsAndComments462() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments462()
}

func (c *current) onimportsAndComments483() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments483()
}

func (c *current) onimportsAndComments506() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments506()
}

func (c *current) onimportsAndComments517() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments517()
}

func (c *current) onimportsAndComments524() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments524()
}

func (c *current) onimportsAndComments529() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments529()
}

func (c *current) onimportsAndComments434(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments434(stack["strI"])
}

func (c *current) onimportsAndComments550() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments550()
}

func (c *current) onimportsAndComments563() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments563()
}

func (c *current) onimportsAndComments584() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments584()
}

func (c *current) onimportsAndComments607() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments607()
}

func (c *current) onimportsAndComments618() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments618()
}

func (c *current) onimportsAndComments625() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments625()
}

func (c *current) onimportsAndComments630() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments630()
}

func (c *current) onimportsAndComments636() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments636()
}

func (c *current) onimportsAndComments535(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments535(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments661() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments661()
}

func (c *current) onimportsAndComments653(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments653(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments667(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments667(stack["pathI"])
}

func (c *current) onimportsAndComments381(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments381(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments375(specI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  []file.ImportSpec{specI.(file.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments375() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments375(stack["specI"])
}

func (c *current) onimportsAndComments684() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments684() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments684()
}

func (c *current) onimportsAndComments680(posI interface{}) (interface{}, error) {
	return file.Import{Position: pos(c)}, &corgierr.Error{
		Message: "missing import path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an import path, optionally preceded by an import alias",
		}),
	}
}

func (p *parser) callonimportsAndComments680() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments680(stack["posI"])
}

func (c *current) onimportsAndComments15(importsI interface{}) (interface{}, error) {
	impTuples := islice(importsI)
	if impTuples == nil {
		return []file.Import(nil), nil
	}

	var imps []file.Import
	for _, impTuple := range impTuples {
		imps = append(imps, getTuple[file.Import](impTuple, 1))
	}

	return imps, nil
}

func (p *parser) callonimportsAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments15(stack["importsI"])
}

func (c *current) onimportsAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var imports []file.Import

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		imports = append(imports, getTuple[[]file.Import](t, -1)...)
	}

	return []any{imports, comments}, nil
}

func (p *parser) callonimportsAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments1(stack["valsI"])
}

func (c *current) onusesAndComments43() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonusesAndComments43() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments43()
}

func (c *current) onusesAndComments55() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonusesAndComments55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments55()
}

func (c *current) onusesAndComments58() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonusesAndComments58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments58()
}

func (c *current) onusesAndComments60() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonusesAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments60()
}

func (c *current) onusesAndComments62() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonusesAndComments62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments62()
}

func (c *current) onusesAndComments63() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonusesAndComments63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments63()
}

func (c *current) onusesAndComments65() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonusesAndComments65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments65()
}

func (c *current) onusesAndComments66() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments66()
}

func (c *current) onusesAndComments69() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonusesAndComments69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments69()
}

func (c *current) onusesAndComments70() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments70()
}

func (c *current) onusesAndComments71() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonusesAndComments71() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments71()
}

func (c *current) onusesAndComments73() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonusesAndComments73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments73()
}

func (c *current) onusesAndComments74() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonusesAndComments74() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments74()
}

func (c *current) onusesAndComments81() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments81()
}

func (c *current) onusesAndComments83(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments83(stack["identI"])
}

func (c *current) onusesAndComments102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments102()
}

func (c *current) onusesAndComments89(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments89(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments113() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments113()
}

func (c *current) onusesAndComments108(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments108(stack["endPosI"])
}

func (c *current) onusesAndComments123(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments123(stack["strI"])
}

func (c *current) onusesAndComments130(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments130(stack["strI"])
}

func (c *current) onusesAndComments162() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments162()
}

func (c *current) onusesAndComments175() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments175()
}

func (c *current) onusesAndComments196() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments196()
}

func (c *current) onusesAndComments219() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments219()
}

func (c *current) onusesAndComments230() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments230()
}

func (c *current) onusesAndComments237() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments237()
}

func (c *current) onusesAndComments242() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments242()
}

func (c *current) onusesAndComments147(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments147(stack["strI"])
}

func (c *current) onusesAndComments263() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments263()
}

func (c *current) onusesAndComments276() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments276()
}

func (c *current) onusesAndComments297() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments297()
}

func (c *current) onusesAndComments320() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments320()
}

func (c *current) onusesAndComments331() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments331()
}

func (c *current) onusesAndComments338() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments338()
}

func (c *current) onusesAndComments343() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments343()
}

func (c *current) onusesAndComments349() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments349()
}

func (c *current) onusesAndComments248(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments248(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments374() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments374()
}

func (c *current) onusesAndComments366(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments366(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments380(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments380(stack["pathI"])
}

func (c *current) onusesAndComments75(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments75(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments393(usesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonusesAndComments393() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments393(stack["usesI"])
}

func (c *current) onusesAndComments41(usesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.UseSpec](usesI, -1), nil
}

func (p *parser) callonusesAndComments41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments41(stack["usesI"])
}

func (c *current) onusesAndComments28(specsI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     specsI.([]file.UseSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments28(stack["specsI"])
}

func (c *current) onusesAndComments406() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments406()
}

func (c *current) onusesAndComments408(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments408(stack["identI"])
}

func (c *current) onusesAndComments427() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments427()
}

func (c *current) onusesAndComments414(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments414(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments438() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments438()
}

func (c *current) onusesAndComments433(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments433(stack["endPosI"])
}

func (c *current) onusesAndComments448(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments448(stack["strI"])
}

func (c *current) onusesAndComments455(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments455(stack["strI"])
}

func (c *current) onusesAndComments487() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments487()
}

func (c *current) onusesAndComments500() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments500()
}

func (c *current) onusesAndComments521() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments521()
}

func (c *current) onusesAndComments544() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments544()
}

func (c *current) onusesAndComments555() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments555()
}

func (c *current) onusesAndComments562() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments562()
}

func (c *current) onusesAndComments567() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments567()
}

func (c *current) onusesAndComments472(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments472(stack["strI"])
}

func (c *current) onusesAndComments588() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments588()
}

func (c *current) onusesAndComments601() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments601()
}

func (c *current) onusesAndComments622() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments622()
}

func (c *current) onusesAndComments645() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments645()
}

func (c *current) onusesAndComments656() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments656()
}

func (c *current) onusesAndComments663() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments663()
}

func (c *current) onusesAndComments668() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments668() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments668()
}

func (c *current) onusesAndComments674() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments674()
}

func (c *current) onusesAndComments573(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments573(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments699() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments699()
}

func (c *current) onusesAndComments691(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments691(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments705(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments705(stack["pathI"])
}

func (c *current) onusesAndComments400(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments400(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments394(specI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     []file.UseSpec{specI.(file.UseSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments394(stack["specI"])
}

func (c *current) onusesAndComments722() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments722()
}

func (c *current) onusesAndComments718(posI interface{}) (interface{}, error) {
	return file.Use{Position: pos(c)}, &corgierr.Error{
		Message: "missing use path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an use path, optionally preceded by an use alias",
		}),
	}
}

func (p *parser) callonusesAndComments718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments718(stack["posI"])
}

func (c *current) onusesAndComments15(usesI interface{}) (interface{}, error) {
	useTuples := islice(usesI)
	if useTuples == nil {
		return []file.Use(nil), nil
	}

	var uses []file.Use
	for _, useTuple := range useTuples {
		uses = append(uses, getTuple[file.Use](useTuple, 1))
	}

	return uses, nil
}

func (p *parser) callonusesAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments15(stack["usesI"])
}

func (c *current) onusesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var uses []file.Use

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		uses = append(uses, getTuple[[]file.Use](t, -1)...)
	}

	return []any{uses, comments}, nil
}

func (p *parser) callonusesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments1(stack["valsI"])
}

func (c *current) oncodesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var codes []file.Code

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		codes = append(codes, getTuple[[]file.Code](t, -1)...)
	}

	return []any{codes, comments}, nil
}

func (p *parser) calloncodesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodesAndComments1(stack["valsI"])
}

func (c *current) onglobalCodeAndFunc1(codesAndCommentsI, commentsI, funcI interface{}) (interface{}, error) {
	var f file.File

	if codesAndCommentsI != nil {
		f.GlobalCode = getTuple[[]file.Code](codesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](codesAndCommentsI, 1)...)
	}

	if commentsI != nil {
		f.TopLevelComments = append(f.TopLevelComments, commentsI.([]file.CorgiComment)...)
	}

	fun := funcI.(file.Func)
	f.Func = &fun

	return f, nil
}

func (p *parser) callonglobalCodeAndFunc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalCodeAndFunc1(stack["codesAndCommentsI"], stack["commentsI"], stack["funcI"])
}

func (c *current) onpreScope39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonpreScope39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope39()
}

func (c *current) onpreScope35(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope35(stack["startPosI"])
}

func (c *current) onpreScope56() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope56()
}

func (c *current) onpreScope20() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonpreScope20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope20()
}

func (c *current) onpreScope90() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonpreScope90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope90()
}

func (c *current) onpreScope86(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope86(stack["startPosI"])
}

func (c *current) onpreScope107() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope107()
}

func (c *current) onpreScope71() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonpreScope71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope71()
}

func (c *current) onpreScope1(itmsI, doctypeI interface{}) (interface{}, error) {
	itmIs := islice(itmsI)
	n := len(itmIs)
	if doctypeI != nil {
		n++
	}

	itms := make(file.Scope, n)
	for i, itmI := range itmIs {
		itms[i] = getTuple[file.ScopeItem](itmI, 0)
	}

	if doctypeI != nil {
		itms[len(itms)-1] = doctypeI.(file.Doctype)
	}

	return itms, nil
}

func (p *parser) callonpreScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope1(stack["itmsI"], stack["doctypeI"])
}

func (c *current) onScope13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonScope13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope13()
}

func (c *current) onScope16() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonScope16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope16()
}

func (c *current) onScope18() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonScope18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope18()
}

func (c *current) onScope20() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonScope20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope20()
}

func (c *current) onScope21() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonScope21() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope21()
}

func (c *current) onScope23() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonScope23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope23()
}

func (c *current) onScope24() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonScope24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope24()
}

func (c *current) onScope27() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27()
}

func (c *current) onScope28() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonScope28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope28()
}

func (c *current) onScope29() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonScope29() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope29()
}

func (c *current) onScope31() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonScope31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope31()
}

func (c *current) onScope32() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonScope32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope32()
}

func (c *current) onScope1(itemsI interface{}) (interface{}, error) {
	itemTuples := islice(itemsI)

	scope := make(file.Scope, 0, len(itemTuples))
	for _, it := range itemTuples {
		tuple := islice(it)
		if si, ok := tuple[len(tuple)-1].(file.ScopeItem); ok {
			scope = append(scope, si)
		}
	}

	return scope, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["itemsI"])
}

func (c *current) onscopeItem22() (interface{}, error) {
	return file.RawFilterType(string(c.text)), nil
}

func (p *parser) callonscopeItem22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem22()
}

func (c *current) onscopeItem28() (interface{}, error) {
	return file.RawFilterType(string(c.text)), &corgierr.Error{
		Message: "invalid raw filter type",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected either `html`, `svg`, `js`, or `css`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "remove the type entirely, or replace it with one of the above",
			},
		},
	}
}

func (p *parser) callonscopeItem28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem28()
}

func (c *current) onscopeItem44() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem44() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem44()
}

func (c *current) onscopeItem58() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem58()
}

func (c *current) onscopeItem61() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem61() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem61()
}

func (c *current) onscopeItem63() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem63()
}

func (c *current) onscopeItem65() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonscopeItem65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem65()
}

func (c *current) onscopeItem66() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem66() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem66()
}

func (c *current) onscopeItem68() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonscopeItem68() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem68()
}

func (c *current) onscopeItem69() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem69()
}

func (c *current) onscopeItem72() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem72() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem72()
}

func (c *current) onscopeItem73() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem73()
}

func (c *current) onscopeItem74() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem74() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem74()
}

func (c *current) onscopeItem76() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem76() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem76()
}

func (c *current) onscopeItem77() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem77()
}

func (c *current) onscopeItem79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem79()
}

func (c *current) onscopeItem56(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem56(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem97(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem97() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem97(stack["linesI"])
}

func (c *current) onscopeItem42(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem42(stack["linesI"])
}

func (c *current) onscopeItem13(typI, bodyI interface{}) (interface{}, error) {
	var typ file.RawFilterType
	if typI != nil {
		typ = getTuple[file.RawFilterType](typI, -1)
	}

	return file.RawFilter{
		Type:     typ,
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem13(stack["typI"], stack["bodyI"])
}

func (c *current) onscopeItem113(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem113(stack["strI"])
}

func (c *current) onscopeItem120(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem120(stack["strI"])
}

func (c *current) onscopeItem152() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem152()
}

func (c *current) onscopeItem165() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem165()
}

func (c *current) onscopeItem186() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem186()
}

func (c *current) onscopeItem209() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem209()
}

func (c *current) onscopeItem220() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem220()
}

func (c *current) onscopeItem227() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem227()
}

func (c *current) onscopeItem232() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem232()
}

func (c *current) onscopeItem137(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem137(stack["strI"])
}

func (c *current) onscopeItem253() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem253()
}

func (c *current) onscopeItem266() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem266()
}

func (c *current) onscopeItem287() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem287()
}

func (c *current) onscopeItem310() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem310()
}

func (c *current) onscopeItem321() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem321()
}

func (c *current) onscopeItem328() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem328()
}

func (c *current) onscopeItem333() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem333()
}

func (c *current) onscopeItem339() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem339()
}

func (c *current) onscopeItem238(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem238(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem364() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem364()
}

func (c *current) onscopeItem356(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem356(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem110(stringI interface{}) (interface{}, error) {
	return file.StringCommandFilterArg(stringI.(file.String)), nil
}

func (p *parser) callonscopeItem110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem110(stack["stringI"])
}

func (c *current) onscopeItem370(argI interface{}) (interface{}, error) {
	return file.RawCommandFilterArg{Value: concat(argI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem370(stack["argI"])
}

func (c *current) onscopeItem387() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem387() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem387()
}

func (c *current) onscopeItem401() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem401()
}

func (c *current) onscopeItem404() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem404()
}

func (c *current) onscopeItem406() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem406() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem406()
}

func (c *current) onscopeItem408() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonscopeItem408() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem408()
}

func (c *current) onscopeItem409() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem409() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem409()
}

func (c *current) onscopeItem411() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonscopeItem411() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem411()
}

func (c *current) onscopeItem412() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem412() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem412()
}

func (c *current) onscopeItem415() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem415() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem415()
}

func (c *current) onscopeItem416() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem416() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem416()
}

func (c *current) onscopeItem417() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem417() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem417()
}

func (c *current) onscopeItem419() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem419() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem419()
}

func (c *current) onscopeItem420() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem420() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem420()
}

func (c *current) onscopeItem422() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem422()
}

func (c *current) onscopeItem399(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem399(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem440(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem440() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem440(stack["linesI"])
}

func (c *current) onscopeItem385(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem385(stack["linesI"])
}

func (c *current) onscopeItem98(nameI, argsI, bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
		Name:     concat(nameI),
		Args:     typedSliceFromTuples[file.CommandFilterArg](argsI, -1),
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem98(stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onscopeItem457() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonscopeItem457() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem457()
}

func (c *current) onscopeItem471() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonscopeItem471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem471()
}

func (c *current) onscopeItem474() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonscopeItem474() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem474()
}

func (c *current) onscopeItem476() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonscopeItem476() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem476()
}

func (c *current) onscopeItem478() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonscopeItem478() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem478()
}

func (c *current) onscopeItem479() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonscopeItem479() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem479()
}

func (c *current) onscopeItem481() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonscopeItem481() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem481()
}

func (c *current) onscopeItem482() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem482() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem482()
}

func (c *current) onscopeItem485() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonscopeItem485() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem485()
}

func (c *current) onscopeItem486() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonscopeItem486() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem486()
}

func (c *current) onscopeItem487() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonscopeItem487() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem487()
}

func (c *current) onscopeItem489() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonscopeItem489() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem489()
}

func (c *current) onscopeItem490() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonscopeItem490() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem490()
}

func (c *current) onscopeItem492() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem492()
}

func (c *current) onscopeItem469(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem469(stack["posI"], stack["lineI"])
}

func (c *current) onscopeItem510(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonscopeItem510() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem510(stack["linesI"])
}

func (c *current) onscopeItem455(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonscopeItem455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem455(stack["linesI"])
}

func (c *current) onscopeItem441(bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
			Position: pos(c),
			Body:     castedOrZero[[]file.FilterLine](bodyI),
		}, &corgierr.Error{
			Message: "bad filter",
			ErrorAnnotation: anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected `raw` or a command name",
			}),
		}
}

func (p *parser) callonscopeItem441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem441(stack["bodyI"])
}

func (c *current) onscopeItem522(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem522(stack["strI"])
}

func (c *current) onscopeItem529(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem529(stack["strI"])
}

func (c *current) onscopeItem561() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem561()
}

func (c *current) onscopeItem574() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem574() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem574()
}

func (c *current) onscopeItem595() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem595()
}

func (c *current) onscopeItem618() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem618()
}

func (c *current) onscopeItem629() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem629()
}

func (c *current) onscopeItem636() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem636()
}

func (c *current) onscopeItem641() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem641()
}

func (c *current) onscopeItem546(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem546(stack["strI"])
}

func (c *current) onscopeItem662() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem662()
}

func (c *current) onscopeItem675() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem675()
}

func (c *current) onscopeItem696() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem696() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem696()
}

func (c *current) onscopeItem719() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem719()
}

func (c *current) onscopeItem730() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem730() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem730()
}

func (c *current) onscopeItem737() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem737() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem737()
}

func (c *current) onscopeItem742() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem742()
}

func (c *current) onscopeItem748() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem748()
}

func (c *current) onscopeItem647(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem647(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem773() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem773()
}

func (c *current) onscopeItem765(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem765() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem765(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem516(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonscopeItem516() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem516(stack["sI"])
}

func (c *current) onscopeItem779(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonscopeItem779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem779(stack["pathI"])
}

func (c *current) onscopeItem511(pathI interface{}) (interface{}, error) {
	return file.Include{
		Path:     pathI.(file.String),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem511(stack["pathI"])
}

func (c *current) onscopeItem812() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem812() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem812()
}

func (c *current) onscopeItem808(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem808(stack["startPosI"])
}

func (c *current) onscopeItem829() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem829()
}

func (c *current) onscopeItem793() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonscopeItem793() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem793()
}

func (c *current) onscopeItem863() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem863() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem863()
}

func (c *current) onscopeItem859(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem859() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem859(stack["startPosI"])
}

func (c *current) onscopeItem880() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem880() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem880()
}

func (c *current) onscopeItem844() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonscopeItem844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem844()
}

func (c *current) onscopeItem790(doctypeI interface{}) (interface{}, error) {
	return doctypeI, &corgierr.Error{
		Message: "`doctype` not first item",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             pos(c),
			ToEOL:             true,
			Annotation:        "cannot place doctype directive here",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "`doctype`s may only be placed as the first element after the `func` declaration\n" +
					"remove this `doctype` and move it right under the `func` of your file, if there isn't a doctype there already",
			},
		},
	}
}

func (p *parser) callonscopeItem790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem790(stack["doctypeI"])
}

func (c *current) onBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody3()
}

func (c *current) onBody6(scopeI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonBody6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody6(stack["scopeI"])
}

func (c *current) onBody1(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody1(stack["scopeI"])
}

func (c *current) onBeaitb2(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil
}

func (p *parser) callonBeaitb2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb2(stack["scopeItemI"])
}

func (c *current) onBeaitb7(bodyI interface{}) (interface{}, error) {
	return bodyI, nil
}

func (p *parser) callonBeaitb7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb7(stack["bodyI"])
}

func (c *current) onBeaitb20() (interface{}, error) {
	return file.Scope(nil), nil
}

func (p *parser) callonBeaitb20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb20()
}

func (c *current) onBeaitb31(lineI, bodyI interface{}) (interface{}, error) {
	return file.Scope{file.BadItem{
			Line:     concat(lineI),
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}}, &corgierr.Error{
			Message: "unexpected tokens",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				ToEOL:      true,
				Annotation: "expected a block expansion (`:`), inline text, a body, or nothing",
			}),
		}
}

func (p *parser) callonBeaitb31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb31(stack["lineI"], stack["bodyI"])
}

func (c *current) onBeait2(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil
}

func (p *parser) callonBeait2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait2(stack["scopeItemI"])
}

func (c *current) onBeait7() (interface{}, error) {
	return file.Scope(nil), nil
}

func (p *parser) callonBeait7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait7()
}

func (c *current) onBeait18(lineI interface{}) (interface{}, error) {
	return file.Scope{file.BadItem{
			Line:     concat(lineI),
			Position: pos(c),
		}}, &corgierr.Error{
			Message: "unexpected tokens",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				ToEOL:      true,
				Annotation: "expected a block expansion (`:`), inline text, or nothing",
			}),
		}
}

func (p *parser) callonBeait18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait18(stack["lineI"])
}

func (c *current) onBadItem1(lineI, bodyI interface{}) (interface{}, error) {
	line := concat(lineI)

	firstWordLen := strings.IndexByte(line, ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(line))
	}

	return file.BadItem{
			Line:     line,
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive or invalid element name",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a valid corgi directive or an element name",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{
					Suggestion: "use a valid corgi directive",
					ShouldBe: "a block (`block`, `append`, `prepend`), code (`-`), a conditional (`if`, `else if`, `else`, `switch`),\n" +
						"a loop (`for`), a filter (`:`), an include (`include`), a mixin (`mixin`), a mixin call (`+`),\n" +
						"a Go import (`import`), a corgi use (`use`), the func header (`func`), an arrow block (`>`)",
				},
			},
		}
}

func (p *parser) callonBadItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem1(stack["lineI"], stack["bodyI"])
}

func (c *current) onBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock18(stack["identI"])
}

func (c *current) onBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock37()
}

func (c *current) onBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock15(stack["identI"])
}

func (c *current) onBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock46()
}

func (c *current) onBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock43(stack["posI"])
}

func (c *current) onBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock71()
}

func (c *current) onBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock9(stack["identI"])
}

func (c *current) onBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock77()
}

func (c *current) onBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock4(stack["nameI"])
}

func (c *current) onBlock1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["blockI"], stack["bodyI"])
}

func (c *current) onInlineBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock18(stack["identI"])
}

func (c *current) onInlineBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock37()
}

func (c *current) onInlineBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock15(stack["identI"])
}

func (c *current) onInlineBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock46()
}

func (c *current) onInlineBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock43(stack["posI"])
}

func (c *current) onInlineBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock71()
}

func (c *current) onInlineBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock9(stack["identI"])
}

func (c *current) onInlineBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonInlineBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock77()
}

func (c *current) onInlineBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock4(stack["nameI"])
}

func (c *current) onInlineBlock1(blockI, scopeI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = castedOrZero[file.Scope](scopeI)
	return block, nil
}

func (p *parser) callonInlineBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock1(stack["blockI"], stack["scopeI"])
}

func (c *current) onPrepend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonPrepend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend18(stack["identI"])
}

func (c *current) onPrepend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend37()
}

func (c *current) onPrepend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonPrepend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend24(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend15(stack["identI"])
}

func (c *current) onPrepend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend46()
}

func (c *current) onPrepend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend43(stack["posI"])
}

func (c *current) onPrepend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend71()
}

func (c *current) onPrepend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend65(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend9(stack["identI"])
}

func (c *current) onPrepend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonPrepend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend77()
}

func (c *current) onPrepend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypePrepend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonPrepend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend4(stack["nameI"])
}

func (c *current) onPrepend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonPrepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onAppend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonAppend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend18(stack["identI"])
}

func (c *current) onAppend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend37()
}

func (c *current) onAppend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonAppend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend24(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend15(stack["identI"])
}

func (c *current) onAppend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend46()
}

func (c *current) onAppend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend43(stack["posI"])
}

func (c *current) onAppend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend71()
}

func (c *current) onAppend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend65(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend9(stack["identI"])
}

func (c *current) onAppend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonAppend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend77()
}

func (c *current) onAppend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeAppend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonAppend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend4(stack["nameI"])
}

func (c *current) onAppend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonAppend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onBlockExpansion1(sI interface{}) (interface{}, error) {
	return file.BlockExpansion{
		Item:     sI.(file.ScopeItem),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlockExpansion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion1(stack["sI"])
}

func (c *current) onblockExpansionItem4(lineI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	bi := file.BadItem{
		Line:     concat(lineI),
		Position: pos(c),
	}

	var suggestions []corgierr.Suggestion
	if bi.Line != "" {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec",
		})
	}

	return bi, &corgierr.Error{
		Message: "malformed block expansion",
		ErrorAnnotation: anno(c, annotation{
			Start: pos(c),
			Len:   firstWordLen,
			Annotation: "expected a block directive, an inline element, an inline arrow block,\n" +
				"a mixin call, or inline &-attributes",
		}),
		Suggestions: suggestions,
	}
}

func (p *parser) callonblockExpansionItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblockExpansionItem4(stack["lineI"])
}

func (c *current) onspacedBlockExpansionItem2(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonspacedBlockExpansionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem2(stack["sI"])
}

func (c *current) onspacedBlockExpansionItem11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonspacedBlockExpansionItem11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem11()
}

func (c *current) onspacedBlockExpansionItem8(posI, sI interface{}) (interface{}, error) {
	var fromThe string
	switch sI.(type) {
	case file.Block:
		fromThe = "block"
	case file.Element:
		fromThe = "inline element"
	case file.DivShorthand:
		fromThe = "div shorthand"
	case file.MixinCall:
		fromThe = "mixin call"
	case file.And:
		fromThe = "&"
	case file.If:
		fromThe = "if"
	case file.IfBlock:
		fromThe = "if block"
	case file.For:
		fromThe = "for"
	case file.Include:
		fromThe = "include"
	default:
		fromThe = "rest"
	}

	return file.BlockExpansion{
			Item:     sI.(file.ScopeItem),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `:` from the " + fromThe,
			}),
		}
}

func (p *parser) callonspacedBlockExpansionItem8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem8(stack["posI"], stack["sI"])
}

func (c *current) on_spacedBlockExpansionItem19(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callon_spacedBlockExpansionItem19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem19(stack["strI"])
}

func (c *current) on_spacedBlockExpansionItem26(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callon_spacedBlockExpansionItem26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem26(stack["strI"])
}

func (c *current) on_spacedBlockExpansionItem58() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callon_spacedBlockExpansionItem58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem58()
}

func (c *current) on_spacedBlockExpansionItem71() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem71()
}

func (c *current) on_spacedBlockExpansionItem92() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem92()
}

func (c *current) on_spacedBlockExpansionItem115() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem115()
}

func (c *current) on_spacedBlockExpansionItem126() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem126()
}

func (c *current) on_spacedBlockExpansionItem133() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem133()
}

func (c *current) on_spacedBlockExpansionItem138() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem138()
}

func (c *current) on_spacedBlockExpansionItem43(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callon_spacedBlockExpansionItem43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem43(stack["strI"])
}

func (c *current) on_spacedBlockExpansionItem159() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callon_spacedBlockExpansionItem159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem159()
}

func (c *current) on_spacedBlockExpansionItem172() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem172()
}

func (c *current) on_spacedBlockExpansionItem193() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem193()
}

func (c *current) on_spacedBlockExpansionItem216() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem216()
}

func (c *current) on_spacedBlockExpansionItem227() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem227()
}

func (c *current) on_spacedBlockExpansionItem234() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem234()
}

func (c *current) on_spacedBlockExpansionItem239() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem239()
}

func (c *current) on_spacedBlockExpansionItem245() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callon_spacedBlockExpansionItem245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem245()
}

func (c *current) on_spacedBlockExpansionItem144(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callon_spacedBlockExpansionItem144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem144(stack["strI"], stack["endPosI"])
}

func (c *current) on_spacedBlockExpansionItem270() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callon_spacedBlockExpansionItem270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem270()
}

func (c *current) on_spacedBlockExpansionItem262(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callon_spacedBlockExpansionItem262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem262(stack["strI"], stack["endPosI"])
}

func (c *current) on_spacedBlockExpansionItem13(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callon_spacedBlockExpansionItem13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem13(stack["sI"])
}

func (c *current) on_spacedBlockExpansionItem276(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callon_spacedBlockExpansionItem276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem276(stack["pathI"])
}

func (c *current) on_spacedBlockExpansionItem8(pathI interface{}) (interface{}, error) {
	return file.Include{
		Path:     pathI.(file.String),
		Position: pos(c),
	}, nil
}

func (p *parser) callon_spacedBlockExpansionItem8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem8(stack["pathI"])
}

func (c *current) onCodes1(codesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.Code](codesI, 1), nil
}

func (p *parser) callonCodes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCodes1(stack["codesI"])
}

func (c *current) onCode6(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode6(stack["code"])
}

func (c *current) onCode32(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode32(stack["code"])
}

func (c *current) onCode2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	additionalLineTuples := islice(additionalLinesI)

	lines := make([]file.CodeLine, 1+len(additionalLineTuples))
	lines[0] = firstLineI.(file.CodeLine)
	for i, lt := range additionalLineTuples {
		lines[i+1] = getTuple[file.CodeLine](lt, -1)
	}

	return file.Code{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonCode2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onCode50() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonCode50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode50()
}

func (c *current) onCode46(posI interface{}) (interface{}, error) {
	return file.Code{Position: pos(c)}, &corgierr.Error{
		Message: "empty code block",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected code here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) callonCode46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode46(stack["posI"])
}

func (c *current) oncondition2(condI interface{}) (interface{}, error) {
	return condI, nil
}

func (p *parser) calloncondition2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition2(stack["condI"])
}

func (c *current) oncondition11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition11()
}

func (c *current) oncondition8(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition8(stack["posI"])
}

func (c *current) oncondition30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition30()
}

func (c *current) oncondition28(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28(stack["posI"])
}

func (c *current) onthen2(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonthen2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen2(stack["scopeI"])
}

func (c *current) onthen15(beI interface{}) (interface{}, error) {
	return file.Scope{beI.(file.BlockExpansion)}, nil
}

func (p *parser) callonthen15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen15(stack["beI"])
}

func (c *current) onthen18() (interface{}, error) {
	return file.Scope(nil), &corgierr.Error{
		Message: "missing body",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}
}

func (p *parser) callonthen18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen18()
}

func (c *current) onthen30() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonthen30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen30()
}

func (c *current) onthen33() (bool, error) {
	return true, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}

}

func (p *parser) callonthen33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen33()
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.If{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		ElseIfs:   typedSlice[file.ElseIf](elseIfsI),
		Else:      ptrOrNil[file.Else](elseI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onInlineIf1(condI, thenI interface{}) (interface{}, error) {
	return file.If{
		Condition: condI.(file.Expression),
		Then:      file.Scope{thenI.(file.BlockExpansion)},
		Position:  pos(c),
	}, nil
}

func (p *parser) callonInlineIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIf1(stack["condI"], stack["thenI"])
}

func (c *current) onElseIf11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIf11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf11()
}

func (c *current) onElseIf14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIf14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf14()
}

func (c *current) onElseIf16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIf16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf16()
}

func (c *current) onElseIf18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonElseIf18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf18()
}

func (c *current) onElseIf19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIf19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf19()
}

func (c *current) onElseIf21() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonElseIf21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf21()
}

func (c *current) onElseIf22() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIf22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf22()
}

func (c *current) onElseIf25() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIf25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf25()
}

func (c *current) onElseIf26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIf26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf26()
}

func (c *current) onElseIf27() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIf27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf27()
}

func (c *current) onElseIf29() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIf29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf29()
}

func (c *current) onElseIf30() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIf30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf30()
}

func (c *current) onElseIf32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIf32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf32()
}

func (c *current) onElseIf1(posI, condI, thenI interface{}) (interface{}, error) {
	return file.ElseIf{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		Position:  posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["posI"], stack["condI"], stack["thenI"])
}

func (c *current) onElse11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElse11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse11()
}

func (c *current) onElse14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElse14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse14()
}

func (c *current) onElse16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElse16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse16()
}

func (c *current) onElse18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonElse18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse18()
}

func (c *current) onElse19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElse19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse19()
}

func (c *current) onElse21() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonElse21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse21()
}

func (c *current) onElse22() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElse22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse22()
}

func (c *current) onElse25() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElse25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse25()
}

func (c *current) onElse26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElse26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse26()
}

func (c *current) onElse27() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElse27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse27()
}

func (c *current) onElse29() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElse29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse29()
}

func (c *current) onElse30() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElse30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse30()
}

func (c *current) onElse1(thenI interface{}) (interface{}, error) {
	return file.Else{
		Then:     thenI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onIfBlock15(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonIfBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock15(stack["identI"])
}

func (c *current) onIfBlock34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock34()
}

func (c *current) onIfBlock21(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonIfBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock21(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock12(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock12(stack["identI"])
}

func (c *current) onIfBlock43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock43()
}

func (c *current) onIfBlock40(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock40(stack["posI"])
}

func (c *current) onIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock68()
}

func (c *current) onIfBlock62(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock62(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock6(stack["identI"])
}

func (c *current) onIfBlock74() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock74()
}

func (c *current) onIfBlock1(nameI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.IfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		ElseIfs:  typedSlice[file.ElseIfBlock](elseIfsI),
		Else:     ptrOrNil[file.Else](elseI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock1(stack["nameI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onInlineIfBlock15(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineIfBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock15(stack["identI"])
}

func (c *current) onInlineIfBlock34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineIfBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock34()
}

func (c *current) onInlineIfBlock21(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineIfBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock21(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineIfBlock12(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineIfBlock12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock12(stack["identI"])
}

func (c *current) onInlineIfBlock43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineIfBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock43()
}

func (c *current) onInlineIfBlock40(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock40(stack["posI"])
}

func (c *current) onInlineIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock68()
}

func (c *current) onInlineIfBlock62(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineIfBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock62(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineIfBlock6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineIfBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock6(stack["identI"])
}

func (c *current) onInlineIfBlock74() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonInlineIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock74()
}

func (c *current) onInlineIfBlock1(nameI, thenI interface{}) (interface{}, error) {
	return file.IfBlock{
		Name:     nameI.(file.Ident),
		Then:     file.Scope{thenI.(file.BlockExpansion)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock1(stack["nameI"], stack["thenI"])
}

func (c *current) onElseIfBlock11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIfBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock11()
}

func (c *current) onElseIfBlock14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIfBlock14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock14()
}

func (c *current) onElseIfBlock16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIfBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock16()
}

func (c *current) onElseIfBlock18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonElseIfBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock18()
}

func (c *current) onElseIfBlock19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIfBlock19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock19()
}

func (c *current) onElseIfBlock21() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonElseIfBlock21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock21()
}

func (c *current) onElseIfBlock22() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock22()
}

func (c *current) onElseIfBlock25() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIfBlock25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock25()
}

func (c *current) onElseIfBlock26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock26()
}

func (c *current) onElseIfBlock27() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIfBlock27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock27()
}

func (c *current) onElseIfBlock29() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIfBlock29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock29()
}

func (c *current) onElseIfBlock30() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIfBlock30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock30()
}

func (c *current) onElseIfBlock32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock32()
}

func (c *current) onElseIfBlock50(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonElseIfBlock50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock50(stack["identI"])
}

func (c *current) onElseIfBlock69() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock69()
}

func (c *current) onElseIfBlock56(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonElseIfBlock56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock56(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock47(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock47(stack["identI"])
}

func (c *current) onElseIfBlock78() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock78()
}

func (c *current) onElseIfBlock75(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock75(stack["posI"])
}

func (c *current) onElseIfBlock103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock103()
}

func (c *current) onElseIfBlock97(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock97(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock41(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock41(stack["identI"])
}

func (c *current) onElseIfBlock109() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonElseIfBlock109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock109()
}

func (c *current) onElseIfBlock1(posI, nameI, thenI interface{}) (interface{}, error) {
	return file.ElseIfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		Position: posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock1(stack["posI"], stack["nameI"], stack["thenI"])
}

func (c *current) onSwitch1(comparatorI, bodyI interface{}) (interface{}, error) {
	body := bodyI.(file.Switch)

	s := file.Switch{
		Comparator: comparatorI.(*file.Expression),
		Cases:      body.Cases,
		Default:    body.Default,
		Position:   pos(c),
	}

	if len(s.Cases) == 0 {
		return s, &corgierr.Error{
			Message: "switch must have at least one case",
			ErrorAnnotation: anno(c, annotation{
				ContextEndDelta: 1,
				Start:           pos(c),
				ToEOL:           true,
				Annotation:      "expected switch to have at least one non-default case",
			}),
		}
	}

	return s, nil
}

func (p *parser) callonSwitch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["bodyI"])
}

func (c *current) onswitchComparator2() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonswitchComparator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator13(compI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, nil
}

func (p *parser) callonswitchComparator13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator13(stack["compI"])
}

func (c *current) onswitchComparator35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonswitchComparator35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator35()
}

func (c *current) onswitchComparator28(compI, startPosI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			Annotation: "expression was terminated here, but should span entire line",
		}),
	}
}

func (p *parser) callonswitchComparator28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator28(stack["compI"], stack["startPosI"])
}

func (c *current) onswitchBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonswitchBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody3()
}

func (c *current) onswitchBody15() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonswitchBody15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody15()
}

func (c *current) onswitchBody18() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonswitchBody18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody18()
}

func (c *current) onswitchBody20() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonswitchBody20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody20()
}

func (c *current) onswitchBody22() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonswitchBody22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody22()
}

func (c *current) onswitchBody23() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonswitchBody23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody23()
}

func (c *current) onswitchBody25() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonswitchBody25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody25()
}

func (c *current) onswitchBody26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody26()
}

func (c *current) onswitchBody29() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonswitchBody29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody29()
}

func (c *current) onswitchBody30() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody30()
}

func (c *current) onswitchBody31() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonswitchBody31() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody31()
}

func (c *current) onswitchBody33() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonswitchBody33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody33()
}

func (c *current) onswitchBody34() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonswitchBody34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody34()
}

func (c *current) onswitchBody36(itms interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonswitchBody36() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody36(stack["itms"])
}

func (c *current) onswitchBody1(itms interface{}) (interface{}, error) {
	tupleTuples := islice(itms)

	s := file.Switch{Cases: make([]file.Case, 0, len(tupleTuples))}

	var err error
	for _, tupleTuple := range tupleTuples {
		tuple := getTuple[any](tupleTuple, -1)

		switchCase, ok := getTuple[file.Case](tuple, 0), getTuple[bool](tuple, -1)
		if switchCase.Expression != nil || !ok {
			s.Cases = append(s.Cases, switchCase)
		} else {
			if s.Default != nil {
				err = &corgierr.Error{
					Message: "multiple default cases in switch",
					ErrorAnnotation: anno(c, annotation{
						Start:      switchCase.Position,
						Len:        len("default"),
						Annotation: "second default case",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      s.Default.Position,
							Len:        len("default"),
							Annotation: "first default case",
						}),
					},
				}
			} else {
				s.Default = &switchCase
			}
		}
	}

	return s, err
}

func (p *parser) callonswitchBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody1(stack["itms"])
}

func (c *current) onswitchBodyItem2(caseI interface{}) (interface{}, error) {
	return []any{caseI, true}, nil
}

func (p *parser) callonswitchBodyItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem2(stack["caseI"])
}

func (c *current) onswitchBodyItem7(caseI interface{}) (interface{}, error) {
	return []any{caseI, false}, nil
}

func (p *parser) callonswitchBodyItem7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem7(stack["caseI"])
}

func (c *current) onCase1(condI, thenI interface{}) (interface{}, error) {
	return file.Case{
		Expression: ptrOrNil[file.Expression](condI),
		Then:       castedOrZero[file.Scope](thenI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["thenI"])
}

func (c *current) onDefault1(thenI interface{}) (interface{}, error) {
	return file.Case{
		Then:     castedOrZero[file.Scope](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["thenI"])
}

func (c *current) onswitchThen2(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonswitchThen2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen2(stack["scopeI"])
}

func (c *current) onswitchThen15(beI interface{}) (interface{}, error) {
	return file.Scope{beI.(file.BlockExpansion)}, nil
}

func (p *parser) callonswitchThen15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen15(stack["beI"])
}

func (c *current) onBadCase1(bodyI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	return file.Case{
			Then:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive in switch body",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a case or a default",
			}),
		}
}

func (p *parser) callonBadCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadCase1(stack["bodyI"])
}

func (c *current) onFor1(exprI, bodyI interface{}) (interface{}, error) {
	return file.For{
		Expression: exprI.(*file.Expression),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonFor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onInlineFor1(exprI, bodyI interface{}) (interface{}, error) {
	return file.For{
		Expression: exprI.(*file.Expression),
		Body:       file.Scope{bodyI.(file.BlockExpansion)},
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineFor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onCorgiComments1(commentsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiComment](commentsI, -1), nil
}

func (p *parser) callonCorgiComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComments1(stack["commentsI"])
}

func (c *current) onCorgiComment1(linesI interface{}) (interface{}, error) {
	return file.CorgiComment{
		Lines:    linesI.([]file.CorgiCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonCorgiComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment1(stack["linesI"])
}

func (c *current) oncorgiCommentLines2(linesI interface{}) (interface{}, error) {
	return linesI, nil
}

func (p *parser) calloncorgiCommentLines2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentLines2(stack["linesI"])
}

func (c *current) oncorgiCommentLines19(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) calloncorgiCommentLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentLines19(stack["commentI"])
}

func (c *current) oncorgiCommentLines17(lineI interface{}) (interface{}, error) {
	return []file.CorgiCommentLine{lineI.(file.CorgiCommentLine)}, nil
}

func (p *parser) calloncorgiCommentLines17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentLines17(stack["lineI"])
}

func (c *current) oncorgiCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) calloncorgiCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock3()
}

func (c *current) oncorgiCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) calloncorgiCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock16(stack["commentI"])
}

func (c *current) oncorgiCommentBlock30(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) calloncorgiCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock30(stack["linesI"])
}

func (c *current) oncorgiCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiCommentLine](linesI, -1), nil
}

func (p *parser) calloncorgiCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock1(stack["linesI"])
}

func (c *current) onHTMLComment6(linesI interface{}) (interface{}, error) {
	return linesI, nil

}

func (p *parser) callonHTMLComment6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment6(stack["linesI"])
}

func (c *current) onHTMLComment21(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonHTMLComment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment21(stack["commentI"])
}

func (c *current) onHTMLComment19(lineI interface{}) (interface{}, error) {
	return []file.HTMLCommentLine{lineI.(file.HTMLCommentLine)}, nil

}

func (p *parser) callonHTMLComment19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment19(stack["lineI"])
}

func (c *current) onHTMLComment1(linesI interface{}) (interface{}, error) {
	return file.HTMLComment{
		Lines:    linesI.([]file.HTMLCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonHTMLComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment1(stack["linesI"])
}

func (c *current) onhtmlCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonhtmlCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock3()
}

func (c *current) onhtmlCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonhtmlCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock16(stack["commentI"])
}

func (c *current) onhtmlCommentBlock30(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonhtmlCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock30(stack["linesI"])
}

func (c *current) onhtmlCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.HTMLCommentLine](linesI, -1), nil
}

func (p *parser) callonhtmlCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock1(stack["linesI"])
}

func (c *current) onElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onInlineElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand5(stack["nameI"])
}

func (c *current) onDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand15()
}

func (c *current) onDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand11(stack["posI"])
}

func (c *current) onDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand21(stack["idI"])
}

func (c *current) onDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand31()
}

func (c *current) onDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand27(stack["posI"])
}

func (c *current) onDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](moreAttrsI)...),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onInlineDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand5(stack["nameI"])
}

func (c *current) onInlineDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand15()
}

func (c *current) onInlineDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand11(stack["posI"])
}

func (c *current) onInlineDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand21(stack["idI"])
}

func (c *current) onInlineDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand31()
}

func (c *current) onInlineDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand27(stack["posI"])
}

func (c *current) onInlineDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](moreAttrsI)...),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd2(stack["collsI"])
}

func (c *current) onAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd21()
}

func (c *current) onAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd17(stack["posI"])
}

func (c *current) onAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd43()
}

func (c *current) onAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onInlineAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd2(stack["collsI"])
}

func (c *current) onInlineAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd21()
}

func (c *current) onInlineAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonInlineAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd17(stack["posI"])
}

func (c *current) onInlineAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd43()
}

func (c *current) onInlineAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonInlineAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection2(stack["idI"])
}

func (c *current) onAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection12()
}

func (c *current) onAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection8(stack["posI"])
}

func (c *current) onAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection18(stack["nameI"])
}

func (c *current) onAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection28()
}

func (c *current) onAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection24(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection2(stack["idI"])
}

func (c *current) onSingleLineAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection12()
}

func (c *current) onSingleLineAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection8(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection18(stack["nameI"])
}

func (c *current) onSingleLineAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection28()
}

func (c *current) onSingleLineAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection24(stack["posI"])
}

func (c *current) onAttributeList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList28()
}

func (c *current) onAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onAttributeList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList49()
}

func (c *current) onAttributeList30(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)` (did you forget a comma?)",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonAttributeList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList30(stack["attributesI"], stack["posI"])
}

func (c *current) onattributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonattributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineAttributeList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList18()
}

func (c *current) onSingleLineAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonSingleLineAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onSingleLineAttributeList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList34()
}

func (c *current) onSingleLineAttributeList20(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonSingleLineAttributeList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList20(stack["attributesI"], stack["posI"])
}

func (c *current) onsingleLineAttributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonsingleLineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineAttributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute3()
}

func (c *current) onSingleLineAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonSingleLineAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttribute3()
}

func (c *current) onSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute3(stack["nameI"])
}

func (c *current) onSingleLineSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineSimpleAttribute3(stack["nameI"])
}

func (c *current) onsimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute15()
}

func (c *current) onsimpleValueAttribute30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute30()
}

func (c *current) onsimpleValueAttribute2(nameI, assignPosI, posI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		AssignPos: ptr(assignPosI.(file.Position)),
		Value:     ptrOrNil[file.Expression](exprI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonsimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["posI"], stack["exprI"])
}

func (c *current) onsimpleValueAttribute51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute51()
}

func (c *current) onsimpleValueAttribute59() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute59()
}

func (c *current) onsimpleValueAttribute38(nameI, assignPosI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			AssignPos: ptrOrNil[file.Position](assignPosI),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression here",
			}),
		}
}

func (p *parser) callonsimpleValueAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute38(stack["nameI"], stack["assignPosI"], stack["posI"])
}

func (c *current) onsingleLineSimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute15()
}

func (c *current) onsingleLineSimpleValueAttribute2(nameI, assignPosI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		AssignPos: ptrOrNil[file.Position](assignPosI),
		Value:     ptrOrNil[file.Expression](exprI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonsingleLineSimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["exprI"])
}

func (c *current) onsingleLineSimpleValueAttribute39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute39()
}

func (c *current) onsingleLineSimpleValueAttribute47() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute47()
}

func (c *current) onsingleLineSimpleValueAttribute26(nameI, assignPosI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			AssignPos: ptrOrNil[file.Position](assignPosI),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression or a mixin call here",
			}),
		}
}

func (p *parser) callonsingleLineSimpleValueAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute26(stack["nameI"], stack["assignPosI"], stack["posI"])
}

func (c *current) onMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute14()
}

func (c *current) onMixinCallAttribute1(nameI, assignPosI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["callI"])
}

func (c *current) onSingleLineMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute14()
}

func (c *current) onSingleLineMixinCallAttribute1(nameI, assignPosI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["callI"])
}

func (c *current) onmixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall8(stack["identI"])
}

func (c *current) onmixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall27()
}

func (c *current) onmixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall39(stack["identI"])
}

func (c *current) onmixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall58()
}

func (c *current) onmixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall36(stack["identI"])
}

func (c *current) onmixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall67()
}

func (c *current) onmixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall64(stack["posI"])
}

func (c *current) onmixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall92()
}

func (c *current) onmixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Namespace: namespace,
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonmixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onsingleLineMixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall8(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall27()
}

func (c *current) onsingleLineMixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall39(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall58()
}

func (c *current) onsingleLineMixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall36(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall67()
}

func (c *current) onsingleLineMixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall64(stack["posI"])
}

func (c *current) onsingleLineMixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall92()
}

func (c *current) onsingleLineMixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Namespace: namespace,
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallAttributeValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue5()
}

func (c *current) onmixinCallAttributeValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue11()
}

func (c *current) onmixinCallAttributeValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallAttributeValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallAttributeValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue16()
}

func (c *current) onmixinCallAttributeValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonmixinCallAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression2(stack["cExprI"])
}

func (c *current) onSingleLineExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonSingleLineExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineExpression2(stack["cExprI"])
}

func (c *current) onGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression11()
}

func (c *current) onGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression27()
}

func (c *current) onGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression48()
}

func (c *current) onGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression80()
}

func (c *current) onGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression87()
}

func (c *current) onGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression98()
}

func (c *current) onGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression105()
}

func (c *current) onGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression110()
}

func (c *current) onGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression128()
}

func (c *current) onGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression149()
}

func (c *current) onGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression181()
}

func (c *current) onGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression188()
}

func (c *current) onGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression199()
}

func (c *current) onGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression206()
}

func (c *current) onGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression211()
}

func (c *current) onGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression218()
}

func (c *current) onGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression8(stack["posI"])
}

func (c *current) onGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression227()
}

func (c *current) onGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression224(stack["posI"])
}

func (c *current) onGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["exprsI"])
}

func (c *current) ongoParenExpr9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr9()
}

func (c *current) ongoParenExpr20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr20()
}

func (c *current) ongoParenExpr31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr31()
}

func (c *current) ongoParenExpr2(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]), // opening paren
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]), // closing paren
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil
}

func (p *parser) callongoParenExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr2(stack["exprI"])
}

func (c *current) ongoParenExpr43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr43()
}

func (c *current) ongoParenExpr38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}
}

func (p *parser) callongoParenExpr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) ongoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression11()
}

func (c *current) ongoSubExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression27()
}

func (c *current) ongoSubExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression48()
}

func (c *current) ongoSubExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression80()
}

func (c *current) ongoSubExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression87()
}

func (c *current) ongoSubExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression98()
}

func (c *current) ongoSubExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression105()
}

func (c *current) ongoSubExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression110()
}

func (c *current) ongoSubExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression128()
}

func (c *current) ongoSubExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression149()
}

func (c *current) ongoSubExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression181()
}

func (c *current) ongoSubExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression188()
}

func (c *current) ongoSubExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression199()
}

func (c *current) ongoSubExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression206()
}

func (c *current) ongoSubExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression211()
}

func (c *current) ongoSubExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression218()
}

func (c *current) ongoSubExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callongoSubExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) ongoSubExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callongoSubExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression8(stack["posI"])
}

func (c *current) ongoSubExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression227()
}

func (c *current) ongoSubExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callongoSubExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression224(stack["posI"])
}

func (c *current) ongoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callongoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression1(stack["exprsI"])
}

func (c *current) onmultiLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression11()
}

func (c *current) onmultiLineGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression27()
}

func (c *current) onmultiLineGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression48()
}

func (c *current) onmultiLineGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression80()
}

func (c *current) onmultiLineGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression87()
}

func (c *current) onmultiLineGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression98()
}

func (c *current) onmultiLineGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression105()
}

func (c *current) onmultiLineGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression110()
}

func (c *current) onmultiLineGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression128()
}

func (c *current) onmultiLineGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression149()
}

func (c *current) onmultiLineGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression181()
}

func (c *current) onmultiLineGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression188()
}

func (c *current) onmultiLineGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression199()
}

func (c *current) onmultiLineGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression206()
}

func (c *current) onmultiLineGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression211()
}

func (c *current) onmultiLineGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression218()
}

func (c *current) onmultiLineGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onmultiLineGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonmultiLineGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression8(stack["posI"])
}

func (c *current) onmultiLineGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression227()
}

func (c *current) onmultiLineGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonmultiLineGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression224(stack["posI"])
}

func (c *current) onmultiLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonmultiLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression1(stack["exprsI"])
}

func (c *current) onSingleLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression11()
}

func (c *current) onSingleLineGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression27()
}

func (c *current) onSingleLineGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression48()
}

func (c *current) onSingleLineGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression80()
}

func (c *current) onSingleLineGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression87()
}

func (c *current) onSingleLineGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression98()
}

func (c *current) onSingleLineGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression105()
}

func (c *current) onSingleLineGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression110()
}

func (c *current) onSingleLineGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression128()
}

func (c *current) onSingleLineGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression149()
}

func (c *current) onSingleLineGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression181()
}

func (c *current) onSingleLineGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression188()
}

func (c *current) onSingleLineGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression199()
}

func (c *current) onSingleLineGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression206()
}

func (c *current) onSingleLineGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression211()
}

func (c *current) onSingleLineGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression218()
}

func (c *current) onSingleLineGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onSingleLineGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonSingleLineGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression8(stack["posI"])
}

func (c *current) onSingleLineGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression227()
}

func (c *current) onSingleLineGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonSingleLineGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression224(stack["posI"])
}

func (c *current) onSingleLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonSingleLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression1(stack["exprsI"])
}

func (c *current) onsingleLineGoParenExpr9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr9()
}

func (c *current) onsingleLineGoParenExpr20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr20()
}

func (c *current) onsingleLineGoParenExpr31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr31()
}

func (c *current) onsingleLineGoParenExpr2(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil
}

func (p *parser) callonsingleLineGoParenExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr2(stack["exprI"])
}

func (c *current) onsingleLineGoParenExpr43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr43()
}

func (c *current) onsingleLineGoParenExpr38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}
}

func (p *parser) callonsingleLineGoParenExpr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onsingleLineGoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression11()
}

func (c *current) onsingleLineGoSubExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression27()
}

func (c *current) onsingleLineGoSubExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression48()
}

func (c *current) onsingleLineGoSubExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression80()
}

func (c *current) onsingleLineGoSubExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression87()
}

func (c *current) onsingleLineGoSubExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression98()
}

func (c *current) onsingleLineGoSubExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression105()
}

func (c *current) onsingleLineGoSubExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression110()
}

func (c *current) onsingleLineGoSubExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression128()
}

func (c *current) onsingleLineGoSubExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression149()
}

func (c *current) onsingleLineGoSubExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression181()
}

func (c *current) onsingleLineGoSubExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression188()
}

func (c *current) onsingleLineGoSubExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression199()
}

func (c *current) onsingleLineGoSubExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression206()
}

func (c *current) onsingleLineGoSubExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression211()
}

func (c *current) onsingleLineGoSubExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression218()
}

func (c *current) onsingleLineGoSubExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineGoSubExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonsingleLineGoSubExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression8(stack["posI"])
}

func (c *current) onsingleLineGoSubExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression227()
}

func (c *current) onsingleLineGoSubExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonsingleLineGoSubExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression224(stack["posI"])
}

func (c *current) onsingleLineGoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineGoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression1(stack["exprsI"])
}

func (c *current) onIfExpression2(cExprI interface{}) (interface{}, error) {
	cExpr := cExprI.(file.ChainExpression)
	expr := file.Expression{Expressions: []file.ExpressionItem{cExpr}}
	if cExpr.Default != nil {
		return expr, &corgierr.Error{
			Message: "chain expression with default as conditional",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "here", // todo: span the entire len of the expression
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the default"},
			},
		}
	}

	return expr, nil
}

func (p *parser) callonIfExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression2(stack["cExprI"])
}

func (c *current) onIfExpression15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression15()
}

func (c *current) onIfExpression31() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression31()
}

func (c *current) onIfExpression52() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression52()
}

func (c *current) onIfExpression84() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression84()
}

func (c *current) onIfExpression91() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression91()
}

func (c *current) onIfExpression102() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression102()
}

func (c *current) onIfExpression109() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression109()
}

func (c *current) onIfExpression114() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression114()
}

func (c *current) onIfExpression132() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression132()
}

func (c *current) onIfExpression153() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression153()
}

func (c *current) onIfExpression185() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression185()
}

func (c *current) onIfExpression192() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression192()
}

func (c *current) onIfExpression203() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression203()
}

func (c *current) onIfExpression210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression210()
}

func (c *current) onIfExpression215() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression215()
}

func (c *current) onIfExpression222() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression222()
}

func (c *current) onIfExpression120(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonIfExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression120(stack["valsI"], stack["endPosI"])
}

func (c *current) onIfExpression12(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonIfExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression12(stack["posI"])
}

func (c *current) onIfExpression231() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression231()
}

func (c *current) onIfExpression228(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonIfExpression228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression228(stack["posI"])
}

func (c *current) onIfExpression5(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonIfExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression5(stack["exprsI"])
}

func (c *current) onSingleLineIfExpression2(cExprI interface{}) (interface{}, error) {
	cExpr := cExprI.(file.ChainExpression)
	expr := file.Expression{Expressions: []file.ExpressionItem{cExpr}}
	if cExpr.Default != nil {
		return expr, &corgierr.Error{
			Message: "chain expression with default as conditional",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "here", // todo: span the entire len of the expression
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the default"},
			},
		}
	}

	return expr, nil
}

func (p *parser) callonSingleLineIfExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression2(stack["cExprI"])
}

func (c *current) onSingleLineIfExpression15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIfExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression15()
}

func (c *current) onSingleLineIfExpression31() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression31()
}

func (c *current) onSingleLineIfExpression52() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression52()
}

func (c *current) onSingleLineIfExpression84() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineIfExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression84()
}

func (c *current) onSingleLineIfExpression91() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression91()
}

func (c *current) onSingleLineIfExpression102() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression102()
}

func (c *current) onSingleLineIfExpression109() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression109()
}

func (c *current) onSingleLineIfExpression114() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression114()
}

func (c *current) onSingleLineIfExpression132() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression132()
}

func (c *current) onSingleLineIfExpression153() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression153()
}

func (c *current) onSingleLineIfExpression185() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineIfExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression185()
}

func (c *current) onSingleLineIfExpression192() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression192()
}

func (c *current) onSingleLineIfExpression203() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression203()
}

func (c *current) onSingleLineIfExpression210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression210()
}

func (c *current) onSingleLineIfExpression215() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression215()
}

func (c *current) onSingleLineIfExpression222() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIfExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression222()
}

func (c *current) onSingleLineIfExpression120(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonSingleLineIfExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression120(stack["valsI"], stack["endPosI"])
}

func (c *current) onSingleLineIfExpression12(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonSingleLineIfExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression12(stack["posI"])
}

func (c *current) onSingleLineIfExpression231() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIfExpression231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression231()
}

func (c *current) onSingleLineIfExpression228(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonSingleLineIfExpression228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression228(stack["posI"])
}

func (c *current) onSingleLineIfExpression5(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonSingleLineIfExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression5(stack["exprsI"])
}

func (c *current) onForExpression2(rExprI interface{}) (interface{}, error) {
	return &file.Expression{Expressions: []file.ExpressionItem{rExprI.(file.RangeExpression)}}, nil
}

func (p *parser) callonForExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForExpression2(stack["rExprI"])
}

func (c *current) onForExpression5(exprI interface{}) (interface{}, error) {
	return ptr(exprI.(file.Expression)), nil
}

func (p *parser) callonForExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForExpression5(stack["exprI"])
}

func (c *current) onForExpression8() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonForExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForExpression8()
}

func (c *current) onSingleLineForExpression2(rExprI interface{}) (interface{}, error) {
	return &file.Expression{Expressions: []file.ExpressionItem{rExprI.(file.RangeExpression)}}, nil
}

func (p *parser) callonSingleLineForExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineForExpression2(stack["rExprI"])
}

func (c *current) onSingleLineForExpression5(exprI interface{}) (interface{}, error) {
	return ptr(exprI.(file.Expression)), nil
}

func (p *parser) callonSingleLineForExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineForExpression5(stack["exprI"])
}

func (c *current) onSingleLineForExpression8() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonSingleLineForExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineForExpression8()
}

func (c *current) onRangeExpression8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression8(stack["ident"])
}

func (c *current) onRangeExpression22(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression22(stack["ident"])
}

func (c *current) onRangeExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRangeExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression31()
}

func (c *current) onRangeExpression5(var1I, var2I, eqPosI, declaresI interface{}) (interface{}, error) {
	var1 := var1I.(file.GoIdent)

	var var2 *file.GoIdent
	if var2I != nil {
		var2Val := getTuple[file.GoIdent](var2I, -1)
		var2 = &var2Val
	}

	return file.RangeExpression{
		Var1:     &var1,
		Var2:     var2,
		EqPos:    eqPosI.(file.Position),
		Declares: declaresI != nil,
	}, nil
}

func (p *parser) callonRangeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onRangeExpression1(varsI, orderedI, exprI interface{}) (interface{}, error) {
	re := file.RangeExpression{
		Ordered:         orderedI != nil,
		Position:        pos(c),
		RangeExpression: exprI.(file.Expression),
	}

	if partRE, ok := varsI.(file.RangeExpression); ok {
		re.Var1 = partRE.Var1
		re.Var2 = partRE.Var2
		re.EqPos = partRE.EqPos
		re.Declares = partRE.Declares
	}

	return re, nil
}

func (p *parser) callonRangeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onSingleLineRangeExpression8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineRangeExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression8(stack["ident"])
}

func (c *current) onSingleLineRangeExpression22(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineRangeExpression22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression22(stack["ident"])
}

func (c *current) onSingleLineRangeExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineRangeExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression31()
}

func (c *current) onSingleLineRangeExpression5(var1I, var2I, eqPosI, declaresI interface{}) (interface{}, error) {
	var1 := var1I.(file.GoIdent)

	var var2 *file.GoIdent
	if var2I != nil {
		var2Val := getTuple[file.GoIdent](var2I, -1)
		var2 = &var2Val
	}

	return file.RangeExpression{
		Var1:     &var1,
		Var2:     var2,
		EqPos:    eqPosI.(file.Position),
		Declares: declaresI != nil,
	}, nil
}

func (p *parser) callonSingleLineRangeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onSingleLineRangeExpression1(varsI, orderedI, exprI interface{}) (interface{}, error) {
	re := file.RangeExpression{
		Ordered:         orderedI != nil,
		Position:        pos(c),
		RangeExpression: exprI.(file.Expression),
	}

	if partRE, ok := varsI.(file.RangeExpression); ok {
		re.Var1 = partRE.Var1
		re.Var2 = partRE.Var2
		re.EqPos = partRE.EqPos
		re.Declares = partRE.Declares
	}

	return re, nil
}

func (p *parser) callonSingleLineRangeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onInterpretedStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '"',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression2(stack["contentsI"])
}

func (c *current) onInterpretedStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression13()
}

func (c *current) onInterpretedStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '"',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a `\"` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonInterpretedStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onRawStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '`',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression2(stack["contentsI"])
}

func (c *current) onRawStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRawStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression13()
}

func (c *current) onRawStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '`',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a ``` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonRawStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onInterpretedStringExpressionItem16() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem16()
}

func (c *current) onInterpretedStringExpressionItem37() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem37()
}

func (c *current) onInterpretedStringExpressionItem69() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringExpressionItem69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem69()
}

func (c *current) onInterpretedStringExpressionItem76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem76()
}

func (c *current) onInterpretedStringExpressionItem87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem87()
}

func (c *current) onInterpretedStringExpressionItem94() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem94()
}

func (c *current) onInterpretedStringExpressionItem99() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem99()
}

func (c *current) onInterpretedStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem2()
}

func (c *current) onRawStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpressionItem2()
}

func (c *current) onStringExpressionInterpolation25() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation25()
}

func (c *current) onStringExpressionInterpolation28() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation28()
}

func (c *current) onStringExpressionInterpolation8() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation8()
}

func (c *current) onStringExpressionInterpolation36() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation36()
}

func (c *current) onStringExpressionInterpolation30(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation30(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation43()
}

func (c *current) onStringExpressionInterpolation48() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation48()
}

func (c *current) onStringExpressionInterpolation2(fmtDirectiveI, lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
		FormatDirective: castedOrZero[string](fmtDirectiveI),
		Expression:      exprI.(file.Expression),
		LBracePos:       lBracePosI.(file.Position),
		RBracePos:       rBracePosI.(file.Position),
		Position:        pos(c),
	}, nil
}

func (p *parser) callonStringExpressionInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation2(stack["fmtDirectiveI"], stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onStringExpressionInterpolation73() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation73()
}

func (c *current) onStringExpressionInterpolation76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation76()
}

func (c *current) onStringExpressionInterpolation56() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation56()
}

func (c *current) onStringExpressionInterpolation84() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation84()
}

func (c *current) onStringExpressionInterpolation78(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation78(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation91()
}

func (c *current) onStringExpressionInterpolation50(fmtDirectiveI, parenPosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			FormatDirective: castedOrZero[string](fmtDirectiveI),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "interpolation is missing an expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      parenPosI.(file.Position),
				Annotation: "expected a `" + lbrace + "` here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "add an expression enclosed in braces",
					Code:       "`" + string(c.text) + "{1+1}`",
				},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation50(stack["fmtDirectiveI"], stack["parenPosI"])
}

func (c *current) onStringExpressionInterpolation120() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation120()
}

func (c *current) onStringExpressionInterpolation123() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation123()
}

func (c *current) onStringExpressionInterpolation103() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation103()
}

func (c *current) onStringExpressionInterpolation131() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation131()
}

func (c *current) onStringExpressionInterpolation125(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation125(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation138() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation138()
}

func (c *current) onStringExpressionInterpolation145() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation145()
}

func (c *current) onStringExpressionInterpolation148() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation148()
}

func (c *current) onStringExpressionInterpolation97(fmtDirectiveI, parenPosI, lBracePosI, startPosI, exprI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			FormatDirective: castedOrZero[string](fmtDirectiveI),
			Expression:      exprI.(file.Expression),
			LBracePos:       lBracePosI.(file.Position),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "unclosed string interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				EOLDelta:   1,
				Annotation: "expected a `" + rbrace + "` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					End:        startPosI.(file.Position),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "add the missing `" + rbrace + "`"},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation97(stack["fmtDirectiveI"], stack["parenPosI"], stack["lBracePosI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onTernaryExpression51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression51()
}

func (c *current) onTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression57() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression57()
}

func (c *current) onTernaryExpression71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression71()
}

func (c *current) onTernaryExpression53(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression53(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression93() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression93()
}

func (c *current) onTernaryExpression87(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression87(stack["posI"])
}

func (c *current) onTernaryExpression109() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression109()
}

func (c *current) onTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression106(stack["posI"])
}

func (c *current) onTernaryExpression118() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression118()
}

func (c *current) onTernaryExpression73(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression73(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression152() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression152()
}

func (c *current) onTernaryExpression146(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression146(stack["posI"])
}

func (c *current) onTernaryExpression168() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression168()
}

func (c *current) onTernaryExpression165(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression165(stack["posI"])
}

func (c *current) onTernaryExpression177() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression177()
}

func (c *current) onTernaryExpression120(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression120(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression31()
}

func (c *current) onSingleLineTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression37()
}

func (c *current) onSingleLineTernaryExpression46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression46()
}

func (c *current) onSingleLineTernaryExpression33(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression33(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression63() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression63()
}

func (c *current) onSingleLineTernaryExpression57(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression57(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression79()
}

func (c *current) onSingleLineTernaryExpression76(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression76(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression88() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression88()
}

func (c *current) onSingleLineTernaryExpression48(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression48(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression112() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression112()
}

func (c *current) onSingleLineTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression106(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression128() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression128()
}

func (c *current) onSingleLineTernaryExpression125(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression125(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression137() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression137()
}

func (c *current) onSingleLineTernaryExpression90(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression90(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onChainExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression21()
}

func (c *current) onChainExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression37()
}

func (c *current) onChainExpression64(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)) || defaultI != nil, nil
}

func (p *parser) callonChainExpression64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression64(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression68()
}

func (c *current) onChainExpression86() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression86()
}

func (c *current) onChainExpression92(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)), nil
}

func (p *parser) callonChainExpression92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression92(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onChainExpression94() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression94()
}

func (c *current) onChainExpression102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression102()
}

func (c *current) onChainExpression65(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}

	var multiline string
	if malEndPosI.(file.Position).Line > malStartPosI.(file.Position).Line {
		multiline += " and the lines below"
	}

	return expr, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this" + multiline + " part",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonChainExpression65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression65(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onchainExpressionRoot2() (interface{}, error) {
	return file.GoExpression{
		Expression: string(c.text),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot2()
}

func (c *current) onchainExpressionRoot10(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonchainExpressionRoot10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot10(stack["ident"])
}

func (c *current) onchainExpressionRoot8(identI interface{}) (interface{}, error) {
	ident := identI.(file.GoIdent)
	return file.GoExpression{
		Expression: ident.Ident,
		Position:   ident.Position,
	}, nil
}

func (p *parser) callonchainExpressionRoot8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot8(stack["identI"])
}

func (c *current) onSingleLineChainExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression21()
}

func (c *current) onSingleLineChainExpression32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression32()
}

func (c *current) onSingleLineChainExpression55(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0 || defaultI != nil, nil
}

func (p *parser) callonSingleLineChainExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression55(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonSingleLineChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression58()
}

func (c *current) onSingleLineChainExpression76() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression76()
}

func (c *current) onSingleLineChainExpression82(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0, nil
}

func (p *parser) callonSingleLineChainExpression82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression82(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression84() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression84()
}

func (c *current) onSingleLineChainExpression92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression92()
}

func (c *current) onSingleLineChainExpression98(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (bool, error) {
	return false, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this part",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonSingleLineChainExpression98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression98(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onChainExpressionItem14(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem14(stack["ident"])
}

func (c *current) onChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionItem37(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem37(stack["ident"])
}

func (c *current) onChainExpressionItem47(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem47(stack["ident"])
}

func (c *current) onChainExpressionItem56() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem56()
}

func (c *current) onChainExpressionItem24(ptrsI, packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		PointerCount: len(islice(ptrsI)),
		Package:      packageIdent,
		Type:         typeI.(file.GoIdent),
		RParenPos:    rParenPosI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonChainExpressionItem24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem24(stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem9(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem32(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem32(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem42(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem42(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem51()
}

func (c *current) onSingleLineChainExpressionItem19(ptrsI, packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		PointerCount: len(islice(ptrsI)),
		Package:      packageIdent,
		Type:         typeI.(file.GoIdent),
		RParenPos:    rParenPosI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem19(stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3()
}

func (c *current) onIndexExpression30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression30()
}

func (c *current) onIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onindexExpressionIndex11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex11()
}

func (c *current) onindexExpressionIndex27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex27()
}

func (c *current) onindexExpressionIndex48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex48()
}

func (c *current) onindexExpressionIndex80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex80()
}

func (c *current) onindexExpressionIndex87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex87()
}

func (c *current) onindexExpressionIndex98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex98()
}

func (c *current) onindexExpressionIndex105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex105()
}

func (c *current) onindexExpressionIndex110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex110()
}

func (c *current) onindexExpressionIndex128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex128()
}

func (c *current) onindexExpressionIndex149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex149()
}

func (c *current) onindexExpressionIndex181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex181()
}

func (c *current) onindexExpressionIndex188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex188()
}

func (c *current) onindexExpressionIndex199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex199()
}

func (c *current) onindexExpressionIndex206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex206()
}

func (c *current) onindexExpressionIndex211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex211()
}

func (c *current) onindexExpressionIndex218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex218()
}

func (c *current) onindexExpressionIndex116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex116(stack["valsI"], stack["endPosI"])
}

func (c *current) onindexExpressionIndex8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonindexExpressionIndex8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex8(stack["posI"])
}

func (c *current) onindexExpressionIndex227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex227()
}

func (c *current) onindexExpressionIndex224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonindexExpressionIndex224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex224(stack["posI"])
}

func (c *current) onindexExpressionIndex1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonindexExpressionIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex1(stack["exprsI"])
}

func (c *current) onSingleLineIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression3()
}

func (c *current) onSingleLineIndexExpression25() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression25()
}

func (c *current) onSingleLineIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonSingleLineIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onsingleLineIndexExpressionIndex11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex11()
}

func (c *current) onsingleLineIndexExpressionIndex27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex27()
}

func (c *current) onsingleLineIndexExpressionIndex48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex48()
}

func (c *current) onsingleLineIndexExpressionIndex80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex80()
}

func (c *current) onsingleLineIndexExpressionIndex87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex87()
}

func (c *current) onsingleLineIndexExpressionIndex98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex98()
}

func (c *current) onsingleLineIndexExpressionIndex105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex105()
}

func (c *current) onsingleLineIndexExpressionIndex110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex110()
}

func (c *current) onsingleLineIndexExpressionIndex128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex128()
}

func (c *current) onsingleLineIndexExpressionIndex149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex149()
}

func (c *current) onsingleLineIndexExpressionIndex181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex181()
}

func (c *current) onsingleLineIndexExpressionIndex188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex188()
}

func (c *current) onsingleLineIndexExpressionIndex199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex199()
}

func (c *current) onsingleLineIndexExpressionIndex206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex206()
}

func (c *current) onsingleLineIndexExpressionIndex211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex211()
}

func (c *current) onsingleLineIndexExpressionIndex218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex218()
}

func (c *current) onsingleLineIndexExpressionIndex116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex116(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineIndexExpressionIndex8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonsingleLineIndexExpressionIndex8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex8(stack["posI"])
}

func (c *current) onsingleLineIndexExpressionIndex227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex227()
}

func (c *current) onsingleLineIndexExpressionIndex224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonsingleLineIndexExpressionIndex224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex224(stack["posI"])
}

func (c *current) onsingleLineIndexExpressionIndex1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineIndexExpressionIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex1(stack["exprsI"])
}

func (c *current) onParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3()
}

func (c *current) onParenExpression23() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression23()
}

func (c *current) onParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onparenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonparenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression3()
}

func (c *current) onSingleLineParenExpression18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression18()
}

func (c *current) onSingleLineParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onsingleLinearenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonsingleLinearenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLinearenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onGoType1(goTypeI interface{}) (interface{}, error) {
	return file.GoType{Type: concat(goTypeI), Position: pos(c)}, nil
}

func (p *parser) callonGoType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoType1(stack["goTypeI"])
}

func (c *current) ongoFieldDecl33() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a ``` somewhere here",
		}),
	}
}

func (p *parser) callongoFieldDecl33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl33()
}

func (c *current) ongoFieldDecl57() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl57()
}

func (c *current) ongoFieldDecl78() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl78()
}

func (c *current) ongoFieldDecl110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl110()
}

func (c *current) ongoFieldDecl117() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl117()
}

func (c *current) ongoFieldDecl128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl128()
}

func (c *current) ongoFieldDecl135() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl135()
}

func (c *current) ongoFieldDecl140() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl140()
}

func (c *current) ongoFieldDecl157() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl157()
}

func (c *current) ongoFieldDecl178() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl178()
}

func (c *current) ongoFieldDecl210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl210()
}

func (c *current) ongoFieldDecl217() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl217()
}

func (c *current) ongoFieldDecl228() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl228()
}

func (c *current) ongoFieldDecl235() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl235()
}

func (c *current) ongoFieldDecl240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl240()
}

func (c *current) ongoFieldDecl146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a `\"` somewhere here",
		}),
	}

}

func (p *parser) callongoFieldDecl146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl146()
}

func (c *current) onMixin12(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixin12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin12(stack["identI"])
}

func (c *current) onMixin31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin31()
}

func (c *current) onMixin18(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixin18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin18(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixin9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin9(stack["identI"])
}

func (c *current) onMixin40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin40()
}

func (c *current) onMixin37(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin37(stack["posI"])
}

func (c *current) onMixin65() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin65()
}

func (c *current) onMixin59(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin59(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin2(nameI, paramsI, bodyI interface{}) (interface{}, error) {
	params := castedOrZero[file.Mixin](paramsI)
	return file.Mixin{
		Name:      nameI.(file.Ident),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixin2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin2(stack["nameI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) onMixin80() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin80()
}

func (c *current) onMixin76(posI, bodyI interface{}) (interface{}, error) {
	return file.Mixin{
			Body:     bodyI.(file.Scope),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "mixin: missing name",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected the name of the mixin here",
			}),
			Example: "`mixin woof\n" +
				"  > bark`",
		}
}

func (p *parser) callonMixin76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin76(stack["posI"], stack["bodyI"])
}

func (c *current) onmixinParamList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList28()
}

func (c *current) onmixinParamList2(paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Mixin{
		LParenPos: ptr(pos(c)),
		Params:    castedOrZero[[]file.MixinParam](paramsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinParamList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList2(stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onmixinParamList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList49()
}

func (c *current) onmixinParamList30(paramsI, posI interface{}) (interface{}, error) {
	return file.Mixin{
			LParenPos: ptr(pos(c)),
			Params:    castedOrZero[[]file.MixinParam](paramsI),
		}, &corgierr.Error{
			Message: "mixin parameters: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinParamList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList30(stack["paramsI"], stack["posI"])
}

func (c *current) onmixinParams1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinParams := make([]file.MixinParam, 1+len(restIs))
	mixinParams[0] = firstI.(file.MixinParam)
	for i, ai := range restIs {
		mixinParams[i+1] = getTuple[file.MixinParam](ai, -1)
	}

	return mixinParams, nil
}

func (p *parser) callonmixinParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParams1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinParam8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam8(stack["identI"])
}

func (c *current) onmixinParam27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam27()
}

func (c *current) onmixinParam14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinParam14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam5(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam5(stack["identI"])
}

func (c *current) onmixinParam39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam39()
}

func (c *current) onmixinParam33(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinParam33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam33(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam46()
}

func (c *current) onmixinParam1(nameI, posI, typeI, defaultI interface{}) (interface{}, error) {
	defaultTuple := islice(defaultI)
	var paramDefault file.MixinParam
	if len(defaultTuple) == 2 {
		paramDefault = defaultTuple[1].(file.MixinParam)
	}

	typeTuple := islice(typeI)
	var paramType *file.GoType
	if len(typeTuple) == 2 {
		paramType = ptr(typeTuple[1].(file.GoType))
	}

	p := file.MixinParam{
		Name:      nameI.(file.Ident),
		Type:      paramType,
		AssignPos: paramDefault.AssignPos,
		Default:   paramDefault.Default,
		Position:  pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &corgierr.Error{
			Message: "mixin param: need either a type or a default",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected either a type or a default here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "give this param a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this param a default with an inferrable type", Code: "`" + p.Name.Ident + "=\"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) callonmixinParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam1(stack["nameI"], stack["posI"], stack["typeI"], stack["defaultI"])
}

func (c *current) onmixinParamDefault2(exprI interface{}) (interface{}, error) {
	return file.MixinParam{
		AssignPos: ptr(pos(c)),
		Default:   ptrOrNil[file.Expression](exprI),
	}, nil
}

func (p *parser) callonmixinParamDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault2(stack["exprI"])
}

func (c *current) onmixinParamDefault13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamDefault13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault13()
}

func (c *current) onmixinParamDefault9(posI interface{}) (interface{}, error) {
	return file.MixinParam{
			AssignPos: ptr(pos(c)),
		}, &corgierr.Error{
			Message: "mixin param: missing default",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "because of this `=`",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the `=`, if you didn't mean to define a default"},
			},
		}
}

func (p *parser) callonmixinParamDefault9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault9(stack["posI"])
}

func (c *current) onReturn8() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonReturn8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn8()
}

func (c *current) onReturn1(errExprI interface{}) (interface{}, error) {
	return file.Return{
		Err:      ptrOrNil[file.Expression](errExprI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errExprI"])
}

func (c *current) onMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall8(stack["identI"])
}

func (c *current) onMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall27()
}

func (c *current) onMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall39(stack["identI"])
}

func (c *current) onMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall58()
}

func (c *current) onMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall36(stack["identI"])
}

func (c *current) onMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall67()
}

func (c *current) onMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall64(stack["posI"])
}

func (c *current) onMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall92()
}

func (c *current) onMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCall{
		Namespace: namespace,
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onInlineMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall8(stack["identI"])
}

func (c *current) onInlineMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall27()
}

func (c *current) onInlineMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall39(stack["identI"])
}

func (c *current) onInlineMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall58()
}

func (c *current) onInlineMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall36(stack["identI"])
}

func (c *current) onInlineMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall67()
}

func (c *current) onInlineMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall64(stack["posI"])
}

func (c *current) onInlineMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall92()
}

func (c *current) onInlineMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCall{
		Namespace: namespace,
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonInlineMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onmixinArgList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList28()
}

func (c *current) onmixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onmixinArgList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList49()
}

func (c *current) onmixinArgList30(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin args: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinArgList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList30(stack["argsI"], stack["posI"])
}

func (c *current) onsingleLineMixinArgList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList18()
}

func (c *current) onsingleLineMixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonsingleLineMixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onsingleLineMixinArgList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList34()
}

func (c *current) onsingleLineMixinArgList20(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin args: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonsingleLineMixinArgList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList20(stack["argsI"], stack["posI"])
}

func (c *current) onmixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonmixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onsingleLineMixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonsingleLineMixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg9(stack["identI"])
}

func (c *current) onmixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg28()
}

func (c *current) onmixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg6(stack["identI"])
}

func (c *current) onmixinArg40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg40()
}

func (c *current) onmixinArg34(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg34(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonmixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onmixinArg60(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg60(stack["identI"])
}

func (c *current) onmixinArg79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg79()
}

func (c *current) onmixinArg66(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg66(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg57(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg57(stack["identI"])
}

func (c *current) onmixinArg91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg91()
}

func (c *current) onmixinArg85(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg85(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg103()
}

func (c *current) onmixinArg53(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonmixinArg53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg53(stack["nameI"], stack["posI"])
}

func (c *current) onsingleLineMixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg9(stack["identI"])
}

func (c *current) onsingleLineMixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg28()
}

func (c *current) onsingleLineMixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg6(stack["identI"])
}

func (c *current) onsingleLineMixinArg40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg40()
}

func (c *current) onsingleLineMixinArg34(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg34(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonsingleLineMixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onsingleLineMixinArg60(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg60(stack["identI"])
}

func (c *current) onsingleLineMixinArg79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg79()
}

func (c *current) onsingleLineMixinArg66(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg66(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg57(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg57(stack["identI"])
}

func (c *current) onsingleLineMixinArg91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg91()
}

func (c *current) onsingleLineMixinArg85(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg85(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg103()
}

func (c *current) onsingleLineMixinArg53(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonsingleLineMixinArg53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg53(stack["nameI"], stack["posI"])
}

func (c *current) onmixinCallBody2(shI interface{}) (interface{}, error) {
	return file.Scope{shI.(file.MixinMainBlockShorthand)}, nil
}

func (p *parser) callonmixinCallBody2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallBody2(stack["shI"])
}

func (c *current) onMixinMainBlockShorthand6() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand6()
}

func (c *current) onMixinMainBlockShorthand2(bodyI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
		Body:     bodyI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinMainBlockShorthand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand2(stack["bodyI"])
}

func (c *current) onMixinMainBlockShorthand24() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand24()
}

func (c *current) onMixinMainBlockShorthand28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinMainBlockShorthand28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand28()
}

func (c *current) onMixinMainBlockShorthand20(posI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing body",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an indented body",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if you want the `_` block to write nothing,\n" +
						"use a block directive inside the body of the mixin call",
					Example: "`+woof\n" +
						"  block _`",
				},
			},
		}
}

func (p *parser) callonMixinMainBlockShorthand20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand20(stack["posI"])
}

func (c *current) onFunc8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonFunc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc8(stack["ident"])
}

func (c *current) onFunc19() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc19()
}

func (c *current) onFunc23(paramsI interface{}) (interface{}, error) {
	return castedOrZero[[]file.FuncParam](paramsI), nil

}

func (p *parser) callonFunc23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc23(stack["paramsI"])
}

func (c *current) onFunc52() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc52()
}

func (c *current) onFunc47(endPosI interface{}) (interface{}, error) {
	return ([]file.FuncParam)(nil), &corgierr.Error{
		Message: "invalid parameter list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "this is not correct, maybe a missing comma?",
		}),
	}

}

func (p *parser) callonFunc47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc47(stack["endPosI"])
}

func (c *current) onFunc59() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc59()
}

func (c *current) onFunc16(lParenPosI, paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Func{
		LParenPos: lParenPosI.(file.Position),
		Params:    paramsI.([]file.FuncParam),
		RParenPos: rParenPosI.(file.Position),
	}, nil

}

func (p *parser) callonFunc16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc16(stack["lParenPosI"], stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onFunc61() (interface{}, error) {
	return file.Func{}, &corgierr.Error{
		Message: "missing `(` or `)` or invalid param list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}

}

func (p *parser) callonFunc61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc61()
}

func (c *current) onFunc2(nameI, paramsI interface{}) (interface{}, error) {
	params := paramsI.(file.Func)
	return file.Func{
		Name:      nameI.(file.GoIdent),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonFunc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc2(stack["nameI"], stack["paramsI"])
}

func (c *current) onFunc77() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc77()
}

func (c *current) onFunc73(posI interface{}) (interface{}, error) {
	return file.Func{Position: pos(c)}, &corgierr.Error{
		Message: "missing func name",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected an identifier followed by a parameter list",
		}),
	}
}

func (p *parser) callonFunc73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc73(stack["posI"])
}

func (c *current) onfuncOnlyVariadicParamList1(variadicI interface{}) (interface{}, error) {
	return []file.FuncParam{variadicI.(file.FuncParam)}, nil
}

func (p *parser) callonfuncOnlyVariadicParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOnlyVariadicParamList1(stack["variadicI"])
}

func (c *current) onfuncOtherParamList1(firstI, restI, variadicI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	n := 1 + len(restTuples)
	if variadicI != nil {
		n++
	}
	params := make([]file.FuncParam, 1, n)
	params[0] = firstI.(file.FuncParam)

	for _, t := range restTuples {
		params = append(params, getTuple[file.FuncParam](t, -1))
	}

	if variadicI != nil {
		params = append(params, getTuple[file.FuncParam](variadicI, -1))
	}

	return params, nil
}

func (p *parser) callonfuncOtherParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOtherParamList1(stack["firstI"], stack["restI"], stack["variadicI"])
}

func (c *current) onfuncParam8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam8(stack["ident"])
}

func (c *current) onfuncParam27(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam27(stack["ident"])
}

func (c *current) onfuncParam5(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)
	idents := make([]file.GoIdent, 1, 1+len(restTuples))
	idents[0] = firstI.(file.GoIdent)

	for _, t := range restTuples {
		idents = append(idents, getTuple[file.GoIdent](t, -1))
	}

	return idents, nil
}

func (p *parser) callonfuncParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam5(stack["firstI"], stack["restI"])
}

func (c *current) onfuncParam2(namesI, typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Names: namesI.([]file.GoIdent),
		Type:  typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam2(stack["namesI"], stack["typeI"])
}

func (c *current) onfuncParam37(typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Type: typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam37(stack["typeI"])
}

func (c *current) onfuncVariadicParam6(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncVariadicParam6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam6(stack["ident"])
}

func (c *current) onfuncVariadicParam1(nameI, typeI interface{}) (interface{}, error) {
	var names []file.GoIdent
	if nameI != nil {
		names = []file.GoIdent{getTuple[file.GoIdent](nameI, 0)}
	}

	return file.FuncParam{
		Names:    names,
		Variadic: true,
		Type:     typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncVariadicParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam1(stack["nameI"], stack["typeI"])
}

func (c *current) onfuncType9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType9()
}

func (c *current) onfuncType3(typeI, endPosI interface{}) (interface{}, error) {
	return file.GoType{
			Type:     concat(typeI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid type",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "not a valid Go type",
			}),
		}
}

func (p *parser) callonfuncType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType3(stack["typeI"], stack["endPosI"])
}

func (c *current) onInlineText1(lineI interface{}) (interface{}, error) {
	return file.InlineText{
		Text:     lineI.(file.TextLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText1(stack["lineI"])
}

func (c *current) onArrowBlock2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	firstLine, firstLineOk := firstLineI.(file.TextLine)
	additionalLineTuples := islice(additionalLinesI)

	n := len(additionalLineTuples)
	if firstLineOk {
		n++
	}

	lines := make([]file.TextLine, 0, n)
	if firstLineOk {
		lines = append(lines, firstLine)
	}
	for _, lt := range additionalLineTuples {
		lines = append(lines, getTuple[file.TextLine](lt, -1))
	}

	return file.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onArrowBlock31() (interface{}, error) {
	return file.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock31()
}

func (c *current) onInlineArrowBlock2(lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
		Lines:    []file.TextLine{lineI.(file.TextLine)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock2(stack["lineI"])
}

func (c *current) onInlineArrowBlock11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineArrowBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock11()
}

func (c *current) onInlineArrowBlock7(posI, lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
			Lines:    []file.TextLine{lineI.(file.TextLine)},
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `>` from the text",
			}),
			Example: "`> woof`",
		}
}

func (p *parser) callonInlineArrowBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock7(stack["posI"], stack["lineI"])
}

func (c *current) onTextLine1(itemsI interface{}) (interface{}, error) {
	return file.TextLine(typedSlice[file.TextItem](itemsI)), nil
}

func (p *parser) callonTextLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextLine1(stack["itemsI"])
}

func (c *current) onTextItem2(textI interface{}) (interface{}, error) {
	return file.Text{
		Text:     concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTextItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextItem2(stack["textI"])
}

func (c *current) onInterpolation5() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "start of interpolation",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected a `#`, `[`, `" + lbrace + "`, a mixin call, or an element name here",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation5()
}

func (c *current) onSimpleInterpolation13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation13()
}

func (c *current) onSimpleInterpolation19() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation19()
}

func (c *current) onSimpleInterpolation10(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonSimpleInterpolation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation10(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onSimpleInterpolation24() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation24()
}

func (c *current) onSimpleInterpolation21(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonSimpleInterpolation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation21(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onSimpleInterpolation2(noEscapeI, valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		NoEscape: noEscapeI != nil,
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation2(stack["noEscapeI"], stack["valueI"])
}

func (c *current) onSimpleInterpolation38(valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation38(stack["valueI"])
}

func (c *current) onElementInterpolation5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElementInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation5()
}

func (c *current) onElementInterpolation1(elPosI, nameI, attrsI, valueI interface{}) (interface{}, error) {
	return file.ElementInterpolation{
		Element: file.Element{
			Name:       concat(nameI),
			Attributes: typedSlice[file.AttributeCollection](attrsI),
			Void:       castedOrZero[bool](valueI),
			Position:   elPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElementInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation1(stack["elPosI"], stack["nameI"], stack["attrsI"], stack["valueI"])
}

func (c *current) onelementInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue5()
}

func (c *current) onelementInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue11()
}

func (c *current) onelementInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonelementInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onelementInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue16()
}

func (c *current) onelementInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonelementInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onelementInterpolationValue31() (interface{}, error) {
	return true, nil // hacky, but whatev
}

func (p *parser) callonelementInterpolationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue31()
}

func (c *current) onelementInterpolationValue33() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid interpolation value",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected either an `{` expression `}`, `[` text `]`, or a `/` void indicator",
		}),
	}
}

func (p *parser) callonelementInterpolationValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue33()
}

func (c *current) onMixinCallInterpolation5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation5()
}

func (c *current) onMixinCallInterpolation16(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCallInterpolation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation16(stack["identI"])
}

func (c *current) onMixinCallInterpolation35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation35()
}

func (c *current) onMixinCallInterpolation22(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCallInterpolation22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation22(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation47(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCallInterpolation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation47(stack["identI"])
}

func (c *current) onMixinCallInterpolation66() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation66()
}

func (c *current) onMixinCallInterpolation53(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCallInterpolation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation53(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation44(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCallInterpolation44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation44(stack["identI"])
}

func (c *current) onMixinCallInterpolation75() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation75()
}

func (c *current) onMixinCallInterpolation72(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCallInterpolation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation72(stack["posI"])
}

func (c *current) onMixinCallInterpolation100() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation100()
}

func (c *current) onMixinCallInterpolation94(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCallInterpolation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation94(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation1(mcPosI, namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCallInterpolation{
		MixinCall: file.MixinCall{
			Namespace: namespace,
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  mcPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinCallInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation1(stack["mcPosI"], stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue5()
}

func (c *current) onmixinCallInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue11()
}

func (c *current) onmixinCallInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue16()
}

func (c *current) onmixinCallInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonmixinCallInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onexpressionInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue5()
}

func (c *current) onexpressionInterpolationValue10() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue10()
}

func (c *current) onexpressionInterpolationValue2(lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
		LBracePos:  lBracePosI.(file.Position),
		Expression: exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
	}, nil
}

func (p *parser) callonexpressionInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue2(stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onexpressionInterpolationValue15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue15()
}

func (c *current) onexpressionInterpolationValue12(lBracePosI, exprI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
			LBracePos:  lBracePosI.(file.Position),
			Expression: exprI.(file.Expression),
		}, &corgierr.Error{
			Message: "unclosed expression interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`{` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `}` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonexpressionInterpolationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue12(stack["lBracePosI"], stack["exprI"])
}

func (c *current) onfmtExpressionInterpolationValue22() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue22()
}

func (c *current) onfmtExpressionInterpolationValue25() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue25()
}

func (c *current) onfmtExpressionInterpolationValue5() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonfmtExpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue5()
}

func (c *current) onfmtExpressionInterpolationValue33() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfmtExpressionInterpolationValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue33()
}

func (c *current) onfmtExpressionInterpolationValue27(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue27(stack["endPosI"])
}

func (c *current) onfmtExpressionInterpolationValue1(fmtDirectiveI, eivI interface{}) (interface{}, error) {
	eiv := eivI.(file.ExpressionInterpolationValue)
	eiv.FormatDirective = fmtDirectiveI.(string)
	return eiv, nil
}

func (p *parser) callonfmtExpressionInterpolationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue1(stack["fmtDirectiveI"], stack["eivI"])
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	// this is our first ever indentation, INDENTATION will handle it
	return c.state["Indentation.Repetitions"].(int) == 0, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL3()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL4()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL7()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL9()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL11()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL12() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL12()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL14()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL15() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL15()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL18()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL19() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL19()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL20() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL20() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL20()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL22()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL23() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL23()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL25() (bool, error) {
	return c.state["Indentation.Repetitions"].(int) > 0, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL25()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL5() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL5()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL10() (bool, error) {
	refReps := c.state["Indentation.Repetitions"].(int)
	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	want := totalReps + refReps
	have := c.state["Indentation.CharCount"].(int)
	if want == have {
		return true, nil
	}

	return false, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL10()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	have := c.state["Indentation.CharCount"].(int)
	want := totalReps + refReps
	if have == want {
		return true, nil
	} else if have <= totalReps {
		return false, nil
	}

	if indentChar == ' ' {
		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               have - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d spaces", have-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two spaces for a single indentation, use four for a two-level indentation",
				},
			},
		}
	}

	return true, &corgierr.Error{
		Message: "inconsistent indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
			Len:               have - totalReps,
			Annotation:        fmt.Sprintf("however, here you used %d tabs", have-totalReps),
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: refLine, Col: 1},
				Len:               refReps,
				Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "be consistent in your indentation:\n" +
					"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
			},
		},
	}

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL14()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL15() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)

	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(have - totalReps)
	c.state["Indentation.TotalRepetitions"] = have
	return nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL15()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL17()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	want := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)
	return want == have, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL18()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL19() error {
	c.state["Indentation.CharCount"] = 0
	return nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL19()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL22() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL22()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL24(spaceI interface{}) (bool, error) {
	space := byte(char(spaceI))

	indentChar := c.state["Indentation.Char"].(byte)
	if indentChar != space {
		refLine := c.state["Indentation.RefLine"].(int)
		reps := c.state["Indentation.Repetitions"].(int)

		if indentChar == ' ' {
			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      pos(c),
					Annotation: "this is a tab",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               reps,
						Annotation:        "these are spaces",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}

		panic(&corgierr.Error{
			Message: "mix of tabs and spaces for indentation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "this is a space",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               reps,
					Annotation:        "these are tabs",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "use only tabs OR spaces for indentation, but not both"},
			},
		})
	}

	return true, nil
}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL24(stack["spaceI"])
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL25(spaceI interface{}) error {
	c.state["Indentation.CharCount"] = c.state["Indentation.CharCount"].(int) + 1
	return nil
}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL25(stack["spaceI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return c.state["Indentation.Level"].(int) == 0, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
