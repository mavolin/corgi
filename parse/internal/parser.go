// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/corgierr"
	"github.com/mavolin/corgi/file"
	"github.com/mavolin/corgi/internal/stack"
)

// todo: rm these as soon as pigeon#115 is fixed
const lbrace = "{"
const rbrace = "}"

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 12, col: 1, offset: 189},
			expr: &actionExpr{
				pos: position{line: 13, col: 5, offset: 201},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 13, col: 5, offset: 201},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 138, col: 9, offset: 3926},
							run: (*parser).callonFile3,
						},
						&zeroOrOneExpr{
							pos: position{line: 14, col: 5, offset: 210},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 15, col: 5, offset: 223},
							label: "extendAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 15, col: 24, offset: 242},
								expr: &ruleRefExpr{
									pos:  position{line: 15, col: 24, offset: 242},
									name: "extendAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 15, col: 43, offset: 261},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 16, col: 5, offset: 274},
							label: "importsAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 16, col: 25, offset: 294},
								expr: &ruleRefExpr{
									pos:  position{line: 16, col: 25, offset: 294},
									name: "importsAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 16, col: 45, offset: 314},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 327},
							label: "usesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 22, offset: 344},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 22, offset: 344},
									name: "usesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 17, col: 39, offset: 361},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 5, offset: 374},
							label: "globalCodeAndFuncI",
							expr: &zeroOrOneExpr{
								pos: position{line: 18, col: 24, offset: 393},
								expr: &ruleRefExpr{
									pos:  position{line: 18, col: 24, offset: 393},
									name: "globalCodeAndFunc",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 18, col: 43, offset: 412},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 425},
							label: "preScopeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 19, col: 15, offset: 435},
								expr: &ruleRefExpr{
									pos:  position{line: 19, col: 15, offset: 435},
									name: "preScope",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 19, col: 25, offset: 445},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 20, col: 5, offset: 458},
							label: "scopeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 20, col: 12, offset: 465},
								expr: &ruleRefExpr{
									pos:  position{line: 20, col: 12, offset: 465},
									name: "Scope",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 20, col: 19, offset: 472},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3799, col: 12, offset: 129278},
							expr: &anyMatcher{
								line: 3799, col: 13, offset: 129279,
							},
						},
					},
				},
			},
		},
		{
			name: "extendAndComments",
			pos:  position{line: 55, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 55, col: 22, offset: 1623},
				run: (*parser).callonextendAndComments1,
				expr: &seqExpr{
					pos: position{line: 55, col: 22, offset: 1623},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 55, col: 22, offset: 1623},
							label: "commsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 29, offset: 1630},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 29, offset: 1630},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 55, col: 44, offset: 1645},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 53, offset: 1654},
							label: "extI",
							expr: &actionExpr{
								pos: position{line: 3257, col: 11, offset: 111961},
								run: (*parser).callonextendAndComments15,
								expr: &seqExpr{
									pos: position{line: 3257, col: 11, offset: 111961},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3257, col: 11, offset: 111961},
											val:        "extend",
											ignoreCase: false,
											want:       "\"extend\"",
										},
										&labeledExpr{
											pos:   position{line: 3257, col: 20, offset: 111970},
											label: "extendI",
											expr: &choiceExpr{
												pos: position{line: 3227, col: 18, offset: 110992},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3227, col: 18, offset: 110992},
														run: (*parser).callonextendAndComments20,
														expr: &seqExpr{
															pos: position{line: 3227, col: 18, offset: 110992},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 3227, col: 18, offset: 110992},
																	expr: &litMatcher{
																		pos:        position{line: 3227, col: 18, offset: 110992},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 3227, col: 23, offset: 110997},
																	label: "sI",
																	expr: &choiceExpr{
																		pos: position{line: 826, col: 11, offset: 25202},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 832, col: 14, offset: 25289},
																				run: (*parser).callonextendAndComments26,
																				expr: &seqExpr{
																					pos: position{line: 832, col: 14, offset: 25289},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 832, col: 14, offset: 25289},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 832, col: 18, offset: 25293},
																							label: "strI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 832, col: 23, offset: 25298},
																								expr: &charClassMatcher{
																									pos:        position{line: 2751, col: 27, offset: 95033},
																									val:        "[^\\n`]",
																									chars:      []rune{'\n', '`'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 832, col: 47, offset: 25322},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 834, col: 5, offset: 25414},
																				run: (*parser).callonextendAndComments33,
																				expr: &seqExpr{
																					pos: position{line: 834, col: 5, offset: 25414},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 834, col: 5, offset: 25414},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 834, col: 9, offset: 25418},
																							label: "strI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 834, col: 14, offset: 25423},
																								expr: &charClassMatcher{
																									pos:        position{line: 2751, col: 27, offset: 95033},
																									val:        "[^\\n`]",
																									chars:      []rune{'\n', '`'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 834, col: 38, offset: 25447},
																							expr: &seqExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								exprs: []interface{}{
																									&zeroOrMoreExpr{
																										pos: position{line: 3800, col: 12, offset: 129292},
																										expr: &charClassMatcher{
																											pos:        position{line: 3812, col: 36, offset: 129639},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														expr: &litMatcher{
																															pos:        position{line: 3800, col: 16, offset: 129296},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 3800, col: 22, offset: 129302},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3799, col: 12, offset: 129278},
																												expr: &anyMatcher{
																													line: 3799, col: 13, offset: 129279,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 853, col: 22, offset: 25851},
																				run: (*parser).callonextendAndComments50,
																				expr: &seqExpr{
																					pos: position{line: 853, col: 22, offset: 25851},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 853, col: 22, offset: 25851},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 853, col: 26, offset: 25855},
																							label: "strI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 853, col: 31, offset: 25860},
																								expr: &choiceExpr{
																									pos: position{line: 853, col: 32, offset: 25861},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 2490, col: 24, offset: 84696},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2490, col: 24, offset: 84696},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2407, col: 19, offset: 81885},
																													val:        "[0-7]",
																													ranges:     []rune{'0', '7'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2407, col: 19, offset: 81885},
																													val:        "[0-7]",
																													ranges:     []rune{'0', '7'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2407, col: 19, offset: 81885},
																													val:        "[0-7]",
																													ranges:     []rune{'0', '7'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2491, col: 24, offset: 84763},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2491, col: 24, offset: 84763},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2492, col: 5, offset: 84800},
																											run: (*parser).callonextendAndComments65,
																											expr: &seqExpr{
																												pos: position{line: 2492, col: 5, offset: 84800},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2492, col: 5, offset: 84800},
																														val:        "\\x",
																														ignoreCase: false,
																														want:       "\"\\\\x\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2492, col: 14, offset: 84809},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2492, col: 26, offset: 84821},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2509, col: 19, offset: 85438},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2509, col: 19, offset: 85438},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2510, col: 5, offset: 85497},
																											run: (*parser).callonextendAndComments78,
																											expr: &seqExpr{
																												pos: position{line: 2510, col: 5, offset: 85497},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2510, col: 5, offset: 85497},
																														val:        "\\u",
																														ignoreCase: false,
																														want:       "\"\\\\u\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 14, offset: 85506},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 26, offset: 85518},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 38, offset: 85530},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 50, offset: 85542},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2539, col: 16, offset: 86678},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2539, col: 16, offset: 86678},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2540, col: 5, offset: 86781},
																											run: (*parser).callonextendAndComments99,
																											expr: &seqExpr{
																												pos: position{line: 2540, col: 5, offset: 86781},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2540, col: 5, offset: 86781},
																														val:        "\\U",
																														ignoreCase: false,
																														want:       "\"\\\\U\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 14, offset: 86790},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 26, offset: 86802},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 38, offset: 86814},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 50, offset: 86826},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 62, offset: 86838},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 74, offset: 86850},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 86, offset: 86862},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 98, offset: 86874},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2767, col: 36, offset: 95811},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2767, col: 36, offset: 95811},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2767, col: 41, offset: 95816},
																													val:        "[abfnrtv\\\\\"]",
																													chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&charClassMatcher{
																											pos:        position{line: 2765, col: 38, offset: 95703},
																											val:        "[^\"\\\\\\n]",
																											chars:      []rune{'"', '\\', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																										&actionExpr{
																											pos: position{line: 2654, col: 37, offset: 91461},
																											run: (*parser).callonextendAndComments122,
																											expr: &seqExpr{
																												pos: position{line: 2654, col: 37, offset: 91461},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2654, col: 37, offset: 91461},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2678, col: 5, offset: 92478},
																											run: (*parser).callonextendAndComments133,
																											expr: &seqExpr{
																												pos: position{line: 2678, col: 5, offset: 92478},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2678, col: 5, offset: 92478},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2699, col: 5, offset: 93320},
																											run: (*parser).callonextendAndComments140,
																											expr: &seqExpr{
																												pos: position{line: 2699, col: 5, offset: 93320},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2699, col: 5, offset: 93320},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2717, col: 5, offset: 94006},
																											run: (*parser).callonextendAndComments145,
																											expr: &seqExpr{
																												pos: position{line: 2717, col: 5, offset: 94006},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2717, col: 5, offset: 94006},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2717, col: 10, offset: 94011},
																														expr: &charClassMatcher{
																															pos:        position{line: 3801, col: 12, offset: 129325},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 853, col: 115, offset: 25944},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 855, col: 5, offset: 26036},
																				run: (*parser).callonextendAndComments151,
																				expr: &seqExpr{
																					pos: position{line: 855, col: 5, offset: 26036},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 855, col: 5, offset: 26036},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 855, col: 9, offset: 26040},
																							label: "strI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 855, col: 14, offset: 26045},
																								expr: &choiceExpr{
																									pos: position{line: 855, col: 15, offset: 26046},
																									alternatives: []interface{}{
																										&seqExpr{
																											pos: position{line: 2490, col: 24, offset: 84696},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2490, col: 24, offset: 84696},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2407, col: 19, offset: 81885},
																													val:        "[0-7]",
																													ranges:     []rune{'0', '7'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2407, col: 19, offset: 81885},
																													val:        "[0-7]",
																													ranges:     []rune{'0', '7'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2407, col: 19, offset: 81885},
																													val:        "[0-7]",
																													ranges:     []rune{'0', '7'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2491, col: 24, offset: 84763},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2491, col: 24, offset: 84763},
																													val:        "\\x",
																													ignoreCase: false,
																													want:       "\"\\\\x\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2492, col: 5, offset: 84800},
																											run: (*parser).callonextendAndComments166,
																											expr: &seqExpr{
																												pos: position{line: 2492, col: 5, offset: 84800},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2492, col: 5, offset: 84800},
																														val:        "\\x",
																														ignoreCase: false,
																														want:       "\"\\\\x\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2492, col: 14, offset: 84809},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2492, col: 26, offset: 84821},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2509, col: 19, offset: 85438},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2509, col: 19, offset: 85438},
																													val:        "\\u",
																													ignoreCase: false,
																													want:       "\"\\\\u\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2510, col: 5, offset: 85497},
																											run: (*parser).callonextendAndComments179,
																											expr: &seqExpr{
																												pos: position{line: 2510, col: 5, offset: 85497},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2510, col: 5, offset: 85497},
																														val:        "\\u",
																														ignoreCase: false,
																														want:       "\"\\\\u\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 14, offset: 85506},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 26, offset: 85518},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 38, offset: 85530},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2510, col: 50, offset: 85542},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2539, col: 16, offset: 86678},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2539, col: 16, offset: 86678},
																													val:        "\\U",
																													ignoreCase: false,
																													want:       "\"\\\\U\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2540, col: 5, offset: 86781},
																											run: (*parser).callonextendAndComments200,
																											expr: &seqExpr{
																												pos: position{line: 2540, col: 5, offset: 86781},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2540, col: 5, offset: 86781},
																														val:        "\\U",
																														ignoreCase: false,
																														want:       "\"\\\\U\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 14, offset: 86790},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 26, offset: 86802},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 38, offset: 86814},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 50, offset: 86826},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 62, offset: 86838},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 74, offset: 86850},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 86, offset: 86862},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2540, col: 98, offset: 86874},
																														expr: &charClassMatcher{
																															pos:        position{line: 2408, col: 19, offset: 81909},
																															val:        "[0-9A-Fa-f]",
																															ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2767, col: 36, offset: 95811},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2767, col: 36, offset: 95811},
																													val:        "\\",
																													ignoreCase: false,
																													want:       "\"\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 2767, col: 41, offset: 95816},
																													val:        "[abfnrtv\\\\\"]",
																													chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&charClassMatcher{
																											pos:        position{line: 2765, col: 38, offset: 95703},
																											val:        "[^\"\\\\\\n]",
																											chars:      []rune{'"', '\\', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																										&actionExpr{
																											pos: position{line: 2654, col: 37, offset: 91461},
																											run: (*parser).callonextendAndComments223,
																											expr: &seqExpr{
																												pos: position{line: 2654, col: 37, offset: 91461},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2654, col: 37, offset: 91461},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2678, col: 5, offset: 92478},
																											run: (*parser).callonextendAndComments234,
																											expr: &seqExpr{
																												pos: position{line: 2678, col: 5, offset: 92478},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2678, col: 5, offset: 92478},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2699, col: 5, offset: 93320},
																											run: (*parser).callonextendAndComments241,
																											expr: &seqExpr{
																												pos: position{line: 2699, col: 5, offset: 93320},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2699, col: 5, offset: 93320},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&charClassMatcher{
																														pos:        position{line: 2408, col: 19, offset: 81909},
																														val:        "[0-9A-Fa-f]",
																														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2717, col: 5, offset: 94006},
																											run: (*parser).callonextendAndComments246,
																											expr: &seqExpr{
																												pos: position{line: 2717, col: 5, offset: 94006},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2717, col: 5, offset: 94006},
																														val:        "\\",
																														ignoreCase: false,
																														want:       "\"\\\\\"",
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2717, col: 10, offset: 94011},
																														expr: &charClassMatcher{
																															pos:        position{line: 3801, col: 12, offset: 129325},
																															val:        "[^\\r\\n]",
																															chars:      []rune{'\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 855, col: 98, offset: 26129},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonextendAndComments252,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 855, col: 110, offset: 26141},
																							expr: &seqExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								exprs: []interface{}{
																									&zeroOrMoreExpr{
																										pos: position{line: 3800, col: 12, offset: 129292},
																										expr: &charClassMatcher{
																											pos:        position{line: 3812, col: 36, offset: 129639},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														expr: &litMatcher{
																															pos:        position{line: 3800, col: 16, offset: 129296},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 3800, col: 22, offset: 129302},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3799, col: 12, offset: 129278},
																												expr: &anyMatcher{
																													line: 3799, col: 13, offset: 129279,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 874, col: 22, offset: 26547},
																				run: (*parser).callonextendAndComments269,
																				expr: &seqExpr{
																					pos: position{line: 874, col: 22, offset: 26547},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 874, col: 22, offset: 26547},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 874, col: 27, offset: 26552},
																							label: "strI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 874, col: 32, offset: 26557},
																								expr: &charClassMatcher{
																									pos:        position{line: 874, col: 32, offset: 26557},
																									val:        "[^\\\\r\\n]",
																									chars:      []rune{'\'', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 874, col: 42, offset: 26567},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 874, col: 47, offset: 26572},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonextendAndComments277,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 3229, col: 5, offset: 111032},
														run: (*parser).callonextendAndComments283,
														expr: &seqExpr{
															pos: position{line: 3229, col: 5, offset: 111032},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3229, col: 5, offset: 111032},
																	expr: &litMatcher{
																		pos:        position{line: 3229, col: 5, offset: 111032},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 3229, col: 10, offset: 111037},
																	label: "pathI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 3229, col: 16, offset: 111043},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 3800, col: 12, offset: 129292},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															expr: &litMatcher{
																pos:        position{line: 3800, col: 16, offset: 129296},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3800, col: 22, offset: 129302},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 3799, col: 12, offset: 129278},
													expr: &anyMatcher{
														line: 3799, col: 13, offset: 129279,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "importsAndComments",
			pos:  position{line: 59, col: 1, offset: 1756},
			expr: &actionExpr{
				pos: position{line: 59, col: 23, offset: 1778},
				run: (*parser).callonimportsAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 59, col: 23, offset: 1778},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 59, col: 29, offset: 1784},
						expr: &seqExpr{
							pos: position{line: 59, col: 30, offset: 1785},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 59, col: 30, offset: 1785},
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 30, offset: 1785},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 59, col: 45, offset: 1800},
									expr: &oneOrMoreExpr{
										pos: position{line: 3814, col: 36, offset: 129726},
										expr: &seqExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3265, col: 12, offset: 112268},
									run: (*parser).callonimportsAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3265, col: 12, offset: 112268},
										label: "importsI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3265, col: 21, offset: 112277},
											expr: &seqExpr{
												pos: position{line: 3265, col: 22, offset: 112278},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3265, col: 22, offset: 112278},
														expr: &oneOrMoreExpr{
															pos: position{line: 3814, col: 36, offset: 129726},
															expr: &seqExpr{
																pos: position{line: 3814, col: 37, offset: 129727},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3814, col: 37, offset: 129727},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		expr: &litMatcher{
																			pos:        position{line: 3813, col: 36, offset: 129680},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3813, col: 42, offset: 129686},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3279, col: 11, offset: 112577},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3279, col: 11, offset: 112577},
																run: (*parser).callonimportsAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3279, col: 11, offset: 112577},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3279, col: 11, offset: 112577},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3800, col: 12, offset: 129292},
																			expr: &charClassMatcher{
																				pos:        position{line: 3812, col: 36, offset: 129639},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							expr: &litMatcher{
																								pos:        position{line: 3800, col: 16, offset: 129296},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3800, col: 22, offset: 129302},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3799, col: 12, offset: 129278},
																					expr: &anyMatcher{
																						line: 3799, col: 13, offset: 129279,
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3279, col: 24, offset: 112590},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3300, col: 16, offset: 113244},
																				run: (*parser).callonimportsAndComments41,
																				expr: &seqExpr{
																					pos: position{line: 3300, col: 16, offset: 113244},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4288, col: 11, offset: 150265},
																							run: (*parser).callonimportsAndComments43,
																						},
																						&labeledExpr{
																							pos:   position{line: 3300, col: 23, offset: 113251},
																							label: "importsI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3300, col: 32, offset: 113260},
																								expr: &seqExpr{
																									pos: position{line: 3300, col: 33, offset: 113261},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3300, col: 33, offset: 113261},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3814, col: 36, offset: 129726},
																												expr: &seqExpr{
																													pos: position{line: 3814, col: 37, offset: 129727},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3814, col: 37, offset: 129727},
																															expr: &charClassMatcher{
																																pos:        position{line: 3812, col: 36, offset: 129639},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3813, col: 36, offset: 129680},
																															expr: &litMatcher{
																																pos:        position{line: 3813, col: 36, offset: 129680},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3813, col: 42, offset: 129686},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3901, col: 17, offset: 133533},
																											run: (*parser).callonimportsAndComments55,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3901, col: 17, offset: 133533},
																												expr: &charClassMatcher{
																													pos:        position{line: 3812, col: 36, offset: 129639},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3901, col: 41, offset: 133557},
																											run: (*parser).callonimportsAndComments58,
																										},
																										&choiceExpr{
																											pos: position{line: 3953, col: 5, offset: 135467},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3953, col: 5, offset: 135467},
																													run: (*parser).callonimportsAndComments60,
																												},
																												&seqExpr{
																													pos: position{line: 3955, col: 9, offset: 135550},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3955, col: 9, offset: 135550},
																															run: (*parser).callonimportsAndComments62,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3957, col: 7, offset: 135673},
																															run: (*parser).callonimportsAndComments63,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3964, col: 9, offset: 136009},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3964, col: 9, offset: 136009},
																															run: (*parser).callonimportsAndComments65,
																														},
																														&andCodeExpr{
																															pos: position{line: 3966, col: 7, offset: 136117},
																															run: (*parser).callonimportsAndComments66,
																														},
																														&choiceExpr{
																															pos: position{line: 4019, col: 9, offset: 138452},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 4019, col: 9, offset: 138452},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4019, col: 9, offset: 138452},
																																			run: (*parser).callonimportsAndComments69,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4023, col: 11, offset: 138702},
																																			run: (*parser).callonimportsAndComments70,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 4089, col: 11, offset: 141908},
																																			run: (*parser).callonimportsAndComments71,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 4097, col: 13, offset: 142261},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4097, col: 13, offset: 142261},
																																			run: (*parser).callonimportsAndComments73,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4101, col: 11, offset: 142516},
																																			run: (*parser).callonimportsAndComments74,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3304, col: 15, offset: 113389},
																											run: (*parser).callonimportsAndComments75,
																											expr: &seqExpr{
																												pos: position{line: 3304, col: 15, offset: 113389},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3304, col: 15, offset: 113389},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3304, col: 22, offset: 113396},
																															expr: &seqExpr{
																																pos: position{line: 3304, col: 23, offset: 113397},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3317, col: 16, offset: 113677},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3317, col: 16, offset: 113677},
																																				run: (*parser).callonimportsAndComments81,
																																				expr: &litMatcher{
																																					pos:        position{line: 3317, col: 16, offset: 113677},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 2375, col: 12, offset: 81034},
																																				run: (*parser).callonimportsAndComments83,
																																				expr: &labeledExpr{
																																					pos:   position{line: 2375, col: 12, offset: 81034},
																																					label: "ident",
																																					expr: &seqExpr{
																																						pos: position{line: 2414, col: 17, offset: 81960},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2397, col: 20, offset: 81715},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2414, col: 26, offset: 81969},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2397, col: 20, offset: 81715},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3319, col: 15, offset: 113756},
																																				run: (*parser).callonimportsAndComments89,
																																				expr: &seqExpr{
																																					pos: position{line: 3319, col: 15, offset: 113756},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3319, col: 15, offset: 113756},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3319, col: 15, offset: 113756},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3319, col: 24, offset: 113765},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3803, col: 8, offset: 129341},
																																								run: (*parser).callonimportsAndComments94,
																																								expr: &choiceExpr{
																																									pos: position{line: 3803, col: 9, offset: 129342},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3803, col: 9, offset: 129342},
																																											expr: &anyMatcher{
																																												line: 3803, col: 10, offset: 129343,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3803, col: 14, offset: 129347},
																																											expr: &anyMatcher{
																																												line: 3803, col: 15, offset: 129348,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3304, col: 35, offset: 113409},
																																		expr: &litMatcher{
																																			pos:        position{line: 3304, col: 35, offset: 113409},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3304, col: 42, offset: 113416},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3241, col: 12, offset: 111418},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 832, col: 14, offset: 25289},
																																	run: (*parser).callonimportsAndComments104,
																																	expr: &seqExpr{
																																		pos: position{line: 832, col: 14, offset: 25289},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 832, col: 14, offset: 25289},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 832, col: 18, offset: 25293},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 832, col: 23, offset: 25298},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2751, col: 27, offset: 95033},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 832, col: 47, offset: 25322},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 834, col: 5, offset: 25414},
																																	run: (*parser).callonimportsAndComments111,
																																	expr: &seqExpr{
																																		pos: position{line: 834, col: 5, offset: 25414},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 834, col: 5, offset: 25414},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 834, col: 9, offset: 25418},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 834, col: 14, offset: 25423},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2751, col: 27, offset: 95033},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 834, col: 38, offset: 25447},
																																				expr: &seqExpr{
																																					pos: position{line: 3800, col: 12, offset: 129292},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3800, col: 12, offset: 129292},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3812, col: 36, offset: 129639},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3800, col: 16, offset: 129296},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3800, col: 16, offset: 129296},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3800, col: 16, offset: 129296},
																																											expr: &litMatcher{
																																												pos:        position{line: 3800, col: 16, offset: 129296},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3800, col: 22, offset: 129302},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3799, col: 12, offset: 129278},
																																									expr: &anyMatcher{
																																										line: 3799, col: 13, offset: 129279,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 853, col: 22, offset: 25851},
																																	run: (*parser).callonimportsAndComments128,
																																	expr: &seqExpr{
																																		pos: position{line: 853, col: 22, offset: 25851},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 853, col: 22, offset: 25851},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 853, col: 26, offset: 25855},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 853, col: 31, offset: 25860},
																																					expr: &choiceExpr{
																																						pos: position{line: 853, col: 32, offset: 25861},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2490, col: 24, offset: 84696},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2490, col: 24, offset: 84696},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2491, col: 24, offset: 84763},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2491, col: 24, offset: 84763},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2492, col: 5, offset: 84800},
																																								run: (*parser).callonimportsAndComments143,
																																								expr: &seqExpr{
																																									pos: position{line: 2492, col: 5, offset: 84800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2492, col: 5, offset: 84800},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 14, offset: 84809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 26, offset: 84821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2509, col: 19, offset: 85438},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2509, col: 19, offset: 85438},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2510, col: 5, offset: 85497},
																																								run: (*parser).callonimportsAndComments156,
																																								expr: &seqExpr{
																																									pos: position{line: 2510, col: 5, offset: 85497},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2510, col: 5, offset: 85497},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 14, offset: 85506},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 26, offset: 85518},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 38, offset: 85530},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 50, offset: 85542},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2539, col: 16, offset: 86678},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2539, col: 16, offset: 86678},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2540, col: 5, offset: 86781},
																																								run: (*parser).callonimportsAndComments177,
																																								expr: &seqExpr{
																																									pos: position{line: 2540, col: 5, offset: 86781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2540, col: 5, offset: 86781},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 14, offset: 86790},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 26, offset: 86802},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 38, offset: 86814},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 50, offset: 86826},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 62, offset: 86838},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 74, offset: 86850},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 86, offset: 86862},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 98, offset: 86874},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2767, col: 36, offset: 95811},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2767, col: 36, offset: 95811},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2767, col: 41, offset: 95816},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2765, col: 38, offset: 95703},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2654, col: 37, offset: 91461},
																																								run: (*parser).callonimportsAndComments200,
																																								expr: &seqExpr{
																																									pos: position{line: 2654, col: 37, offset: 91461},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2654, col: 37, offset: 91461},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2678, col: 5, offset: 92478},
																																								run: (*parser).callonimportsAndComments211,
																																								expr: &seqExpr{
																																									pos: position{line: 2678, col: 5, offset: 92478},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2678, col: 5, offset: 92478},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2699, col: 5, offset: 93320},
																																								run: (*parser).callonimportsAndComments218,
																																								expr: &seqExpr{
																																									pos: position{line: 2699, col: 5, offset: 93320},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2699, col: 5, offset: 93320},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2717, col: 5, offset: 94006},
																																								run: (*parser).callonimportsAndComments223,
																																								expr: &seqExpr{
																																									pos: position{line: 2717, col: 5, offset: 94006},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2717, col: 5, offset: 94006},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2717, col: 10, offset: 94011},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3801, col: 12, offset: 129325},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 853, col: 115, offset: 25944},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 855, col: 5, offset: 26036},
																																	run: (*parser).callonimportsAndComments229,
																																	expr: &seqExpr{
																																		pos: position{line: 855, col: 5, offset: 26036},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 855, col: 5, offset: 26036},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 855, col: 9, offset: 26040},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 855, col: 14, offset: 26045},
																																					expr: &choiceExpr{
																																						pos: position{line: 855, col: 15, offset: 26046},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2490, col: 24, offset: 84696},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2490, col: 24, offset: 84696},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2491, col: 24, offset: 84763},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2491, col: 24, offset: 84763},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2492, col: 5, offset: 84800},
																																								run: (*parser).callonimportsAndComments244,
																																								expr: &seqExpr{
																																									pos: position{line: 2492, col: 5, offset: 84800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2492, col: 5, offset: 84800},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 14, offset: 84809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 26, offset: 84821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2509, col: 19, offset: 85438},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2509, col: 19, offset: 85438},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2510, col: 5, offset: 85497},
																																								run: (*parser).callonimportsAndComments257,
																																								expr: &seqExpr{
																																									pos: position{line: 2510, col: 5, offset: 85497},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2510, col: 5, offset: 85497},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 14, offset: 85506},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 26, offset: 85518},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 38, offset: 85530},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 50, offset: 85542},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2539, col: 16, offset: 86678},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2539, col: 16, offset: 86678},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2540, col: 5, offset: 86781},
																																								run: (*parser).callonimportsAndComments278,
																																								expr: &seqExpr{
																																									pos: position{line: 2540, col: 5, offset: 86781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2540, col: 5, offset: 86781},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 14, offset: 86790},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 26, offset: 86802},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 38, offset: 86814},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 50, offset: 86826},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 62, offset: 86838},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 74, offset: 86850},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 86, offset: 86862},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 98, offset: 86874},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2767, col: 36, offset: 95811},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2767, col: 36, offset: 95811},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2767, col: 41, offset: 95816},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2765, col: 38, offset: 95703},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2654, col: 37, offset: 91461},
																																								run: (*parser).callonimportsAndComments301,
																																								expr: &seqExpr{
																																									pos: position{line: 2654, col: 37, offset: 91461},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2654, col: 37, offset: 91461},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2678, col: 5, offset: 92478},
																																								run: (*parser).callonimportsAndComments312,
																																								expr: &seqExpr{
																																									pos: position{line: 2678, col: 5, offset: 92478},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2678, col: 5, offset: 92478},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2699, col: 5, offset: 93320},
																																								run: (*parser).callonimportsAndComments319,
																																								expr: &seqExpr{
																																									pos: position{line: 2699, col: 5, offset: 93320},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2699, col: 5, offset: 93320},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2717, col: 5, offset: 94006},
																																								run: (*parser).callonimportsAndComments324,
																																								expr: &seqExpr{
																																									pos: position{line: 2717, col: 5, offset: 94006},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2717, col: 5, offset: 94006},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2717, col: 10, offset: 94011},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3801, col: 12, offset: 129325},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 855, col: 98, offset: 26129},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3803, col: 8, offset: 129341},
																																					run: (*parser).callonimportsAndComments330,
																																					expr: &choiceExpr{
																																						pos: position{line: 3803, col: 9, offset: 129342},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3803, col: 9, offset: 129342},
																																								expr: &anyMatcher{
																																									line: 3803, col: 10, offset: 129343,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3803, col: 14, offset: 129347},
																																								expr: &anyMatcher{
																																									line: 3803, col: 15, offset: 129348,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 855, col: 110, offset: 26141},
																																				expr: &seqExpr{
																																					pos: position{line: 3800, col: 12, offset: 129292},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3800, col: 12, offset: 129292},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3812, col: 36, offset: 129639},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3800, col: 16, offset: 129296},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3800, col: 16, offset: 129296},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3800, col: 16, offset: 129296},
																																											expr: &litMatcher{
																																												pos:        position{line: 3800, col: 16, offset: 129296},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3800, col: 22, offset: 129302},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3799, col: 12, offset: 129278},
																																									expr: &anyMatcher{
																																										line: 3799, col: 13, offset: 129279,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 874, col: 22, offset: 26547},
																																	run: (*parser).callonimportsAndComments347,
																																	expr: &seqExpr{
																																		pos: position{line: 874, col: 22, offset: 26547},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 874, col: 22, offset: 26547},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 874, col: 27, offset: 26552},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 874, col: 32, offset: 26557},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 874, col: 32, offset: 26557},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 874, col: 42, offset: 26567},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 874, col: 47, offset: 26572},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3803, col: 8, offset: 129341},
																																					run: (*parser).callonimportsAndComments355,
																																					expr: &choiceExpr{
																																						pos: position{line: 3803, col: 9, offset: 129342},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3803, col: 9, offset: 129342},
																																								expr: &anyMatcher{
																																									line: 3803, col: 10, offset: 129343,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3803, col: 14, offset: 129347},
																																								expr: &anyMatcher{
																																									line: 3803, col: 15, offset: 129348,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3241, col: 21, offset: 111427},
																																	run: (*parser).callonimportsAndComments361,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3241, col: 21, offset: 111427},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3241, col: 27, offset: 111433},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3801, col: 12, offset: 129325},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3800, col: 12, offset: 129292},
																														expr: &charClassMatcher{
																															pos:        position{line: 3812, col: 36, offset: 129639},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3800, col: 16, offset: 129296},
																																		expr: &litMatcher{
																																			pos:        position{line: 3800, col: 16, offset: 129296},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3800, col: 22, offset: 129302},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3799, col: 12, offset: 129278},
																																expr: &anyMatcher{
																																	line: 3799, col: 13, offset: 129279,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4293, col: 11, offset: 150370},
																							run: (*parser).callonimportsAndComments374,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3284, col: 5, offset: 112721},
																run: (*parser).callonimportsAndComments375,
																expr: &seqExpr{
																	pos: position{line: 3284, col: 5, offset: 112721},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3284, col: 5, offset: 112721},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3284, col: 14, offset: 112730},
																			expr: &litMatcher{
																				pos:        position{line: 3284, col: 14, offset: 112730},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3284, col: 19, offset: 112735},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3304, col: 15, offset: 113389},
																				run: (*parser).callonimportsAndComments381,
																				expr: &seqExpr{
																					pos: position{line: 3304, col: 15, offset: 113389},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3304, col: 15, offset: 113389},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3304, col: 22, offset: 113396},
																								expr: &seqExpr{
																									pos: position{line: 3304, col: 23, offset: 113397},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3317, col: 16, offset: 113677},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3317, col: 16, offset: 113677},
																													run: (*parser).callonimportsAndComments387,
																													expr: &litMatcher{
																														pos:        position{line: 3317, col: 16, offset: 113677},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2375, col: 12, offset: 81034},
																													run: (*parser).callonimportsAndComments389,
																													expr: &labeledExpr{
																														pos:   position{line: 2375, col: 12, offset: 81034},
																														label: "ident",
																														expr: &seqExpr{
																															pos: position{line: 2414, col: 17, offset: 81960},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2397, col: 20, offset: 81715},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2414, col: 26, offset: 81969},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2397, col: 20, offset: 81715},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3319, col: 15, offset: 113756},
																													run: (*parser).callonimportsAndComments395,
																													expr: &seqExpr{
																														pos: position{line: 3319, col: 15, offset: 113756},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3319, col: 15, offset: 113756},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3319, col: 15, offset: 113756},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3319, col: 24, offset: 113765},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3803, col: 8, offset: 129341},
																																	run: (*parser).callonimportsAndComments400,
																																	expr: &choiceExpr{
																																		pos: position{line: 3803, col: 9, offset: 129342},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3803, col: 9, offset: 129342},
																																				expr: &anyMatcher{
																																					line: 3803, col: 10, offset: 129343,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3803, col: 14, offset: 129347},
																																				expr: &anyMatcher{
																																					line: 3803, col: 15, offset: 129348,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3304, col: 35, offset: 113409},
																											expr: &litMatcher{
																												pos:        position{line: 3304, col: 35, offset: 113409},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3304, col: 42, offset: 113416},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3241, col: 12, offset: 111418},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 832, col: 14, offset: 25289},
																										run: (*parser).callonimportsAndComments410,
																										expr: &seqExpr{
																											pos: position{line: 832, col: 14, offset: 25289},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 832, col: 14, offset: 25289},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 832, col: 18, offset: 25293},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 832, col: 23, offset: 25298},
																														expr: &charClassMatcher{
																															pos:        position{line: 2751, col: 27, offset: 95033},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 832, col: 47, offset: 25322},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 834, col: 5, offset: 25414},
																										run: (*parser).callonimportsAndComments417,
																										expr: &seqExpr{
																											pos: position{line: 834, col: 5, offset: 25414},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 834, col: 5, offset: 25414},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 834, col: 9, offset: 25418},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 834, col: 14, offset: 25423},
																														expr: &charClassMatcher{
																															pos:        position{line: 2751, col: 27, offset: 95033},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 834, col: 38, offset: 25447},
																													expr: &seqExpr{
																														pos: position{line: 3800, col: 12, offset: 129292},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3800, col: 12, offset: 129292},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3812, col: 36, offset: 129639},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3800, col: 16, offset: 129296},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3800, col: 16, offset: 129296},
																																				expr: &litMatcher{
																																					pos:        position{line: 3800, col: 16, offset: 129296},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3800, col: 22, offset: 129302},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3799, col: 12, offset: 129278},
																																		expr: &anyMatcher{
																																			line: 3799, col: 13, offset: 129279,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 853, col: 22, offset: 25851},
																										run: (*parser).callonimportsAndComments434,
																										expr: &seqExpr{
																											pos: position{line: 853, col: 22, offset: 25851},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 853, col: 22, offset: 25851},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 853, col: 26, offset: 25855},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 853, col: 31, offset: 25860},
																														expr: &choiceExpr{
																															pos: position{line: 853, col: 32, offset: 25861},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2490, col: 24, offset: 84696},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2490, col: 24, offset: 84696},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2491, col: 24, offset: 84763},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2491, col: 24, offset: 84763},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2492, col: 5, offset: 84800},
																																	run: (*parser).callonimportsAndComments449,
																																	expr: &seqExpr{
																																		pos: position{line: 2492, col: 5, offset: 84800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2492, col: 5, offset: 84800},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 14, offset: 84809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 26, offset: 84821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2509, col: 19, offset: 85438},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 19, offset: 85438},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2510, col: 5, offset: 85497},
																																	run: (*parser).callonimportsAndComments462,
																																	expr: &seqExpr{
																																		pos: position{line: 2510, col: 5, offset: 85497},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2510, col: 5, offset: 85497},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 14, offset: 85506},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 26, offset: 85518},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 38, offset: 85530},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 50, offset: 85542},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2539, col: 16, offset: 86678},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2539, col: 16, offset: 86678},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2540, col: 5, offset: 86781},
																																	run: (*parser).callonimportsAndComments483,
																																	expr: &seqExpr{
																																		pos: position{line: 2540, col: 5, offset: 86781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2540, col: 5, offset: 86781},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 14, offset: 86790},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 26, offset: 86802},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 38, offset: 86814},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 50, offset: 86826},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 62, offset: 86838},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 74, offset: 86850},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 86, offset: 86862},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 98, offset: 86874},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2767, col: 36, offset: 95811},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2767, col: 36, offset: 95811},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2767, col: 41, offset: 95816},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2765, col: 38, offset: 95703},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2654, col: 37, offset: 91461},
																																	run: (*parser).callonimportsAndComments506,
																																	expr: &seqExpr{
																																		pos: position{line: 2654, col: 37, offset: 91461},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2654, col: 37, offset: 91461},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2678, col: 5, offset: 92478},
																																	run: (*parser).callonimportsAndComments517,
																																	expr: &seqExpr{
																																		pos: position{line: 2678, col: 5, offset: 92478},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2678, col: 5, offset: 92478},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2699, col: 5, offset: 93320},
																																	run: (*parser).callonimportsAndComments524,
																																	expr: &seqExpr{
																																		pos: position{line: 2699, col: 5, offset: 93320},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2699, col: 5, offset: 93320},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2717, col: 5, offset: 94006},
																																	run: (*parser).callonimportsAndComments529,
																																	expr: &seqExpr{
																																		pos: position{line: 2717, col: 5, offset: 94006},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2717, col: 5, offset: 94006},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2717, col: 10, offset: 94011},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3801, col: 12, offset: 129325},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 853, col: 115, offset: 25944},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 855, col: 5, offset: 26036},
																										run: (*parser).callonimportsAndComments535,
																										expr: &seqExpr{
																											pos: position{line: 855, col: 5, offset: 26036},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 855, col: 5, offset: 26036},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 855, col: 9, offset: 26040},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 855, col: 14, offset: 26045},
																														expr: &choiceExpr{
																															pos: position{line: 855, col: 15, offset: 26046},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2490, col: 24, offset: 84696},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2490, col: 24, offset: 84696},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2491, col: 24, offset: 84763},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2491, col: 24, offset: 84763},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2492, col: 5, offset: 84800},
																																	run: (*parser).callonimportsAndComments550,
																																	expr: &seqExpr{
																																		pos: position{line: 2492, col: 5, offset: 84800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2492, col: 5, offset: 84800},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 14, offset: 84809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 26, offset: 84821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2509, col: 19, offset: 85438},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 19, offset: 85438},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2510, col: 5, offset: 85497},
																																	run: (*parser).callonimportsAndComments563,
																																	expr: &seqExpr{
																																		pos: position{line: 2510, col: 5, offset: 85497},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2510, col: 5, offset: 85497},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 14, offset: 85506},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 26, offset: 85518},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 38, offset: 85530},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 50, offset: 85542},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2539, col: 16, offset: 86678},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2539, col: 16, offset: 86678},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2540, col: 5, offset: 86781},
																																	run: (*parser).callonimportsAndComments584,
																																	expr: &seqExpr{
																																		pos: position{line: 2540, col: 5, offset: 86781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2540, col: 5, offset: 86781},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 14, offset: 86790},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 26, offset: 86802},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 38, offset: 86814},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 50, offset: 86826},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 62, offset: 86838},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 74, offset: 86850},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 86, offset: 86862},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 98, offset: 86874},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2767, col: 36, offset: 95811},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2767, col: 36, offset: 95811},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2767, col: 41, offset: 95816},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2765, col: 38, offset: 95703},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2654, col: 37, offset: 91461},
																																	run: (*parser).callonimportsAndComments607,
																																	expr: &seqExpr{
																																		pos: position{line: 2654, col: 37, offset: 91461},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2654, col: 37, offset: 91461},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2678, col: 5, offset: 92478},
																																	run: (*parser).callonimportsAndComments618,
																																	expr: &seqExpr{
																																		pos: position{line: 2678, col: 5, offset: 92478},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2678, col: 5, offset: 92478},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2699, col: 5, offset: 93320},
																																	run: (*parser).callonimportsAndComments625,
																																	expr: &seqExpr{
																																		pos: position{line: 2699, col: 5, offset: 93320},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2699, col: 5, offset: 93320},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2717, col: 5, offset: 94006},
																																	run: (*parser).callonimportsAndComments630,
																																	expr: &seqExpr{
																																		pos: position{line: 2717, col: 5, offset: 94006},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2717, col: 5, offset: 94006},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2717, col: 10, offset: 94011},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3801, col: 12, offset: 129325},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 855, col: 98, offset: 26129},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3803, col: 8, offset: 129341},
																														run: (*parser).callonimportsAndComments636,
																														expr: &choiceExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3803, col: 9, offset: 129342},
																																	expr: &anyMatcher{
																																		line: 3803, col: 10, offset: 129343,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3803, col: 14, offset: 129347},
																																	expr: &anyMatcher{
																																		line: 3803, col: 15, offset: 129348,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 855, col: 110, offset: 26141},
																													expr: &seqExpr{
																														pos: position{line: 3800, col: 12, offset: 129292},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3800, col: 12, offset: 129292},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3812, col: 36, offset: 129639},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3800, col: 16, offset: 129296},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3800, col: 16, offset: 129296},
																																				expr: &litMatcher{
																																					pos:        position{line: 3800, col: 16, offset: 129296},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3800, col: 22, offset: 129302},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3799, col: 12, offset: 129278},
																																		expr: &anyMatcher{
																																			line: 3799, col: 13, offset: 129279,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 874, col: 22, offset: 26547},
																										run: (*parser).callonimportsAndComments653,
																										expr: &seqExpr{
																											pos: position{line: 874, col: 22, offset: 26547},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 874, col: 22, offset: 26547},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 874, col: 27, offset: 26552},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 874, col: 32, offset: 26557},
																														expr: &charClassMatcher{
																															pos:        position{line: 874, col: 32, offset: 26557},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 874, col: 42, offset: 26567},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 874, col: 47, offset: 26572},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3803, col: 8, offset: 129341},
																														run: (*parser).callonimportsAndComments661,
																														expr: &choiceExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3803, col: 9, offset: 129342},
																																	expr: &anyMatcher{
																																		line: 3803, col: 10, offset: 129343,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3803, col: 14, offset: 129347},
																																	expr: &anyMatcher{
																																		line: 3803, col: 15, offset: 129348,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3241, col: 21, offset: 111427},
																										run: (*parser).callonimportsAndComments667,
																										expr: &labeledExpr{
																											pos:   position{line: 3241, col: 21, offset: 111427},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3241, col: 27, offset: 111433},
																												expr: &charClassMatcher{
																													pos:        position{line: 3801, col: 12, offset: 129325},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3800, col: 12, offset: 129292},
																							expr: &charClassMatcher{
																								pos:        position{line: 3812, col: 36, offset: 129639},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3800, col: 16, offset: 129296},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3800, col: 16, offset: 129296},
																											expr: &litMatcher{
																												pos:        position{line: 3800, col: 16, offset: 129296},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3800, col: 22, offset: 129302},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3799, col: 12, offset: 129278},
																									expr: &anyMatcher{
																										line: 3799, col: 13, offset: 129279,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3289, col: 5, offset: 112880},
																run: (*parser).callonimportsAndComments680,
																expr: &seqExpr{
																	pos: position{line: 3289, col: 5, offset: 112880},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3289, col: 5, offset: 112880},
																			val:        "import",
																			ignoreCase: false,
																			want:       "\"import\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3289, col: 14, offset: 112889},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonimportsAndComments684,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3800, col: 12, offset: 129292},
																			expr: &charClassMatcher{
																				pos:        position{line: 3812, col: 36, offset: 129639},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							expr: &litMatcher{
																								pos:        position{line: 3800, col: 16, offset: 129296},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3800, col: 22, offset: 129302},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3799, col: 12, offset: 129278},
																					expr: &anyMatcher{
																						line: 3799, col: 13, offset: 129279,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "usesAndComments",
			pos:  position{line: 73, col: 1, offset: 2169},
			expr: &actionExpr{
				pos: position{line: 73, col: 20, offset: 2188},
				run: (*parser).callonusesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 73, col: 20, offset: 2188},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 73, col: 26, offset: 2194},
						expr: &seqExpr{
							pos: position{line: 73, col: 27, offset: 2195},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 73, col: 27, offset: 2195},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 27, offset: 2195},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 42, offset: 2210},
									expr: &oneOrMoreExpr{
										pos: position{line: 3814, col: 36, offset: 129726},
										expr: &seqExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3337, col: 9, offset: 114351},
									run: (*parser).callonusesAndComments15,
									expr: &labeledExpr{
										pos:   position{line: 3337, col: 9, offset: 114351},
										label: "usesI",
										expr: &oneOrMoreExpr{
											pos: position{line: 3337, col: 15, offset: 114357},
											expr: &seqExpr{
												pos: position{line: 3337, col: 16, offset: 114358},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3337, col: 16, offset: 114358},
														expr: &oneOrMoreExpr{
															pos: position{line: 3814, col: 36, offset: 129726},
															expr: &seqExpr{
																pos: position{line: 3814, col: 37, offset: 129727},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3814, col: 37, offset: 129727},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		expr: &litMatcher{
																			pos:        position{line: 3813, col: 36, offset: 129680},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3813, col: 42, offset: 129686},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3351, col: 8, offset: 114639},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3351, col: 8, offset: 114639},
																run: (*parser).callonusesAndComments28,
																expr: &seqExpr{
																	pos: position{line: 3351, col: 8, offset: 114639},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3351, col: 8, offset: 114639},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3800, col: 12, offset: 129292},
																			expr: &charClassMatcher{
																				pos:        position{line: 3812, col: 36, offset: 129639},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							expr: &litMatcher{
																								pos:        position{line: 3800, col: 16, offset: 129296},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3800, col: 22, offset: 129302},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3799, col: 12, offset: 129278},
																					expr: &anyMatcher{
																						line: 3799, col: 13, offset: 129279,
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3351, col: 18, offset: 114649},
																			label: "specsI",
																			expr: &actionExpr{
																				pos: position{line: 3372, col: 13, offset: 115255},
																				run: (*parser).callonusesAndComments41,
																				expr: &seqExpr{
																					pos: position{line: 3372, col: 13, offset: 115255},
																					exprs: []interface{}{
																						&stateCodeExpr{
																							pos: position{line: 4288, col: 11, offset: 150265},
																							run: (*parser).callonusesAndComments43,
																						},
																						&labeledExpr{
																							pos:   position{line: 3372, col: 20, offset: 115262},
																							label: "usesI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3372, col: 26, offset: 115268},
																								expr: &seqExpr{
																									pos: position{line: 3372, col: 27, offset: 115269},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3372, col: 27, offset: 115269},
																											expr: &oneOrMoreExpr{
																												pos: position{line: 3814, col: 36, offset: 129726},
																												expr: &seqExpr{
																													pos: position{line: 3814, col: 37, offset: 129727},
																													exprs: []interface{}{
																														&zeroOrMoreExpr{
																															pos: position{line: 3814, col: 37, offset: 129727},
																															expr: &charClassMatcher{
																																pos:        position{line: 3812, col: 36, offset: 129639},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 3813, col: 36, offset: 129680},
																															expr: &litMatcher{
																																pos:        position{line: 3813, col: 36, offset: 129680},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 3813, col: 42, offset: 129686},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3901, col: 17, offset: 133533},
																											run: (*parser).callonusesAndComments55,
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3901, col: 17, offset: 133533},
																												expr: &charClassMatcher{
																													pos:        position{line: 3812, col: 36, offset: 129639},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 3901, col: 41, offset: 133557},
																											run: (*parser).callonusesAndComments58,
																										},
																										&choiceExpr{
																											pos: position{line: 3953, col: 5, offset: 135467},
																											alternatives: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 3953, col: 5, offset: 135467},
																													run: (*parser).callonusesAndComments60,
																												},
																												&seqExpr{
																													pos: position{line: 3955, col: 9, offset: 135550},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3955, col: 9, offset: 135550},
																															run: (*parser).callonusesAndComments62,
																														},
																														&stateCodeExpr{
																															pos: position{line: 3957, col: 7, offset: 135673},
																															run: (*parser).callonusesAndComments63,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 3964, col: 9, offset: 136009},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 3964, col: 9, offset: 136009},
																															run: (*parser).callonusesAndComments65,
																														},
																														&andCodeExpr{
																															pos: position{line: 3966, col: 7, offset: 136117},
																															run: (*parser).callonusesAndComments66,
																														},
																														&choiceExpr{
																															pos: position{line: 4019, col: 9, offset: 138452},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 4019, col: 9, offset: 138452},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4019, col: 9, offset: 138452},
																																			run: (*parser).callonusesAndComments69,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4023, col: 11, offset: 138702},
																																			run: (*parser).callonusesAndComments70,
																																		},
																																		&stateCodeExpr{
																																			pos: position{line: 4089, col: 11, offset: 141908},
																																			run: (*parser).callonusesAndComments71,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 4097, col: 13, offset: 142261},
																																	exprs: []interface{}{
																																		&andCodeExpr{
																																			pos: position{line: 4097, col: 13, offset: 142261},
																																			run: (*parser).callonusesAndComments73,
																																		},
																																		&andCodeExpr{
																																			pos: position{line: 4101, col: 11, offset: 142516},
																																			run: (*parser).callonusesAndComments74,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 3376, col: 12, offset: 115385},
																											run: (*parser).callonusesAndComments75,
																											expr: &seqExpr{
																												pos: position{line: 3376, col: 12, offset: 115385},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 3376, col: 12, offset: 115385},
																														label: "aliasI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 3376, col: 19, offset: 115392},
																															expr: &seqExpr{
																																pos: position{line: 3376, col: 20, offset: 115393},
																																exprs: []interface{}{
																																	&choiceExpr{
																																		pos: position{line: 3389, col: 13, offset: 115662},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3389, col: 13, offset: 115662},
																																				run: (*parser).callonusesAndComments81,
																																				expr: &litMatcher{
																																					pos:        position{line: 3389, col: 13, offset: 115662},
																																					val:        ".",
																																					ignoreCase: false,
																																					want:       "\".\"",
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 763, col: 10, offset: 23102},
																																				run: (*parser).callonusesAndComments83,
																																				expr: &labeledExpr{
																																					pos:   position{line: 763, col: 10, offset: 23102},
																																					label: "identI",
																																					expr: &seqExpr{
																																						pos: position{line: 2414, col: 17, offset: 81960},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 2397, col: 20, offset: 81715},
																																								val:        "[_\\pL]",
																																								chars:      []rune{'_'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2414, col: 26, offset: 81969},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2397, col: 20, offset: 81715},
																																									val:        "[_\\pL\\pNd]",
																																									chars:      []rune{'_'},
																																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 765, col: 5, offset: 23196},
																																				run: (*parser).callonusesAndComments89,
																																				expr: &seqExpr{
																																					pos: position{line: 765, col: 5, offset: 23196},
																																					exprs: []interface{}{
																																						&labeledExpr{
																																							pos:   position{line: 765, col: 5, offset: 23196},
																																							label: "identI",
																																							expr: &seqExpr{
																																								pos: position{line: 765, col: 13, offset: 23204},
																																								exprs: []interface{}{
																																									&zeroOrOneExpr{
																																										pos: position{line: 765, col: 13, offset: 23204},
																																										expr: &litMatcher{
																																											pos:        position{line: 765, col: 13, offset: 23204},
																																											val:        "$",
																																											ignoreCase: false,
																																											want:       "\"$\"",
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 765, col: 18, offset: 23209},
																																										expr: &choiceExpr{
																																											pos: position{line: 765, col: 19, offset: 23210},
																																											alternatives: []interface{}{
																																												&seqExpr{
																																													pos: position{line: 765, col: 19, offset: 23210},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 765, col: 19, offset: 23210},
																																															val:        "[\\pNd]",
																																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&charClassMatcher{
																																															pos:        position{line: 765, col: 28, offset: 23219},
																																															val:        "[_-\\pL]",
																																															chars:      []rune{'_', '-'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																													},
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 765, col: 38, offset: 23229},
																																													val:        "[_-\\pL]",
																																													chars:      []rune{'_', '-'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 765, col: 49, offset: 23240},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3803, col: 8, offset: 129341},
																																								run: (*parser).callonusesAndComments102,
																																								expr: &choiceExpr{
																																									pos: position{line: 3803, col: 9, offset: 129342},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3803, col: 9, offset: 129342},
																																											expr: &anyMatcher{
																																												line: 3803, col: 10, offset: 129343,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3803, col: 14, offset: 129347},
																																											expr: &anyMatcher{
																																												line: 3803, col: 15, offset: 129348,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 3391, col: 13, offset: 115737},
																																				run: (*parser).callonusesAndComments108,
																																				expr: &seqExpr{
																																					pos: position{line: 3391, col: 13, offset: 115737},
																																					exprs: []interface{}{
																																						&oneOrMoreExpr{
																																							pos: position{line: 3391, col: 13, offset: 115737},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3391, col: 13, offset: 115737},
																																								val:        "[^\"`\\ ]",
																																								chars:      []rune{'"', '`', '\'', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 3391, col: 22, offset: 115746},
																																							label: "endPosI",
																																							expr: &actionExpr{
																																								pos: position{line: 3803, col: 8, offset: 129341},
																																								run: (*parser).callonusesAndComments113,
																																								expr: &choiceExpr{
																																									pos: position{line: 3803, col: 9, offset: 129342},
																																									alternatives: []interface{}{
																																										&andExpr{
																																											pos: position{line: 3803, col: 9, offset: 129342},
																																											expr: &anyMatcher{
																																												line: 3803, col: 10, offset: 129343,
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 3803, col: 14, offset: 129347},
																																											expr: &anyMatcher{
																																												line: 3803, col: 15, offset: 129348,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 3376, col: 29, offset: 115402},
																																		expr: &litMatcher{
																																			pos:        position{line: 3376, col: 29, offset: 115402},
																																			val:        " ",
																																			ignoreCase: false,
																																			want:       "\" \"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 3376, col: 36, offset: 115409},
																														label: "pathI",
																														expr: &choiceExpr{
																															pos: position{line: 3241, col: 12, offset: 111418},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 832, col: 14, offset: 25289},
																																	run: (*parser).callonusesAndComments123,
																																	expr: &seqExpr{
																																		pos: position{line: 832, col: 14, offset: 25289},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 832, col: 14, offset: 25289},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 832, col: 18, offset: 25293},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 832, col: 23, offset: 25298},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2751, col: 27, offset: 95033},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 832, col: 47, offset: 25322},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 834, col: 5, offset: 25414},
																																	run: (*parser).callonusesAndComments130,
																																	expr: &seqExpr{
																																		pos: position{line: 834, col: 5, offset: 25414},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 834, col: 5, offset: 25414},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 834, col: 9, offset: 25418},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 834, col: 14, offset: 25423},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2751, col: 27, offset: 95033},
																																						val:        "[^\\n`]",
																																						chars:      []rune{'\n', '`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 834, col: 38, offset: 25447},
																																				expr: &seqExpr{
																																					pos: position{line: 3800, col: 12, offset: 129292},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3800, col: 12, offset: 129292},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3812, col: 36, offset: 129639},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3800, col: 16, offset: 129296},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3800, col: 16, offset: 129296},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3800, col: 16, offset: 129296},
																																											expr: &litMatcher{
																																												pos:        position{line: 3800, col: 16, offset: 129296},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3800, col: 22, offset: 129302},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3799, col: 12, offset: 129278},
																																									expr: &anyMatcher{
																																										line: 3799, col: 13, offset: 129279,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 853, col: 22, offset: 25851},
																																	run: (*parser).callonusesAndComments147,
																																	expr: &seqExpr{
																																		pos: position{line: 853, col: 22, offset: 25851},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 853, col: 22, offset: 25851},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 853, col: 26, offset: 25855},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 853, col: 31, offset: 25860},
																																					expr: &choiceExpr{
																																						pos: position{line: 853, col: 32, offset: 25861},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2490, col: 24, offset: 84696},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2490, col: 24, offset: 84696},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2491, col: 24, offset: 84763},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2491, col: 24, offset: 84763},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2492, col: 5, offset: 84800},
																																								run: (*parser).callonusesAndComments162,
																																								expr: &seqExpr{
																																									pos: position{line: 2492, col: 5, offset: 84800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2492, col: 5, offset: 84800},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 14, offset: 84809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 26, offset: 84821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2509, col: 19, offset: 85438},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2509, col: 19, offset: 85438},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2510, col: 5, offset: 85497},
																																								run: (*parser).callonusesAndComments175,
																																								expr: &seqExpr{
																																									pos: position{line: 2510, col: 5, offset: 85497},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2510, col: 5, offset: 85497},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 14, offset: 85506},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 26, offset: 85518},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 38, offset: 85530},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 50, offset: 85542},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2539, col: 16, offset: 86678},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2539, col: 16, offset: 86678},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2540, col: 5, offset: 86781},
																																								run: (*parser).callonusesAndComments196,
																																								expr: &seqExpr{
																																									pos: position{line: 2540, col: 5, offset: 86781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2540, col: 5, offset: 86781},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 14, offset: 86790},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 26, offset: 86802},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 38, offset: 86814},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 50, offset: 86826},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 62, offset: 86838},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 74, offset: 86850},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 86, offset: 86862},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 98, offset: 86874},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2767, col: 36, offset: 95811},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2767, col: 36, offset: 95811},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2767, col: 41, offset: 95816},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2765, col: 38, offset: 95703},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2654, col: 37, offset: 91461},
																																								run: (*parser).callonusesAndComments219,
																																								expr: &seqExpr{
																																									pos: position{line: 2654, col: 37, offset: 91461},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2654, col: 37, offset: 91461},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2678, col: 5, offset: 92478},
																																								run: (*parser).callonusesAndComments230,
																																								expr: &seqExpr{
																																									pos: position{line: 2678, col: 5, offset: 92478},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2678, col: 5, offset: 92478},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2699, col: 5, offset: 93320},
																																								run: (*parser).callonusesAndComments237,
																																								expr: &seqExpr{
																																									pos: position{line: 2699, col: 5, offset: 93320},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2699, col: 5, offset: 93320},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2717, col: 5, offset: 94006},
																																								run: (*parser).callonusesAndComments242,
																																								expr: &seqExpr{
																																									pos: position{line: 2717, col: 5, offset: 94006},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2717, col: 5, offset: 94006},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2717, col: 10, offset: 94011},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3801, col: 12, offset: 129325},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 853, col: 115, offset: 25944},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 855, col: 5, offset: 26036},
																																	run: (*parser).callonusesAndComments248,
																																	expr: &seqExpr{
																																		pos: position{line: 855, col: 5, offset: 26036},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 855, col: 5, offset: 26036},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 855, col: 9, offset: 26040},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 855, col: 14, offset: 26045},
																																					expr: &choiceExpr{
																																						pos: position{line: 855, col: 15, offset: 26046},
																																						alternatives: []interface{}{
																																							&seqExpr{
																																								pos: position{line: 2490, col: 24, offset: 84696},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2490, col: 24, offset: 84696},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2407, col: 19, offset: 81885},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2491, col: 24, offset: 84763},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2491, col: 24, offset: 84763},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2492, col: 5, offset: 84800},
																																								run: (*parser).callonusesAndComments263,
																																								expr: &seqExpr{
																																									pos: position{line: 2492, col: 5, offset: 84800},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2492, col: 5, offset: 84800},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 14, offset: 84809},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2492, col: 26, offset: 84821},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2509, col: 19, offset: 85438},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2509, col: 19, offset: 85438},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2510, col: 5, offset: 85497},
																																								run: (*parser).callonusesAndComments276,
																																								expr: &seqExpr{
																																									pos: position{line: 2510, col: 5, offset: 85497},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2510, col: 5, offset: 85497},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 14, offset: 85506},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 26, offset: 85518},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 38, offset: 85530},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2510, col: 50, offset: 85542},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2539, col: 16, offset: 86678},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2539, col: 16, offset: 86678},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2408, col: 19, offset: 81909},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2540, col: 5, offset: 86781},
																																								run: (*parser).callonusesAndComments297,
																																								expr: &seqExpr{
																																									pos: position{line: 2540, col: 5, offset: 86781},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2540, col: 5, offset: 86781},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 14, offset: 86790},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 26, offset: 86802},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 38, offset: 86814},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 50, offset: 86826},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 62, offset: 86838},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 74, offset: 86850},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 86, offset: 86862},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2540, col: 98, offset: 86874},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2408, col: 19, offset: 81909},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 2767, col: 36, offset: 95811},
																																								exprs: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2767, col: 36, offset: 95811},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 2767, col: 41, offset: 95816},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 2765, col: 38, offset: 95703},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&actionExpr{
																																								pos: position{line: 2654, col: 37, offset: 91461},
																																								run: (*parser).callonusesAndComments320,
																																								expr: &seqExpr{
																																									pos: position{line: 2654, col: 37, offset: 91461},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2654, col: 37, offset: 91461},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2678, col: 5, offset: 92478},
																																								run: (*parser).callonusesAndComments331,
																																								expr: &seqExpr{
																																									pos: position{line: 2678, col: 5, offset: 92478},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2678, col: 5, offset: 92478},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2699, col: 5, offset: 93320},
																																								run: (*parser).callonusesAndComments338,
																																								expr: &seqExpr{
																																									pos: position{line: 2699, col: 5, offset: 93320},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2699, col: 5, offset: 93320},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2408, col: 19, offset: 81909},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2717, col: 5, offset: 94006},
																																								run: (*parser).callonusesAndComments343,
																																								expr: &seqExpr{
																																									pos: position{line: 2717, col: 5, offset: 94006},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2717, col: 5, offset: 94006},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 2717, col: 10, offset: 94011},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 3801, col: 12, offset: 129325},
																																												val:        "[^\\r\\n]",
																																												chars:      []rune{'\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 855, col: 98, offset: 26129},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3803, col: 8, offset: 129341},
																																					run: (*parser).callonusesAndComments349,
																																					expr: &choiceExpr{
																																						pos: position{line: 3803, col: 9, offset: 129342},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3803, col: 9, offset: 129342},
																																								expr: &anyMatcher{
																																									line: 3803, col: 10, offset: 129343,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3803, col: 14, offset: 129347},
																																								expr: &anyMatcher{
																																									line: 3803, col: 15, offset: 129348,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&andExpr{
																																				pos: position{line: 855, col: 110, offset: 26141},
																																				expr: &seqExpr{
																																					pos: position{line: 3800, col: 12, offset: 129292},
																																					exprs: []interface{}{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 3800, col: 12, offset: 129292},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 3812, col: 36, offset: 129639},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 3800, col: 16, offset: 129296},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 3800, col: 16, offset: 129296},
																																									exprs: []interface{}{
																																										&zeroOrOneExpr{
																																											pos: position{line: 3800, col: 16, offset: 129296},
																																											expr: &litMatcher{
																																												pos:        position{line: 3800, col: 16, offset: 129296},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3800, col: 22, offset: 129302},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 3799, col: 12, offset: 129278},
																																									expr: &anyMatcher{
																																										line: 3799, col: 13, offset: 129279,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 874, col: 22, offset: 26547},
																																	run: (*parser).callonusesAndComments366,
																																	expr: &seqExpr{
																																		pos: position{line: 874, col: 22, offset: 26547},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 874, col: 22, offset: 26547},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 874, col: 27, offset: 26552},
																																				label: "strI",
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 874, col: 32, offset: 26557},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 874, col: 32, offset: 26557},
																																						val:        "[^\\\\r\\n]",
																																						chars:      []rune{'\'', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 874, col: 42, offset: 26567},
																																				val:        "'",
																																				ignoreCase: false,
																																				want:       "\"'\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 874, col: 47, offset: 26572},
																																				label: "endPosI",
																																				expr: &actionExpr{
																																					pos: position{line: 3803, col: 8, offset: 129341},
																																					run: (*parser).callonusesAndComments374,
																																					expr: &choiceExpr{
																																						pos: position{line: 3803, col: 9, offset: 129342},
																																						alternatives: []interface{}{
																																							&andExpr{
																																								pos: position{line: 3803, col: 9, offset: 129342},
																																								expr: &anyMatcher{
																																									line: 3803, col: 10, offset: 129343,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3803, col: 14, offset: 129347},
																																								expr: &anyMatcher{
																																									line: 3803, col: 15, offset: 129348,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3241, col: 21, offset: 111427},
																																	run: (*parser).callonusesAndComments380,
																																	expr: &labeledExpr{
																																		pos:   position{line: 3241, col: 21, offset: 111427},
																																		label: "pathI",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 3241, col: 27, offset: 111433},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3801, col: 12, offset: 129325},
																																				val:        "[^\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 3800, col: 12, offset: 129292},
																														expr: &charClassMatcher{
																															pos:        position{line: 3812, col: 36, offset: 129639},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 3800, col: 16, offset: 129296},
																																		expr: &litMatcher{
																																			pos:        position{line: 3800, col: 16, offset: 129296},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3800, col: 22, offset: 129302},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3799, col: 12, offset: 129278},
																																expr: &anyMatcher{
																																	line: 3799, col: 13, offset: 129279,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 4293, col: 11, offset: 150370},
																							run: (*parser).callonusesAndComments393,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3356, col: 5, offset: 114768},
																run: (*parser).callonusesAndComments394,
																expr: &seqExpr{
																	pos: position{line: 3356, col: 5, offset: 114768},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3356, col: 5, offset: 114768},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3356, col: 11, offset: 114774},
																			expr: &litMatcher{
																				pos:        position{line: 3356, col: 11, offset: 114774},
																				val:        " ",
																				ignoreCase: false,
																				want:       "\" \"",
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 3356, col: 16, offset: 114779},
																			label: "specI",
																			expr: &actionExpr{
																				pos: position{line: 3376, col: 12, offset: 115385},
																				run: (*parser).callonusesAndComments400,
																				expr: &seqExpr{
																					pos: position{line: 3376, col: 12, offset: 115385},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 3376, col: 12, offset: 115385},
																							label: "aliasI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 3376, col: 19, offset: 115392},
																								expr: &seqExpr{
																									pos: position{line: 3376, col: 20, offset: 115393},
																									exprs: []interface{}{
																										&choiceExpr{
																											pos: position{line: 3389, col: 13, offset: 115662},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3389, col: 13, offset: 115662},
																													run: (*parser).callonusesAndComments406,
																													expr: &litMatcher{
																														pos:        position{line: 3389, col: 13, offset: 115662},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																												&actionExpr{
																													pos: position{line: 763, col: 10, offset: 23102},
																													run: (*parser).callonusesAndComments408,
																													expr: &labeledExpr{
																														pos:   position{line: 763, col: 10, offset: 23102},
																														label: "identI",
																														expr: &seqExpr{
																															pos: position{line: 2414, col: 17, offset: 81960},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 2397, col: 20, offset: 81715},
																																	val:        "[_\\pL]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2414, col: 26, offset: 81969},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2397, col: 20, offset: 81715},
																																		val:        "[_\\pL\\pNd]",
																																		chars:      []rune{'_'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 765, col: 5, offset: 23196},
																													run: (*parser).callonusesAndComments414,
																													expr: &seqExpr{
																														pos: position{line: 765, col: 5, offset: 23196},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 765, col: 5, offset: 23196},
																																label: "identI",
																																expr: &seqExpr{
																																	pos: position{line: 765, col: 13, offset: 23204},
																																	exprs: []interface{}{
																																		&zeroOrOneExpr{
																																			pos: position{line: 765, col: 13, offset: 23204},
																																			expr: &litMatcher{
																																				pos:        position{line: 765, col: 13, offset: 23204},
																																				val:        "$",
																																				ignoreCase: false,
																																				want:       "\"$\"",
																																			},
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 765, col: 18, offset: 23209},
																																			expr: &choiceExpr{
																																				pos: position{line: 765, col: 19, offset: 23210},
																																				alternatives: []interface{}{
																																					&seqExpr{
																																						pos: position{line: 765, col: 19, offset: 23210},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 765, col: 19, offset: 23210},
																																								val:        "[\\pNd]",
																																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 765, col: 28, offset: 23219},
																																								val:        "[_-\\pL]",
																																								chars:      []rune{'_', '-'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 765, col: 38, offset: 23229},
																																						val:        "[_-\\pL]",
																																						chars:      []rune{'_', '-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 765, col: 49, offset: 23240},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3803, col: 8, offset: 129341},
																																	run: (*parser).callonusesAndComments427,
																																	expr: &choiceExpr{
																																		pos: position{line: 3803, col: 9, offset: 129342},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3803, col: 9, offset: 129342},
																																				expr: &anyMatcher{
																																					line: 3803, col: 10, offset: 129343,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3803, col: 14, offset: 129347},
																																				expr: &anyMatcher{
																																					line: 3803, col: 15, offset: 129348,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3391, col: 13, offset: 115737},
																													run: (*parser).callonusesAndComments433,
																													expr: &seqExpr{
																														pos: position{line: 3391, col: 13, offset: 115737},
																														exprs: []interface{}{
																															&oneOrMoreExpr{
																																pos: position{line: 3391, col: 13, offset: 115737},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3391, col: 13, offset: 115737},
																																	val:        "[^\"`\\ ]",
																																	chars:      []rune{'"', '`', '\'', ' '},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 3391, col: 22, offset: 115746},
																																label: "endPosI",
																																expr: &actionExpr{
																																	pos: position{line: 3803, col: 8, offset: 129341},
																																	run: (*parser).callonusesAndComments438,
																																	expr: &choiceExpr{
																																		pos: position{line: 3803, col: 9, offset: 129342},
																																		alternatives: []interface{}{
																																			&andExpr{
																																				pos: position{line: 3803, col: 9, offset: 129342},
																																				expr: &anyMatcher{
																																					line: 3803, col: 10, offset: 129343,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3803, col: 14, offset: 129347},
																																				expr: &anyMatcher{
																																					line: 3803, col: 15, offset: 129348,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 3376, col: 29, offset: 115402},
																											expr: &litMatcher{
																												pos:        position{line: 3376, col: 29, offset: 115402},
																												val:        " ",
																												ignoreCase: false,
																												want:       "\" \"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 3376, col: 36, offset: 115409},
																							label: "pathI",
																							expr: &choiceExpr{
																								pos: position{line: 3241, col: 12, offset: 111418},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 832, col: 14, offset: 25289},
																										run: (*parser).callonusesAndComments448,
																										expr: &seqExpr{
																											pos: position{line: 832, col: 14, offset: 25289},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 832, col: 14, offset: 25289},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 832, col: 18, offset: 25293},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 832, col: 23, offset: 25298},
																														expr: &charClassMatcher{
																															pos:        position{line: 2751, col: 27, offset: 95033},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 832, col: 47, offset: 25322},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 834, col: 5, offset: 25414},
																										run: (*parser).callonusesAndComments455,
																										expr: &seqExpr{
																											pos: position{line: 834, col: 5, offset: 25414},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 834, col: 5, offset: 25414},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 834, col: 9, offset: 25418},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 834, col: 14, offset: 25423},
																														expr: &charClassMatcher{
																															pos:        position{line: 2751, col: 27, offset: 95033},
																															val:        "[^\\n`]",
																															chars:      []rune{'\n', '`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 834, col: 38, offset: 25447},
																													expr: &seqExpr{
																														pos: position{line: 3800, col: 12, offset: 129292},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3800, col: 12, offset: 129292},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3812, col: 36, offset: 129639},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3800, col: 16, offset: 129296},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3800, col: 16, offset: 129296},
																																				expr: &litMatcher{
																																					pos:        position{line: 3800, col: 16, offset: 129296},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3800, col: 22, offset: 129302},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3799, col: 12, offset: 129278},
																																		expr: &anyMatcher{
																																			line: 3799, col: 13, offset: 129279,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 853, col: 22, offset: 25851},
																										run: (*parser).callonusesAndComments472,
																										expr: &seqExpr{
																											pos: position{line: 853, col: 22, offset: 25851},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 853, col: 22, offset: 25851},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 853, col: 26, offset: 25855},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 853, col: 31, offset: 25860},
																														expr: &choiceExpr{
																															pos: position{line: 853, col: 32, offset: 25861},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2490, col: 24, offset: 84696},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2490, col: 24, offset: 84696},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2491, col: 24, offset: 84763},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2491, col: 24, offset: 84763},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2492, col: 5, offset: 84800},
																																	run: (*parser).callonusesAndComments487,
																																	expr: &seqExpr{
																																		pos: position{line: 2492, col: 5, offset: 84800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2492, col: 5, offset: 84800},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 14, offset: 84809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 26, offset: 84821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2509, col: 19, offset: 85438},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 19, offset: 85438},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2510, col: 5, offset: 85497},
																																	run: (*parser).callonusesAndComments500,
																																	expr: &seqExpr{
																																		pos: position{line: 2510, col: 5, offset: 85497},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2510, col: 5, offset: 85497},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 14, offset: 85506},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 26, offset: 85518},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 38, offset: 85530},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 50, offset: 85542},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2539, col: 16, offset: 86678},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2539, col: 16, offset: 86678},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2540, col: 5, offset: 86781},
																																	run: (*parser).callonusesAndComments521,
																																	expr: &seqExpr{
																																		pos: position{line: 2540, col: 5, offset: 86781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2540, col: 5, offset: 86781},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 14, offset: 86790},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 26, offset: 86802},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 38, offset: 86814},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 50, offset: 86826},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 62, offset: 86838},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 74, offset: 86850},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 86, offset: 86862},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 98, offset: 86874},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2767, col: 36, offset: 95811},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2767, col: 36, offset: 95811},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2767, col: 41, offset: 95816},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2765, col: 38, offset: 95703},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2654, col: 37, offset: 91461},
																																	run: (*parser).callonusesAndComments544,
																																	expr: &seqExpr{
																																		pos: position{line: 2654, col: 37, offset: 91461},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2654, col: 37, offset: 91461},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2678, col: 5, offset: 92478},
																																	run: (*parser).callonusesAndComments555,
																																	expr: &seqExpr{
																																		pos: position{line: 2678, col: 5, offset: 92478},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2678, col: 5, offset: 92478},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2699, col: 5, offset: 93320},
																																	run: (*parser).callonusesAndComments562,
																																	expr: &seqExpr{
																																		pos: position{line: 2699, col: 5, offset: 93320},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2699, col: 5, offset: 93320},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2717, col: 5, offset: 94006},
																																	run: (*parser).callonusesAndComments567,
																																	expr: &seqExpr{
																																		pos: position{line: 2717, col: 5, offset: 94006},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2717, col: 5, offset: 94006},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2717, col: 10, offset: 94011},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3801, col: 12, offset: 129325},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 853, col: 115, offset: 25944},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 855, col: 5, offset: 26036},
																										run: (*parser).callonusesAndComments573,
																										expr: &seqExpr{
																											pos: position{line: 855, col: 5, offset: 26036},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 855, col: 5, offset: 26036},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 855, col: 9, offset: 26040},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 855, col: 14, offset: 26045},
																														expr: &choiceExpr{
																															pos: position{line: 855, col: 15, offset: 26046},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2490, col: 24, offset: 84696},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2490, col: 24, offset: 84696},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2407, col: 19, offset: 81885},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2491, col: 24, offset: 84763},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2491, col: 24, offset: 84763},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2492, col: 5, offset: 84800},
																																	run: (*parser).callonusesAndComments588,
																																	expr: &seqExpr{
																																		pos: position{line: 2492, col: 5, offset: 84800},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2492, col: 5, offset: 84800},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 14, offset: 84809},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2492, col: 26, offset: 84821},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2509, col: 19, offset: 85438},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 19, offset: 85438},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2510, col: 5, offset: 85497},
																																	run: (*parser).callonusesAndComments601,
																																	expr: &seqExpr{
																																		pos: position{line: 2510, col: 5, offset: 85497},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2510, col: 5, offset: 85497},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 14, offset: 85506},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 26, offset: 85518},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 38, offset: 85530},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2510, col: 50, offset: 85542},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2539, col: 16, offset: 86678},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2539, col: 16, offset: 86678},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2408, col: 19, offset: 81909},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2540, col: 5, offset: 86781},
																																	run: (*parser).callonusesAndComments622,
																																	expr: &seqExpr{
																																		pos: position{line: 2540, col: 5, offset: 86781},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2540, col: 5, offset: 86781},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 14, offset: 86790},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 26, offset: 86802},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 38, offset: 86814},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 50, offset: 86826},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 62, offset: 86838},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 74, offset: 86850},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 86, offset: 86862},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2540, col: 98, offset: 86874},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2408, col: 19, offset: 81909},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 2767, col: 36, offset: 95811},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2767, col: 36, offset: 95811},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2767, col: 41, offset: 95816},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 2765, col: 38, offset: 95703},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&actionExpr{
																																	pos: position{line: 2654, col: 37, offset: 91461},
																																	run: (*parser).callonusesAndComments645,
																																	expr: &seqExpr{
																																		pos: position{line: 2654, col: 37, offset: 91461},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2654, col: 37, offset: 91461},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2678, col: 5, offset: 92478},
																																	run: (*parser).callonusesAndComments656,
																																	expr: &seqExpr{
																																		pos: position{line: 2678, col: 5, offset: 92478},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2678, col: 5, offset: 92478},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2699, col: 5, offset: 93320},
																																	run: (*parser).callonusesAndComments663,
																																	expr: &seqExpr{
																																		pos: position{line: 2699, col: 5, offset: 93320},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2699, col: 5, offset: 93320},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 2408, col: 19, offset: 81909},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 2717, col: 5, offset: 94006},
																																	run: (*parser).callonusesAndComments668,
																																	expr: &seqExpr{
																																		pos: position{line: 2717, col: 5, offset: 94006},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2717, col: 5, offset: 94006},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 2717, col: 10, offset: 94011},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3801, col: 12, offset: 129325},
																																					val:        "[^\\r\\n]",
																																					chars:      []rune{'\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 855, col: 98, offset: 26129},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3803, col: 8, offset: 129341},
																														run: (*parser).callonusesAndComments674,
																														expr: &choiceExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3803, col: 9, offset: 129342},
																																	expr: &anyMatcher{
																																		line: 3803, col: 10, offset: 129343,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3803, col: 14, offset: 129347},
																																	expr: &anyMatcher{
																																		line: 3803, col: 15, offset: 129348,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 855, col: 110, offset: 26141},
																													expr: &seqExpr{
																														pos: position{line: 3800, col: 12, offset: 129292},
																														exprs: []interface{}{
																															&zeroOrMoreExpr{
																																pos: position{line: 3800, col: 12, offset: 129292},
																																expr: &charClassMatcher{
																																	pos:        position{line: 3812, col: 36, offset: 129639},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																alternatives: []interface{}{
																																	&seqExpr{
																																		pos: position{line: 3800, col: 16, offset: 129296},
																																		exprs: []interface{}{
																																			&zeroOrOneExpr{
																																				pos: position{line: 3800, col: 16, offset: 129296},
																																				expr: &litMatcher{
																																					pos:        position{line: 3800, col: 16, offset: 129296},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3800, col: 22, offset: 129302},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3799, col: 12, offset: 129278},
																																		expr: &anyMatcher{
																																			line: 3799, col: 13, offset: 129279,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 874, col: 22, offset: 26547},
																										run: (*parser).callonusesAndComments691,
																										expr: &seqExpr{
																											pos: position{line: 874, col: 22, offset: 26547},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 874, col: 22, offset: 26547},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 874, col: 27, offset: 26552},
																													label: "strI",
																													expr: &zeroOrMoreExpr{
																														pos: position{line: 874, col: 32, offset: 26557},
																														expr: &charClassMatcher{
																															pos:        position{line: 874, col: 32, offset: 26557},
																															val:        "[^\\\\r\\n]",
																															chars:      []rune{'\'', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 874, col: 42, offset: 26567},
																													val:        "'",
																													ignoreCase: false,
																													want:       "\"'\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 874, col: 47, offset: 26572},
																													label: "endPosI",
																													expr: &actionExpr{
																														pos: position{line: 3803, col: 8, offset: 129341},
																														run: (*parser).callonusesAndComments699,
																														expr: &choiceExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															alternatives: []interface{}{
																																&andExpr{
																																	pos: position{line: 3803, col: 9, offset: 129342},
																																	expr: &anyMatcher{
																																		line: 3803, col: 10, offset: 129343,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3803, col: 14, offset: 129347},
																																	expr: &anyMatcher{
																																		line: 3803, col: 15, offset: 129348,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3241, col: 21, offset: 111427},
																										run: (*parser).callonusesAndComments705,
																										expr: &labeledExpr{
																											pos:   position{line: 3241, col: 21, offset: 111427},
																											label: "pathI",
																											expr: &zeroOrMoreExpr{
																												pos: position{line: 3241, col: 27, offset: 111433},
																												expr: &charClassMatcher{
																													pos:        position{line: 3801, col: 12, offset: 129325},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 3800, col: 12, offset: 129292},
																							expr: &charClassMatcher{
																								pos:        position{line: 3812, col: 36, offset: 129639},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3800, col: 16, offset: 129296},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3800, col: 16, offset: 129296},
																											expr: &litMatcher{
																												pos:        position{line: 3800, col: 16, offset: 129296},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3800, col: 22, offset: 129302},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3799, col: 12, offset: 129278},
																									expr: &anyMatcher{
																										line: 3799, col: 13, offset: 129279,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3361, col: 5, offset: 114909},
																run: (*parser).callonusesAndComments718,
																expr: &seqExpr{
																	pos: position{line: 3361, col: 5, offset: 114909},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3361, col: 5, offset: 114909},
																			val:        "use",
																			ignoreCase: false,
																			want:       "\"use\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 3361, col: 11, offset: 114915},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonusesAndComments722,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 3800, col: 12, offset: 129292},
																			expr: &charClassMatcher{
																				pos:        position{line: 3812, col: 36, offset: 129639},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							expr: &litMatcher{
																								pos:        position{line: 3800, col: 16, offset: 129296},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 3800, col: 22, offset: 129302},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3799, col: 12, offset: 129278},
																					expr: &anyMatcher{
																						line: 3799, col: 13, offset: 129279,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codesAndComments",
			pos:  position{line: 87, col: 1, offset: 2558},
			expr: &actionExpr{
				pos: position{line: 87, col: 21, offset: 2578},
				run: (*parser).calloncodesAndComments1,
				expr: &labeledExpr{
					pos:   position{line: 87, col: 21, offset: 2578},
					label: "valsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 87, col: 27, offset: 2584},
						expr: &seqExpr{
							pos: position{line: 87, col: 28, offset: 2585},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 87, col: 28, offset: 2585},
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 28, offset: 2585},
										name: "CorgiComments",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 87, col: 43, offset: 2600},
									expr: &oneOrMoreExpr{
										pos: position{line: 3814, col: 36, offset: 129726},
										expr: &seqExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 87, col: 52, offset: 2609},
									name: "Codes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "globalCodeAndFunc",
			pos:  position{line: 101, col: 1, offset: 2955},
			expr: &actionExpr{
				pos: position{line: 101, col: 22, offset: 2976},
				run: (*parser).callonglobalCodeAndFunc1,
				expr: &seqExpr{
					pos: position{line: 101, col: 22, offset: 2976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 101, col: 22, offset: 2976},
							label: "codesAndCommentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 101, col: 40, offset: 2994},
								expr: &ruleRefExpr{
									pos:  position{line: 101, col: 40, offset: 2994},
									name: "codesAndComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 101, col: 58, offset: 3012},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 101, col: 67, offset: 3021},
							label: "commentsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 101, col: 77, offset: 3031},
								expr: &ruleRefExpr{
									pos:  position{line: 101, col: 77, offset: 3031},
									name: "CorgiComments",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 101, col: 92, offset: 3046},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 101, col: 101, offset: 3055},
							label: "funcI",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 107, offset: 3061},
								name: "Func",
							},
						},
					},
				},
			},
		},
		{
			name: "preScope",
			pos:  position{line: 119, col: 1, offset: 3515},
			expr: &actionExpr{
				pos: position{line: 119, col: 13, offset: 3527},
				run: (*parser).callonpreScope1,
				expr: &seqExpr{
					pos: position{line: 119, col: 13, offset: 3527},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 119, col: 13, offset: 3527},
							label: "itmsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 19, offset: 3533},
								expr: &seqExpr{
									pos: position{line: 119, col: 20, offset: 3534},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 119, col: 21, offset: 3535},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 119, col: 21, offset: 3535},
													name: "CorgiComment",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 36, offset: 3550},
													name: "Code",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 43, offset: 3557},
													name: "Mixin",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 119, col: 50, offset: 3564},
											expr: &oneOrMoreExpr{
												pos: position{line: 3814, col: 36, offset: 129726},
												expr: &seqExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 61, offset: 3575},
							label: "doctypeI",
							expr: &choiceExpr{
								pos: position{line: 936, col: 12, offset: 28645},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 936, col: 12, offset: 28645},
										run: (*parser).callonpreScope20,
										expr: &seqExpr{
											pos: position{line: 936, col: 12, offset: 28645},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 936, col: 12, offset: 28645},
													val:        "doctype",
													ignoreCase: false,
													want:       "\"doctype\"",
												},
												&choiceExpr{
													pos: position{line: 949, col: 18, offset: 29068},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 949, col: 18, offset: 29068},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 949, col: 18, offset: 29068},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3800, col: 12, offset: 129292},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					expr: &litMatcher{
																						pos:        position{line: 3800, col: 16, offset: 129296},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3800, col: 22, offset: 129302},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3799, col: 12, offset: 129278},
																			expr: &anyMatcher{
																				line: 3799, col: 13, offset: 129279,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 950, col: 5, offset: 29086},
															run: (*parser).callonpreScope35,
															expr: &seqExpr{
																pos: position{line: 950, col: 5, offset: 29086},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 950, col: 5, offset: 29086},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 950, col: 9, offset: 29090},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3803, col: 8, offset: 129341},
																			run: (*parser).callonpreScope39,
																			expr: &choiceExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3803, col: 9, offset: 129342},
																						expr: &anyMatcher{
																							line: 3803, col: 10, offset: 129343,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3803, col: 14, offset: 129347},
																						expr: &anyMatcher{
																							line: 3803, col: 15, offset: 129348,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 950, col: 23, offset: 29104},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 960, col: 9, offset: 29485},
															run: (*parser).callonpreScope56,
															expr: &seqExpr{
																pos: position{line: 960, col: 9, offset: 29485},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 9, offset: 29485},
																		expr: &litMatcher{
																			pos:        position{line: 960, col: 9, offset: 29485},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 14, offset: 29490},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 938, col: 5, offset: 28722},
										run: (*parser).callonpreScope71,
										expr: &seqExpr{
											pos: position{line: 938, col: 5, offset: 28722},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 938, col: 5, offset: 28722},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 949, col: 18, offset: 29068},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 949, col: 18, offset: 29068},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 949, col: 18, offset: 29068},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3800, col: 12, offset: 129292},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					expr: &litMatcher{
																						pos:        position{line: 3800, col: 16, offset: 129296},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3800, col: 22, offset: 129302},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3799, col: 12, offset: 129278},
																			expr: &anyMatcher{
																				line: 3799, col: 13, offset: 129279,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 950, col: 5, offset: 29086},
															run: (*parser).callonpreScope86,
															expr: &seqExpr{
																pos: position{line: 950, col: 5, offset: 29086},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 950, col: 5, offset: 29086},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 950, col: 9, offset: 29090},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3803, col: 8, offset: 129341},
																			run: (*parser).callonpreScope90,
																			expr: &choiceExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3803, col: 9, offset: 129342},
																						expr: &anyMatcher{
																							line: 3803, col: 10, offset: 129343,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3803, col: 14, offset: 129347},
																						expr: &anyMatcher{
																							line: 3803, col: 15, offset: 129348,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 950, col: 23, offset: 29104},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 960, col: 9, offset: 29485},
															run: (*parser).callonpreScope107,
															expr: &seqExpr{
																pos: position{line: 960, col: 9, offset: 29485},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 9, offset: 29485},
																		expr: &litMatcher{
																			pos:        position{line: 960, col: 9, offset: 29485},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 14, offset: 29490},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 158, col: 1, offset: 4842},
			expr: &actionExpr{
				pos: position{line: 158, col: 10, offset: 4851},
				run: (*parser).callonScope1,
				expr: &labeledExpr{
					pos:   position{line: 158, col: 10, offset: 4851},
					label: "itemsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 158, col: 17, offset: 4858},
						expr: &seqExpr{
							pos: position{line: 158, col: 18, offset: 4859},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 18, offset: 4859},
									expr: &oneOrMoreExpr{
										pos: position{line: 3814, col: 36, offset: 129726},
										expr: &seqExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3901, col: 17, offset: 133533},
									run: (*parser).callonScope13,
									expr: &zeroOrMoreExpr{
										pos: position{line: 3901, col: 17, offset: 133533},
										expr: &charClassMatcher{
											pos:        position{line: 3812, col: 36, offset: 129639},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 3901, col: 41, offset: 133557},
									run: (*parser).callonScope16,
								},
								&choiceExpr{
									pos: position{line: 3953, col: 5, offset: 135467},
									alternatives: []interface{}{
										&andCodeExpr{
											pos: position{line: 3953, col: 5, offset: 135467},
											run: (*parser).callonScope18,
										},
										&seqExpr{
											pos: position{line: 3955, col: 9, offset: 135550},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3955, col: 9, offset: 135550},
													run: (*parser).callonScope20,
												},
												&stateCodeExpr{
													pos: position{line: 3957, col: 7, offset: 135673},
													run: (*parser).callonScope21,
												},
											},
										},
										&seqExpr{
											pos: position{line: 3964, col: 9, offset: 136009},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 3964, col: 9, offset: 136009},
													run: (*parser).callonScope23,
												},
												&andCodeExpr{
													pos: position{line: 3966, col: 7, offset: 136117},
													run: (*parser).callonScope24,
												},
												&choiceExpr{
													pos: position{line: 4019, col: 9, offset: 138452},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 4019, col: 9, offset: 138452},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 4019, col: 9, offset: 138452},
																	run: (*parser).callonScope27,
																},
																&andCodeExpr{
																	pos: position{line: 4023, col: 11, offset: 138702},
																	run: (*parser).callonScope28,
																},
																&stateCodeExpr{
																	pos: position{line: 4089, col: 11, offset: 141908},
																	run: (*parser).callonScope29,
																},
															},
														},
														&seqExpr{
															pos: position{line: 4097, col: 13, offset: 142261},
															exprs: []interface{}{
																&andCodeExpr{
																	pos: position{line: 4097, col: 13, offset: 142261},
																	run: (*parser).callonScope31,
																},
																&andCodeExpr{
																	pos: position{line: 4101, col: 11, offset: 142516},
																	run: (*parser).callonScope32,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 39, offset: 4880},
									name: "scopeItem",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "scopeItem",
			pos:  position{line: 172, col: 1, offset: 5186},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 5205},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 5205},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 13, offset: 5213},
						name: "Prepend",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 23, offset: 5223},
						name: "Append",
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 5252},
						name: "Code",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 5298},
						name: "If",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 10, offset: 5303},
						name: "IfBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 20, offset: 5313},
						name: "Switch",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 29, offset: 5322},
						name: "For",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 5358},
						name: "CorgiComment",
					},
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5405},
						name: "HTMLComment",
					},
					&ruleRefExpr{
						pos:  position{line: 177, col: 19, offset: 5419},
						name: "And",
					},
					&ruleRefExpr{
						pos:  position{line: 178, col: 5, offset: 5484},
						name: "Filter",
					},
					&actionExpr{
						pos: position{line: 2892, col: 12, offset: 100013},
						run: (*parser).callonscopeItem14,
						expr: &seqExpr{
							pos: position{line: 2892, col: 12, offset: 100013},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2892, col: 12, offset: 100013},
									val:        "include",
									ignoreCase: false,
									want:       "\"include\"",
								},
								&labeledExpr{
									pos:   position{line: 2892, col: 22, offset: 100023},
									label: "pathI",
									expr: &choiceExpr{
										pos: position{line: 3227, col: 18, offset: 110992},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3227, col: 18, offset: 110992},
												run: (*parser).callonscopeItem19,
												expr: &seqExpr{
													pos: position{line: 3227, col: 18, offset: 110992},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 3227, col: 18, offset: 110992},
															expr: &litMatcher{
																pos:        position{line: 3227, col: 18, offset: 110992},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3227, col: 23, offset: 110997},
															label: "sI",
															expr: &choiceExpr{
																pos: position{line: 826, col: 11, offset: 25202},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 832, col: 14, offset: 25289},
																		run: (*parser).callonscopeItem25,
																		expr: &seqExpr{
																			pos: position{line: 832, col: 14, offset: 25289},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 832, col: 14, offset: 25289},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 832, col: 18, offset: 25293},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 832, col: 23, offset: 25298},
																						expr: &charClassMatcher{
																							pos:        position{line: 2751, col: 27, offset: 95033},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 832, col: 47, offset: 25322},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 834, col: 5, offset: 25414},
																		run: (*parser).callonscopeItem32,
																		expr: &seqExpr{
																			pos: position{line: 834, col: 5, offset: 25414},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 834, col: 5, offset: 25414},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 834, col: 9, offset: 25418},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 834, col: 14, offset: 25423},
																						expr: &charClassMatcher{
																							pos:        position{line: 2751, col: 27, offset: 95033},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 834, col: 38, offset: 25447},
																					expr: &seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 853, col: 22, offset: 25851},
																		run: (*parser).callonscopeItem49,
																		expr: &seqExpr{
																			pos: position{line: 853, col: 22, offset: 25851},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 853, col: 22, offset: 25851},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 853, col: 26, offset: 25855},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 853, col: 31, offset: 25860},
																						expr: &choiceExpr{
																							pos: position{line: 853, col: 32, offset: 25861},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2490, col: 24, offset: 84696},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2490, col: 24, offset: 84696},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2491, col: 24, offset: 84763},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2491, col: 24, offset: 84763},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2492, col: 5, offset: 84800},
																									run: (*parser).callonscopeItem64,
																									expr: &seqExpr{
																										pos: position{line: 2492, col: 5, offset: 84800},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2492, col: 5, offset: 84800},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 14, offset: 84809},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 26, offset: 84821},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2509, col: 19, offset: 85438},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2509, col: 19, offset: 85438},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2510, col: 5, offset: 85497},
																									run: (*parser).callonscopeItem77,
																									expr: &seqExpr{
																										pos: position{line: 2510, col: 5, offset: 85497},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2510, col: 5, offset: 85497},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 14, offset: 85506},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 26, offset: 85518},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 38, offset: 85530},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 50, offset: 85542},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2539, col: 16, offset: 86678},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2539, col: 16, offset: 86678},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2540, col: 5, offset: 86781},
																									run: (*parser).callonscopeItem98,
																									expr: &seqExpr{
																										pos: position{line: 2540, col: 5, offset: 86781},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2540, col: 5, offset: 86781},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 14, offset: 86790},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 26, offset: 86802},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 38, offset: 86814},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 50, offset: 86826},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 62, offset: 86838},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 74, offset: 86850},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 86, offset: 86862},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 98, offset: 86874},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2767, col: 36, offset: 95811},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2767, col: 36, offset: 95811},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2767, col: 41, offset: 95816},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2765, col: 38, offset: 95703},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2654, col: 37, offset: 91461},
																									run: (*parser).callonscopeItem121,
																									expr: &seqExpr{
																										pos: position{line: 2654, col: 37, offset: 91461},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2654, col: 37, offset: 91461},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2678, col: 5, offset: 92478},
																									run: (*parser).callonscopeItem132,
																									expr: &seqExpr{
																										pos: position{line: 2678, col: 5, offset: 92478},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2678, col: 5, offset: 92478},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2699, col: 5, offset: 93320},
																									run: (*parser).callonscopeItem139,
																									expr: &seqExpr{
																										pos: position{line: 2699, col: 5, offset: 93320},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2699, col: 5, offset: 93320},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2717, col: 5, offset: 94006},
																									run: (*parser).callonscopeItem144,
																									expr: &seqExpr{
																										pos: position{line: 2717, col: 5, offset: 94006},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2717, col: 5, offset: 94006},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2717, col: 10, offset: 94011},
																												expr: &charClassMatcher{
																													pos:        position{line: 3801, col: 12, offset: 129325},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 853, col: 115, offset: 25944},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 855, col: 5, offset: 26036},
																		run: (*parser).callonscopeItem150,
																		expr: &seqExpr{
																			pos: position{line: 855, col: 5, offset: 26036},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 855, col: 5, offset: 26036},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 855, col: 9, offset: 26040},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 855, col: 14, offset: 26045},
																						expr: &choiceExpr{
																							pos: position{line: 855, col: 15, offset: 26046},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2490, col: 24, offset: 84696},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2490, col: 24, offset: 84696},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2491, col: 24, offset: 84763},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2491, col: 24, offset: 84763},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2492, col: 5, offset: 84800},
																									run: (*parser).callonscopeItem165,
																									expr: &seqExpr{
																										pos: position{line: 2492, col: 5, offset: 84800},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2492, col: 5, offset: 84800},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 14, offset: 84809},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 26, offset: 84821},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2509, col: 19, offset: 85438},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2509, col: 19, offset: 85438},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2510, col: 5, offset: 85497},
																									run: (*parser).callonscopeItem178,
																									expr: &seqExpr{
																										pos: position{line: 2510, col: 5, offset: 85497},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2510, col: 5, offset: 85497},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 14, offset: 85506},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 26, offset: 85518},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 38, offset: 85530},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 50, offset: 85542},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2539, col: 16, offset: 86678},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2539, col: 16, offset: 86678},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2540, col: 5, offset: 86781},
																									run: (*parser).callonscopeItem199,
																									expr: &seqExpr{
																										pos: position{line: 2540, col: 5, offset: 86781},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2540, col: 5, offset: 86781},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 14, offset: 86790},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 26, offset: 86802},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 38, offset: 86814},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 50, offset: 86826},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 62, offset: 86838},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 74, offset: 86850},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 86, offset: 86862},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 98, offset: 86874},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2767, col: 36, offset: 95811},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2767, col: 36, offset: 95811},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2767, col: 41, offset: 95816},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2765, col: 38, offset: 95703},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2654, col: 37, offset: 91461},
																									run: (*parser).callonscopeItem222,
																									expr: &seqExpr{
																										pos: position{line: 2654, col: 37, offset: 91461},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2654, col: 37, offset: 91461},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2678, col: 5, offset: 92478},
																									run: (*parser).callonscopeItem233,
																									expr: &seqExpr{
																										pos: position{line: 2678, col: 5, offset: 92478},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2678, col: 5, offset: 92478},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2699, col: 5, offset: 93320},
																									run: (*parser).callonscopeItem240,
																									expr: &seqExpr{
																										pos: position{line: 2699, col: 5, offset: 93320},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2699, col: 5, offset: 93320},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2717, col: 5, offset: 94006},
																									run: (*parser).callonscopeItem245,
																									expr: &seqExpr{
																										pos: position{line: 2717, col: 5, offset: 94006},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2717, col: 5, offset: 94006},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2717, col: 10, offset: 94011},
																												expr: &charClassMatcher{
																													pos:        position{line: 3801, col: 12, offset: 129325},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 855, col: 98, offset: 26129},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3803, col: 8, offset: 129341},
																						run: (*parser).callonscopeItem251,
																						expr: &choiceExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									expr: &anyMatcher{
																										line: 3803, col: 10, offset: 129343,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3803, col: 14, offset: 129347},
																									expr: &anyMatcher{
																										line: 3803, col: 15, offset: 129348,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 855, col: 110, offset: 26141},
																					expr: &seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 874, col: 22, offset: 26547},
																		run: (*parser).callonscopeItem268,
																		expr: &seqExpr{
																			pos: position{line: 874, col: 22, offset: 26547},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 874, col: 22, offset: 26547},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 874, col: 27, offset: 26552},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 874, col: 32, offset: 26557},
																						expr: &charClassMatcher{
																							pos:        position{line: 874, col: 32, offset: 26557},
																							val:        "[^\\\\r\\n]",
																							chars:      []rune{'\'', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 874, col: 42, offset: 26567},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 874, col: 47, offset: 26572},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3803, col: 8, offset: 129341},
																						run: (*parser).callonscopeItem276,
																						expr: &choiceExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									expr: &anyMatcher{
																										line: 3803, col: 10, offset: 129343,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3803, col: 14, offset: 129347},
																									expr: &anyMatcher{
																										line: 3803, col: 15, offset: 129348,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3229, col: 5, offset: 111032},
												run: (*parser).callonscopeItem282,
												expr: &seqExpr{
													pos: position{line: 3229, col: 5, offset: 111032},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3229, col: 5, offset: 111032},
															expr: &litMatcher{
																pos:        position{line: 3229, col: 5, offset: 111032},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3229, col: 10, offset: 111037},
															label: "pathI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3229, col: 16, offset: 111043},
																expr: &charClassMatcher{
																	pos:        position{line: 3801, col: 12, offset: 129325},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 5, offset: 5581},
						name: "Mixin",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 13, offset: 5589},
						name: "Return",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 22, offset: 5598},
						name: "MixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 181, col: 5, offset: 5630},
						name: "ArrowBlock",
					},
					&actionExpr{
						pos: position{line: 188, col: 17, offset: 5778},
						run: (*parser).callonscopeItem293,
						expr: &labeledExpr{
							pos:   position{line: 188, col: 17, offset: 5778},
							label: "doctypeI",
							expr: &choiceExpr{
								pos: position{line: 936, col: 12, offset: 28645},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 936, col: 12, offset: 28645},
										run: (*parser).callonscopeItem296,
										expr: &seqExpr{
											pos: position{line: 936, col: 12, offset: 28645},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 936, col: 12, offset: 28645},
													val:        "doctype",
													ignoreCase: false,
													want:       "\"doctype\"",
												},
												&choiceExpr{
													pos: position{line: 949, col: 18, offset: 29068},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 949, col: 18, offset: 29068},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 949, col: 18, offset: 29068},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3800, col: 12, offset: 129292},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					expr: &litMatcher{
																						pos:        position{line: 3800, col: 16, offset: 129296},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3800, col: 22, offset: 129302},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3799, col: 12, offset: 129278},
																			expr: &anyMatcher{
																				line: 3799, col: 13, offset: 129279,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 950, col: 5, offset: 29086},
															run: (*parser).callonscopeItem311,
															expr: &seqExpr{
																pos: position{line: 950, col: 5, offset: 29086},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 950, col: 5, offset: 29086},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 950, col: 9, offset: 29090},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3803, col: 8, offset: 129341},
																			run: (*parser).callonscopeItem315,
																			expr: &choiceExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3803, col: 9, offset: 129342},
																						expr: &anyMatcher{
																							line: 3803, col: 10, offset: 129343,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3803, col: 14, offset: 129347},
																						expr: &anyMatcher{
																							line: 3803, col: 15, offset: 129348,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 950, col: 23, offset: 29104},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 960, col: 9, offset: 29485},
															run: (*parser).callonscopeItem332,
															expr: &seqExpr{
																pos: position{line: 960, col: 9, offset: 29485},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 9, offset: 29485},
																		expr: &litMatcher{
																			pos:        position{line: 960, col: 9, offset: 29485},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 14, offset: 29490},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 938, col: 5, offset: 28722},
										run: (*parser).callonscopeItem347,
										expr: &seqExpr{
											pos: position{line: 938, col: 5, offset: 28722},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 938, col: 5, offset: 28722},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 949, col: 18, offset: 29068},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 949, col: 18, offset: 29068},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 949, col: 18, offset: 29068},
																	val:        " html",
																	ignoreCase: false,
																	want:       "\" html\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3800, col: 12, offset: 129292},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					expr: &litMatcher{
																						pos:        position{line: 3800, col: 16, offset: 129296},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3800, col: 22, offset: 129302},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3799, col: 12, offset: 129278},
																			expr: &anyMatcher{
																				line: 3799, col: 13, offset: 129279,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 950, col: 5, offset: 29086},
															run: (*parser).callonscopeItem362,
															expr: &seqExpr{
																pos: position{line: 950, col: 5, offset: 29086},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 950, col: 5, offset: 29086},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 950, col: 9, offset: 29090},
																		label: "startPosI",
																		expr: &actionExpr{
																			pos: position{line: 3803, col: 8, offset: 129341},
																			run: (*parser).callonscopeItem366,
																			expr: &choiceExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				alternatives: []interface{}{
																					&andExpr{
																						pos: position{line: 3803, col: 9, offset: 129342},
																						expr: &anyMatcher{
																							line: 3803, col: 10, offset: 129343,
																						},
																					},
																					&notExpr{
																						pos: position{line: 3803, col: 14, offset: 129347},
																						expr: &anyMatcher{
																							line: 3803, col: 15, offset: 129348,
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 950, col: 23, offset: 29104},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 960, col: 9, offset: 29485},
															run: (*parser).callonscopeItem383,
															expr: &seqExpr{
																pos: position{line: 960, col: 9, offset: 29485},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 9, offset: 29485},
																		expr: &litMatcher{
																			pos:        position{line: 960, col: 9, offset: 29485},
																			val:        " ",
																			ignoreCase: false,
																			want:       "\" \"",
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 960, col: 14, offset: 29490},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 5696},
						name: "DivShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 184, col: 20, offset: 5711},
						name: "Element",
					},
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 5751},
						name: "BadItem",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 210, col: 1, offset: 6606},
			expr: &actionExpr{
				pos: position{line: 210, col: 9, offset: 6614},
				run: (*parser).callonBody1,
				expr: &seqExpr{
					pos: position{line: 210, col: 9, offset: 6614},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4288, col: 11, offset: 150265},
							run: (*parser).callonBody3,
						},
						&labeledExpr{
							pos:   position{line: 210, col: 16, offset: 6621},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 23, offset: 6628},
								name: "Scope",
							},
						},
						&stateCodeExpr{
							pos: position{line: 4293, col: 11, offset: 150370},
							run: (*parser).callonBody6,
						},
					},
				},
			},
		},
		{
			name: "Beaitb",
			pos:  position{line: 214, col: 1, offset: 6669},
			expr: &choiceExpr{
				pos: position{line: 214, col: 11, offset: 6679},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 214, col: 11, offset: 6679},
						run: (*parser).callonBeaitb2,
						expr: &labeledExpr{
							pos:   position{line: 214, col: 11, offset: 6679},
							label: "scopeItemI",
							expr: &choiceExpr{
								pos: position{line: 214, col: 23, offset: 6691},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 214, col: 23, offset: 6691},
										name: "BlockExpansion",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 40, offset: 6708},
										name: "InlineText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6786},
						run: (*parser).callonBeaitb7,
						expr: &seqExpr{
							pos: position{line: 216, col: 5, offset: 6786},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 216, col: 9, offset: 6790},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 216, col: 15, offset: 6796},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 218, col: 5, offset: 6829},
						run: (*parser).callonBeaitb20,
						expr: &seqExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 220, col: 5, offset: 6871},
						run: (*parser).callonBeaitb31,
						expr: &seqExpr{
							pos: position{line: 220, col: 5, offset: 6871},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 220, col: 5, offset: 6871},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 220, col: 11, offset: 6877},
										expr: &charClassMatcher{
											pos:        position{line: 3801, col: 12, offset: 129325},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 220, col: 24, offset: 6890},
									label: "bodyI",
									expr: &zeroOrOneExpr{
										pos: position{line: 220, col: 30, offset: 6896},
										expr: &ruleRefExpr{
											pos:  position{line: 220, col: 30, offset: 6896},
											name: "Body",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Beait",
			pos:  position{line: 235, col: 1, offset: 7316},
			expr: &choiceExpr{
				pos: position{line: 235, col: 10, offset: 7325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 235, col: 10, offset: 7325},
						run: (*parser).callonBeait2,
						expr: &labeledExpr{
							pos:   position{line: 235, col: 10, offset: 7325},
							label: "scopeItemI",
							expr: &choiceExpr{
								pos: position{line: 235, col: 22, offset: 7337},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 235, col: 22, offset: 7337},
										name: "BlockExpansion",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 39, offset: 7354},
										name: "InlineText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 7428},
						run: (*parser).callonBeait7,
						expr: &seqExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 239, col: 5, offset: 7470},
						run: (*parser).callonBeait18,
						expr: &seqExpr{
							pos: position{line: 239, col: 5, offset: 7470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 239, col: 5, offset: 7470},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 239, col: 11, offset: 7476},
										expr: &charClassMatcher{
											pos:        position{line: 3801, col: 12, offset: 129325},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BadItem",
			pos:  position{line: 252, col: 1, offset: 7847},
			expr: &actionExpr{
				pos: position{line: 252, col: 12, offset: 7858},
				run: (*parser).callonBadItem1,
				expr: &seqExpr{
					pos: position{line: 252, col: 12, offset: 7858},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 252, col: 12, offset: 7858},
							label: "lineI",
							expr: &oneOrMoreExpr{
								pos: position{line: 252, col: 18, offset: 7864},
								expr: &charClassMatcher{
									pos:        position{line: 3801, col: 12, offset: 129325},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 252, col: 31, offset: 7877},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 252, col: 37, offset: 7883},
								expr: &ruleRefExpr{
									pos:  position{line: 252, col: 37, offset: 7883},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 287, col: 1, offset: 9276},
			expr: &actionExpr{
				pos: position{line: 287, col: 10, offset: 9285},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 287, col: 10, offset: 9285},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 287, col: 10, offset: 9285},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 308, col: 19, offset: 9877},
								run: (*parser).callonBlock4,
								expr: &seqExpr{
									pos: position{line: 308, col: 19, offset: 9877},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 308, col: 19, offset: 9877},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 308, col: 27, offset: 9885},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 333, col: 14, offset: 10458},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 333, col: 14, offset: 10458},
														run: (*parser).callonBlock9,
														expr: &seqExpr{
															pos: position{line: 333, col: 14, offset: 10458},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 333, col: 14, offset: 10458},
																	expr: &litMatcher{
																		pos:        position{line: 333, col: 14, offset: 10458},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 333, col: 19, offset: 10463},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 777, col: 14, offset: 23657},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 777, col: 14, offset: 23657},
																				run: (*parser).callonBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 777, col: 14, offset: 23657},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 763, col: 10, offset: 23102},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 763, col: 10, offset: 23102},
																								run: (*parser).callonBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 763, col: 10, offset: 23102},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2414, col: 17, offset: 81960},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2397, col: 20, offset: 81715},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2414, col: 26, offset: 81969},
																												expr: &charClassMatcher{
																													pos:        position{line: 2397, col: 20, offset: 81715},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 765, col: 5, offset: 23196},
																								run: (*parser).callonBlock24,
																								expr: &seqExpr{
																									pos: position{line: 765, col: 5, offset: 23196},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 765, col: 5, offset: 23196},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 765, col: 13, offset: 23204},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 765, col: 13, offset: 23204},
																														expr: &litMatcher{
																															pos:        position{line: 765, col: 13, offset: 23204},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 765, col: 18, offset: 23209},
																														expr: &choiceExpr{
																															pos: position{line: 765, col: 19, offset: 23210},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 765, col: 19, offset: 23210},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 19, offset: 23210},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 28, offset: 23219},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 765, col: 38, offset: 23229},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 765, col: 49, offset: 23240},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3803, col: 8, offset: 129341},
																												run: (*parser).callonBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3803, col: 9, offset: 129342},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															expr: &anyMatcher{
																																line: 3803, col: 10, offset: 129343,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3803, col: 14, offset: 129347},
																															expr: &anyMatcher{
																																line: 3803, col: 15, offset: 129348,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 779, col: 5, offset: 23699},
																				run: (*parser).callonBlock43,
																				expr: &seqExpr{
																					pos: position{line: 779, col: 5, offset: 23699},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 779, col: 5, offset: 23699},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 779, col: 14, offset: 23708},
																							expr: &choiceExpr{
																								pos: position{line: 779, col: 16, offset: 23710},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 12, offset: 129292},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3800, col: 12, offset: 129292},
																												expr: &charClassMatcher{
																													pos:        position{line: 3812, col: 36, offset: 129639},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																expr: &litMatcher{
																																	pos:        position{line: 3800, col: 16, offset: 129296},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3800, col: 22, offset: 129302},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3799, col: 12, offset: 129278},
																														expr: &anyMatcher{
																															line: 3799, col: 13, offset: 129279,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 779, col: 22, offset: 23716},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 790, col: 5, offset: 24048},
																				run: (*parser).callonBlock65,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 5, offset: 24048},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 790, col: 5, offset: 24048},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 790, col: 12, offset: 24055},
																								expr: &charClassMatcher{
																									pos:        position{line: 790, col: 12, offset: 24055},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 790, col: 29, offset: 24072},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 335, col: 5, offset: 10509},
														run: (*parser).callonBlock77,
														expr: &andExpr{
															pos: position{line: 335, col: 5, offset: 10509},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 32, offset: 9307},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 38, offset: 9313},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineBlock",
			pos:  position{line: 292, col: 1, offset: 9415},
			expr: &actionExpr{
				pos: position{line: 292, col: 16, offset: 9430},
				run: (*parser).callonInlineBlock1,
				expr: &seqExpr{
					pos: position{line: 292, col: 16, offset: 9430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 292, col: 16, offset: 9430},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 308, col: 19, offset: 9877},
								run: (*parser).callonInlineBlock4,
								expr: &seqExpr{
									pos: position{line: 308, col: 19, offset: 9877},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 308, col: 19, offset: 9877},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 308, col: 27, offset: 9885},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 333, col: 14, offset: 10458},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 333, col: 14, offset: 10458},
														run: (*parser).callonInlineBlock9,
														expr: &seqExpr{
															pos: position{line: 333, col: 14, offset: 10458},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 333, col: 14, offset: 10458},
																	expr: &litMatcher{
																		pos:        position{line: 333, col: 14, offset: 10458},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 333, col: 19, offset: 10463},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 777, col: 14, offset: 23657},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 777, col: 14, offset: 23657},
																				run: (*parser).callonInlineBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 777, col: 14, offset: 23657},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 763, col: 10, offset: 23102},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 763, col: 10, offset: 23102},
																								run: (*parser).callonInlineBlock18,
																								expr: &labeledExpr{
																									pos:   position{line: 763, col: 10, offset: 23102},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2414, col: 17, offset: 81960},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2397, col: 20, offset: 81715},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2414, col: 26, offset: 81969},
																												expr: &charClassMatcher{
																													pos:        position{line: 2397, col: 20, offset: 81715},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 765, col: 5, offset: 23196},
																								run: (*parser).callonInlineBlock24,
																								expr: &seqExpr{
																									pos: position{line: 765, col: 5, offset: 23196},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 765, col: 5, offset: 23196},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 765, col: 13, offset: 23204},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 765, col: 13, offset: 23204},
																														expr: &litMatcher{
																															pos:        position{line: 765, col: 13, offset: 23204},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 765, col: 18, offset: 23209},
																														expr: &choiceExpr{
																															pos: position{line: 765, col: 19, offset: 23210},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 765, col: 19, offset: 23210},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 19, offset: 23210},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 28, offset: 23219},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 765, col: 38, offset: 23229},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 765, col: 49, offset: 23240},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3803, col: 8, offset: 129341},
																												run: (*parser).callonInlineBlock37,
																												expr: &choiceExpr{
																													pos: position{line: 3803, col: 9, offset: 129342},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															expr: &anyMatcher{
																																line: 3803, col: 10, offset: 129343,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3803, col: 14, offset: 129347},
																															expr: &anyMatcher{
																																line: 3803, col: 15, offset: 129348,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 779, col: 5, offset: 23699},
																				run: (*parser).callonInlineBlock43,
																				expr: &seqExpr{
																					pos: position{line: 779, col: 5, offset: 23699},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 779, col: 5, offset: 23699},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonInlineBlock46,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 779, col: 14, offset: 23708},
																							expr: &choiceExpr{
																								pos: position{line: 779, col: 16, offset: 23710},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 12, offset: 129292},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3800, col: 12, offset: 129292},
																												expr: &charClassMatcher{
																													pos:        position{line: 3812, col: 36, offset: 129639},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																expr: &litMatcher{
																																	pos:        position{line: 3800, col: 16, offset: 129296},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3800, col: 22, offset: 129302},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3799, col: 12, offset: 129278},
																														expr: &anyMatcher{
																															line: 3799, col: 13, offset: 129279,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 779, col: 22, offset: 23716},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 790, col: 5, offset: 24048},
																				run: (*parser).callonInlineBlock65,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 5, offset: 24048},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 790, col: 5, offset: 24048},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 790, col: 12, offset: 24055},
																								expr: &charClassMatcher{
																									pos:        position{line: 790, col: 12, offset: 24055},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 790, col: 29, offset: 24072},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonInlineBlock71,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 335, col: 5, offset: 10509},
														run: (*parser).callonInlineBlock77,
														expr: &andExpr{
															pos: position{line: 335, col: 5, offset: 10509},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 38, offset: 9452},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 45, offset: 9459},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "Prepend",
			pos:  position{line: 297, col: 1, offset: 9574},
			expr: &actionExpr{
				pos: position{line: 297, col: 12, offset: 9585},
				run: (*parser).callonPrepend1,
				expr: &seqExpr{
					pos: position{line: 297, col: 12, offset: 9585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 297, col: 12, offset: 9585},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 316, col: 21, offset: 10071},
								run: (*parser).callonPrepend4,
								expr: &seqExpr{
									pos: position{line: 316, col: 21, offset: 10071},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 316, col: 21, offset: 10071},
											val:        "prepend",
											ignoreCase: false,
											want:       "\"prepend\"",
										},
										&labeledExpr{
											pos:   position{line: 316, col: 31, offset: 10081},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 333, col: 14, offset: 10458},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 333, col: 14, offset: 10458},
														run: (*parser).callonPrepend9,
														expr: &seqExpr{
															pos: position{line: 333, col: 14, offset: 10458},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 333, col: 14, offset: 10458},
																	expr: &litMatcher{
																		pos:        position{line: 333, col: 14, offset: 10458},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 333, col: 19, offset: 10463},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 777, col: 14, offset: 23657},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 777, col: 14, offset: 23657},
																				run: (*parser).callonPrepend15,
																				expr: &labeledExpr{
																					pos:   position{line: 777, col: 14, offset: 23657},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 763, col: 10, offset: 23102},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 763, col: 10, offset: 23102},
																								run: (*parser).callonPrepend18,
																								expr: &labeledExpr{
																									pos:   position{line: 763, col: 10, offset: 23102},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2414, col: 17, offset: 81960},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2397, col: 20, offset: 81715},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2414, col: 26, offset: 81969},
																												expr: &charClassMatcher{
																													pos:        position{line: 2397, col: 20, offset: 81715},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 765, col: 5, offset: 23196},
																								run: (*parser).callonPrepend24,
																								expr: &seqExpr{
																									pos: position{line: 765, col: 5, offset: 23196},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 765, col: 5, offset: 23196},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 765, col: 13, offset: 23204},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 765, col: 13, offset: 23204},
																														expr: &litMatcher{
																															pos:        position{line: 765, col: 13, offset: 23204},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 765, col: 18, offset: 23209},
																														expr: &choiceExpr{
																															pos: position{line: 765, col: 19, offset: 23210},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 765, col: 19, offset: 23210},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 19, offset: 23210},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 28, offset: 23219},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 765, col: 38, offset: 23229},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 765, col: 49, offset: 23240},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3803, col: 8, offset: 129341},
																												run: (*parser).callonPrepend37,
																												expr: &choiceExpr{
																													pos: position{line: 3803, col: 9, offset: 129342},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															expr: &anyMatcher{
																																line: 3803, col: 10, offset: 129343,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3803, col: 14, offset: 129347},
																															expr: &anyMatcher{
																																line: 3803, col: 15, offset: 129348,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 779, col: 5, offset: 23699},
																				run: (*parser).callonPrepend43,
																				expr: &seqExpr{
																					pos: position{line: 779, col: 5, offset: 23699},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 779, col: 5, offset: 23699},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonPrepend46,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 779, col: 14, offset: 23708},
																							expr: &choiceExpr{
																								pos: position{line: 779, col: 16, offset: 23710},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 12, offset: 129292},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3800, col: 12, offset: 129292},
																												expr: &charClassMatcher{
																													pos:        position{line: 3812, col: 36, offset: 129639},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																expr: &litMatcher{
																																	pos:        position{line: 3800, col: 16, offset: 129296},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3800, col: 22, offset: 129302},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3799, col: 12, offset: 129278},
																														expr: &anyMatcher{
																															line: 3799, col: 13, offset: 129279,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 779, col: 22, offset: 23716},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 790, col: 5, offset: 24048},
																				run: (*parser).callonPrepend65,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 5, offset: 24048},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 790, col: 5, offset: 24048},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 790, col: 12, offset: 24055},
																								expr: &charClassMatcher{
																									pos:        position{line: 790, col: 12, offset: 24055},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 790, col: 29, offset: 24072},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonPrepend71,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 335, col: 5, offset: 10509},
														run: (*parser).callonPrepend77,
														expr: &andExpr{
															pos: position{line: 335, col: 5, offset: 10509},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 36, offset: 9609},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 42, offset: 9615},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "Append",
			pos:  position{line: 302, col: 1, offset: 9717},
			expr: &actionExpr{
				pos: position{line: 302, col: 11, offset: 9727},
				run: (*parser).callonAppend1,
				expr: &seqExpr{
					pos: position{line: 302, col: 11, offset: 9727},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 302, col: 11, offset: 9727},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 324, col: 20, offset: 10268},
								run: (*parser).callonAppend4,
								expr: &seqExpr{
									pos: position{line: 324, col: 20, offset: 10268},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 324, col: 20, offset: 10268},
											val:        "append",
											ignoreCase: false,
											want:       "\"append\"",
										},
										&labeledExpr{
											pos:   position{line: 324, col: 29, offset: 10277},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 333, col: 14, offset: 10458},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 333, col: 14, offset: 10458},
														run: (*parser).callonAppend9,
														expr: &seqExpr{
															pos: position{line: 333, col: 14, offset: 10458},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 333, col: 14, offset: 10458},
																	expr: &litMatcher{
																		pos:        position{line: 333, col: 14, offset: 10458},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 333, col: 19, offset: 10463},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 777, col: 14, offset: 23657},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 777, col: 14, offset: 23657},
																				run: (*parser).callonAppend15,
																				expr: &labeledExpr{
																					pos:   position{line: 777, col: 14, offset: 23657},
																					label: "identI",
																					expr: &choiceExpr{
																						pos: position{line: 763, col: 10, offset: 23102},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 763, col: 10, offset: 23102},
																								run: (*parser).callonAppend18,
																								expr: &labeledExpr{
																									pos:   position{line: 763, col: 10, offset: 23102},
																									label: "identI",
																									expr: &seqExpr{
																										pos: position{line: 2414, col: 17, offset: 81960},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 2397, col: 20, offset: 81715},
																												val:        "[_\\pL]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2414, col: 26, offset: 81969},
																												expr: &charClassMatcher{
																													pos:        position{line: 2397, col: 20, offset: 81715},
																													val:        "[_\\pL\\pNd]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 765, col: 5, offset: 23196},
																								run: (*parser).callonAppend24,
																								expr: &seqExpr{
																									pos: position{line: 765, col: 5, offset: 23196},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 765, col: 5, offset: 23196},
																											label: "identI",
																											expr: &seqExpr{
																												pos: position{line: 765, col: 13, offset: 23204},
																												exprs: []interface{}{
																													&zeroOrOneExpr{
																														pos: position{line: 765, col: 13, offset: 23204},
																														expr: &litMatcher{
																															pos:        position{line: 765, col: 13, offset: 23204},
																															val:        "$",
																															ignoreCase: false,
																															want:       "\"$\"",
																														},
																													},
																													&oneOrMoreExpr{
																														pos: position{line: 765, col: 18, offset: 23209},
																														expr: &choiceExpr{
																															pos: position{line: 765, col: 19, offset: 23210},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 765, col: 19, offset: 23210},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 19, offset: 23210},
																																			val:        "[\\pNd]",
																																			classes:    []*unicode.RangeTable{rangeTable("Nd")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 765, col: 28, offset: 23219},
																																			val:        "[_-\\pL]",
																																			chars:      []rune{'_', '-'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 765, col: 38, offset: 23229},
																																	val:        "[_-\\pL]",
																																	chars:      []rune{'_', '-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 765, col: 49, offset: 23240},
																											label: "endPosI",
																											expr: &actionExpr{
																												pos: position{line: 3803, col: 8, offset: 129341},
																												run: (*parser).callonAppend37,
																												expr: &choiceExpr{
																													pos: position{line: 3803, col: 9, offset: 129342},
																													alternatives: []interface{}{
																														&andExpr{
																															pos: position{line: 3803, col: 9, offset: 129342},
																															expr: &anyMatcher{
																																line: 3803, col: 10, offset: 129343,
																															},
																														},
																														&notExpr{
																															pos: position{line: 3803, col: 14, offset: 129347},
																															expr: &anyMatcher{
																																line: 3803, col: 15, offset: 129348,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 779, col: 5, offset: 23699},
																				run: (*parser).callonAppend43,
																				expr: &seqExpr{
																					pos: position{line: 779, col: 5, offset: 23699},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 779, col: 5, offset: 23699},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonAppend46,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 779, col: 14, offset: 23708},
																							expr: &choiceExpr{
																								pos: position{line: 779, col: 16, offset: 23710},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 12, offset: 129292},
																										exprs: []interface{}{
																											&zeroOrMoreExpr{
																												pos: position{line: 3800, col: 12, offset: 129292},
																												expr: &charClassMatcher{
																													pos:        position{line: 3812, col: 36, offset: 129639},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												alternatives: []interface{}{
																													&seqExpr{
																														pos: position{line: 3800, col: 16, offset: 129296},
																														exprs: []interface{}{
																															&zeroOrOneExpr{
																																pos: position{line: 3800, col: 16, offset: 129296},
																																expr: &litMatcher{
																																	pos:        position{line: 3800, col: 16, offset: 129296},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 3800, col: 22, offset: 129302},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3799, col: 12, offset: 129278},
																														expr: &anyMatcher{
																															line: 3799, col: 13, offset: 129279,
																														},
																													},
																												},
																											},
																										},
																									},
																									&charClassMatcher{
																										pos:        position{line: 779, col: 22, offset: 23716},
																										val:        "[:!=()]",
																										chars:      []rune{':', '!', '=', '(', ')'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 790, col: 5, offset: 24048},
																				run: (*parser).callonAppend65,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 5, offset: 24048},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 790, col: 5, offset: 24048},
																							label: "identI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 790, col: 12, offset: 24055},
																								expr: &charClassMatcher{
																									pos:        position{line: 790, col: 12, offset: 24055},
																									val:        "[^ \\t\\r\\n:!=()]",
																									chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 790, col: 29, offset: 24072},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonAppend71,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 335, col: 5, offset: 10509},
														run: (*parser).callonAppend77,
														expr: &andExpr{
															pos: position{line: 335, col: 5, offset: 10509},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 34, offset: 9750},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 40, offset: 9756},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "BlockExpansion",
			pos:  position{line: 350, col: 1, offset: 10956},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 10974},
				run: (*parser).callonBlockExpansion1,
				expr: &seqExpr{
					pos: position{line: 350, col: 19, offset: 10974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 19, offset: 10974},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 23, offset: 10978},
							label: "sI",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 26, offset: 10981},
								name: "blockExpansionItem",
							},
						},
					},
				},
			},
		},
		{
			name: "blockExpansionItem",
			pos:  position{line: 357, col: 1, offset: 11109},
			expr: &choiceExpr{
				pos: position{line: 357, col: 23, offset: 11131},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 357, col: 23, offset: 11131},
						name: "InlineArrowBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 357, col: 42, offset: 11150},
						name: "spacedBlockExpansionItem",
					},
					&actionExpr{
						pos: position{line: 403, col: 22, offset: 12505},
						run: (*parser).callonblockExpansionItem4,
						expr: &seqExpr{
							pos: position{line: 403, col: 22, offset: 12505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 403, col: 22, offset: 12505},
									label: "lineI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 403, col: 28, offset: 12511},
										expr: &charClassMatcher{
											pos:        position{line: 3801, col: 12, offset: 129325},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "spacedBlockExpansionItem",
			pos:  position{line: 359, col: 1, offset: 11196},
			expr: &choiceExpr{
				pos: position{line: 359, col: 29, offset: 11224},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 29, offset: 11224},
						run: (*parser).callonspacedBlockExpansionItem2,
						expr: &seqExpr{
							pos: position{line: 359, col: 29, offset: 11224},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 359, col: 29, offset: 11224},
									expr: &litMatcher{
										pos:        position{line: 359, col: 29, offset: 11224},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 359, col: 34, offset: 11229},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 37, offset: 11232},
										name: "_spacedBlockExpansionItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 11283},
						run: (*parser).callonspacedBlockExpansionItem8,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 11283},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 361, col: 5, offset: 11283},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonspacedBlockExpansionItem11,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 361, col: 14, offset: 11292},
									label: "sI",
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 17, offset: 11295},
										name: "_spacedBlockExpansionItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "_spacedBlockExpansionItem",
			pos:  position{line: 399, col: 1, offset: 12258},
			expr: &choiceExpr{
				pos: position{line: 399, col: 30, offset: 12287},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 399, col: 30, offset: 12287},
						name: "InlineBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 399, col: 45, offset: 12302},
						name: "InlineAnd",
					},
					&ruleRefExpr{
						pos:  position{line: 399, col: 57, offset: 12314},
						name: "InlineMixinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 399, col: 75, offset: 12332},
						name: "Return",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 30, offset: 12370},
						name: "InlineIf",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 41, offset: 12381},
						name: "InlineIfBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 400, col: 57, offset: 12397},
						name: "InlineFor",
					},
					&actionExpr{
						pos: position{line: 2892, col: 12, offset: 100013},
						run: (*parser).callon_spacedBlockExpansionItem9,
						expr: &seqExpr{
							pos: position{line: 2892, col: 12, offset: 100013},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2892, col: 12, offset: 100013},
									val:        "include",
									ignoreCase: false,
									want:       "\"include\"",
								},
								&labeledExpr{
									pos:   position{line: 2892, col: 22, offset: 100023},
									label: "pathI",
									expr: &choiceExpr{
										pos: position{line: 3227, col: 18, offset: 110992},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3227, col: 18, offset: 110992},
												run: (*parser).callon_spacedBlockExpansionItem14,
												expr: &seqExpr{
													pos: position{line: 3227, col: 18, offset: 110992},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 3227, col: 18, offset: 110992},
															expr: &litMatcher{
																pos:        position{line: 3227, col: 18, offset: 110992},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3227, col: 23, offset: 110997},
															label: "sI",
															expr: &choiceExpr{
																pos: position{line: 826, col: 11, offset: 25202},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 832, col: 14, offset: 25289},
																		run: (*parser).callon_spacedBlockExpansionItem20,
																		expr: &seqExpr{
																			pos: position{line: 832, col: 14, offset: 25289},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 832, col: 14, offset: 25289},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 832, col: 18, offset: 25293},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 832, col: 23, offset: 25298},
																						expr: &charClassMatcher{
																							pos:        position{line: 2751, col: 27, offset: 95033},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 832, col: 47, offset: 25322},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 834, col: 5, offset: 25414},
																		run: (*parser).callon_spacedBlockExpansionItem27,
																		expr: &seqExpr{
																			pos: position{line: 834, col: 5, offset: 25414},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 834, col: 5, offset: 25414},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 834, col: 9, offset: 25418},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 834, col: 14, offset: 25423},
																						expr: &charClassMatcher{
																							pos:        position{line: 2751, col: 27, offset: 95033},
																							val:        "[^\\n`]",
																							chars:      []rune{'\n', '`'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 834, col: 38, offset: 25447},
																					expr: &seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 853, col: 22, offset: 25851},
																		run: (*parser).callon_spacedBlockExpansionItem44,
																		expr: &seqExpr{
																			pos: position{line: 853, col: 22, offset: 25851},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 853, col: 22, offset: 25851},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 853, col: 26, offset: 25855},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 853, col: 31, offset: 25860},
																						expr: &choiceExpr{
																							pos: position{line: 853, col: 32, offset: 25861},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2490, col: 24, offset: 84696},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2490, col: 24, offset: 84696},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2491, col: 24, offset: 84763},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2491, col: 24, offset: 84763},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2492, col: 5, offset: 84800},
																									run: (*parser).callon_spacedBlockExpansionItem59,
																									expr: &seqExpr{
																										pos: position{line: 2492, col: 5, offset: 84800},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2492, col: 5, offset: 84800},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 14, offset: 84809},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 26, offset: 84821},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2509, col: 19, offset: 85438},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2509, col: 19, offset: 85438},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2510, col: 5, offset: 85497},
																									run: (*parser).callon_spacedBlockExpansionItem72,
																									expr: &seqExpr{
																										pos: position{line: 2510, col: 5, offset: 85497},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2510, col: 5, offset: 85497},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 14, offset: 85506},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 26, offset: 85518},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 38, offset: 85530},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 50, offset: 85542},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2539, col: 16, offset: 86678},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2539, col: 16, offset: 86678},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2540, col: 5, offset: 86781},
																									run: (*parser).callon_spacedBlockExpansionItem93,
																									expr: &seqExpr{
																										pos: position{line: 2540, col: 5, offset: 86781},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2540, col: 5, offset: 86781},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 14, offset: 86790},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 26, offset: 86802},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 38, offset: 86814},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 50, offset: 86826},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 62, offset: 86838},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 74, offset: 86850},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 86, offset: 86862},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 98, offset: 86874},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2767, col: 36, offset: 95811},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2767, col: 36, offset: 95811},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2767, col: 41, offset: 95816},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2765, col: 38, offset: 95703},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2654, col: 37, offset: 91461},
																									run: (*parser).callon_spacedBlockExpansionItem116,
																									expr: &seqExpr{
																										pos: position{line: 2654, col: 37, offset: 91461},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2654, col: 37, offset: 91461},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2678, col: 5, offset: 92478},
																									run: (*parser).callon_spacedBlockExpansionItem127,
																									expr: &seqExpr{
																										pos: position{line: 2678, col: 5, offset: 92478},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2678, col: 5, offset: 92478},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2699, col: 5, offset: 93320},
																									run: (*parser).callon_spacedBlockExpansionItem134,
																									expr: &seqExpr{
																										pos: position{line: 2699, col: 5, offset: 93320},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2699, col: 5, offset: 93320},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2717, col: 5, offset: 94006},
																									run: (*parser).callon_spacedBlockExpansionItem139,
																									expr: &seqExpr{
																										pos: position{line: 2717, col: 5, offset: 94006},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2717, col: 5, offset: 94006},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2717, col: 10, offset: 94011},
																												expr: &charClassMatcher{
																													pos:        position{line: 3801, col: 12, offset: 129325},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 853, col: 115, offset: 25944},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 855, col: 5, offset: 26036},
																		run: (*parser).callon_spacedBlockExpansionItem145,
																		expr: &seqExpr{
																			pos: position{line: 855, col: 5, offset: 26036},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 855, col: 5, offset: 26036},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 855, col: 9, offset: 26040},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 855, col: 14, offset: 26045},
																						expr: &choiceExpr{
																							pos: position{line: 855, col: 15, offset: 26046},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2490, col: 24, offset: 84696},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2490, col: 24, offset: 84696},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2407, col: 19, offset: 81885},
																											val:        "[0-7]",
																											ranges:     []rune{'0', '7'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2491, col: 24, offset: 84763},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2491, col: 24, offset: 84763},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2492, col: 5, offset: 84800},
																									run: (*parser).callon_spacedBlockExpansionItem160,
																									expr: &seqExpr{
																										pos: position{line: 2492, col: 5, offset: 84800},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2492, col: 5, offset: 84800},
																												val:        "\\x",
																												ignoreCase: false,
																												want:       "\"\\\\x\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 14, offset: 84809},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2492, col: 26, offset: 84821},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2509, col: 19, offset: 85438},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2509, col: 19, offset: 85438},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2510, col: 5, offset: 85497},
																									run: (*parser).callon_spacedBlockExpansionItem173,
																									expr: &seqExpr{
																										pos: position{line: 2510, col: 5, offset: 85497},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2510, col: 5, offset: 85497},
																												val:        "\\u",
																												ignoreCase: false,
																												want:       "\"\\\\u\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 14, offset: 85506},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 26, offset: 85518},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 38, offset: 85530},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2510, col: 50, offset: 85542},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2539, col: 16, offset: 86678},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2539, col: 16, offset: 86678},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2540, col: 5, offset: 86781},
																									run: (*parser).callon_spacedBlockExpansionItem194,
																									expr: &seqExpr{
																										pos: position{line: 2540, col: 5, offset: 86781},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2540, col: 5, offset: 86781},
																												val:        "\\U",
																												ignoreCase: false,
																												want:       "\"\\\\U\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 14, offset: 86790},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 26, offset: 86802},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 38, offset: 86814},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 50, offset: 86826},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 62, offset: 86838},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 74, offset: 86850},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 86, offset: 86862},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2540, col: 98, offset: 86874},
																												expr: &charClassMatcher{
																													pos:        position{line: 2408, col: 19, offset: 81909},
																													val:        "[0-9A-Fa-f]",
																													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2767, col: 36, offset: 95811},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2767, col: 36, offset: 95811},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2767, col: 41, offset: 95816},
																											val:        "[abfnrtv\\\\\"]",
																											chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 2765, col: 38, offset: 95703},
																									val:        "[^\"\\\\\\n]",
																									chars:      []rune{'"', '\\', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																								&actionExpr{
																									pos: position{line: 2654, col: 37, offset: 91461},
																									run: (*parser).callon_spacedBlockExpansionItem217,
																									expr: &seqExpr{
																										pos: position{line: 2654, col: 37, offset: 91461},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2654, col: 37, offset: 91461},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2678, col: 5, offset: 92478},
																									run: (*parser).callon_spacedBlockExpansionItem228,
																									expr: &seqExpr{
																										pos: position{line: 2678, col: 5, offset: 92478},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2678, col: 5, offset: 92478},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2699, col: 5, offset: 93320},
																									run: (*parser).callon_spacedBlockExpansionItem235,
																									expr: &seqExpr{
																										pos: position{line: 2699, col: 5, offset: 93320},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2699, col: 5, offset: 93320},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2717, col: 5, offset: 94006},
																									run: (*parser).callon_spacedBlockExpansionItem240,
																									expr: &seqExpr{
																										pos: position{line: 2717, col: 5, offset: 94006},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2717, col: 5, offset: 94006},
																												val:        "\\",
																												ignoreCase: false,
																												want:       "\"\\\\\"",
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 2717, col: 10, offset: 94011},
																												expr: &charClassMatcher{
																													pos:        position{line: 3801, col: 12, offset: 129325},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 855, col: 98, offset: 26129},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3803, col: 8, offset: 129341},
																						run: (*parser).callon_spacedBlockExpansionItem246,
																						expr: &choiceExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									expr: &anyMatcher{
																										line: 3803, col: 10, offset: 129343,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3803, col: 14, offset: 129347},
																									expr: &anyMatcher{
																										line: 3803, col: 15, offset: 129348,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andExpr{
																					pos: position{line: 855, col: 110, offset: 26141},
																					expr: &seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 874, col: 22, offset: 26547},
																		run: (*parser).callon_spacedBlockExpansionItem263,
																		expr: &seqExpr{
																			pos: position{line: 874, col: 22, offset: 26547},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 874, col: 22, offset: 26547},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 874, col: 27, offset: 26552},
																					label: "strI",
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 874, col: 32, offset: 26557},
																						expr: &charClassMatcher{
																							pos:        position{line: 874, col: 32, offset: 26557},
																							val:        "[^\\\\r\\n]",
																							chars:      []rune{'\'', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 874, col: 42, offset: 26567},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 874, col: 47, offset: 26572},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3803, col: 8, offset: 129341},
																						run: (*parser).callon_spacedBlockExpansionItem271,
																						expr: &choiceExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									expr: &anyMatcher{
																										line: 3803, col: 10, offset: 129343,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3803, col: 14, offset: 129347},
																									expr: &anyMatcher{
																										line: 3803, col: 15, offset: 129348,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3229, col: 5, offset: 111032},
												run: (*parser).callon_spacedBlockExpansionItem277,
												expr: &seqExpr{
													pos: position{line: 3229, col: 5, offset: 111032},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3229, col: 5, offset: 111032},
															expr: &litMatcher{
																pos:        position{line: 3229, col: 5, offset: 111032},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&labeledExpr{
															pos:   position{line: 3229, col: 10, offset: 111037},
															label: "pathI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3229, col: 16, offset: 111043},
																expr: &charClassMatcher{
																	pos:        position{line: 3801, col: 12, offset: 129325},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 401, col: 30, offset: 12448},
						name: "InlineElement",
					},
					&ruleRefExpr{
						pos:  position{line: 401, col: 46, offset: 12464},
						name: "InlineDivShorthand",
					},
				},
			},
		},
		{
			name: "Codes",
			pos:  position{line: 433, col: 1, offset: 13403},
			expr: &actionExpr{
				pos: position{line: 433, col: 10, offset: 13412},
				run: (*parser).callonCodes1,
				expr: &labeledExpr{
					pos:   position{line: 433, col: 10, offset: 13412},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 433, col: 17, offset: 13419},
						expr: &seqExpr{
							pos: position{line: 433, col: 18, offset: 13420},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 433, col: 18, offset: 13420},
									expr: &oneOrMoreExpr{
										pos: position{line: 3814, col: 36, offset: 129726},
										expr: &seqExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 27, offset: 13429},
									name: "Code",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 437, col: 1, offset: 13500},
			expr: &choiceExpr{
				pos: position{line: 437, col: 9, offset: 13508},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 437, col: 9, offset: 13508},
						run: (*parser).callonCode2,
						expr: &seqExpr{
							pos: position{line: 437, col: 9, offset: 13508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 9, offset: 13508},
									val:        "- ",
									ignoreCase: false,
									want:       "\"- \"",
								},
								&labeledExpr{
									pos:   position{line: 437, col: 14, offset: 13513},
									label: "firstLineI",
									expr: &actionExpr{
										pos: position{line: 463, col: 13, offset: 14343},
										run: (*parser).callonCode6,
										expr: &seqExpr{
											pos: position{line: 463, col: 13, offset: 14343},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 463, col: 13, offset: 14343},
													label: "code",
													expr: &oneOrMoreExpr{
														pos: position{line: 463, col: 18, offset: 14348},
														expr: &charClassMatcher{
															pos:        position{line: 3801, col: 12, offset: 129325},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 3800, col: 12, offset: 129292},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	expr: &litMatcher{
																		pos:        position{line: 3800, col: 16, offset: 129296},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3800, col: 22, offset: 129302},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3799, col: 12, offset: 129278},
															expr: &anyMatcher{
																line: 3799, col: 13, offset: 129279,
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 437, col: 34, offset: 13533},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 437, col: 51, offset: 13550},
										expr: &seqExpr{
											pos: position{line: 437, col: 52, offset: 13551},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 437, col: 52, offset: 13551},
													expr: &oneOrMoreExpr{
														pos: position{line: 3814, col: 36, offset: 129726},
														expr: &seqExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3814, col: 37, offset: 129727},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 437, col: 61, offset: 13560},
													name: "INDENTATION2",
												},
												&actionExpr{
													pos: position{line: 463, col: 13, offset: 14343},
													run: (*parser).callonCode32,
													expr: &seqExpr{
														pos: position{line: 463, col: 13, offset: 14343},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 463, col: 13, offset: 14343},
																label: "code",
																expr: &oneOrMoreExpr{
																	pos: position{line: 463, col: 18, offset: 14348},
																	expr: &charClassMatcher{
																		pos:        position{line: 3801, col: 12, offset: 129325},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																expr: &charClassMatcher{
																	pos:        position{line: 3812, col: 36, offset: 129639},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				expr: &litMatcher{
																					pos:        position{line: 3800, col: 16, offset: 129296},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3800, col: 22, offset: 129302},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3799, col: 12, offset: 129278},
																		expr: &anyMatcher{
																			line: 3799, col: 13, offset: 129279,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 5, offset: 13937},
						run: (*parser).callonCode46,
						expr: &seqExpr{
							pos: position{line: 450, col: 5, offset: 13937},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 450, col: 5, offset: 13937},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&labeledExpr{
									pos:   position{line: 450, col: 9, offset: 13941},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonCode50,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 467, col: 1, offset: 14434},
			expr: &choiceExpr{
				pos: position{line: 467, col: 14, offset: 14447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 467, col: 14, offset: 14447},
						run: (*parser).calloncondition2,
						expr: &seqExpr{
							pos: position{line: 467, col: 14, offset: 14447},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 467, col: 14, offset: 14447},
									expr: &litMatcher{
										pos:        position{line: 467, col: 14, offset: 14447},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 467, col: 19, offset: 14452},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 25, offset: 14458},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 14499},
						run: (*parser).calloncondition8,
						expr: &seqExpr{
							pos: position{line: 469, col: 5, offset: 14499},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 469, col: 5, offset: 14499},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).calloncondition11,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 469, col: 14, offset: 14508},
									expr: &seqExpr{
										pos: position{line: 3800, col: 12, offset: 129292},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												expr: &charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3800, col: 16, offset: 129296},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																expr: &litMatcher{
																	pos:        position{line: 3800, col: 16, offset: 129296},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3800, col: 22, offset: 129302},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3799, col: 12, offset: 129278},
														expr: &anyMatcher{
															line: 3799, col: 13, offset: 129279,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14791},
						run: (*parser).calloncondition28,
						expr: &labeledExpr{
							pos:   position{line: 478, col: 5, offset: 14791},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).calloncondition30,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "then",
			pos:  position{line: 509, col: 1, offset: 15684},
			expr: &choiceExpr{
				pos: position{line: 509, col: 9, offset: 15692},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 9, offset: 15692},
						run: (*parser).callonthen2,
						expr: &seqExpr{
							pos: position{line: 509, col: 9, offset: 15692},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 509, col: 13, offset: 15696},
									label: "scopeI",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 20, offset: 15703},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 15737},
						run: (*parser).callonthen15,
						expr: &labeledExpr{
							pos:   position{line: 511, col: 5, offset: 15737},
							label: "beI",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 9, offset: 15741},
								name: "BlockExpansion",
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15816},
						run: (*parser).callonthen18,
						expr: &seqExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 521, col: 5, offset: 16068},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 522, col: 6, offset: 16075},
								run: (*parser).callonthen30,
								expr: &oneOrMoreExpr{
									pos: position{line: 522, col: 6, offset: 16075},
									expr: &charClassMatcher{
										pos:        position{line: 522, col: 6, offset: 16075},
										val:        "[^:\\r\\n]",
										chars:      []rune{':', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 522, col: 40, offset: 16109},
								run: (*parser).callonthen33,
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 3, offset: 16384},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 540, col: 1, offset: 16585},
			expr: &actionExpr{
				pos: position{line: 540, col: 7, offset: 16591},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 540, col: 7, offset: 16591},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 7, offset: 16591},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&notExpr{
							pos: position{line: 540, col: 12, offset: 16596},
							expr: &litMatcher{
								pos:        position{line: 540, col: 13, offset: 16597},
								val:        " block",
								ignoreCase: false,
								want:       "\" block\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 22, offset: 16606},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 28, offset: 16612},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 38, offset: 16622},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 44, offset: 16628},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 49, offset: 16633},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 540, col: 58, offset: 16642},
								expr: &ruleRefExpr{
									pos:  position{line: 540, col: 58, offset: 16642},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 66, offset: 16650},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 540, col: 72, offset: 16656},
								expr: &ruleRefExpr{
									pos:  position{line: 540, col: 72, offset: 16656},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIf",
			pos:  position{line: 550, col: 1, offset: 16896},
			expr: &actionExpr{
				pos: position{line: 550, col: 13, offset: 16908},
				run: (*parser).callonInlineIf1,
				expr: &seqExpr{
					pos: position{line: 550, col: 13, offset: 16908},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 13, offset: 16908},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&notExpr{
							pos: position{line: 550, col: 18, offset: 16913},
							expr: &litMatcher{
								pos:        position{line: 550, col: 19, offset: 16914},
								val:        " block",
								ignoreCase: false,
								want:       "\" block\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 28, offset: 16923},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 34, offset: 16929},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 44, offset: 16939},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 50, offset: 16945},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 558, col: 1, offset: 17121},
			expr: &actionExpr{
				pos: position{line: 558, col: 11, offset: 17131},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 558, col: 11, offset: 17131},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 558, col: 11, offset: 17131},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3901, col: 17, offset: 133533},
							run: (*parser).callonElseIf11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3901, col: 17, offset: 133533},
								expr: &charClassMatcher{
									pos:        position{line: 3812, col: 36, offset: 129639},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3901, col: 41, offset: 133557},
							run: (*parser).callonElseIf14,
						},
						&choiceExpr{
							pos: position{line: 3953, col: 5, offset: 135467},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3953, col: 5, offset: 135467},
									run: (*parser).callonElseIf16,
								},
								&seqExpr{
									pos: position{line: 3955, col: 9, offset: 135550},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3955, col: 9, offset: 135550},
											run: (*parser).callonElseIf18,
										},
										&stateCodeExpr{
											pos: position{line: 3957, col: 7, offset: 135673},
											run: (*parser).callonElseIf19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3964, col: 9, offset: 136009},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3964, col: 9, offset: 136009},
											run: (*parser).callonElseIf21,
										},
										&andCodeExpr{
											pos: position{line: 3966, col: 7, offset: 136117},
											run: (*parser).callonElseIf22,
										},
										&choiceExpr{
											pos: position{line: 4019, col: 9, offset: 138452},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 4019, col: 9, offset: 138452},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4019, col: 9, offset: 138452},
															run: (*parser).callonElseIf25,
														},
														&andCodeExpr{
															pos: position{line: 4023, col: 11, offset: 138702},
															run: (*parser).callonElseIf26,
														},
														&stateCodeExpr{
															pos: position{line: 4089, col: 11, offset: 141908},
															run: (*parser).callonElseIf27,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4097, col: 13, offset: 142261},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4097, col: 13, offset: 142261},
															run: (*parser).callonElseIf29,
														},
														&andCodeExpr{
															pos: position{line: 4101, col: 11, offset: 142516},
															run: (*parser).callonElseIf30,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 32, offset: 17152},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonElseIf32,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 558, col: 41, offset: 17161},
							val:        "else if",
							ignoreCase: false,
							want:       "\"else if\"",
						},
						&labeledExpr{
							pos:   position{line: 558, col: 51, offset: 17171},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 57, offset: 17177},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 67, offset: 17187},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 73, offset: 17193},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 566, col: 1, offset: 17356},
			expr: &actionExpr{
				pos: position{line: 566, col: 9, offset: 17364},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 566, col: 9, offset: 17364},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 566, col: 9, offset: 17364},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3901, col: 17, offset: 133533},
							run: (*parser).callonElse11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3901, col: 17, offset: 133533},
								expr: &charClassMatcher{
									pos:        position{line: 3812, col: 36, offset: 129639},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3901, col: 41, offset: 133557},
							run: (*parser).callonElse14,
						},
						&choiceExpr{
							pos: position{line: 3953, col: 5, offset: 135467},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3953, col: 5, offset: 135467},
									run: (*parser).callonElse16,
								},
								&seqExpr{
									pos: position{line: 3955, col: 9, offset: 135550},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3955, col: 9, offset: 135550},
											run: (*parser).callonElse18,
										},
										&stateCodeExpr{
											pos: position{line: 3957, col: 7, offset: 135673},
											run: (*parser).callonElse19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3964, col: 9, offset: 136009},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3964, col: 9, offset: 136009},
											run: (*parser).callonElse21,
										},
										&andCodeExpr{
											pos: position{line: 3966, col: 7, offset: 136117},
											run: (*parser).callonElse22,
										},
										&choiceExpr{
											pos: position{line: 4019, col: 9, offset: 138452},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 4019, col: 9, offset: 138452},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4019, col: 9, offset: 138452},
															run: (*parser).callonElse25,
														},
														&andCodeExpr{
															pos: position{line: 4023, col: 11, offset: 138702},
															run: (*parser).callonElse26,
														},
														&stateCodeExpr{
															pos: position{line: 4089, col: 11, offset: 141908},
															run: (*parser).callonElse27,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4097, col: 13, offset: 142261},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4097, col: 13, offset: 142261},
															run: (*parser).callonElse29,
														},
														&andCodeExpr{
															pos: position{line: 4101, col: 11, offset: 142516},
															run: (*parser).callonElse30,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 566, col: 30, offset: 17385},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 37, offset: 17392},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 43, offset: 17398},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "IfBlock",
			pos:  position{line: 577, col: 1, offset: 17520},
			expr: &actionExpr{
				pos: position{line: 577, col: 12, offset: 17531},
				run: (*parser).callonIfBlock1,
				expr: &seqExpr{
					pos: position{line: 577, col: 12, offset: 17531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 577, col: 12, offset: 17531},
							val:        "if block",
							ignoreCase: false,
							want:       "\"if block\"",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 23, offset: 17542},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 333, col: 14, offset: 10458},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 333, col: 14, offset: 10458},
										run: (*parser).callonIfBlock6,
										expr: &seqExpr{
											pos: position{line: 333, col: 14, offset: 10458},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 333, col: 14, offset: 10458},
													expr: &litMatcher{
														pos:        position{line: 333, col: 14, offset: 10458},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 333, col: 19, offset: 10463},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 777, col: 14, offset: 23657},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 777, col: 14, offset: 23657},
																run: (*parser).callonIfBlock12,
																expr: &labeledExpr{
																	pos:   position{line: 777, col: 14, offset: 23657},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 763, col: 10, offset: 23102},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 763, col: 10, offset: 23102},
																				run: (*parser).callonIfBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 763, col: 10, offset: 23102},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2414, col: 17, offset: 81960},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2397, col: 20, offset: 81715},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2414, col: 26, offset: 81969},
																								expr: &charClassMatcher{
																									pos:        position{line: 2397, col: 20, offset: 81715},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 765, col: 5, offset: 23196},
																				run: (*parser).callonIfBlock21,
																				expr: &seqExpr{
																					pos: position{line: 765, col: 5, offset: 23196},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 765, col: 5, offset: 23196},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 765, col: 13, offset: 23204},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 765, col: 13, offset: 23204},
																										expr: &litMatcher{
																											pos:        position{line: 765, col: 13, offset: 23204},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 765, col: 18, offset: 23209},
																										expr: &choiceExpr{
																											pos: position{line: 765, col: 19, offset: 23210},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 765, col: 19, offset: 23210},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 765, col: 19, offset: 23210},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 765, col: 28, offset: 23219},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 765, col: 38, offset: 23229},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 765, col: 49, offset: 23240},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonIfBlock34,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 779, col: 5, offset: 23699},
																run: (*parser).callonIfBlock40,
																expr: &seqExpr{
																	pos: position{line: 779, col: 5, offset: 23699},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 779, col: 5, offset: 23699},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonIfBlock43,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 779, col: 14, offset: 23708},
																			expr: &choiceExpr{
																				pos: position{line: 779, col: 16, offset: 23710},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 779, col: 22, offset: 23716},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 790, col: 5, offset: 24048},
																run: (*parser).callonIfBlock62,
																expr: &seqExpr{
																	pos: position{line: 790, col: 5, offset: 24048},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 790, col: 5, offset: 24048},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 790, col: 12, offset: 24055},
																				expr: &charClassMatcher{
																					pos:        position{line: 790, col: 12, offset: 24055},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 790, col: 29, offset: 24072},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonIfBlock68,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 335, col: 5, offset: 10509},
										run: (*parser).callonIfBlock74,
										expr: &andExpr{
											pos: position{line: 335, col: 5, offset: 10509},
											expr: &seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 39, offset: 17558},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 45, offset: 17564},
								name: "then",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 50, offset: 17569},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 577, col: 59, offset: 17578},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 59, offset: 17578},
									name: "ElseIfBlock",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 72, offset: 17591},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 78, offset: 17597},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 78, offset: 17597},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIfBlock",
			pos:  position{line: 587, col: 1, offset: 17837},
			expr: &actionExpr{
				pos: position{line: 587, col: 18, offset: 17854},
				run: (*parser).callonInlineIfBlock1,
				expr: &seqExpr{
					pos: position{line: 587, col: 18, offset: 17854},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 18, offset: 17854},
							val:        "if block",
							ignoreCase: false,
							want:       "\"if block\"",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 29, offset: 17865},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 333, col: 14, offset: 10458},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 333, col: 14, offset: 10458},
										run: (*parser).callonInlineIfBlock6,
										expr: &seqExpr{
											pos: position{line: 333, col: 14, offset: 10458},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 333, col: 14, offset: 10458},
													expr: &litMatcher{
														pos:        position{line: 333, col: 14, offset: 10458},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 333, col: 19, offset: 10463},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 777, col: 14, offset: 23657},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 777, col: 14, offset: 23657},
																run: (*parser).callonInlineIfBlock12,
																expr: &labeledExpr{
																	pos:   position{line: 777, col: 14, offset: 23657},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 763, col: 10, offset: 23102},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 763, col: 10, offset: 23102},
																				run: (*parser).callonInlineIfBlock15,
																				expr: &labeledExpr{
																					pos:   position{line: 763, col: 10, offset: 23102},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2414, col: 17, offset: 81960},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2397, col: 20, offset: 81715},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2414, col: 26, offset: 81969},
																								expr: &charClassMatcher{
																									pos:        position{line: 2397, col: 20, offset: 81715},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 765, col: 5, offset: 23196},
																				run: (*parser).callonInlineIfBlock21,
																				expr: &seqExpr{
																					pos: position{line: 765, col: 5, offset: 23196},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 765, col: 5, offset: 23196},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 765, col: 13, offset: 23204},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 765, col: 13, offset: 23204},
																										expr: &litMatcher{
																											pos:        position{line: 765, col: 13, offset: 23204},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 765, col: 18, offset: 23209},
																										expr: &choiceExpr{
																											pos: position{line: 765, col: 19, offset: 23210},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 765, col: 19, offset: 23210},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 765, col: 19, offset: 23210},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 765, col: 28, offset: 23219},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 765, col: 38, offset: 23229},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 765, col: 49, offset: 23240},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonInlineIfBlock34,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 779, col: 5, offset: 23699},
																run: (*parser).callonInlineIfBlock40,
																expr: &seqExpr{
																	pos: position{line: 779, col: 5, offset: 23699},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 779, col: 5, offset: 23699},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonInlineIfBlock43,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 779, col: 14, offset: 23708},
																			expr: &choiceExpr{
																				pos: position{line: 779, col: 16, offset: 23710},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 779, col: 22, offset: 23716},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 790, col: 5, offset: 24048},
																run: (*parser).callonInlineIfBlock62,
																expr: &seqExpr{
																	pos: position{line: 790, col: 5, offset: 24048},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 790, col: 5, offset: 24048},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 790, col: 12, offset: 24055},
																				expr: &charClassMatcher{
																					pos:        position{line: 790, col: 12, offset: 24055},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 790, col: 29, offset: 24072},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonInlineIfBlock68,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 335, col: 5, offset: 10509},
										run: (*parser).callonInlineIfBlock74,
										expr: &andExpr{
											pos: position{line: 335, col: 5, offset: 10509},
											expr: &seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 45, offset: 17881},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 51, offset: 17887},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIfBlock",
			pos:  position{line: 595, col: 1, offset: 18058},
			expr: &actionExpr{
				pos: position{line: 595, col: 16, offset: 18073},
				run: (*parser).callonElseIfBlock1,
				expr: &seqExpr{
					pos: position{line: 595, col: 16, offset: 18073},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 595, col: 16, offset: 18073},
							expr: &oneOrMoreExpr{
								pos: position{line: 3814, col: 36, offset: 129726},
								expr: &seqExpr{
									pos: position{line: 3814, col: 37, offset: 129727},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 3901, col: 17, offset: 133533},
							run: (*parser).callonElseIfBlock11,
							expr: &zeroOrMoreExpr{
								pos: position{line: 3901, col: 17, offset: 133533},
								expr: &charClassMatcher{
									pos:        position{line: 3812, col: 36, offset: 129639},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 3901, col: 41, offset: 133557},
							run: (*parser).callonElseIfBlock14,
						},
						&choiceExpr{
							pos: position{line: 3953, col: 5, offset: 135467},
							alternatives: []interface{}{
								&andCodeExpr{
									pos: position{line: 3953, col: 5, offset: 135467},
									run: (*parser).callonElseIfBlock16,
								},
								&seqExpr{
									pos: position{line: 3955, col: 9, offset: 135550},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3955, col: 9, offset: 135550},
											run: (*parser).callonElseIfBlock18,
										},
										&stateCodeExpr{
											pos: position{line: 3957, col: 7, offset: 135673},
											run: (*parser).callonElseIfBlock19,
										},
									},
								},
								&seqExpr{
									pos: position{line: 3964, col: 9, offset: 136009},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 3964, col: 9, offset: 136009},
											run: (*parser).callonElseIfBlock21,
										},
										&andCodeExpr{
											pos: position{line: 3966, col: 7, offset: 136117},
											run: (*parser).callonElseIfBlock22,
										},
										&choiceExpr{
											pos: position{line: 4019, col: 9, offset: 138452},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 4019, col: 9, offset: 138452},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4019, col: 9, offset: 138452},
															run: (*parser).callonElseIfBlock25,
														},
														&andCodeExpr{
															pos: position{line: 4023, col: 11, offset: 138702},
															run: (*parser).callonElseIfBlock26,
														},
														&stateCodeExpr{
															pos: position{line: 4089, col: 11, offset: 141908},
															run: (*parser).callonElseIfBlock27,
														},
													},
												},
												&seqExpr{
													pos: position{line: 4097, col: 13, offset: 142261},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 4097, col: 13, offset: 142261},
															run: (*parser).callonElseIfBlock29,
														},
														&andCodeExpr{
															pos: position{line: 4101, col: 11, offset: 142516},
															run: (*parser).callonElseIfBlock30,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 37, offset: 18094},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonElseIfBlock32,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 595, col: 46, offset: 18103},
							val:        "else if block",
							ignoreCase: false,
							want:       "\"else if block\"",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 62, offset: 18119},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 333, col: 14, offset: 10458},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 333, col: 14, offset: 10458},
										run: (*parser).callonElseIfBlock41,
										expr: &seqExpr{
											pos: position{line: 333, col: 14, offset: 10458},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 333, col: 14, offset: 10458},
													expr: &litMatcher{
														pos:        position{line: 333, col: 14, offset: 10458},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 333, col: 19, offset: 10463},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 777, col: 14, offset: 23657},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 777, col: 14, offset: 23657},
																run: (*parser).callonElseIfBlock47,
																expr: &labeledExpr{
																	pos:   position{line: 777, col: 14, offset: 23657},
																	label: "identI",
																	expr: &choiceExpr{
																		pos: position{line: 763, col: 10, offset: 23102},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 763, col: 10, offset: 23102},
																				run: (*parser).callonElseIfBlock50,
																				expr: &labeledExpr{
																					pos:   position{line: 763, col: 10, offset: 23102},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 2414, col: 17, offset: 81960},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2397, col: 20, offset: 81715},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2414, col: 26, offset: 81969},
																								expr: &charClassMatcher{
																									pos:        position{line: 2397, col: 20, offset: 81715},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 765, col: 5, offset: 23196},
																				run: (*parser).callonElseIfBlock56,
																				expr: &seqExpr{
																					pos: position{line: 765, col: 5, offset: 23196},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 765, col: 5, offset: 23196},
																							label: "identI",
																							expr: &seqExpr{
																								pos: position{line: 765, col: 13, offset: 23204},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 765, col: 13, offset: 23204},
																										expr: &litMatcher{
																											pos:        position{line: 765, col: 13, offset: 23204},
																											val:        "$",
																											ignoreCase: false,
																											want:       "\"$\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 765, col: 18, offset: 23209},
																										expr: &choiceExpr{
																											pos: position{line: 765, col: 19, offset: 23210},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 765, col: 19, offset: 23210},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 765, col: 19, offset: 23210},
																															val:        "[\\pNd]",
																															classes:    []*unicode.RangeTable{rangeTable("Nd")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&charClassMatcher{
																															pos:        position{line: 765, col: 28, offset: 23219},
																															val:        "[_-\\pL]",
																															chars:      []rune{'_', '-'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 765, col: 38, offset: 23229},
																													val:        "[_-\\pL]",
																													chars:      []rune{'_', '-'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 765, col: 49, offset: 23240},
																							label: "endPosI",
																							expr: &actionExpr{
																								pos: position{line: 3803, col: 8, offset: 129341},
																								run: (*parser).callonElseIfBlock69,
																								expr: &choiceExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									alternatives: []interface{}{
																										&andExpr{
																											pos: position{line: 3803, col: 9, offset: 129342},
																											expr: &anyMatcher{
																												line: 3803, col: 10, offset: 129343,
																											},
																										},
																										&notExpr{
																											pos: position{line: 3803, col: 14, offset: 129347},
																											expr: &anyMatcher{
																												line: 3803, col: 15, offset: 129348,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 779, col: 5, offset: 23699},
																run: (*parser).callonElseIfBlock75,
																expr: &seqExpr{
																	pos: position{line: 779, col: 5, offset: 23699},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 779, col: 5, offset: 23699},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonElseIfBlock78,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																		&andExpr{
																			pos: position{line: 779, col: 14, offset: 23708},
																			expr: &choiceExpr{
																				pos: position{line: 779, col: 16, offset: 23710},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3800, col: 12, offset: 129292},
																						exprs: []interface{}{
																							&zeroOrMoreExpr{
																								pos: position{line: 3800, col: 12, offset: 129292},
																								expr: &charClassMatcher{
																									pos:        position{line: 3812, col: 36, offset: 129639},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 3800, col: 16, offset: 129296},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3800, col: 16, offset: 129296},
																												expr: &litMatcher{
																													pos:        position{line: 3800, col: 16, offset: 129296},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 3800, col: 22, offset: 129302},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3799, col: 12, offset: 129278},
																										expr: &anyMatcher{
																											line: 3799, col: 13, offset: 129279,
																										},
																									},
																								},
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 779, col: 22, offset: 23716},
																						val:        "[:!=()]",
																						chars:      []rune{':', '!', '=', '(', ')'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 790, col: 5, offset: 24048},
																run: (*parser).callonElseIfBlock97,
																expr: &seqExpr{
																	pos: position{line: 790, col: 5, offset: 24048},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 790, col: 5, offset: 24048},
																			label: "identI",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 790, col: 12, offset: 24055},
																				expr: &charClassMatcher{
																					pos:        position{line: 790, col: 12, offset: 24055},
																					val:        "[^ \\t\\r\\n:!=()]",
																					chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 790, col: 29, offset: 24072},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonElseIfBlock103,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 335, col: 5, offset: 10509},
										run: (*parser).callonElseIfBlock109,
										expr: &andExpr{
											pos: position{line: 335, col: 5, offset: 10509},
											expr: &seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 78, offset: 18135},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 84, offset: 18141},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 614, col: 1, offset: 18630},
			expr: &actionExpr{
				pos: position{line: 614, col: 11, offset: 18640},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 614, col: 11, offset: 18640},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 614, col: 11, offset: 18640},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 20, offset: 18649},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 32, offset: 18661},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 614, col: 49, offset: 18678},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 55, offset: 18684},
								name: "switchBody",
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 639, col: 1, offset: 19301},
			expr: &choiceExpr{
				pos: position{line: 639, col: 21, offset: 19321},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 639, col: 21, offset: 19321},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 19371},
						run: (*parser).callonswitchComparator13,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 19371},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 641, col: 5, offset: 19371},
									expr: &litMatcher{
										pos:        position{line: 641, col: 5, offset: 19371},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 641, col: 10, offset: 19376},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 641, col: 16, offset: 19382},
										name: "IfExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 19463},
						run: (*parser).callonswitchComparator28,
						expr: &seqExpr{
							pos: position{line: 644, col: 5, offset: 19463},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 644, col: 5, offset: 19463},
									expr: &litMatcher{
										pos:        position{line: 644, col: 5, offset: 19463},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 644, col: 10, offset: 19468},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 644, col: 16, offset: 19474},
										name: "IfExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 644, col: 29, offset: 19487},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonswitchComparator35,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 644, col: 43, offset: 19501},
									expr: &charClassMatcher{
										pos:        position{line: 3801, col: 12, offset: 129325},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchBody",
			pos:  position{line: 655, col: 1, offset: 19824},
			expr: &actionExpr{
				pos: position{line: 655, col: 15, offset: 19838},
				run: (*parser).callonswitchBody1,
				expr: &seqExpr{
					pos: position{line: 655, col: 15, offset: 19838},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4288, col: 11, offset: 150265},
							run: (*parser).callonswitchBody3,
						},
						&labeledExpr{
							pos:   position{line: 655, col: 22, offset: 19845},
							label: "itms",
							expr: &zeroOrMoreExpr{
								pos: position{line: 655, col: 27, offset: 19850},
								expr: &seqExpr{
									pos: position{line: 655, col: 28, offset: 19851},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 655, col: 28, offset: 19851},
											expr: &oneOrMoreExpr{
												pos: position{line: 3814, col: 36, offset: 129726},
												expr: &seqExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 3901, col: 17, offset: 133533},
											run: (*parser).callonswitchBody15,
											expr: &zeroOrMoreExpr{
												pos: position{line: 3901, col: 17, offset: 133533},
												expr: &charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 3901, col: 41, offset: 133557},
											run: (*parser).callonswitchBody18,
										},
										&choiceExpr{
											pos: position{line: 3953, col: 5, offset: 135467},
											alternatives: []interface{}{
												&andCodeExpr{
													pos: position{line: 3953, col: 5, offset: 135467},
													run: (*parser).callonswitchBody20,
												},
												&seqExpr{
													pos: position{line: 3955, col: 9, offset: 135550},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3955, col: 9, offset: 135550},
															run: (*parser).callonswitchBody22,
														},
														&stateCodeExpr{
															pos: position{line: 3957, col: 7, offset: 135673},
															run: (*parser).callonswitchBody23,
														},
													},
												},
												&seqExpr{
													pos: position{line: 3964, col: 9, offset: 136009},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 3964, col: 9, offset: 136009},
															run: (*parser).callonswitchBody25,
														},
														&andCodeExpr{
															pos: position{line: 3966, col: 7, offset: 136117},
															run: (*parser).callonswitchBody26,
														},
														&choiceExpr{
															pos: position{line: 4019, col: 9, offset: 138452},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 4019, col: 9, offset: 138452},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 4019, col: 9, offset: 138452},
																			run: (*parser).callonswitchBody29,
																		},
																		&andCodeExpr{
																			pos: position{line: 4023, col: 11, offset: 138702},
																			run: (*parser).callonswitchBody30,
																		},
																		&stateCodeExpr{
																			pos: position{line: 4089, col: 11, offset: 141908},
																			run: (*parser).callonswitchBody31,
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 4097, col: 13, offset: 142261},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 4097, col: 13, offset: 142261},
																			run: (*parser).callonswitchBody33,
																		},
																		&andCodeExpr{
																			pos: position{line: 4101, col: 11, offset: 142516},
																			run: (*parser).callonswitchBody34,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 655, col: 49, offset: 19872},
											name: "switchBodyItem",
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4293, col: 11, offset: 150370},
							run: (*parser).callonswitchBody36,
						},
					},
				},
			},
		},
		{
			name: "switchBodyItem",
			pos:  position{line: 693, col: 1, offset: 21137},
			expr: &choiceExpr{
				pos: position{line: 693, col: 19, offset: 21155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 693, col: 19, offset: 21155},
						run: (*parser).callonswitchBodyItem2,
						expr: &labeledExpr{
							pos:   position{line: 693, col: 19, offset: 21155},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 693, col: 26, offset: 21162},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 693, col: 26, offset: 21162},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 33, offset: 21169},
										name: "Default",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 21219},
						run: (*parser).callonswitchBodyItem7,
						expr: &labeledExpr{
							pos:   position{line: 695, col: 5, offset: 21219},
							label: "caseI",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 11, offset: 21225},
								name: "BadCase",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 699, col: 1, offset: 21274},
			expr: &actionExpr{
				pos: position{line: 699, col: 9, offset: 21282},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 699, col: 9, offset: 21282},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 699, col: 9, offset: 21282},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&labeledExpr{
							pos:   position{line: 699, col: 16, offset: 21289},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 22, offset: 21295},
								name: "condition",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 32, offset: 21305},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 699, col: 38, offset: 21311},
								expr: &ruleRefExpr{
									pos:  position{line: 699, col: 38, offset: 21311},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 707, col: 1, offset: 21488},
			expr: &actionExpr{
				pos: position{line: 707, col: 12, offset: 21499},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 707, col: 12, offset: 21499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 707, col: 12, offset: 21499},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&labeledExpr{
							pos:   position{line: 707, col: 22, offset: 21509},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 707, col: 28, offset: 21515},
								expr: &ruleRefExpr{
									pos:  position{line: 707, col: 28, offset: 21515},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchThen",
			pos:  position{line: 714, col: 1, offset: 21638},
			expr: &choiceExpr{
				pos: position{line: 714, col: 15, offset: 21652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 714, col: 15, offset: 21652},
						run: (*parser).callonswitchThen2,
						expr: &seqExpr{
							pos: position{line: 714, col: 15, offset: 21652},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 714, col: 19, offset: 21656},
									label: "scopeI",
									expr: &ruleRefExpr{
										pos:  position{line: 714, col: 26, offset: 21663},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 21697},
						run: (*parser).callonswitchThen15,
						expr: &labeledExpr{
							pos:   position{line: 716, col: 5, offset: 21697},
							label: "beI",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 9, offset: 21701},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "BadCase",
			pos:  position{line: 720, col: 1, offset: 21775},
			expr: &actionExpr{
				pos: position{line: 720, col: 12, offset: 21786},
				run: (*parser).callonBadCase1,
				expr: &seqExpr{
					pos: position{line: 720, col: 12, offset: 21786},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 720, col: 12, offset: 21786},
							expr: &charClassMatcher{
								pos:        position{line: 3801, col: 12, offset: 129325},
								val:        "[^\\r\\n]",
								chars:      []rune{'\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 25, offset: 21799},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 720, col: 31, offset: 21805},
								expr: &ruleRefExpr{
									pos:  position{line: 720, col: 31, offset: 21805},
									name: "Body",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "For",
			pos:  position{line: 743, col: 1, offset: 22492},
			expr: &actionExpr{
				pos: position{line: 743, col: 8, offset: 22499},
				run: (*parser).callonFor1,
				expr: &seqExpr{
					pos: position{line: 743, col: 8, offset: 22499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 743, col: 8, offset: 22499},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&labeledExpr{
							pos:   position{line: 743, col: 14, offset: 22505},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 20, offset: 22511},
								name: "ForExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 743, col: 34, offset: 22525},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 40, offset: 22531},
								name: "then",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFor",
			pos:  position{line: 751, col: 1, offset: 22679},
			expr: &actionExpr{
				pos: position{line: 751, col: 14, offset: 22692},
				run: (*parser).callonInlineFor1,
				expr: &seqExpr{
					pos: position{line: 751, col: 14, offset: 22692},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 751, col: 14, offset: 22692},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 20, offset: 22698},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 26, offset: 22704},
								name: "SingleLineForExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 50, offset: 22728},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 56, offset: 22734},
								name: "BlockExpansion",
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComments",
			pos:  position{line: 907, col: 1, offset: 27663},
			expr: &actionExpr{
				pos: position{line: 907, col: 18, offset: 27680},
				run: (*parser).callonCorgiComments1,
				expr: &labeledExpr{
					pos:   position{line: 907, col: 18, offset: 27680},
					label: "commentsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 907, col: 28, offset: 27690},
						expr: &seqExpr{
							pos: position{line: 907, col: 29, offset: 27691},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 907, col: 29, offset: 27691},
									expr: &oneOrMoreExpr{
										pos: position{line: 3814, col: 36, offset: 129726},
										expr: &seqExpr{
											pos: position{line: 3814, col: 37, offset: 129727},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 907, col: 38, offset: 27700},
									name: "CorgiComment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CorgiComment",
			pos:  position{line: 911, col: 1, offset: 27791},
			expr: &actionExpr{
				pos: position{line: 911, col: 17, offset: 27807},
				run: (*parser).callonCorgiComment1,
				expr: &seqExpr{
					pos: position{line: 911, col: 17, offset: 27807},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 911, col: 17, offset: 27807},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&notExpr{
							pos: position{line: 911, col: 22, offset: 27812},
							expr: &litMatcher{
								pos:        position{line: 911, col: 23, offset: 27813},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 911, col: 27, offset: 27817},
							label: "linesI",
							expr: &ruleRefExpr{
								pos:  position{line: 911, col: 34, offset: 27824},
								name: "corgiCommentLines",
							},
						},
					},
				},
			},
		},
		{
			name: "corgiCommentLines",
			pos:  position{line: 918, col: 1, offset: 27963},
			expr: &choiceExpr{
				pos: position{line: 918, col: 22, offset: 27984},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 918, col: 22, offset: 27984},
						run: (*parser).calloncorgiCommentLines2,
						expr: &seqExpr{
							pos: position{line: 918, col: 22, offset: 27984},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 918, col: 22, offset: 27984},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 918, col: 29, offset: 27991},
									label: "linesI",
									expr: &ruleRefExpr{
										pos:  position{line: 918, col: 36, offset: 27998},
										name: "corgiCommentBlock",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 28045},
						run: (*parser).calloncorgiCommentLines17,
						expr: &labeledExpr{
							pos:   position{line: 920, col: 5, offset: 28045},
							label: "lineI",
							expr: &actionExpr{
								pos: position{line: 928, col: 21, offset: 28342},
								run: (*parser).calloncorgiCommentLines19,
								expr: &seqExpr{
									pos: position{line: 928, col: 21, offset: 28342},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 928, col: 21, offset: 28342},
											label: "commentI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 928, col: 30, offset: 28351},
												expr: &charClassMatcher{
													pos:        position{line: 3801, col: 12, offset: 129325},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 3800, col: 12, offset: 129292},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															expr: &litMatcher{
																pos:        position{line: 3800, col: 16, offset: 129296},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3800, col: 22, offset: 129302},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 3799, col: 12, offset: 129278},
													expr: &anyMatcher{
														line: 3799, col: 13, offset: 129279,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "corgiCommentBlock",
			pos:  position{line: 924, col: 1, offset: 28144},
			expr: &actionExpr{
				pos: position{line: 924, col: 22, offset: 28165},
				run: (*parser).calloncorgiCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 924, col: 22, offset: 28165},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4288, col: 11, offset: 150265},
							run: (*parser).calloncorgiCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 924, col: 29, offset: 28172},
							label: "linesI",
							expr: &oneOrMoreExpr{
								pos: position{line: 924, col: 36, offset: 28179},
								expr: &seqExpr{
									pos: position{line: 924, col: 37, offset: 28180},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 924, col: 37, offset: 28180},
											expr: &oneOrMoreExpr{
												pos: position{line: 3814, col: 36, offset: 129726},
												expr: &seqExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 924, col: 46, offset: 28189},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 928, col: 21, offset: 28342},
											run: (*parser).calloncorgiCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 928, col: 21, offset: 28342},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 928, col: 21, offset: 28342},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 928, col: 30, offset: 28351},
															expr: &charClassMatcher{
																pos:        position{line: 3801, col: 12, offset: 129325},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4293, col: 11, offset: 150370},
							run: (*parser).calloncorgiCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "HTMLComment",
			pos:  position{line: 977, col: 1, offset: 30024},
			expr: &actionExpr{
				pos: position{line: 977, col: 16, offset: 30039},
				run: (*parser).callonHTMLComment1,
				expr: &seqExpr{
					pos: position{line: 977, col: 16, offset: 30039},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 977, col: 16, offset: 30039},
							val:        "//-",
							ignoreCase: false,
							want:       "\"//-\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 977, col: 22, offset: 30045},
							expr: &litMatcher{
								pos:        position{line: 977, col: 22, offset: 30045},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 977, col: 27, offset: 30050},
							label: "linesI",
							expr: &choiceExpr{
								pos: position{line: 978, col: 5, offset: 30063},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 978, col: 5, offset: 30063},
										run: (*parser).callonHTMLComment8,
										expr: &seqExpr{
											pos: position{line: 978, col: 5, offset: 30063},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 3800, col: 12, offset: 129292},
													expr: &charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	expr: &litMatcher{
																		pos:        position{line: 3800, col: 16, offset: 129296},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3800, col: 22, offset: 129302},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 3799, col: 12, offset: 129278},
															expr: &anyMatcher{
																line: 3799, col: 13, offset: 129279,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 978, col: 9, offset: 30067},
													label: "linesI",
													expr: &ruleRefExpr{
														pos:  position{line: 978, col: 16, offset: 30074},
														name: "htmlCommentBlock",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 980, col: 9, offset: 30128},
										run: (*parser).callonHTMLComment21,
										expr: &labeledExpr{
											pos:   position{line: 980, col: 9, offset: 30128},
											label: "lineI",
											expr: &actionExpr{
												pos: position{line: 994, col: 20, offset: 30546},
												run: (*parser).callonHTMLComment23,
												expr: &seqExpr{
													pos: position{line: 994, col: 20, offset: 30546},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 994, col: 20, offset: 30546},
															label: "commentI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 994, col: 29, offset: 30555},
																expr: &charClassMatcher{
																	pos:        position{line: 3801, col: 12, offset: 129325},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3800, col: 12, offset: 129292},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			expr: &litMatcher{
																				pos:        position{line: 3800, col: 16, offset: 129296},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3800, col: 22, offset: 129302},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3799, col: 12, offset: 129278},
																	expr: &anyMatcher{
																		line: 3799, col: 13, offset: 129279,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "htmlCommentBlock",
			pos:  position{line: 990, col: 1, offset: 30352},
			expr: &actionExpr{
				pos: position{line: 990, col: 21, offset: 30372},
				run: (*parser).callonhtmlCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 990, col: 21, offset: 30372},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4288, col: 11, offset: 150265},
							run: (*parser).callonhtmlCommentBlock3,
						},
						&labeledExpr{
							pos:   position{line: 990, col: 28, offset: 30379},
							label: "linesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 990, col: 35, offset: 30386},
								expr: &seqExpr{
									pos: position{line: 990, col: 36, offset: 30387},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 990, col: 36, offset: 30387},
											expr: &oneOrMoreExpr{
												pos: position{line: 3814, col: 36, offset: 129726},
												expr: &seqExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 990, col: 45, offset: 30396},
											name: "INDENTATION_IGNORE_ADDITIONAL",
										},
										&actionExpr{
											pos: position{line: 994, col: 20, offset: 30546},
											run: (*parser).callonhtmlCommentBlock16,
											expr: &seqExpr{
												pos: position{line: 994, col: 20, offset: 30546},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 994, col: 20, offset: 30546},
														label: "commentI",
														expr: &zeroOrMoreExpr{
															pos: position{line: 994, col: 29, offset: 30555},
															expr: &charClassMatcher{
																pos:        position{line: 3801, col: 12, offset: 129325},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4293, col: 11, offset: 150370},
							run: (*parser).callonhtmlCommentBlock30,
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 1002, col: 1, offset: 30837},
			expr: &actionExpr{
				pos: position{line: 1002, col: 12, offset: 30848},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 12, offset: 30848},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1002, col: 12, offset: 30848},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2883, col: 16, offset: 99644},
								expr: &charClassMatcher{
									pos:        position{line: 2869, col: 27, offset: 98983},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 30, offset: 30866},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1002, col: 37, offset: 30873},
								expr: &ruleRefExpr{
									pos:  position{line: 1002, col: 37, offset: 30873},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 58, offset: 30894},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1002, col: 64, offset: 30900},
								expr: &litMatcher{
									pos:        position{line: 1002, col: 64, offset: 30900},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 69, offset: 30905},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 75, offset: 30911},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1012, col: 1, offset: 31142},
			expr: &actionExpr{
				pos: position{line: 1012, col: 18, offset: 31159},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 1012, col: 18, offset: 31159},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1012, col: 18, offset: 31159},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2883, col: 16, offset: 99644},
								expr: &charClassMatcher{
									pos:        position{line: 2869, col: 27, offset: 98983},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 36, offset: 31177},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1012, col: 43, offset: 31184},
								expr: &ruleRefExpr{
									pos:  position{line: 1012, col: 43, offset: 31184},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 74, offset: 31215},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1012, col: 80, offset: 31221},
								expr: &litMatcher{
									pos:        position{line: 1012, col: 80, offset: 31221},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1012, col: 85, offset: 31226},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 91, offset: 31232},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "DivShorthand",
			pos:  position{line: 1026, col: 1, offset: 31649},
			expr: &actionExpr{
				pos: position{line: 1026, col: 17, offset: 31665},
				run: (*parser).callonDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 1026, col: 17, offset: 31665},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1026, col: 17, offset: 31665},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 1026, col: 29, offset: 31677},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1159, col: 19, offset: 36793},
										run: (*parser).callonDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1159, col: 19, offset: 36793},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1159, col: 19, offset: 36793},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1159, col: 23, offset: 36797},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1159, col: 29, offset: 36803},
														expr: &charClassMatcher{
															pos:        position{line: 1159, col: 29, offset: 36803},
															val:        "[^ \\t\\r\\n.#()[]{}:]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1164, col: 5, offset: 36929},
										run: (*parser).callonDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1164, col: 5, offset: 36929},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1164, col: 5, offset: 36929},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1164, col: 9, offset: 36933},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1140, col: 16, offset: 36345},
										run: (*parser).callonDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1140, col: 16, offset: 36345},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1140, col: 16, offset: 36345},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1140, col: 20, offset: 36349},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1140, col: 24, offset: 36353},
														expr: &charClassMatcher{
															pos:        position{line: 1140, col: 24, offset: 36353},
															val:        "[^ \\t\\r\\n.#()[]{}:]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1145, col: 5, offset: 36472},
										run: (*parser).callonDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1145, col: 5, offset: 36472},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1145, col: 5, offset: 36472},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1145, col: 9, offset: 36476},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1026, col: 59, offset: 31707},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1026, col: 70, offset: 31718},
								expr: &ruleRefExpr{
									pos:  position{line: 1026, col: 70, offset: 31718},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1026, col: 91, offset: 31739},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1026, col: 97, offset: 31745},
								name: "Beaitb",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineDivShorthand",
			pos:  position{line: 1034, col: 1, offset: 32006},
			expr: &actionExpr{
				pos: position{line: 1034, col: 23, offset: 32028},
				run: (*parser).callonInlineDivShorthand1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 23, offset: 32028},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1034, col: 23, offset: 32028},
							label: "firstAttrI",
							expr: &choiceExpr{
								pos: position{line: 1034, col: 35, offset: 32040},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1159, col: 19, offset: 36793},
										run: (*parser).callonInlineDivShorthand5,
										expr: &seqExpr{
											pos: position{line: 1159, col: 19, offset: 36793},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1159, col: 19, offset: 36793},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1159, col: 23, offset: 36797},
													label: "nameI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1159, col: 29, offset: 36803},
														expr: &charClassMatcher{
															pos:        position{line: 1159, col: 29, offset: 36803},
															val:        "[^ \\t\\r\\n.#()[]{}:]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1164, col: 5, offset: 36929},
										run: (*parser).callonInlineDivShorthand11,
										expr: &seqExpr{
											pos: position{line: 1164, col: 5, offset: 36929},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1164, col: 5, offset: 36929},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 1164, col: 9, offset: 36933},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonInlineDivShorthand15,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1140, col: 16, offset: 36345},
										run: (*parser).callonInlineDivShorthand21,
										expr: &seqExpr{
											pos: position{line: 1140, col: 16, offset: 36345},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1140, col: 16, offset: 36345},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1140, col: 20, offset: 36349},
													label: "idI",
													expr: &oneOrMoreExpr{
														pos: position{line: 1140, col: 24, offset: 36353},
														expr: &charClassMatcher{
															pos:        position{line: 1140, col: 24, offset: 36353},
															val:        "[^ \\t\\r\\n.#()[]{}:]",
															chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1145, col: 5, offset: 36472},
										run: (*parser).callonInlineDivShorthand27,
										expr: &seqExpr{
											pos: position{line: 1145, col: 5, offset: 36472},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1145, col: 5, offset: 36472},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 1145, col: 9, offset: 36476},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonInlineDivShorthand31,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 65, offset: 32070},
							label: "moreAttrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1034, col: 76, offset: 32081},
								expr: &ruleRefExpr{
									pos:  position{line: 1034, col: 76, offset: 32081},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 107, offset: 32112},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 113, offset: 32118},
								name: "Beait",
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 1046, col: 1, offset: 32556},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 8, offset: 32563},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1046, col: 8, offset: 32563},
						run: (*parser).callonAnd2,
						expr: &seqExpr{
							pos: position{line: 1046, col: 8, offset: 32563},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 8, offset: 32563},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 12, offset: 32567},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1046, col: 19, offset: 32574},
										expr: &ruleRefExpr{
											pos:  position{line: 1046, col: 19, offset: 32574},
											name: "AttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 32729},
						run: (*parser).callonAnd17,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 32729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1051, col: 5, offset: 32729},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1051, col: 9, offset: 32733},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonAnd21,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 33329},
						run: (*parser).callonAnd36,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 33329},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1066, col: 5, offset: 33329},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 9, offset: 33333},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1066, col: 16, offset: 33340},
										expr: &ruleRefExpr{
											pos:  position{line: 1066, col: 16, offset: 33340},
											name: "AttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 37, offset: 33361},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonAnd43,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1066, col: 46, offset: 33370},
									expr: &charClassMatcher{
										pos:        position{line: 3801, col: 12, offset: 129325},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAnd",
			pos:  position{line: 1088, col: 1, offset: 34240},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 14, offset: 34253},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1088, col: 14, offset: 34253},
						run: (*parser).callonInlineAnd2,
						expr: &seqExpr{
							pos: position{line: 1088, col: 14, offset: 34253},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1088, col: 14, offset: 34253},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 18, offset: 34257},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1088, col: 25, offset: 34264},
										expr: &ruleRefExpr{
											pos:  position{line: 1088, col: 25, offset: 34264},
											name: "SingleLineAttributeCollection",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 34429},
						run: (*parser).callonInlineAnd17,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 34429},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 34429},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 9, offset: 34433},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonInlineAnd21,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 35029},
						run: (*parser).callonInlineAnd36,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 35029},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1108, col: 5, offset: 35029},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 9, offset: 35033},
									label: "collsI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1108, col: 16, offset: 35040},
										expr: &ruleRefExpr{
											pos:  position{line: 1108, col: 16, offset: 35040},
											name: "SingleLineAttributeCollection",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 47, offset: 35071},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonInlineAnd43,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1108, col: 56, offset: 35080},
									expr: &charClassMatcher{
										pos:        position{line: 3801, col: 12, offset: 129325},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 1134, col: 1, offset: 36144},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 34, offset: 36177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1140, col: 16, offset: 36345},
						run: (*parser).callonAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1140, col: 16, offset: 36345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1140, col: 16, offset: 36345},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 20, offset: 36349},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1140, col: 24, offset: 36353},
										expr: &charClassMatcher{
											pos:        position{line: 1140, col: 24, offset: 36353},
											val:        "[^ \\t\\r\\n.#()[]{}:]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 36472},
						run: (*parser).callonAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 36472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 5, offset: 36472},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 9, offset: 36476},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1159, col: 19, offset: 36793},
						run: (*parser).callonAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1159, col: 19, offset: 36793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 19, offset: 36793},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1159, col: 23, offset: 36797},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1159, col: 29, offset: 36803},
										expr: &charClassMatcher{
											pos:        position{line: 1159, col: 29, offset: 36803},
											val:        "[^ \\t\\r\\n.#()[]{}:]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 36929},
						run: (*parser).callonAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 36929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 5, offset: 36929},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 9, offset: 36933},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 65, offset: 36208},
						name: "AttributeList",
					},
				},
			},
		},
		{
			name: "SingleLineAttributeCollection",
			pos:  position{line: 1135, col: 1, offset: 36222},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 34, offset: 36255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1140, col: 16, offset: 36345},
						run: (*parser).callonSingleLineAttributeCollection2,
						expr: &seqExpr{
							pos: position{line: 1140, col: 16, offset: 36345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1140, col: 16, offset: 36345},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 20, offset: 36349},
									label: "idI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1140, col: 24, offset: 36353},
										expr: &charClassMatcher{
											pos:        position{line: 1140, col: 24, offset: 36353},
											val:        "[^ \\t\\r\\n.#()[]{}:]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 36472},
						run: (*parser).callonSingleLineAttributeCollection8,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 36472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 5, offset: 36472},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 9, offset: 36476},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonSingleLineAttributeCollection12,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1159, col: 19, offset: 36793},
						run: (*parser).callonSingleLineAttributeCollection18,
						expr: &seqExpr{
							pos: position{line: 1159, col: 19, offset: 36793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 19, offset: 36793},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1159, col: 23, offset: 36797},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1159, col: 29, offset: 36803},
										expr: &charClassMatcher{
											pos:        position{line: 1159, col: 29, offset: 36803},
											val:        "[^ \\t\\r\\n.#()[]{}:]",
											chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ':'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 36929},
						run: (*parser).callonSingleLineAttributeCollection24,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 36929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 5, offset: 36929},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 9, offset: 36933},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonSingleLineAttributeCollection28,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 65, offset: 36286},
						name: "SingleLineAttributeList",
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 1178, col: 1, offset: 37252},
			expr: &choiceExpr{
				pos: position{line: 1178, col: 18, offset: 37269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1178, col: 18, offset: 37269},
						run: (*parser).callonAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1178, col: 18, offset: 37269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1178, col: 18, offset: 37269},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1178, col: 22, offset: 37273},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1178, col: 26, offset: 37277},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1178, col: 38, offset: 37289},
										expr: &ruleRefExpr{
											pos:  position{line: 1178, col: 38, offset: 37289},
											name: "attributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1178, col: 50, offset: 37301},
									expr: &litMatcher{
										pos:        position{line: 1178, col: 50, offset: 37301},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1178, col: 55, offset: 37306},
									expr: &seqExpr{
										pos: position{line: 1178, col: 56, offset: 37307},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1178, col: 56, offset: 37307},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1178, col: 60, offset: 37311},
												expr: &choiceExpr{
													pos: position{line: 3816, col: 20, offset: 129757},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1178, col: 66, offset: 37317},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonAttributeList28,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 37523},
						run: (*parser).callonAttributeList30,
						expr: &seqExpr{
							pos: position{line: 1184, col: 5, offset: 37523},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1184, col: 5, offset: 37523},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1184, col: 9, offset: 37527},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 13, offset: 37531},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1184, col: 25, offset: 37543},
										expr: &ruleRefExpr{
											pos:  position{line: 1184, col: 25, offset: 37543},
											name: "attributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1184, col: 37, offset: 37555},
									expr: &seqExpr{
										pos: position{line: 1184, col: 38, offset: 37556},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1184, col: 38, offset: 37556},
												expr: &litMatcher{
													pos:        position{line: 1184, col: 38, offset: 37556},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1184, col: 43, offset: 37561},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 49, offset: 37567},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonAttributeList49,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 1203, col: 1, offset: 38142},
			expr: &actionExpr{
				pos: position{line: 1203, col: 15, offset: 38156},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 15, offset: 38156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1203, col: 15, offset: 38156},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 22, offset: 38163},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 32, offset: 38173},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1203, col: 38, offset: 38179},
								expr: &seqExpr{
									pos: position{line: 1203, col: 39, offset: 38180},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1203, col: 39, offset: 38180},
											expr: &litMatcher{
												pos:        position{line: 1203, col: 39, offset: 38180},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1203, col: 44, offset: 38185},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1203, col: 48, offset: 38189},
											expr: &choiceExpr{
												pos: position{line: 3816, col: 20, offset: 129757},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																expr: &litMatcher{
																	pos:        position{line: 3813, col: 36, offset: 129680},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3813, col: 42, offset: 129686},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1203, col: 52, offset: 38193},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineAttributeList",
			pos:  position{line: 1214, col: 1, offset: 38463},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 28, offset: 38490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 28, offset: 38490},
						run: (*parser).callonSingleLineAttributeList2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 28, offset: 38490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1214, col: 28, offset: 38490},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1214, col: 32, offset: 38494},
									expr: &litMatcher{
										pos:        position{line: 1214, col: 32, offset: 38494},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 37, offset: 38499},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1214, col: 49, offset: 38511},
										expr: &ruleRefExpr{
											pos:  position{line: 1214, col: 49, offset: 38511},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1214, col: 71, offset: 38533},
									expr: &litMatcher{
										pos:        position{line: 1214, col: 71, offset: 38533},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1214, col: 76, offset: 38538},
									expr: &seqExpr{
										pos: position{line: 1214, col: 77, offset: 38539},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1214, col: 77, offset: 38539},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1214, col: 81, offset: 38543},
												expr: &litMatcher{
													pos:        position{line: 1214, col: 81, offset: 38543},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 88, offset: 38550},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonSingleLineAttributeList18,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1220, col: 5, offset: 38756},
						run: (*parser).callonSingleLineAttributeList20,
						expr: &seqExpr{
							pos: position{line: 1220, col: 5, offset: 38756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1220, col: 5, offset: 38756},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1220, col: 9, offset: 38760},
									expr: &litMatcher{
										pos:        position{line: 1220, col: 9, offset: 38760},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 14, offset: 38765},
									label: "attributesI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1220, col: 26, offset: 38777},
										expr: &ruleRefExpr{
											pos:  position{line: 1220, col: 26, offset: 38777},
											name: "singleLineAttributes",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1220, col: 48, offset: 38799},
									expr: &seqExpr{
										pos: position{line: 1220, col: 49, offset: 38800},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1220, col: 49, offset: 38800},
												expr: &litMatcher{
													pos:        position{line: 1220, col: 49, offset: 38800},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 1220, col: 54, offset: 38805},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 60, offset: 38811},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonSingleLineAttributeList34,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineAttributes",
			pos:  position{line: 1239, col: 1, offset: 39386},
			expr: &actionExpr{
				pos: position{line: 1239, col: 25, offset: 39410},
				run: (*parser).callonsingleLineAttributes1,
				expr: &seqExpr{
					pos: position{line: 1239, col: 25, offset: 39410},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1239, col: 25, offset: 39410},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 32, offset: 39417},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 42, offset: 39427},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1239, col: 48, offset: 39433},
								expr: &seqExpr{
									pos: position{line: 1239, col: 49, offset: 39434},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1239, col: 49, offset: 39434},
											expr: &litMatcher{
												pos:        position{line: 1239, col: 49, offset: 39434},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 1239, col: 54, offset: 39439},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1239, col: 58, offset: 39443},
											expr: &litMatcher{
												pos:        position{line: 1239, col: 58, offset: 39443},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1239, col: 63, offset: 39448},
											name: "SingleLineAttribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 1254, col: 1, offset: 39912},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 24, offset: 39935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 24, offset: 39935},
						name: "MixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1318, col: 19, offset: 42040},
						run: (*parser).callonAttribute3,
						expr: &seqExpr{
							pos: position{line: 1318, col: 19, offset: 42040},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1318, col: 19, offset: 42040},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1318, col: 24, offset: 42045},
									expr: &choiceExpr{
										pos: position{line: 1318, col: 26, offset: 42047},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1318, col: 31, offset: 42052},
												val:        "[,)]",
												chars:      []rune{',', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 62, offset: 39973},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SingleLineAttribute",
			pos:  position{line: 1255, col: 1, offset: 39989},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 24, offset: 40012},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1255, col: 24, offset: 40012},
						name: "SingleLineMixinCallAttribute",
					},
					&actionExpr{
						pos: position{line: 1318, col: 19, offset: 42040},
						run: (*parser).callonSingleLineAttribute3,
						expr: &seqExpr{
							pos: position{line: 1318, col: 19, offset: 42040},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1318, col: 19, offset: 42040},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 1318, col: 24, offset: 42045},
									expr: &choiceExpr{
										pos: position{line: 1318, col: 26, offset: 42047},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1318, col: 31, offset: 42052},
												val:        "[,)]",
												chars:      []rune{',', ')'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 72, offset: 40060},
						name: "SingleLineSimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 1262, col: 1, offset: 40161},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 30, offset: 40190},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 30, offset: 40190},
						name: "simpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1307, col: 27, offset: 41860},
						run: (*parser).callonSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1307, col: 27, offset: 41860},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1307, col: 27, offset: 41860},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1257, col: 18, offset: 40104},
										expr: &seqExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1257, col: 19, offset: 40105},
													expr: &charClassMatcher{
														pos:        position{line: 1257, col: 20, offset: 40106},
														val:        "[(),]",
														chars:      []rune{'(', ')', ','},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 26, offset: 99924},
													expr: &charClassMatcher{
														pos:        position{line: 2866, col: 27, offset: 98832},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2890, col: 101, offset: 99999,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1307, col: 47, offset: 41880},
									expr: &seqExpr{
										pos: position{line: 1307, col: 49, offset: 41882},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1307, col: 49, offset: 41882},
												expr: &litMatcher{
													pos:        position{line: 1307, col: 49, offset: 41882},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1307, col: 54, offset: 41887},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineSimpleAttribute",
			pos:  position{line: 1263, col: 1, offset: 40236},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 30, offset: 40265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1263, col: 30, offset: 40265},
						name: "singleLineSimpleValueAttribute",
					},
					&actionExpr{
						pos: position{line: 1307, col: 27, offset: 41860},
						run: (*parser).callonSingleLineSimpleAttribute3,
						expr: &seqExpr{
							pos: position{line: 1307, col: 27, offset: 41860},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1307, col: 27, offset: 41860},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1257, col: 18, offset: 40104},
										expr: &seqExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1257, col: 19, offset: 40105},
													expr: &charClassMatcher{
														pos:        position{line: 1257, col: 20, offset: 40106},
														val:        "[(),]",
														chars:      []rune{'(', ')', ','},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 26, offset: 99924},
													expr: &charClassMatcher{
														pos:        position{line: 2866, col: 27, offset: 98832},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2890, col: 101, offset: 99999,
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1307, col: 47, offset: 41880},
									expr: &seqExpr{
										pos: position{line: 1307, col: 49, offset: 41882},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1307, col: 49, offset: 41882},
												expr: &litMatcher{
													pos:        position{line: 1307, col: 49, offset: 41882},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 1307, col: 54, offset: 41887},
												val:        "[!=]",
												chars:      []rune{'!', '='},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleValueAttribute",
			pos:  position{line: 1265, col: 1, offset: 40322},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 25, offset: 40346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1265, col: 25, offset: 40346},
						run: (*parser).callonsimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1265, col: 25, offset: 40346},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1265, col: 25, offset: 40346},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1257, col: 18, offset: 40104},
										expr: &seqExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1257, col: 19, offset: 40105},
													expr: &charClassMatcher{
														pos:        position{line: 1257, col: 20, offset: 40106},
														val:        "[(),]",
														chars:      []rune{'(', ')', ','},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 26, offset: 99924},
													expr: &charClassMatcher{
														pos:        position{line: 2866, col: 27, offset: 98832},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2890, col: 101, offset: 99999,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1265, col: 45, offset: 40366},
									expr: &litMatcher{
										pos:        position{line: 1265, col: 45, offset: 40366},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1265, col: 50, offset: 40371},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1265, col: 65, offset: 40386},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1265, col: 69, offset: 40390},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1265, col: 73, offset: 40394},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsimpleValueAttribute30,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1265, col: 82, offset: 40403},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1265, col: 88, offset: 40409},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 40626},
						run: (*parser).callonsimpleValueAttribute38,
						expr: &seqExpr{
							pos: position{line: 1272, col: 5, offset: 40626},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1272, col: 5, offset: 40626},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1257, col: 18, offset: 40104},
										expr: &seqExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1257, col: 19, offset: 40105},
													expr: &charClassMatcher{
														pos:        position{line: 1257, col: 20, offset: 40106},
														val:        "[(),]",
														chars:      []rune{'(', ')', ','},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 26, offset: 99924},
													expr: &charClassMatcher{
														pos:        position{line: 2866, col: 27, offset: 98832},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2890, col: 101, offset: 99999,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1272, col: 25, offset: 40646},
									expr: &litMatcher{
										pos:        position{line: 1272, col: 25, offset: 40646},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 30, offset: 40651},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsimpleValueAttribute51,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1272, col: 45, offset: 40666},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 49, offset: 40670},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsimpleValueAttribute59,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineSimpleValueAttribute",
			pos:  position{line: 1286, col: 1, offset: 41067},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 35, offset: 41101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1286, col: 35, offset: 41101},
						run: (*parser).callonsingleLineSimpleValueAttribute2,
						expr: &seqExpr{
							pos: position{line: 1286, col: 35, offset: 41101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1286, col: 35, offset: 41101},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1257, col: 18, offset: 40104},
										expr: &seqExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1257, col: 19, offset: 40105},
													expr: &charClassMatcher{
														pos:        position{line: 1257, col: 20, offset: 40106},
														val:        "[(),]",
														chars:      []rune{'(', ')', ','},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 26, offset: 99924},
													expr: &charClassMatcher{
														pos:        position{line: 2866, col: 27, offset: 98832},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2890, col: 101, offset: 99999,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1286, col: 55, offset: 41121},
									expr: &litMatcher{
										pos:        position{line: 1286, col: 55, offset: 41121},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1286, col: 60, offset: 41126},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsingleLineSimpleValueAttribute15,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 75, offset: 41141},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1286, col: 79, offset: 41145},
									expr: &litMatcher{
										pos:        position{line: 1286, col: 79, offset: 41145},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1286, col: 84, offset: 41150},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1286, col: 90, offset: 41156},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1293, col: 5, offset: 41377},
						run: (*parser).callonsingleLineSimpleValueAttribute26,
						expr: &seqExpr{
							pos: position{line: 1293, col: 5, offset: 41377},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1293, col: 5, offset: 41377},
									label: "nameI",
									expr: &oneOrMoreExpr{
										pos: position{line: 1257, col: 18, offset: 40104},
										expr: &seqExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1257, col: 19, offset: 40105},
													expr: &charClassMatcher{
														pos:        position{line: 1257, col: 20, offset: 40106},
														val:        "[(),]",
														chars:      []rune{'(', ')', ','},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&notExpr{
													pos: position{line: 2890, col: 26, offset: 99924},
													expr: &charClassMatcher{
														pos:        position{line: 2866, col: 27, offset: 98832},
														val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
														chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
														ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&anyMatcher{
													line: 2890, col: 101, offset: 99999,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1293, col: 25, offset: 41397},
									expr: &litMatcher{
										pos:        position{line: 1293, col: 25, offset: 41397},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 30, offset: 41402},
									label: "assignPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsingleLineSimpleValueAttribute39,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 45, offset: 41417},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 49, offset: 41421},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsingleLineSimpleValueAttribute47,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCallAttribute",
			pos:  position{line: 1326, col: 1, offset: 42151},
			expr: &actionExpr{
				pos: position{line: 1326, col: 23, offset: 42173},
				run: (*parser).callonMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 23, offset: 42173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1326, col: 23, offset: 42173},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1257, col: 18, offset: 40104},
								expr: &seqExpr{
									pos: position{line: 1257, col: 19, offset: 40105},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											expr: &charClassMatcher{
												pos:        position{line: 1257, col: 20, offset: 40106},
												val:        "[(),]",
												chars:      []rune{'(', ')', ','},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 26, offset: 99924},
											expr: &charClassMatcher{
												pos:        position{line: 2866, col: 27, offset: 98832},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2890, col: 101, offset: 99999,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1326, col: 43, offset: 42193},
							expr: &litMatcher{
								pos:        position{line: 1326, col: 43, offset: 42193},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 48, offset: 42198},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1326, col: 63, offset: 42213},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1326, col: 67, offset: 42217},
							expr: &choiceExpr{
								pos: position{line: 3816, col: 20, offset: 129757},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3813, col: 36, offset: 129680},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												expr: &litMatcher{
													pos:        position{line: 3813, col: 36, offset: 129680},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3813, col: 42, offset: 129686},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 71, offset: 42221},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1326, col: 77, offset: 42227},
								name: "mixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineMixinCallAttribute",
			pos:  position{line: 1336, col: 1, offset: 42509},
			expr: &actionExpr{
				pos: position{line: 1336, col: 33, offset: 42541},
				run: (*parser).callonSingleLineMixinCallAttribute1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 33, offset: 42541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 33, offset: 42541},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1257, col: 18, offset: 40104},
								expr: &seqExpr{
									pos: position{line: 1257, col: 19, offset: 40105},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1257, col: 19, offset: 40105},
											expr: &charClassMatcher{
												pos:        position{line: 1257, col: 20, offset: 40106},
												val:        "[(),]",
												chars:      []rune{'(', ')', ','},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&notExpr{
											pos: position{line: 2890, col: 26, offset: 99924},
											expr: &charClassMatcher{
												pos:        position{line: 2866, col: 27, offset: 98832},
												val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
												chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
												ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&anyMatcher{
											line: 2890, col: 101, offset: 99999,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1336, col: 53, offset: 42561},
							expr: &litMatcher{
								pos:        position{line: 1336, col: 53, offset: 42561},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 58, offset: 42566},
							label: "assignPosI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonSingleLineMixinCallAttribute14,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1336, col: 73, offset: 42581},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1336, col: 77, offset: 42585},
							expr: &litMatcher{
								pos:        position{line: 1336, col: 77, offset: 42585},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 82, offset: 42590},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 88, offset: 42596},
								name: "singleLineMixinCallAttributeCall",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeCall",
			pos:  position{line: 1347, col: 1, offset: 42889},
			expr: &actionExpr{
				pos: position{line: 1347, col: 27, offset: 42915},
				run: (*parser).callonmixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 27, offset: 42915},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1347, col: 27, offset: 42915},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 31, offset: 42919},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1347, col: 42, offset: 42930},
								expr: &seqExpr{
									pos: position{line: 1347, col: 43, offset: 42931},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 763, col: 10, offset: 23102},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 763, col: 10, offset: 23102},
													run: (*parser).callonmixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 763, col: 10, offset: 23102},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 765, col: 5, offset: 23196},
													run: (*parser).callonmixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 765, col: 5, offset: 23196},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 765, col: 13, offset: 23204},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 765, col: 13, offset: 23204},
																			expr: &litMatcher{
																				pos:        position{line: 765, col: 13, offset: 23204},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 765, col: 18, offset: 23209},
																			expr: &choiceExpr{
																				pos: position{line: 765, col: 19, offset: 23210},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 765, col: 19, offset: 23210},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 765, col: 19, offset: 23210},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 765, col: 28, offset: 23219},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 765, col: 38, offset: 23229},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 765, col: 49, offset: 23240},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonmixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1347, col: 49, offset: 42937},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 55, offset: 42943},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 777, col: 14, offset: 23657},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 777, col: 14, offset: 23657},
										run: (*parser).callonmixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 777, col: 14, offset: 23657},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 763, col: 10, offset: 23102},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														run: (*parser).callonmixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 763, col: 10, offset: 23102},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														run: (*parser).callonmixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 765, col: 5, offset: 23196},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 765, col: 5, offset: 23196},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 765, col: 13, offset: 23204},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				expr: &litMatcher{
																					pos:        position{line: 765, col: 13, offset: 23204},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 765, col: 18, offset: 23209},
																				expr: &choiceExpr{
																					pos: position{line: 765, col: 19, offset: 23210},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 765, col: 19, offset: 23210},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 28, offset: 23219},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 765, col: 38, offset: 23229},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 765, col: 49, offset: 23240},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonmixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 779, col: 5, offset: 23699},
										run: (*parser).callonmixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 779, col: 5, offset: 23699},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 779, col: 5, offset: 23699},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonmixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 779, col: 14, offset: 23708},
													expr: &choiceExpr{
														pos: position{line: 779, col: 16, offset: 23710},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 779, col: 22, offset: 23716},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 790, col: 5, offset: 24048},
										run: (*parser).callonmixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 790, col: 5, offset: 24048},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 790, col: 5, offset: 24048},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 790, col: 12, offset: 24055},
														expr: &charClassMatcher{
															pos:        position{line: 790, col: 12, offset: 24055},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 790, col: 29, offset: 24072},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonmixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 71, offset: 42959},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1347, col: 77, offset: 42965},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 77, offset: 42965},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 91, offset: 42979},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1347, col: 98, offset: 42986},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 98, offset: 42986},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinCallAttributeCall",
			pos:  position{line: 1367, col: 1, offset: 43553},
			expr: &actionExpr{
				pos: position{line: 1367, col: 37, offset: 43589},
				run: (*parser).callonsingleLineMixinCallAttributeCall1,
				expr: &seqExpr{
					pos: position{line: 1367, col: 37, offset: 43589},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1367, col: 37, offset: 43589},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 41, offset: 43593},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1367, col: 52, offset: 43604},
								expr: &seqExpr{
									pos: position{line: 1367, col: 53, offset: 43605},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 763, col: 10, offset: 23102},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 763, col: 10, offset: 23102},
													run: (*parser).callonsingleLineMixinCallAttributeCall8,
													expr: &labeledExpr{
														pos:   position{line: 763, col: 10, offset: 23102},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 765, col: 5, offset: 23196},
													run: (*parser).callonsingleLineMixinCallAttributeCall14,
													expr: &seqExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 765, col: 5, offset: 23196},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 765, col: 13, offset: 23204},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 765, col: 13, offset: 23204},
																			expr: &litMatcher{
																				pos:        position{line: 765, col: 13, offset: 23204},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 765, col: 18, offset: 23209},
																			expr: &choiceExpr{
																				pos: position{line: 765, col: 19, offset: 23210},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 765, col: 19, offset: 23210},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 765, col: 19, offset: 23210},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 765, col: 28, offset: 23219},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 765, col: 38, offset: 23229},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 765, col: 49, offset: 23240},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonsingleLineMixinCallAttributeCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1367, col: 59, offset: 43611},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 65, offset: 43617},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 777, col: 14, offset: 23657},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 777, col: 14, offset: 23657},
										run: (*parser).callonsingleLineMixinCallAttributeCall36,
										expr: &labeledExpr{
											pos:   position{line: 777, col: 14, offset: 23657},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 763, col: 10, offset: 23102},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														run: (*parser).callonsingleLineMixinCallAttributeCall39,
														expr: &labeledExpr{
															pos:   position{line: 763, col: 10, offset: 23102},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														run: (*parser).callonsingleLineMixinCallAttributeCall45,
														expr: &seqExpr{
															pos: position{line: 765, col: 5, offset: 23196},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 765, col: 5, offset: 23196},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 765, col: 13, offset: 23204},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				expr: &litMatcher{
																					pos:        position{line: 765, col: 13, offset: 23204},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 765, col: 18, offset: 23209},
																				expr: &choiceExpr{
																					pos: position{line: 765, col: 19, offset: 23210},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 765, col: 19, offset: 23210},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 28, offset: 23219},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 765, col: 38, offset: 23229},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 765, col: 49, offset: 23240},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonsingleLineMixinCallAttributeCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 779, col: 5, offset: 23699},
										run: (*parser).callonsingleLineMixinCallAttributeCall64,
										expr: &seqExpr{
											pos: position{line: 779, col: 5, offset: 23699},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 779, col: 5, offset: 23699},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonsingleLineMixinCallAttributeCall67,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 779, col: 14, offset: 23708},
													expr: &choiceExpr{
														pos: position{line: 779, col: 16, offset: 23710},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 779, col: 22, offset: 23716},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 790, col: 5, offset: 24048},
										run: (*parser).callonsingleLineMixinCallAttributeCall86,
										expr: &seqExpr{
											pos: position{line: 790, col: 5, offset: 24048},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 790, col: 5, offset: 24048},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 790, col: 12, offset: 24055},
														expr: &charClassMatcher{
															pos:        position{line: 790, col: 12, offset: 24055},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 790, col: 29, offset: 24072},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonsingleLineMixinCallAttributeCall92,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 81, offset: 43633},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1367, col: 87, offset: 43639},
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 87, offset: 43639},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 111, offset: 43663},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1367, col: 118, offset: 43670},
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 118, offset: 43670},
									name: "mixinCallAttributeValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallAttributeValue",
			pos:  position{line: 1388, col: 1, offset: 44238},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 28, offset: 44265},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3725, col: 27, offset: 126613},
						run: (*parser).callonmixinCallAttributeValue2,
						expr: &seqExpr{
							pos: position{line: 3725, col: 27, offset: 126613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3725, col: 27, offset: 126613},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3828, col: 14, offset: 130133},
										run: (*parser).callonmixinCallAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 3828, col: 14, offset: 130133},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 50, offset: 126636},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3725, col: 56, offset: 126642},
										expr: &charClassMatcher{
											pos:        position{line: 3725, col: 56, offset: 126642},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 67, offset: 126653},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3829, col: 14, offset: 130173},
										run: (*parser).callonmixinCallAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 3829, col: 14, offset: 130173},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3731, col: 5, offset: 126864},
						run: (*parser).callonmixinCallAttributeValue13,
						expr: &seqExpr{
							pos: position{line: 3731, col: 5, offset: 126864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3731, col: 5, offset: 126864},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3828, col: 14, offset: 130133},
										run: (*parser).callonmixinCallAttributeValue16,
										expr: &litMatcher{
											pos:        position{line: 3828, col: 14, offset: 130133},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3731, col: 28, offset: 126887},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3731, col: 34, offset: 126893},
										expr: &charClassMatcher{
											pos:        position{line: 3731, col: 34, offset: 126893},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 53, offset: 44290},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1401, col: 1, offset: 44575},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 15, offset: 44589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1401, col: 15, offset: 44589},
						run: (*parser).callonExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1401, col: 15, offset: 44589},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 22, offset: 44596},
								name: "ChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 5, offset: 44717},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "SingleLineExpression",
			pos:  position{line: 1405, col: 1, offset: 44731},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 25, offset: 44755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1405, col: 25, offset: 44755},
						run: (*parser).callonSingleLineExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1405, col: 25, offset: 44755},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 32, offset: 44762},
								name: "SingleLineChainExpression",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 5, offset: 44893},
						name: "SingleLineGoExpression",
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1417, col: 1, offset: 45301},
			expr: &actionExpr{
				pos: position{line: 1417, col: 17, offset: 45317},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1417, col: 17, offset: 45317},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1417, col: 24, offset: 45324},
						expr: &choiceExpr{
							pos: position{line: 1418, col: 6, offset: 45331},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1418, col: 6, offset: 45331},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1418, col: 20, offset: 45345},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1418, col: 39, offset: 45364},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callonGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callonGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callonGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callonGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callonGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callonGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callonGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callonGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callonGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callonGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callonGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callonGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callonGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callonGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callonGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callonGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1419, col: 6, offset: 45402},
									run: (*parser).callonGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1419, col: 6, offset: 45402},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1419, col: 6, offset: 45402},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1419, col: 15, offset: 45411},
												expr: &choiceExpr{
													pos: position{line: 1409, col: 25, offset: 44941},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1409, col: 25, offset: 44941},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1409, col: 40, offset: 44956},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1409, col: 40, offset: 44956},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1409, col: 44, offset: 44960},
																	expr: &litMatcher{
																		pos:        position{line: 1409, col: 45, offset: 44961},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3801, col: 12, offset: 129325},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1419, col: 45, offset: 45441},
												expr: &seqExpr{
													pos: position{line: 1419, col: 46, offset: 45442},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1419, col: 46, offset: 45442},
															expr: &choiceExpr{
																pos: position{line: 1409, col: 25, offset: 44941},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1409, col: 25, offset: 44941},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1409, col: 40, offset: 44956},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1409, col: 40, offset: 44956},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1409, col: 44, offset: 44960},
																				expr: &litMatcher{
																					pos:        position{line: 1409, col: 45, offset: 44961},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1419, col: 68, offset: 45464},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1419, col: 73, offset: 45469},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParenExpr",
			pos:  position{line: 1426, col: 1, offset: 45634},
			expr: &choiceExpr{
				pos: position{line: 1426, col: 16, offset: 45649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1426, col: 16, offset: 45649},
						run: (*parser).callongoParenExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1426, col: 16, offset: 45649},
							label: "exprI",
							expr: &choiceExpr{
								pos: position{line: 1426, col: 23, offset: 45656},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1426, col: 23, offset: 45656},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1426, col: 23, offset: 45656},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1426, col: 27, offset: 45660},
												expr: &ruleRefExpr{
													pos:  position{line: 1426, col: 27, offset: 45660},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3803, col: 8, offset: 129341},
												run: (*parser).callongoParenExpr9,
												expr: &choiceExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															expr: &anyMatcher{
																line: 3803, col: 10, offset: 129343,
															},
														},
														&notExpr{
															pos: position{line: 3803, col: 14, offset: 129347},
															expr: &anyMatcher{
																line: 3803, col: 15, offset: 129348,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1426, col: 48, offset: 45681},
												val:        ")",
												ignoreCase: false,
												want:       "\")\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1426, col: 54, offset: 45687},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1426, col: 54, offset: 45687},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1426, col: 58, offset: 45691},
												expr: &ruleRefExpr{
													pos:  position{line: 1426, col: 58, offset: 45691},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3803, col: 8, offset: 129341},
												run: (*parser).callongoParenExpr20,
												expr: &choiceExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															expr: &anyMatcher{
																line: 3803, col: 10, offset: 129343,
															},
														},
														&notExpr{
															pos: position{line: 3803, col: 14, offset: 129347},
															expr: &anyMatcher{
																line: 3803, col: 15, offset: 129348,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1426, col: 79, offset: 45712},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1426, col: 85, offset: 45718},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1426, col: 85, offset: 45718},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1426, col: 89, offset: 45722},
												expr: &ruleRefExpr{
													pos:  position{line: 1426, col: 89, offset: 45722},
													name: "goSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3803, col: 8, offset: 129341},
												run: (*parser).callongoParenExpr31,
												expr: &choiceExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															expr: &anyMatcher{
																line: 3803, col: 10, offset: 129343,
															},
														},
														&notExpr{
															pos: position{line: 3803, col: 14, offset: 129347},
															expr: &anyMatcher{
																line: 3803, col: 15, offset: 129348,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1426, col: 110, offset: 45743},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1449, col: 5, offset: 46426},
						run: (*parser).callongoParenExpr38,
						expr: &seqExpr{
							pos: position{line: 1449, col: 5, offset: 46426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1449, col: 5, offset: 46426},
									label: "parenI",
									expr: &charClassMatcher{
										pos:        position{line: 1449, col: 12, offset: 46433},
										val:        "[([{]",
										chars:      []rune{'(', '[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1449, col: 18, offset: 46439},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callongoParenExpr43,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1449, col: 32, offset: 46453},
									label: "exprI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1449, col: 38, offset: 46459},
										expr: &ruleRefExpr{
											pos:  position{line: 1449, col: 38, offset: 46459},
											name: "goSubExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goSubExpression",
			pos:  position{line: 1485, col: 1, offset: 47523},
			expr: &actionExpr{
				pos: position{line: 1485, col: 20, offset: 47542},
				run: (*parser).callongoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1485, col: 20, offset: 47542},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1485, col: 27, offset: 47549},
						expr: &choiceExpr{
							pos: position{line: 1486, col: 5, offset: 47555},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1486, col: 5, offset: 47555},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1486, col: 19, offset: 47569},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1486, col: 38, offset: 47588},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callongoSubExpression8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callongoSubExpression11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callongoSubExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callongoSubExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callongoSubExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callongoSubExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callongoSubExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callongoSubExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callongoSubExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callongoSubExpression116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callongoSubExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callongoSubExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callongoSubExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callongoSubExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callongoSubExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callongoSubExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callongoSubExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callongoSubExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1487, col: 5, offset: 47625},
									run: (*parser).callongoSubExpression224,
									expr: &seqExpr{
										pos: position{line: 1487, col: 5, offset: 47625},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1487, col: 5, offset: 47625},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callongoSubExpression227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1487, col: 14, offset: 47634},
												val:        "[^)}]]",
												chars:      []rune{')', '}', ']'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1487, col: 22, offset: 47642},
												expr: &charClassMatcher{
													pos:        position{line: 1487, col: 22, offset: 47642},
													val:        "[^\\\"`?([{}])]",
													chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "multiLineGoExpression",
			pos:  position{line: 1494, col: 1, offset: 47810},
			expr: &actionExpr{
				pos: position{line: 1494, col: 26, offset: 47835},
				run: (*parser).callonmultiLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1494, col: 26, offset: 47835},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1494, col: 33, offset: 47842},
						expr: &choiceExpr{
							pos: position{line: 1495, col: 5, offset: 47848},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1495, col: 5, offset: 47848},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1495, col: 19, offset: 47862},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1495, col: 38, offset: 47881},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callonmultiLineGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonmultiLineGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callonmultiLineGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callonmultiLineGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callonmultiLineGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callonmultiLineGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callonmultiLineGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callonmultiLineGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callonmultiLineGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callonmultiLineGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callonmultiLineGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callonmultiLineGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callonmultiLineGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callonmultiLineGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callonmultiLineGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callonmultiLineGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callonmultiLineGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonmultiLineGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1496, col: 5, offset: 47918},
									run: (*parser).callonmultiLineGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1496, col: 5, offset: 47918},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1496, col: 5, offset: 47918},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonmultiLineGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1496, col: 14, offset: 47927},
												expr: &choiceExpr{
													pos: position{line: 1409, col: 25, offset: 44941},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1409, col: 25, offset: 44941},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1409, col: 40, offset: 44956},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1409, col: 40, offset: 44956},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1409, col: 44, offset: 44960},
																	expr: &litMatcher{
																		pos:        position{line: 1409, col: 45, offset: 44961},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 1496, col: 36, offset: 47949,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1496, col: 38, offset: 47951},
												expr: &seqExpr{
													pos: position{line: 1496, col: 39, offset: 47952},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1496, col: 39, offset: 47952},
															expr: &choiceExpr{
																pos: position{line: 1409, col: 25, offset: 44941},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1409, col: 25, offset: 44941},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1409, col: 40, offset: 44956},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1409, col: 40, offset: 44956},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1409, col: 44, offset: 44960},
																				expr: &litMatcher{
																					pos:        position{line: 1409, col: 45, offset: 44961},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1496, col: 61, offset: 47974},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineGoExpression",
			pos:  position{line: 1503, col: 1, offset: 48139},
			expr: &actionExpr{
				pos: position{line: 1503, col: 27, offset: 48165},
				run: (*parser).callonSingleLineGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1503, col: 27, offset: 48165},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1503, col: 34, offset: 48172},
						expr: &choiceExpr{
							pos: position{line: 1504, col: 5, offset: 48178},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1504, col: 5, offset: 48178},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1504, col: 29, offset: 48202},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1504, col: 48, offset: 48221},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callonSingleLineGoExpression8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonSingleLineGoExpression11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callonSingleLineGoExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callonSingleLineGoExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callonSingleLineGoExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callonSingleLineGoExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callonSingleLineGoExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callonSingleLineGoExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callonSingleLineGoExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callonSingleLineGoExpression116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callonSingleLineGoExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callonSingleLineGoExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callonSingleLineGoExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callonSingleLineGoExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callonSingleLineGoExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callonSingleLineGoExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callonSingleLineGoExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonSingleLineGoExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1505, col: 5, offset: 48268},
									run: (*parser).callonSingleLineGoExpression224,
									expr: &seqExpr{
										pos: position{line: 1505, col: 5, offset: 48268},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1505, col: 5, offset: 48268},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonSingleLineGoExpression227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1505, col: 14, offset: 48277},
												expr: &choiceExpr{
													pos: position{line: 1409, col: 25, offset: 44941},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1409, col: 25, offset: 44941},
															val:        "[)}],]",
															chars:      []rune{')', '}', ']', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 1409, col: 40, offset: 44956},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1409, col: 40, offset: 44956},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 1409, col: 44, offset: 44960},
																	expr: &litMatcher{
																		pos:        position{line: 1409, col: 45, offset: 44961},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3801, col: 12, offset: 129325},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1505, col: 44, offset: 48307},
												expr: &seqExpr{
													pos: position{line: 1505, col: 45, offset: 48308},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1505, col: 45, offset: 48308},
															expr: &choiceExpr{
																pos: position{line: 1409, col: 25, offset: 44941},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1409, col: 25, offset: 44941},
																		val:        "[)}],]",
																		chars:      []rune{')', '}', ']', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 1409, col: 40, offset: 44956},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1409, col: 40, offset: 44956},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 1409, col: 44, offset: 44960},
																				expr: &litMatcher{
																					pos:        position{line: 1409, col: 45, offset: 44961},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 1505, col: 67, offset: 48330},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1505, col: 72, offset: 48335},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoParenExpr",
			pos:  position{line: 1512, col: 1, offset: 48500},
			expr: &choiceExpr{
				pos: position{line: 1512, col: 26, offset: 48525},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1512, col: 26, offset: 48525},
						run: (*parser).callonsingleLineGoParenExpr2,
						expr: &labeledExpr{
							pos:   position{line: 1512, col: 26, offset: 48525},
							label: "exprI",
							expr: &choiceExpr{
								pos: position{line: 1512, col: 33, offset: 48532},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 1512, col: 33, offset: 48532},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1512, col: 33, offset: 48532},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1512, col: 37, offset: 48536},
												expr: &ruleRefExpr{
													pos:  position{line: 1512, col: 37, offset: 48536},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3803, col: 8, offset: 129341},
												run: (*parser).callonsingleLineGoParenExpr9,
												expr: &choiceExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															expr: &anyMatcher{
																line: 3803, col: 10, offset: 129343,
															},
														},
														&notExpr{
															pos: position{line: 3803, col: 14, offset: 129347},
															expr: &anyMatcher{
																line: 3803, col: 15, offset: 129348,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1512, col: 68, offset: 48567},
												val:        ")",
												ignoreCase: false,
												want:       "\")\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1512, col: 74, offset: 48573},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1512, col: 74, offset: 48573},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1512, col: 78, offset: 48577},
												expr: &ruleRefExpr{
													pos:  position{line: 1512, col: 78, offset: 48577},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3803, col: 8, offset: 129341},
												run: (*parser).callonsingleLineGoParenExpr20,
												expr: &choiceExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															expr: &anyMatcher{
																line: 3803, col: 10, offset: 129343,
															},
														},
														&notExpr{
															pos: position{line: 3803, col: 14, offset: 129347},
															expr: &anyMatcher{
																line: 3803, col: 15, offset: 129348,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1512, col: 109, offset: 48608},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
									&seqExpr{
										pos: position{line: 1512, col: 115, offset: 48614},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1512, col: 115, offset: 48614},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
											&zeroOrOneExpr{
												pos: position{line: 1512, col: 119, offset: 48618},
												expr: &ruleRefExpr{
													pos:  position{line: 1512, col: 119, offset: 48618},
													name: "singleLineGoSubExpression",
												},
											},
											&actionExpr{
												pos: position{line: 3803, col: 8, offset: 129341},
												run: (*parser).callonsingleLineGoParenExpr31,
												expr: &choiceExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													alternatives: []interface{}{
														&andExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															expr: &anyMatcher{
																line: 3803, col: 10, offset: 129343,
															},
														},
														&notExpr{
															pos: position{line: 3803, col: 14, offset: 129347},
															expr: &anyMatcher{
																line: 3803, col: 15, offset: 129348,
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1512, col: 150, offset: 48649},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1535, col: 5, offset: 49298},
						run: (*parser).callonsingleLineGoParenExpr38,
						expr: &seqExpr{
							pos: position{line: 1535, col: 5, offset: 49298},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1535, col: 5, offset: 49298},
									label: "parenI",
									expr: &charClassMatcher{
										pos:        position{line: 1535, col: 12, offset: 49305},
										val:        "[([{]",
										chars:      []rune{'(', '[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 18, offset: 49311},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsingleLineGoParenExpr43,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 32, offset: 49325},
									label: "exprI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1535, col: 38, offset: 49331},
										expr: &ruleRefExpr{
											pos:  position{line: 1535, col: 38, offset: 49331},
											name: "singleLineGoSubExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineGoSubExpression",
			pos:  position{line: 1566, col: 1, offset: 50227},
			expr: &actionExpr{
				pos: position{line: 1566, col: 30, offset: 50256},
				run: (*parser).callonsingleLineGoSubExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1566, col: 30, offset: 50256},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1566, col: 37, offset: 50263},
						expr: &choiceExpr{
							pos: position{line: 1567, col: 5, offset: 50269},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1567, col: 5, offset: 50269},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1567, col: 29, offset: 50293},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 1567, col: 48, offset: 50312},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callonsingleLineGoSubExpression8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonsingleLineGoSubExpression11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callonsingleLineGoSubExpression27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callonsingleLineGoSubExpression48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callonsingleLineGoSubExpression80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callonsingleLineGoSubExpression87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callonsingleLineGoSubExpression98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callonsingleLineGoSubExpression105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callonsingleLineGoSubExpression110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callonsingleLineGoSubExpression116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callonsingleLineGoSubExpression128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callonsingleLineGoSubExpression149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callonsingleLineGoSubExpression181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callonsingleLineGoSubExpression188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callonsingleLineGoSubExpression199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callonsingleLineGoSubExpression206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callonsingleLineGoSubExpression211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonsingleLineGoSubExpression218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1568, col: 5, offset: 50359},
									run: (*parser).callonsingleLineGoSubExpression224,
									expr: &seqExpr{
										pos: position{line: 1568, col: 5, offset: 50359},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1568, col: 5, offset: 50359},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonsingleLineGoSubExpression227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1568, col: 14, offset: 50368},
												expr: &seqExpr{
													pos: position{line: 3800, col: 12, offset: 129292},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3800, col: 12, offset: 129292},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			expr: &litMatcher{
																				pos:        position{line: 3800, col: 16, offset: 129296},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3800, col: 22, offset: 129302},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3799, col: 12, offset: 129278},
																	expr: &anyMatcher{
																		line: 3799, col: 13, offset: 129279,
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1568, col: 19, offset: 50373},
												val:        "[^)}]]",
												chars:      []rune{')', '}', ']'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1568, col: 27, offset: 50381},
												expr: &seqExpr{
													pos: position{line: 1568, col: 28, offset: 50382},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 1568, col: 28, offset: 50382},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1568, col: 33, offset: 50387},
															val:        "[^\\\"`?([{}])]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{', '}', ']', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfExpression",
			pos:  position{line: 1581, col: 1, offset: 50789},
			expr: &choiceExpr{
				pos: position{line: 1581, col: 17, offset: 50805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1581, col: 17, offset: 50805},
						run: (*parser).callonIfExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1581, col: 17, offset: 50805},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1581, col: 24, offset: 50812},
								name: "ChainExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1598, col: 5, offset: 51417},
						run: (*parser).callonIfExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1598, col: 5, offset: 51417},
							label: "exprsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1598, col: 12, offset: 51424},
								expr: &choiceExpr{
									pos: position{line: 1599, col: 5, offset: 51430},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1599, col: 5, offset: 51430},
											name: "goParenExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 1599, col: 19, offset: 51444},
											name: "StringExpression",
										},
										&ruleRefExpr{
											pos:  position{line: 1599, col: 38, offset: 51463},
											name: "TernaryExpression",
										},
										&actionExpr{
											pos: position{line: 1481, col: 15, offset: 47405},
											run: (*parser).callonIfExpression12,
											expr: &seqExpr{
												pos: position{line: 1481, col: 15, offset: 47405},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1481, col: 15, offset: 47405},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3803, col: 8, offset: 129341},
															run: (*parser).callonIfExpression15,
															expr: &choiceExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		expr: &anyMatcher{
																			line: 3803, col: 10, offset: 129343,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3803, col: 14, offset: 129347},
																		expr: &anyMatcher{
																			line: 3803, col: 15, offset: 129348,
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2461, col: 14, offset: 83287},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2461, col: 14, offset: 83287},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&choiceExpr{
																		pos: position{line: 2461, col: 20, offset: 83293},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2509, col: 19, offset: 85438},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2509, col: 19, offset: 85438},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2510, col: 5, offset: 85497},
																				run: (*parser).callonIfExpression31,
																				expr: &seqExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2510, col: 5, offset: 85497},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 14, offset: 85506},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 26, offset: 85518},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 38, offset: 85530},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 50, offset: 85542},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2539, col: 16, offset: 86678},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2539, col: 16, offset: 86678},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2540, col: 5, offset: 86781},
																				run: (*parser).callonIfExpression52,
																				expr: &seqExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2540, col: 5, offset: 86781},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 14, offset: 86790},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 26, offset: 86802},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 38, offset: 86814},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 50, offset: 86826},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 62, offset: 86838},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 74, offset: 86850},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 86, offset: 86862},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 98, offset: 86874},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2574, col: 24, offset: 88259},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2574, col: 24, offset: 88259},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2574, col: 29, offset: 88264},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2488, col: 75, offset: 84550},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2490, col: 24, offset: 84696},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2490, col: 24, offset: 84696},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2407, col: 19, offset: 81885},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2407, col: 19, offset: 81885},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2407, col: 19, offset: 81885},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2491, col: 24, offset: 84763},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2491, col: 24, offset: 84763},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2492, col: 5, offset: 84800},
																				run: (*parser).callonIfExpression84,
																				expr: &seqExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2492, col: 5, offset: 84800},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2492, col: 14, offset: 84809},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2492, col: 26, offset: 84821},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2575, col: 24, offset: 88342},
																				run: (*parser).callonIfExpression91,
																				expr: &seqExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2575, col: 24, offset: 88342},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2599, col: 5, offset: 89358},
																				run: (*parser).callonIfExpression102,
																				expr: &seqExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2599, col: 5, offset: 89358},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2620, col: 5, offset: 90199},
																				run: (*parser).callonIfExpression109,
																				expr: &seqExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2620, col: 5, offset: 90199},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2638, col: 5, offset: 90884},
																				run: (*parser).callonIfExpression114,
																				expr: &seqExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2638, col: 5, offset: 90884},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2638, col: 10, offset: 90889},
																							expr: &charClassMatcher{
																								pos:        position{line: 3801, col: 12, offset: 129325},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2461, col: 76, offset: 83349},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2462, col: 5, offset: 83360},
																run: (*parser).callonIfExpression120,
																expr: &seqExpr{
																	pos: position{line: 2462, col: 5, offset: 83360},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2462, col: 5, offset: 83360},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2462, col: 10, offset: 83365},
																			label: "valsI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2462, col: 16, offset: 83371},
																				expr: &choiceExpr{
																					pos: position{line: 2462, col: 17, offset: 83372},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2509, col: 19, offset: 85438},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2509, col: 19, offset: 85438},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2510, col: 5, offset: 85497},
																							run: (*parser).callonIfExpression132,
																							expr: &seqExpr{
																								pos: position{line: 2510, col: 5, offset: 85497},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2510, col: 5, offset: 85497},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 14, offset: 85506},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 26, offset: 85518},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 38, offset: 85530},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 50, offset: 85542},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2539, col: 16, offset: 86678},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2539, col: 16, offset: 86678},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2540, col: 5, offset: 86781},
																							run: (*parser).callonIfExpression153,
																							expr: &seqExpr{
																								pos: position{line: 2540, col: 5, offset: 86781},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2540, col: 5, offset: 86781},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 14, offset: 86790},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 26, offset: 86802},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 38, offset: 86814},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 50, offset: 86826},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 62, offset: 86838},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 74, offset: 86850},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 86, offset: 86862},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 98, offset: 86874},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2574, col: 24, offset: 88259},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2574, col: 24, offset: 88259},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2574, col: 29, offset: 88264},
																									val:        "[abfnrtv\\\\\\]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2488, col: 75, offset: 84550},
																							val:        "[^\\\\\\\\n]",
																							chars:      []rune{'\'', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&seqExpr{
																							pos: position{line: 2490, col: 24, offset: 84696},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2490, col: 24, offset: 84696},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2407, col: 19, offset: 81885},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2407, col: 19, offset: 81885},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2407, col: 19, offset: 81885},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2491, col: 24, offset: 84763},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2491, col: 24, offset: 84763},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2492, col: 5, offset: 84800},
																							run: (*parser).callonIfExpression185,
																							expr: &seqExpr{
																								pos: position{line: 2492, col: 5, offset: 84800},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2492, col: 5, offset: 84800},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2492, col: 14, offset: 84809},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2492, col: 26, offset: 84821},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2575, col: 24, offset: 88342},
																							run: (*parser).callonIfExpression192,
																							expr: &seqExpr{
																								pos: position{line: 2575, col: 24, offset: 88342},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2575, col: 24, offset: 88342},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2599, col: 5, offset: 89358},
																							run: (*parser).callonIfExpression203,
																							expr: &seqExpr{
																								pos: position{line: 2599, col: 5, offset: 89358},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2599, col: 5, offset: 89358},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2620, col: 5, offset: 90199},
																							run: (*parser).callonIfExpression210,
																							expr: &seqExpr{
																								pos: position{line: 2620, col: 5, offset: 90199},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2620, col: 5, offset: 90199},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2638, col: 5, offset: 90884},
																							run: (*parser).callonIfExpression215,
																							expr: &seqExpr{
																								pos: position{line: 2638, col: 5, offset: 90884},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2638, col: 5, offset: 90884},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2638, col: 10, offset: 90889},
																										expr: &charClassMatcher{
																											pos:        position{line: 3801, col: 12, offset: 129325},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2462, col: 74, offset: 83429},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2462, col: 79, offset: 83434},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonIfExpression222,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1600, col: 5, offset: 51500},
											run: (*parser).callonIfExpression228,
											expr: &seqExpr{
												pos: position{line: 1600, col: 5, offset: 51500},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1600, col: 5, offset: 51500},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3803, col: 8, offset: 129341},
															run: (*parser).callonIfExpression231,
															expr: &choiceExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		expr: &anyMatcher{
																			line: 3803, col: 10, offset: 129343,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3803, col: 14, offset: 129347},
																		expr: &anyMatcher{
																			line: 3803, col: 15, offset: 129348,
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1600, col: 14, offset: 51509},
														expr: &choiceExpr{
															pos: position{line: 1579, col: 27, offset: 50770},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1579, col: 27, offset: 50770},
																	val:        "[)}]]",
																	chars:      []rune{')', '}', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1579, col: 36, offset: 50779},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1579, col: 36, offset: 50779},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1579, col: 40, offset: 50783},
																			expr: &litMatcher{
																				pos:        position{line: 1579, col: 41, offset: 50784},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3801, col: 12, offset: 129325},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1600, col: 46, offset: 51541},
														expr: &seqExpr{
															pos: position{line: 1600, col: 47, offset: 51542},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1600, col: 47, offset: 51542},
																	expr: &choiceExpr{
																		pos: position{line: 1579, col: 27, offset: 50770},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 1579, col: 27, offset: 50770},
																				val:        "[)}]]",
																				chars:      []rune{')', '}', ']'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 1579, col: 36, offset: 50779},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1579, col: 36, offset: 50779},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&notExpr{
																						pos: position{line: 1579, col: 40, offset: 50783},
																						expr: &litMatcher{
																							pos:        position{line: 1579, col: 41, offset: 50784},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1600, col: 71, offset: 51566},
																	expr: &seqExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3800, col: 12, offset: 129292},
																				expr: &charClassMatcher{
																					pos:        position{line: 3812, col: 36, offset: 129639},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								expr: &litMatcher{
																									pos:        position{line: 3800, col: 16, offset: 129296},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3800, col: 22, offset: 129302},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3799, col: 12, offset: 129278},
																						expr: &anyMatcher{
																							line: 3799, col: 13, offset: 129279,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1600, col: 76, offset: 51571},
																	val:        "[^\\\"`?([{]",
																	chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineIfExpression",
			pos:  position{line: 1607, col: 1, offset: 51736},
			expr: &choiceExpr{
				pos: position{line: 1607, col: 27, offset: 51762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1607, col: 27, offset: 51762},
						run: (*parser).callonSingleLineIfExpression2,
						expr: &labeledExpr{
							pos:   position{line: 1607, col: 27, offset: 51762},
							label: "cExprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 34, offset: 51769},
								name: "SingleLineChainExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1624, col: 5, offset: 52384},
						run: (*parser).callonSingleLineIfExpression5,
						expr: &labeledExpr{
							pos:   position{line: 1624, col: 5, offset: 52384},
							label: "exprsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1624, col: 12, offset: 52391},
								expr: &choiceExpr{
									pos: position{line: 1625, col: 5, offset: 52397},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1625, col: 5, offset: 52397},
											name: "singleLineGoParenExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 1625, col: 29, offset: 52421},
											name: "StringExpression",
										},
										&ruleRefExpr{
											pos:  position{line: 1625, col: 48, offset: 52440},
											name: "SingleLineTernaryExpression",
										},
										&actionExpr{
											pos: position{line: 1481, col: 15, offset: 47405},
											run: (*parser).callonSingleLineIfExpression12,
											expr: &seqExpr{
												pos: position{line: 1481, col: 15, offset: 47405},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1481, col: 15, offset: 47405},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3803, col: 8, offset: 129341},
															run: (*parser).callonSingleLineIfExpression15,
															expr: &choiceExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		expr: &anyMatcher{
																			line: 3803, col: 10, offset: 129343,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3803, col: 14, offset: 129347},
																		expr: &anyMatcher{
																			line: 3803, col: 15, offset: 129348,
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2461, col: 14, offset: 83287},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2461, col: 14, offset: 83287},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&choiceExpr{
																		pos: position{line: 2461, col: 20, offset: 83293},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 2509, col: 19, offset: 85438},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2509, col: 19, offset: 85438},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2510, col: 5, offset: 85497},
																				run: (*parser).callonSingleLineIfExpression31,
																				expr: &seqExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2510, col: 5, offset: 85497},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 14, offset: 85506},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 26, offset: 85518},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 38, offset: 85530},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2510, col: 50, offset: 85542},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2539, col: 16, offset: 86678},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2539, col: 16, offset: 86678},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2540, col: 5, offset: 86781},
																				run: (*parser).callonSingleLineIfExpression52,
																				expr: &seqExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2540, col: 5, offset: 86781},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 14, offset: 86790},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 26, offset: 86802},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 38, offset: 86814},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 50, offset: 86826},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 62, offset: 86838},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 74, offset: 86850},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 86, offset: 86862},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2540, col: 98, offset: 86874},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2574, col: 24, offset: 88259},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2574, col: 24, offset: 88259},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2574, col: 29, offset: 88264},
																						val:        "[abfnrtv\\\\\\]",
																						chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 2488, col: 75, offset: 84550},
																				val:        "[^\\\\\\\\n]",
																				chars:      []rune{'\'', '\\', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																			&seqExpr{
																				pos: position{line: 2490, col: 24, offset: 84696},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2490, col: 24, offset: 84696},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2407, col: 19, offset: 81885},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2407, col: 19, offset: 81885},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2407, col: 19, offset: 81885},
																						val:        "[0-7]",
																						ranges:     []rune{'0', '7'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2491, col: 24, offset: 84763},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2491, col: 24, offset: 84763},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2492, col: 5, offset: 84800},
																				run: (*parser).callonSingleLineIfExpression84,
																				expr: &seqExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2492, col: 5, offset: 84800},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2492, col: 14, offset: 84809},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2492, col: 26, offset: 84821},
																							expr: &charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2575, col: 24, offset: 88342},
																				run: (*parser).callonSingleLineIfExpression91,
																				expr: &seqExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2575, col: 24, offset: 88342},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2599, col: 5, offset: 89358},
																				run: (*parser).callonSingleLineIfExpression102,
																				expr: &seqExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2599, col: 5, offset: 89358},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2620, col: 5, offset: 90199},
																				run: (*parser).callonSingleLineIfExpression109,
																				expr: &seqExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2620, col: 5, offset: 90199},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2638, col: 5, offset: 90884},
																				run: (*parser).callonSingleLineIfExpression114,
																				expr: &seqExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2638, col: 5, offset: 90884},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2638, col: 10, offset: 90889},
																							expr: &charClassMatcher{
																								pos:        position{line: 3801, col: 12, offset: 129325},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2461, col: 76, offset: 83349},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2462, col: 5, offset: 83360},
																run: (*parser).callonSingleLineIfExpression120,
																expr: &seqExpr{
																	pos: position{line: 2462, col: 5, offset: 83360},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2462, col: 5, offset: 83360},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2462, col: 10, offset: 83365},
																			label: "valsI",
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2462, col: 16, offset: 83371},
																				expr: &choiceExpr{
																					pos: position{line: 2462, col: 17, offset: 83372},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2509, col: 19, offset: 85438},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2509, col: 19, offset: 85438},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2510, col: 5, offset: 85497},
																							run: (*parser).callonSingleLineIfExpression132,
																							expr: &seqExpr{
																								pos: position{line: 2510, col: 5, offset: 85497},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2510, col: 5, offset: 85497},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 14, offset: 85506},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 26, offset: 85518},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 38, offset: 85530},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2510, col: 50, offset: 85542},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2539, col: 16, offset: 86678},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2539, col: 16, offset: 86678},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2540, col: 5, offset: 86781},
																							run: (*parser).callonSingleLineIfExpression153,
																							expr: &seqExpr{
																								pos: position{line: 2540, col: 5, offset: 86781},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2540, col: 5, offset: 86781},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 14, offset: 86790},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 26, offset: 86802},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 38, offset: 86814},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 50, offset: 86826},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 62, offset: 86838},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 74, offset: 86850},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 86, offset: 86862},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2540, col: 98, offset: 86874},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2574, col: 24, offset: 88259},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2574, col: 24, offset: 88259},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2574, col: 29, offset: 88264},
																									val:        "[abfnrtv\\\\\\]",
																									chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 2488, col: 75, offset: 84550},
																							val:        "[^\\\\\\\\n]",
																							chars:      []rune{'\'', '\\', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																						&seqExpr{
																							pos: position{line: 2490, col: 24, offset: 84696},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2490, col: 24, offset: 84696},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2407, col: 19, offset: 81885},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2407, col: 19, offset: 81885},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2407, col: 19, offset: 81885},
																									val:        "[0-7]",
																									ranges:     []rune{'0', '7'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2491, col: 24, offset: 84763},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2491, col: 24, offset: 84763},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2492, col: 5, offset: 84800},
																							run: (*parser).callonSingleLineIfExpression185,
																							expr: &seqExpr{
																								pos: position{line: 2492, col: 5, offset: 84800},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2492, col: 5, offset: 84800},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2492, col: 14, offset: 84809},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2492, col: 26, offset: 84821},
																										expr: &charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2575, col: 24, offset: 88342},
																							run: (*parser).callonSingleLineIfExpression192,
																							expr: &seqExpr{
																								pos: position{line: 2575, col: 24, offset: 88342},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2575, col: 24, offset: 88342},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2599, col: 5, offset: 89358},
																							run: (*parser).callonSingleLineIfExpression203,
																							expr: &seqExpr{
																								pos: position{line: 2599, col: 5, offset: 89358},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2599, col: 5, offset: 89358},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2620, col: 5, offset: 90199},
																							run: (*parser).callonSingleLineIfExpression210,
																							expr: &seqExpr{
																								pos: position{line: 2620, col: 5, offset: 90199},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2620, col: 5, offset: 90199},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2638, col: 5, offset: 90884},
																							run: (*parser).callonSingleLineIfExpression215,
																							expr: &seqExpr{
																								pos: position{line: 2638, col: 5, offset: 90884},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2638, col: 5, offset: 90884},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2638, col: 10, offset: 90889},
																										expr: &charClassMatcher{
																											pos:        position{line: 3801, col: 12, offset: 129325},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2462, col: 74, offset: 83429},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 2462, col: 79, offset: 83434},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonSingleLineIfExpression222,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1626, col: 5, offset: 52487},
											run: (*parser).callonSingleLineIfExpression228,
											expr: &seqExpr{
												pos: position{line: 1626, col: 5, offset: 52487},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1626, col: 5, offset: 52487},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 3803, col: 8, offset: 129341},
															run: (*parser).callonSingleLineIfExpression231,
															expr: &choiceExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																alternatives: []interface{}{
																	&andExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		expr: &anyMatcher{
																			line: 3803, col: 10, offset: 129343,
																		},
																	},
																	&notExpr{
																		pos: position{line: 3803, col: 14, offset: 129347},
																		expr: &anyMatcher{
																			line: 3803, col: 15, offset: 129348,
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 1626, col: 14, offset: 52496},
														expr: &choiceExpr{
															pos: position{line: 1579, col: 27, offset: 50770},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 1579, col: 27, offset: 50770},
																	val:        "[)}]]",
																	chars:      []rune{')', '}', ']'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 1579, col: 36, offset: 50779},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1579, col: 36, offset: 50779},
																			val:        ":",
																			ignoreCase: false,
																			want:       "\":\"",
																		},
																		&notExpr{
																			pos: position{line: 1579, col: 40, offset: 50783},
																			expr: &litMatcher{
																				pos:        position{line: 1579, col: 41, offset: 50784},
																				val:        "=",
																				ignoreCase: false,
																				want:       "\"=\"",
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3801, col: 12, offset: 129325},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1626, col: 46, offset: 52528},
														expr: &seqExpr{
															pos: position{line: 1626, col: 47, offset: 52529},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1626, col: 47, offset: 52529},
																	expr: &choiceExpr{
																		pos: position{line: 1579, col: 27, offset: 50770},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 1579, col: 27, offset: 50770},
																				val:        "[)}]]",
																				chars:      []rune{')', '}', ']'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 1579, col: 36, offset: 50779},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1579, col: 36, offset: 50779},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																					&notExpr{
																						pos: position{line: 1579, col: 40, offset: 50783},
																						expr: &litMatcher{
																							pos:        position{line: 1579, col: 41, offset: 50784},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1626, col: 71, offset: 52553},
																	expr: &seqExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3800, col: 12, offset: 129292},
																				expr: &charClassMatcher{
																					pos:        position{line: 3812, col: 36, offset: 129639},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								expr: &litMatcher{
																									pos:        position{line: 3800, col: 16, offset: 129296},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3800, col: 22, offset: 129302},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3799, col: 12, offset: 129278},
																						expr: &anyMatcher{
																							line: 3799, col: 13, offset: 129279,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1626, col: 76, offset: 52558},
																	val:        "[^\\\"`?([{]",
																	chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ForExpression",
			pos:  position{line: 1637, col: 1, offset: 52912},
			expr: &choiceExpr{
				pos: position{line: 1637, col: 18, offset: 52929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1637, col: 18, offset: 52929},
						run: (*parser).callonForExpression2,
						expr: &seqExpr{
							pos: position{line: 1637, col: 18, offset: 52929},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1637, col: 18, offset: 52929},
									expr: &litMatcher{
										pos:        position{line: 1637, col: 18, offset: 52929},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1637, col: 23, offset: 52934},
									label: "rExprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1637, col: 30, offset: 52941},
										name: "RangeExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1639, col: 5, offset: 53063},
						run: (*parser).callonForExpression8,
						expr: &seqExpr{
							pos: position{line: 1639, col: 5, offset: 53063},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1639, col: 5, offset: 53063},
									expr: &litMatcher{
										pos:        position{line: 1639, col: 5, offset: 53063},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1639, col: 10, offset: 53068},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1639, col: 16, offset: 53074},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1641, col: 5, offset: 53138},
						run: (*parser).callonForExpression14,
						expr: &andExpr{
							pos: position{line: 1641, col: 5, offset: 53138},
							expr: &seqExpr{
								pos: position{line: 1641, col: 7, offset: 53140},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 1641, col: 7, offset: 53140},
										expr: &litMatcher{
											pos:        position{line: 1641, col: 7, offset: 53140},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&choiceExpr{
										pos: position{line: 1641, col: 13, offset: 53146},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1641, col: 19, offset: 53152},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineForExpression",
			pos:  position{line: 1645, col: 1, offset: 53203},
			expr: &choiceExpr{
				pos: position{line: 1645, col: 28, offset: 53230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1645, col: 28, offset: 53230},
						run: (*parser).callonSingleLineForExpression2,
						expr: &seqExpr{
							pos: position{line: 1645, col: 28, offset: 53230},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1645, col: 28, offset: 53230},
									expr: &litMatcher{
										pos:        position{line: 1645, col: 28, offset: 53230},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1645, col: 33, offset: 53235},
									label: "rExprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1645, col: 40, offset: 53242},
										name: "SingleLineRangeExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1647, col: 5, offset: 53374},
						run: (*parser).callonSingleLineForExpression8,
						expr: &seqExpr{
							pos: position{line: 1647, col: 5, offset: 53374},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1647, col: 5, offset: 53374},
									expr: &litMatcher{
										pos:        position{line: 1647, col: 5, offset: 53374},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1647, col: 10, offset: 53379},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1647, col: 16, offset: 53385},
										name: "SingleLineIfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1649, col: 5, offset: 53459},
						run: (*parser).callonSingleLineForExpression14,
						expr: &andExpr{
							pos: position{line: 1649, col: 5, offset: 53459},
							expr: &seqExpr{
								pos: position{line: 1649, col: 7, offset: 53461},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 1649, col: 7, offset: 53461},
										expr: &litMatcher{
											pos:        position{line: 1649, col: 7, offset: 53461},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&choiceExpr{
										pos: position{line: 1649, col: 13, offset: 53467},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1649, col: 19, offset: 53473},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RangeExpression",
			pos:  position{line: 1653, col: 1, offset: 53524},
			expr: &actionExpr{
				pos: position{line: 1653, col: 20, offset: 53543},
				run: (*parser).callonRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1653, col: 20, offset: 53543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1653, col: 20, offset: 53543},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1653, col: 26, offset: 53549},
								expr: &actionExpr{
									pos: position{line: 1687, col: 24, offset: 54515},
									run: (*parser).callonRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1687, col: 24, offset: 54515},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1687, col: 24, offset: 54515},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 2375, col: 12, offset: 81034},
													run: (*parser).callonRangeExpression8,
													expr: &labeledExpr{
														pos:   position{line: 2375, col: 12, offset: 81034},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1687, col: 38, offset: 54529},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1687, col: 44, offset: 54535},
													expr: &seqExpr{
														pos: position{line: 1687, col: 45, offset: 54536},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1687, col: 45, offset: 54536},
																expr: &litMatcher{
																	pos:        position{line: 1687, col: 45, offset: 54536},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&litMatcher{
																pos:        position{line: 1687, col: 50, offset: 54541},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1687, col: 54, offset: 54545},
																expr: &litMatcher{
																	pos:        position{line: 1687, col: 54, offset: 54545},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&actionExpr{
																pos: position{line: 2375, col: 12, offset: 81034},
																run: (*parser).callonRangeExpression22,
																expr: &labeledExpr{
																	pos:   position{line: 2375, col: 12, offset: 81034},
																	label: "ident",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1687, col: 69, offset: 54560},
												expr: &litMatcher{
													pos:        position{line: 1687, col: 69, offset: 54560},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1687, col: 74, offset: 54565},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonRangeExpression31,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1687, col: 85, offset: 54576},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1687, col: 95, offset: 54586},
													expr: &litMatcher{
														pos:        position{line: 1687, col: 95, offset: 54586},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1687, col: 100, offset: 54591},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1687, col: 104, offset: 54595},
												expr: &litMatcher{
													pos:        position{line: 1687, col: 104, offset: 54595},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1653, col: 47, offset: 53570},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1653, col: 56, offset: 53579},
								expr: &seqExpr{
									pos: position{line: 1653, col: 57, offset: 53580},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1653, col: 57, offset: 53580},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1653, col: 67, offset: 53590},
											expr: &litMatcher{
												pos:        position{line: 1653, col: 67, offset: 53590},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1653, col: 74, offset: 53597},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1653, col: 82, offset: 53605},
							expr: &litMatcher{
								pos:        position{line: 1653, col: 82, offset: 53605},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1653, col: 87, offset: 53610},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1653, col: 93, offset: 53616},
								name: "SingleLineExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRangeExpression",
			pos:  position{line: 1670, col: 1, offset: 54003},
			expr: &actionExpr{
				pos: position{line: 1670, col: 30, offset: 54032},
				run: (*parser).callonSingleLineRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1670, col: 30, offset: 54032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1670, col: 30, offset: 54032},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1670, col: 36, offset: 54038},
								expr: &actionExpr{
									pos: position{line: 1687, col: 24, offset: 54515},
									run: (*parser).callonSingleLineRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1687, col: 24, offset: 54515},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1687, col: 24, offset: 54515},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 2375, col: 12, offset: 81034},
													run: (*parser).callonSingleLineRangeExpression8,
													expr: &labeledExpr{
														pos:   position{line: 2375, col: 12, offset: 81034},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1687, col: 38, offset: 54529},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1687, col: 44, offset: 54535},
													expr: &seqExpr{
														pos: position{line: 1687, col: 45, offset: 54536},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1687, col: 45, offset: 54536},
																expr: &litMatcher{
																	pos:        position{line: 1687, col: 45, offset: 54536},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&litMatcher{
																pos:        position{line: 1687, col: 50, offset: 54541},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1687, col: 54, offset: 54545},
																expr: &litMatcher{
																	pos:        position{line: 1687, col: 54, offset: 54545},
																	val:        " ",
																	ignoreCase: false,
																	want:       "\" \"",
																},
															},
															&actionExpr{
																pos: position{line: 2375, col: 12, offset: 81034},
																run: (*parser).callonSingleLineRangeExpression22,
																expr: &labeledExpr{
																	pos:   position{line: 2375, col: 12, offset: 81034},
																	label: "ident",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1687, col: 69, offset: 54560},
												expr: &litMatcher{
													pos:        position{line: 1687, col: 69, offset: 54560},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1687, col: 74, offset: 54565},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonSingleLineRangeExpression31,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1687, col: 85, offset: 54576},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1687, col: 95, offset: 54586},
													expr: &litMatcher{
														pos:        position{line: 1687, col: 95, offset: 54586},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1687, col: 100, offset: 54591},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1687, col: 104, offset: 54595},
												expr: &litMatcher{
													pos:        position{line: 1687, col: 104, offset: 54595},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1670, col: 57, offset: 54059},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1670, col: 66, offset: 54068},
								expr: &seqExpr{
									pos: position{line: 1670, col: 67, offset: 54069},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1670, col: 67, offset: 54069},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1670, col: 77, offset: 54079},
											expr: &litMatcher{
												pos:        position{line: 1670, col: 77, offset: 54079},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1670, col: 84, offset: 54086},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1670, col: 92, offset: 54094},
							expr: &litMatcher{
								pos:        position{line: 1670, col: 92, offset: 54094},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1670, col: 97, offset: 54099},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1670, col: 103, offset: 54105},
								name: "SingleLineExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "StringExpression",
			pos:  position{line: 1708, col: 1, offset: 55124},
			expr: &choiceExpr{
				pos: position{line: 1708, col: 21, offset: 55144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1708, col: 21, offset: 55144},
						name: "InterpretedStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1708, col: 51, offset: 55174},
						name: "RawStringExpression",
					},
				},
			},
		},
		{
			name: "InterpretedStringExpression",
			pos:  position{line: 1710, col: 1, offset: 55195},
			expr: &choiceExpr{
				pos: position{line: 1710, col: 32, offset: 55226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1710, col: 32, offset: 55226},
						run: (*parser).callonInterpretedStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1710, col: 32, offset: 55226},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1710, col: 32, offset: 55226},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1710, col: 36, offset: 55230},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1710, col: 46, offset: 55240},
										expr: &ruleRefExpr{
											pos:  position{line: 1710, col: 46, offset: 55240},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1710, col: 79, offset: 55273},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1716, col: 5, offset: 55442},
						run: (*parser).callonInterpretedStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1716, col: 5, offset: 55442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1716, col: 5, offset: 55442},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1716, col: 9, offset: 55446},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonInterpretedStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1716, col: 23, offset: 55460},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1716, col: 33, offset: 55470},
										expr: &ruleRefExpr{
											pos:  position{line: 1716, col: 33, offset: 55470},
											name: "InterpretedStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawStringExpression",
			pos:  position{line: 1736, col: 1, offset: 56120},
			expr: &choiceExpr{
				pos: position{line: 1736, col: 24, offset: 56143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1736, col: 24, offset: 56143},
						run: (*parser).callonRawStringExpression2,
						expr: &seqExpr{
							pos: position{line: 1736, col: 24, offset: 56143},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1736, col: 24, offset: 56143},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1736, col: 28, offset: 56147},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1736, col: 38, offset: 56157},
										expr: &ruleRefExpr{
											pos:  position{line: 1736, col: 38, offset: 56157},
											name: "RawStringExpressionItem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1736, col: 63, offset: 56182},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1742, col: 5, offset: 56351},
						run: (*parser).callonRawStringExpression9,
						expr: &seqExpr{
							pos: position{line: 1742, col: 5, offset: 56351},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1742, col: 5, offset: 56351},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1742, col: 9, offset: 56355},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonRawStringExpression13,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1742, col: 23, offset: 56369},
									label: "contentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1742, col: 33, offset: 56379},
										expr: &ruleRefExpr{
											pos:  position{line: 1742, col: 33, offset: 56379},
											name: "RawStringExpressionItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringExpressionItem",
			pos:  position{line: 1763, col: 1, offset: 57021},
			expr: &choiceExpr{
				pos: position{line: 1763, col: 36, offset: 57056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1766, col: 36, offset: 57247},
						run: (*parser).callonInterpretedStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1766, col: 36, offset: 57247},
							expr: &choiceExpr{
								pos: position{line: 1766, col: 37, offset: 57248},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1766, col: 37, offset: 57248},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1766, col: 44, offset: 57255},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1766, col: 44, offset: 57255},
												expr: &litMatcher{
													pos:        position{line: 1766, col: 45, offset: 57256},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&choiceExpr{
												pos: position{line: 2764, col: 36, offset: 95635},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2509, col: 19, offset: 85438},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2509, col: 19, offset: 85438},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2510, col: 5, offset: 85497},
														run: (*parser).callonInterpretedStringExpressionItem16,
														expr: &seqExpr{
															pos: position{line: 2510, col: 5, offset: 85497},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2510, col: 5, offset: 85497},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 14, offset: 85506},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 26, offset: 85518},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 38, offset: 85530},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 50, offset: 85542},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2539, col: 16, offset: 86678},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2539, col: 16, offset: 86678},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2540, col: 5, offset: 86781},
														run: (*parser).callonInterpretedStringExpressionItem37,
														expr: &seqExpr{
															pos: position{line: 2540, col: 5, offset: 86781},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2540, col: 5, offset: 86781},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 14, offset: 86790},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 26, offset: 86802},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 38, offset: 86814},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 50, offset: 86826},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 62, offset: 86838},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 74, offset: 86850},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 86, offset: 86862},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 98, offset: 86874},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2767, col: 36, offset: 95811},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2767, col: 36, offset: 95811},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2767, col: 41, offset: 95816},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2765, col: 38, offset: 95703},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2490, col: 24, offset: 84696},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2490, col: 24, offset: 84696},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&charClassMatcher{
												pos:        position{line: 2407, col: 19, offset: 81885},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2407, col: 19, offset: 81885},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2407, col: 19, offset: 81885},
												val:        "[0-7]",
												ranges:     []rune{'0', '7'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2491, col: 24, offset: 84763},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2491, col: 24, offset: 84763},
												val:        "\\x",
												ignoreCase: false,
												want:       "\"\\\\x\"",
											},
											&charClassMatcher{
												pos:        position{line: 2408, col: 19, offset: 81909},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 2408, col: 19, offset: 81909},
												val:        "[0-9A-Fa-f]",
												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2492, col: 5, offset: 84800},
										run: (*parser).callonInterpretedStringExpressionItem69,
										expr: &seqExpr{
											pos: position{line: 2492, col: 5, offset: 84800},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2492, col: 5, offset: 84800},
													val:        "\\x",
													ignoreCase: false,
													want:       "\"\\\\x\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2492, col: 14, offset: 84809},
													expr: &charClassMatcher{
														pos:        position{line: 2408, col: 19, offset: 81909},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2492, col: 26, offset: 84821},
													expr: &charClassMatcher{
														pos:        position{line: 2408, col: 19, offset: 81909},
														val:        "[0-9A-Fa-f]",
														ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2654, col: 37, offset: 91461},
										run: (*parser).callonInterpretedStringExpressionItem76,
										expr: &seqExpr{
											pos: position{line: 2654, col: 37, offset: 91461},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2654, col: 37, offset: 91461},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2678, col: 5, offset: 92478},
										run: (*parser).callonInterpretedStringExpressionItem87,
										expr: &seqExpr{
											pos: position{line: 2678, col: 5, offset: 92478},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2678, col: 5, offset: 92478},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2699, col: 5, offset: 93320},
										run: (*parser).callonInterpretedStringExpressionItem94,
										expr: &seqExpr{
											pos: position{line: 2699, col: 5, offset: 93320},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2699, col: 5, offset: 93320},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 2408, col: 19, offset: 81909},
													val:        "[0-9A-Fa-f]",
													ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2717, col: 5, offset: 94006},
										run: (*parser).callonInterpretedStringExpressionItem99,
										expr: &seqExpr{
											pos: position{line: 2717, col: 5, offset: 94006},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2717, col: 5, offset: 94006},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 2717, col: 10, offset: 94011},
													expr: &charClassMatcher{
														pos:        position{line: 3801, col: 12, offset: 129325},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1763, col: 70, offset: 57090},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringExpressionItem",
			pos:  position{line: 1764, col: 1, offset: 57120},
			expr: &choiceExpr{
				pos: position{line: 1764, col: 36, offset: 57155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1772, col: 28, offset: 57479},
						run: (*parser).callonRawStringExpressionItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1772, col: 28, offset: 57479},
							expr: &choiceExpr{
								pos: position{line: 1772, col: 29, offset: 57480},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1772, col: 29, offset: 57480},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1772, col: 36, offset: 57487},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1772, col: 36, offset: 57487},
												expr: &litMatcher{
													pos:        position{line: 1772, col: 37, offset: 57488},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2751, col: 27, offset: 95033},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 62, offset: 57181},
						name: "StringExpressionInterpolation",
					},
				},
			},
		},
		{
			name: "StringExpressionInterpolation",
			pos:  position{line: 1779, col: 1, offset: 57627},
			expr: &choiceExpr{
				pos: position{line: 1779, col: 34, offset: 57660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1779, col: 34, offset: 57660},
						run: (*parser).callonStringExpressionInterpolation2,
						expr: &seqExpr{
							pos: position{line: 1779, col: 34, offset: 57660},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1779, col: 34, offset: 57660},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1779, col: 38, offset: 57664},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1779, col: 52, offset: 57678},
										expr: &choiceExpr{
											pos: position{line: 1844, col: 17, offset: 60271},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1844, col: 17, offset: 60271},
													run: (*parser).callonStringExpressionInterpolation8,
													expr: &seqExpr{
														pos: position{line: 1844, col: 17, offset: 60271},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1844, col: 17, offset: 60271},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1844, col: 21, offset: 60275},
																expr: &charClassMatcher{
																	pos:        position{line: 1860, col: 12, offset: 60952},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1844, col: 30, offset: 60284},
																expr: &seqExpr{
																	pos: position{line: 1844, col: 31, offset: 60285},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1844, col: 31, offset: 60285},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1844, col: 36, offset: 60290},
																			expr: &charClassMatcher{
																				pos:        position{line: 1844, col: 36, offset: 60290},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1844, col: 45, offset: 60299},
																expr: &seqExpr{
																	pos: position{line: 1844, col: 46, offset: 60300},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1844, col: 46, offset: 60300},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1844, col: 50, offset: 60304},
																			expr: &charClassMatcher{
																				pos:        position{line: 1844, col: 50, offset: 60304},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1861, col: 12, offset: 60971},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1861, col: 12, offset: 60971},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1861, col: 74, offset: 61033},
																		run: (*parser).callonStringExpressionInterpolation25,
																		expr: &andExpr{
																			pos: position{line: 1861, col: 74, offset: 61033},
																			expr: &charClassMatcher{
																				pos:        position{line: 1861, col: 76, offset: 61035},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1873, col: 5, offset: 61572},
																		run: (*parser).callonStringExpressionInterpolation28,
																		expr: &anyMatcher{
																			line: 1873, col: 5, offset: 61572,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1846, col: 5, offset: 60362},
													run: (*parser).callonStringExpressionInterpolation30,
													expr: &seqExpr{
														pos: position{line: 1846, col: 5, offset: 60362},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1846, col: 5, offset: 60362},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1846, col: 9, offset: 60366},
																expr: &charClassMatcher{
																	pos:        position{line: 1846, col: 9, offset: 60366},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1846, col: 17, offset: 60374},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonStringExpressionInterpolation36,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1779, col: 66, offset: 57692},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3825, col: 12, offset: 130054},
										run: (*parser).callonStringExpressionInterpolation43,
										expr: &litMatcher{
											pos:        position{line: 3825, col: 12, offset: 130054},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1779, col: 85, offset: 57711},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1779, col: 91, offset: 57717},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1779, col: 112, offset: 57738},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3826, col: 12, offset: 130092},
										run: (*parser).callonStringExpressionInterpolation48,
										expr: &litMatcher{
											pos:        position{line: 3826, col: 12, offset: 130092},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1787, col: 5, offset: 58048},
						run: (*parser).callonStringExpressionInterpolation50,
						expr: &seqExpr{
							pos: position{line: 1787, col: 5, offset: 58048},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1787, col: 5, offset: 58048},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1787, col: 9, offset: 58052},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1787, col: 23, offset: 58066},
										expr: &choiceExpr{
											pos: position{line: 1844, col: 17, offset: 60271},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1844, col: 17, offset: 60271},
													run: (*parser).callonStringExpressionInterpolation56,
													expr: &seqExpr{
														pos: position{line: 1844, col: 17, offset: 60271},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1844, col: 17, offset: 60271},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1844, col: 21, offset: 60275},
																expr: &charClassMatcher{
																	pos:        position{line: 1860, col: 12, offset: 60952},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1844, col: 30, offset: 60284},
																expr: &seqExpr{
																	pos: position{line: 1844, col: 31, offset: 60285},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1844, col: 31, offset: 60285},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1844, col: 36, offset: 60290},
																			expr: &charClassMatcher{
																				pos:        position{line: 1844, col: 36, offset: 60290},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1844, col: 45, offset: 60299},
																expr: &seqExpr{
																	pos: position{line: 1844, col: 46, offset: 60300},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1844, col: 46, offset: 60300},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1844, col: 50, offset: 60304},
																			expr: &charClassMatcher{
																				pos:        position{line: 1844, col: 50, offset: 60304},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1861, col: 12, offset: 60971},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1861, col: 12, offset: 60971},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1861, col: 74, offset: 61033},
																		run: (*parser).callonStringExpressionInterpolation73,
																		expr: &andExpr{
																			pos: position{line: 1861, col: 74, offset: 61033},
																			expr: &charClassMatcher{
																				pos:        position{line: 1861, col: 76, offset: 61035},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1873, col: 5, offset: 61572},
																		run: (*parser).callonStringExpressionInterpolation76,
																		expr: &anyMatcher{
																			line: 1873, col: 5, offset: 61572,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1846, col: 5, offset: 60362},
													run: (*parser).callonStringExpressionInterpolation78,
													expr: &seqExpr{
														pos: position{line: 1846, col: 5, offset: 60362},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1846, col: 5, offset: 60362},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1846, col: 9, offset: 60366},
																expr: &charClassMatcher{
																	pos:        position{line: 1846, col: 9, offset: 60366},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1846, col: 17, offset: 60374},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonStringExpressionInterpolation84,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1787, col: 37, offset: 58080},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonStringExpressionInterpolation91,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1814, col: 5, offset: 59090},
						run: (*parser).callonStringExpressionInterpolation97,
						expr: &seqExpr{
							pos: position{line: 1814, col: 5, offset: 59090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1814, col: 5, offset: 59090},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1814, col: 9, offset: 59094},
									label: "fmtDirectiveI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1814, col: 23, offset: 59108},
										expr: &choiceExpr{
											pos: position{line: 1844, col: 17, offset: 60271},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 1844, col: 17, offset: 60271},
													run: (*parser).callonStringExpressionInterpolation103,
													expr: &seqExpr{
														pos: position{line: 1844, col: 17, offset: 60271},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1844, col: 17, offset: 60271},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1844, col: 21, offset: 60275},
																expr: &charClassMatcher{
																	pos:        position{line: 1860, col: 12, offset: 60952},
																	val:        "[ 0+-#]",
																	chars:      []rune{' ', '0'},
																	ranges:     []rune{'+', '#'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1844, col: 30, offset: 60284},
																expr: &seqExpr{
																	pos: position{line: 1844, col: 31, offset: 60285},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 1844, col: 31, offset: 60285},
																			val:        "[1-9]",
																			ranges:     []rune{'1', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1844, col: 36, offset: 60290},
																			expr: &charClassMatcher{
																				pos:        position{line: 1844, col: 36, offset: 60290},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 1844, col: 45, offset: 60299},
																expr: &seqExpr{
																	pos: position{line: 1844, col: 46, offset: 60300},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 1844, col: 46, offset: 60300},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1844, col: 50, offset: 60304},
																			expr: &charClassMatcher{
																				pos:        position{line: 1844, col: 50, offset: 60304},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 1861, col: 12, offset: 60971},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1861, col: 12, offset: 60971},
																		val:        "[vTtbcdoOqxXUeEfFgGsp]",
																		chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 1861, col: 74, offset: 61033},
																		run: (*parser).callonStringExpressionInterpolation120,
																		expr: &andExpr{
																			pos: position{line: 1861, col: 74, offset: 61033},
																			expr: &charClassMatcher{
																				pos:        position{line: 1861, col: 76, offset: 61035},
																				val:        "[{\"`]",
																				chars:      []rune{'{', '"', '`'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1873, col: 5, offset: 61572},
																		run: (*parser).callonStringExpressionInterpolation123,
																		expr: &anyMatcher{
																			line: 1873, col: 5, offset: 61572,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1846, col: 5, offset: 60362},
													run: (*parser).callonStringExpressionInterpolation125,
													expr: &seqExpr{
														pos: position{line: 1846, col: 5, offset: 60362},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1846, col: 5, offset: 60362},
																val:        "%",
																ignoreCase: false,
																want:       "\"%\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1846, col: 9, offset: 60366},
																expr: &charClassMatcher{
																	pos:        position{line: 1846, col: 9, offset: 60366},
																	val:        "[^`\"{]",
																	chars:      []rune{'`', '"', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&labeledExpr{
																pos:   position{line: 1846, col: 17, offset: 60374},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonStringExpressionInterpolation131,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1814, col: 37, offset: 59122},
									label: "parenPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonStringExpressionInterpolation138,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1814, col: 51, offset: 59136},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3825, col: 12, offset: 130054},
										run: (*parser).callonStringExpressionInterpolation145,
										expr: &litMatcher{
											pos:        position{line: 3825, col: 12, offset: 130054},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1814, col: 70, offset: 59155},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonStringExpressionInterpolation148,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1814, col: 84, offset: 59169},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1814, col: 90, offset: 59175},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TernaryExpression",
			pos:  position{line: 1897, col: 1, offset: 62387},
			expr: &choiceExpr{
				pos: position{line: 1897, col: 22, offset: 62408},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1897, col: 22, offset: 62408},
						run: (*parser).callonTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1897, col: 22, offset: 62408},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1897, col: 22, offset: 62408},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1897, col: 27, offset: 62413},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1897, col: 31, offset: 62417},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1897, col: 42, offset: 62428},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1897, col: 64, offset: 62450},
									expr: &litMatcher{
										pos:        position{line: 1897, col: 64, offset: 62450},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1897, col: 69, offset: 62455},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1897, col: 73, offset: 62459},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1897, col: 77, offset: 62463},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1897, col: 85, offset: 62471},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1897, col: 107, offset: 62493},
									expr: &litMatcher{
										pos:        position{line: 1897, col: 107, offset: 62493},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1897, col: 112, offset: 62498},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1897, col: 116, offset: 62502},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1897, col: 120, offset: 62506},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1897, col: 129, offset: 62515},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1897, col: 151, offset: 62537},
									expr: &litMatcher{
										pos:        position{line: 1897, col: 151, offset: 62537},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1897, col: 156, offset: 62542},
									expr: &seqExpr{
										pos: position{line: 1897, col: 157, offset: 62543},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1897, col: 157, offset: 62543},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1897, col: 161, offset: 62547},
												expr: &choiceExpr{
													pos: position{line: 3816, col: 20, offset: 129757},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1897, col: 167, offset: 62553},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonTernaryExpression51,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1905, col: 5, offset: 62834},
						run: (*parser).callonTernaryExpression53,
						expr: &seqExpr{
							pos: position{line: 1905, col: 5, offset: 62834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1905, col: 5, offset: 62834},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1905, col: 10, offset: 62839},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonTernaryExpression57,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1905, col: 24, offset: 62853},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1905, col: 28, offset: 62857},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonTernaryExpression71,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1919, col: 5, offset: 63448},
						run: (*parser).callonTernaryExpression73,
						expr: &seqExpr{
							pos: position{line: 1919, col: 5, offset: 63448},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1919, col: 5, offset: 63448},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1919, col: 10, offset: 63453},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 14, offset: 63457},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1919, col: 25, offset: 63468},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 47, offset: 63490},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1891, col: 13, offset: 62298},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1891, col: 13, offset: 62298},
												run: (*parser).callonTernaryExpression87,
												expr: &seqExpr{
													pos: position{line: 1891, col: 13, offset: 62298},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 13, offset: 62298},
															expr: &litMatcher{
																pos:        position{line: 1891, col: 13, offset: 62298},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1891, col: 18, offset: 62303},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1891, col: 22, offset: 62307},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonTernaryExpression93,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 31, offset: 62316},
															expr: &choiceExpr{
																pos: position{line: 3816, col: 20, offset: 129757},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3813, col: 36, offset: 129680},
																				expr: &litMatcher{
																					pos:        position{line: 3813, col: 36, offset: 129680},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3813, col: 42, offset: 129686},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1893, col: 5, offset: 62347},
												run: (*parser).callonTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1893, col: 5, offset: 62347},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1893, col: 5, offset: 62347},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonTernaryExpression109,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1893, col: 14, offset: 62356},
															expr: &litMatcher{
																pos:        position{line: 1893, col: 14, offset: 62356},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1919, col: 66, offset: 63509},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonTernaryExpression118,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1934, col: 5, offset: 64135},
						run: (*parser).callonTernaryExpression120,
						expr: &seqExpr{
							pos: position{line: 1934, col: 5, offset: 64135},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1934, col: 5, offset: 64135},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1934, col: 10, offset: 64140},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1934, col: 14, offset: 64144},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 25, offset: 64155},
										name: "multiLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1934, col: 47, offset: 64177},
									expr: &litMatcher{
										pos:        position{line: 1934, col: 47, offset: 64177},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1934, col: 52, offset: 64182},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1934, col: 56, offset: 64186},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1934, col: 60, offset: 64190},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 68, offset: 64198},
										name: "multiLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1934, col: 90, offset: 64220},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1891, col: 13, offset: 62298},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1891, col: 13, offset: 62298},
												run: (*parser).callonTernaryExpression146,
												expr: &seqExpr{
													pos: position{line: 1891, col: 13, offset: 62298},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 13, offset: 62298},
															expr: &litMatcher{
																pos:        position{line: 1891, col: 13, offset: 62298},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1891, col: 18, offset: 62303},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1891, col: 22, offset: 62307},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonTernaryExpression152,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 31, offset: 62316},
															expr: &choiceExpr{
																pos: position{line: 3816, col: 20, offset: 129757},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3813, col: 36, offset: 129680},
																				expr: &litMatcher{
																					pos:        position{line: 3813, col: 36, offset: 129680},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3813, col: 42, offset: 129686},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1893, col: 5, offset: 62347},
												run: (*parser).callonTernaryExpression165,
												expr: &seqExpr{
													pos: position{line: 1893, col: 5, offset: 62347},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1893, col: 5, offset: 62347},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonTernaryExpression168,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1893, col: 14, offset: 62356},
															expr: &litMatcher{
																pos:        position{line: 1893, col: 14, offset: 62356},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1934, col: 109, offset: 64239},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonTernaryExpression177,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineTernaryExpression",
			pos:  position{line: 1952, col: 1, offset: 64886},
			expr: &choiceExpr{
				pos: position{line: 1952, col: 32, offset: 64917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1952, col: 32, offset: 64917},
						run: (*parser).callonSingleLineTernaryExpression2,
						expr: &seqExpr{
							pos: position{line: 1952, col: 32, offset: 64917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1952, col: 32, offset: 64917},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1952, col: 37, offset: 64922},
									expr: &litMatcher{
										pos:        position{line: 1952, col: 37, offset: 64922},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1952, col: 42, offset: 64927},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1952, col: 53, offset: 64938},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1952, col: 76, offset: 64961},
									expr: &litMatcher{
										pos:        position{line: 1952, col: 76, offset: 64961},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1952, col: 81, offset: 64966},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1952, col: 85, offset: 64970},
									expr: &litMatcher{
										pos:        position{line: 1952, col: 85, offset: 64970},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1952, col: 90, offset: 64975},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1952, col: 98, offset: 64983},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1952, col: 121, offset: 65006},
									expr: &litMatcher{
										pos:        position{line: 1952, col: 121, offset: 65006},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1952, col: 126, offset: 65011},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1952, col: 130, offset: 65015},
									expr: &litMatcher{
										pos:        position{line: 1952, col: 130, offset: 65015},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1952, col: 135, offset: 65020},
									label: "ifFalseI",
									expr: &ruleRefExpr{
										pos:  position{line: 1952, col: 144, offset: 65029},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1952, col: 167, offset: 65052},
									expr: &litMatcher{
										pos:        position{line: 1952, col: 167, offset: 65052},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1952, col: 172, offset: 65057},
									expr: &seqExpr{
										pos: position{line: 1952, col: 173, offset: 65058},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1952, col: 173, offset: 65058},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1952, col: 177, offset: 65062},
												expr: &litMatcher{
													pos:        position{line: 1952, col: 177, offset: 65062},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1952, col: 184, offset: 65069},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonSingleLineTernaryExpression31,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1960, col: 5, offset: 65350},
						run: (*parser).callonSingleLineTernaryExpression33,
						expr: &seqExpr{
							pos: position{line: 1960, col: 5, offset: 65350},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1960, col: 5, offset: 65350},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&labeledExpr{
									pos:   position{line: 1960, col: 10, offset: 65355},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonSingleLineTernaryExpression37,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1960, col: 24, offset: 65369},
									expr: &litMatcher{
										pos:        position{line: 1960, col: 24, offset: 65369},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1960, col: 29, offset: 65374},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonSingleLineTernaryExpression46,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1974, col: 5, offset: 65965},
						run: (*parser).callonSingleLineTernaryExpression48,
						expr: &seqExpr{
							pos: position{line: 1974, col: 5, offset: 65965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1974, col: 5, offset: 65965},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1974, col: 10, offset: 65970},
									expr: &litMatcher{
										pos:        position{line: 1974, col: 10, offset: 65970},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 15, offset: 65975},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1974, col: 26, offset: 65986},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 49, offset: 66009},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1891, col: 13, offset: 62298},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1891, col: 13, offset: 62298},
												run: (*parser).callonSingleLineTernaryExpression57,
												expr: &seqExpr{
													pos: position{line: 1891, col: 13, offset: 62298},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 13, offset: 62298},
															expr: &litMatcher{
																pos:        position{line: 1891, col: 13, offset: 62298},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1891, col: 18, offset: 62303},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1891, col: 22, offset: 62307},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonSingleLineTernaryExpression63,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 31, offset: 62316},
															expr: &choiceExpr{
																pos: position{line: 3816, col: 20, offset: 129757},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3813, col: 36, offset: 129680},
																				expr: &litMatcher{
																					pos:        position{line: 3813, col: 36, offset: 129680},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3813, col: 42, offset: 129686},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1893, col: 5, offset: 62347},
												run: (*parser).callonSingleLineTernaryExpression76,
												expr: &seqExpr{
													pos: position{line: 1893, col: 5, offset: 62347},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1893, col: 5, offset: 62347},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonSingleLineTernaryExpression79,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1893, col: 14, offset: 62356},
															expr: &litMatcher{
																pos:        position{line: 1893, col: 14, offset: 62356},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1974, col: 68, offset: 66028},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonSingleLineTernaryExpression88,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1989, col: 5, offset: 66654},
						run: (*parser).callonSingleLineTernaryExpression90,
						expr: &seqExpr{
							pos: position{line: 1989, col: 5, offset: 66654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1989, col: 5, offset: 66654},
									val:        "?(",
									ignoreCase: false,
									want:       "\"?(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1989, col: 10, offset: 66659},
									expr: &litMatcher{
										pos:        position{line: 1989, col: 10, offset: 66659},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1989, col: 15, offset: 66664},
									label: "conditionI",
									expr: &ruleRefExpr{
										pos:  position{line: 1989, col: 26, offset: 66675},
										name: "SingleLineGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1989, col: 49, offset: 66698},
									expr: &litMatcher{
										pos:        position{line: 1989, col: 49, offset: 66698},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 1989, col: 54, offset: 66703},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1989, col: 58, offset: 66707},
									expr: &litMatcher{
										pos:        position{line: 1989, col: 58, offset: 66707},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1989, col: 63, offset: 66712},
									label: "ifTrueI",
									expr: &ruleRefExpr{
										pos:  position{line: 1989, col: 71, offset: 66720},
										name: "SingleLineGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 1989, col: 94, offset: 66743},
									label: "startPosI",
									expr: &choiceExpr{
										pos: position{line: 1891, col: 13, offset: 62298},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 1891, col: 13, offset: 62298},
												run: (*parser).callonSingleLineTernaryExpression106,
												expr: &seqExpr{
													pos: position{line: 1891, col: 13, offset: 62298},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 13, offset: 62298},
															expr: &litMatcher{
																pos:        position{line: 1891, col: 13, offset: 62298},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
														&litMatcher{
															pos:        position{line: 1891, col: 18, offset: 62303},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&labeledExpr{
															pos:   position{line: 1891, col: 22, offset: 62307},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonSingleLineTernaryExpression112,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1891, col: 31, offset: 62316},
															expr: &choiceExpr{
																pos: position{line: 3816, col: 20, offset: 129757},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 3813, col: 36, offset: 129680},
																				expr: &litMatcher{
																					pos:        position{line: 3813, col: 36, offset: 129680},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 3813, col: 42, offset: 129686},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1893, col: 5, offset: 62347},
												run: (*parser).callonSingleLineTernaryExpression125,
												expr: &seqExpr{
													pos: position{line: 1893, col: 5, offset: 62347},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 1893, col: 5, offset: 62347},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonSingleLineTernaryExpression128,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 1893, col: 14, offset: 62356},
															expr: &litMatcher{
																pos:        position{line: 1893, col: 14, offset: 62356},
																val:        " ",
																ignoreCase: false,
																want:       "\" \"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1989, col: 113, offset: 66762},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonSingleLineTernaryExpression137,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 2011, col: 1, offset: 67600},
			expr: &choiceExpr{
				pos: position{line: 2011, col: 20, offset: 67619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2011, col: 20, offset: 67619},
						run: (*parser).callonChainExpression2,
						expr: &seqExpr{
							pos: position{line: 2011, col: 20, offset: 67619},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2011, col: 20, offset: 67619},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2011, col: 28, offset: 67627},
										expr: &litMatcher{
											pos:        position{line: 2011, col: 28, offset: 67627},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2011, col: 33, offset: 67632},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2011, col: 39, offset: 67638},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2011, col: 59, offset: 67658},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2011, col: 70, offset: 67669},
										expr: &litMatcher{
											pos:        position{line: 2011, col: 70, offset: 67669},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2011, col: 75, offset: 67674},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2011, col: 82, offset: 67681},
										expr: &ruleRefExpr{
											pos:  position{line: 2011, col: 82, offset: 67681},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2012, col: 20, offset: 67721},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2012, col: 29, offset: 67730},
										expr: &seqExpr{
											pos: position{line: 2012, col: 30, offset: 67731},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 2012, col: 30, offset: 67731},
													expr: &litMatcher{
														pos:        position{line: 2012, col: 30, offset: 67731},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2012, col: 35, offset: 67736},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonChainExpression21,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2012, col: 51, offset: 67752},
													val:        "~",
													ignoreCase: false,
													want:       "\"~\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2012, col: 55, offset: 67756},
													expr: &choiceExpr{
														pos: position{line: 3816, col: 20, offset: 129757},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		expr: &litMatcher{
																			pos:        position{line: 3813, col: 36, offset: 129680},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3813, col: 42, offset: 129686},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2012, col: 59, offset: 67760},
													name: "GoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2012, col: 74, offset: 67775},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonChainExpression37,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2012, col: 86, offset: 67787},
									expr: &choiceExpr{
										pos: position{line: 2012, col: 88, offset: 67789},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 2012, col: 94, offset: 67795},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 2012, col: 94, offset: 67795},
														expr: &litMatcher{
															pos:        position{line: 2012, col: 94, offset: 67795},
															val:        " ",
															ignoreCase: false,
															want:       "\" \"",
														},
													},
													&choiceExpr{
														pos: position{line: 1409, col: 25, offset: 44941},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1409, col: 25, offset: 44941},
																val:        "[)}],]",
																chars:      []rune{')', '}', ']', ','},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 1409, col: 40, offset: 44956},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1409, col: 40, offset: 44956},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																	&notExpr{
																		pos: position{line: 1409, col: 44, offset: 44960},
																		expr: &litMatcher{
																			pos:        position{line: 1409, col: 45, offset: 44961},
																			val:        "=",
																			ignoreCase: false,
																			want:       "\"=\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2012, col: 121, offset: 67822},
									run: (*parser).callonChainExpression64,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2030, col: 5, offset: 68455},
						run: (*parser).callonChainExpression65,
						expr: &seqExpr{
							pos: position{line: 2030, col: 5, offset: 68455},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2030, col: 5, offset: 68455},
									label: "startPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonChainExpression68,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2030, col: 19, offset: 68469},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2030, col: 27, offset: 68477},
										expr: &litMatcher{
											pos:        position{line: 2030, col: 27, offset: 68477},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2030, col: 32, offset: 68482},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2030, col: 38, offset: 68488},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2030, col: 58, offset: 68508},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2030, col: 69, offset: 68519},
										expr: &litMatcher{
											pos:        position{line: 2030, col: 69, offset: 68519},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2030, col: 74, offset: 68524},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2030, col: 81, offset: 68531},
										expr: &ruleRefExpr{
											pos:  position{line: 2030, col: 81, offset: 68531},
											name: "ChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2030, col: 102, offset: 68552},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonChainExpression86,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2030, col: 114, offset: 68564},
									run: (*parser).callonChainExpression92,
								},
								&labeledExpr{
									pos:   position{line: 2032, col: 3, offset: 68671},
									label: "malStartPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonChainExpression94,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2032, col: 20, offset: 68688},
									name: "GoExpression",
								},
								&labeledExpr{
									pos:   position{line: 2032, col: 33, offset: 68701},
									label: "malEndPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonChainExpression102,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 2073, col: 1, offset: 70152},
			expr: &choiceExpr{
				pos: position{line: 2073, col: 24, offset: 70175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2073, col: 24, offset: 70175},
						run: (*parser).callonchainExpressionRoot2,
						expr: &seqExpr{
							pos: position{line: 2073, col: 24, offset: 70175},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2073, col: 24, offset: 70175},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2073, col: 28, offset: 70179},
									expr: &ruleRefExpr{
										pos:  position{line: 2073, col: 28, offset: 70179},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 2073, col: 61, offset: 70212},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2078, col: 5, offset: 70325},
						run: (*parser).callonchainExpressionRoot8,
						expr: &labeledExpr{
							pos:   position{line: 2078, col: 5, offset: 70325},
							label: "identI",
							expr: &actionExpr{
								pos: position{line: 2375, col: 12, offset: 81034},
								run: (*parser).callonchainExpressionRoot10,
								expr: &labeledExpr{
									pos:   position{line: 2375, col: 12, offset: 81034},
									label: "ident",
									expr: &seqExpr{
										pos: position{line: 2414, col: 17, offset: 81960},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2397, col: 20, offset: 81715},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2414, col: 26, offset: 81969},
												expr: &charClassMatcher{
													pos:        position{line: 2397, col: 20, offset: 81715},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 2085, col: 1, offset: 70487},
			expr: &choiceExpr{
				pos: position{line: 2085, col: 36, offset: 70522},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2085, col: 36, offset: 70522},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2085, col: 36, offset: 70522},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2085, col: 40, offset: 70526},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2085, col: 72, offset: 70558},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2086, col: 36, offset: 70599},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2086, col: 36, offset: 70599},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2086, col: 40, offset: 70603},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2086, col: 72, offset: 70635},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2087, col: 36, offset: 70676},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2087, col: 36, offset: 70676},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2087, col: 40, offset: 70680},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2087, col: 72, offset: 70712},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2088, col: 36, offset: 70753},
						expr: &charClassMatcher{
							pos:        position{line: 2088, col: 36, offset: 70753},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpression",
			pos:  position{line: 2090, col: 1, offset: 70766},
			expr: &choiceExpr{
				pos: position{line: 2090, col: 30, offset: 70795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2090, col: 30, offset: 70795},
						run: (*parser).callonSingleLineChainExpression2,
						expr: &seqExpr{
							pos: position{line: 2090, col: 30, offset: 70795},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2090, col: 30, offset: 70795},
									label: "derefsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2090, col: 38, offset: 70803},
										expr: &litMatcher{
											pos:        position{line: 2090, col: 38, offset: 70803},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2090, col: 43, offset: 70808},
									label: "rootI",
									expr: &ruleRefExpr{
										pos:  position{line: 2090, col: 49, offset: 70814},
										name: "chainExpressionRoot",
									},
								},
								&labeledExpr{
									pos:   position{line: 2090, col: 69, offset: 70834},
									label: "checkRootI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2090, col: 80, offset: 70845},
										expr: &litMatcher{
											pos:        position{line: 2090, col: 80, offset: 70845},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2090, col: 85, offset: 70850},
									label: "chainI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2090, col: 92, offset: 70857},
										expr: &ruleRefExpr{
											pos:  position{line: 2090, col: 92, offset: 70857},
											name: "SingleLineChainExpressionItem",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2091, col: 30, offset: 70917},
									label: "defaultI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2091, col: 39, offset: 70926},
										expr: &seqExpr{
											pos: position{line: 2091, col: 40, offset: 70927},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 2091, col: 40, offset: 70927},
													expr: &litMatcher{
														pos:        position{line: 2091, col: 40, offset: 70927},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2091, col: 45, offset: 70932},
													label: "defaultPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonSingleLineChainExpression21,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2091, col: 61, offset: 70948},
													val:        "~",
													ignoreCase: false,
													want:       "\"~\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2091, col: 65, offset: 70952},
													expr: &litMatcher{
														pos:        position{line: 2091, col: 65, offset: 70952},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2091, col: 70, offset: 70957},
													name: "SingleLineGoExpression",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2091, col: 95, offset: 70982},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonSingleLineChainExpression32,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 2091, col: 107, offset: 70994},
									expr: &choiceExpr{
										pos: position{line: 2091, col: 109, offset: 70996},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1409, col: 25, offset: 44941},
												val:        "[)}],]",
												chars:      []rune{')', '}', ']', ','},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 1409, col: 40, offset: 44956},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1409, col: 40, offset: 44956},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&notExpr{
														pos: position{line: 1409, col: 44, offset: 44960},
														expr: &litMatcher{
															pos:        position{line: 1409, col: 45, offset: 44961},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 2091, col: 137, offset: 71024},
									run: (*parser).callonSingleLineChainExpression55,
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 2109, col: 5, offset: 71657},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 2109, col: 5, offset: 71657},
								label: "startPosI",
								expr: &actionExpr{
									pos: position{line: 3803, col: 8, offset: 129341},
									run: (*parser).callonSingleLineChainExpression58,
									expr: &choiceExpr{
										pos: position{line: 3803, col: 9, offset: 129342},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3803, col: 9, offset: 129342},
												expr: &anyMatcher{
													line: 3803, col: 10, offset: 129343,
												},
											},
											&notExpr{
												pos: position{line: 3803, col: 14, offset: 129347},
												expr: &anyMatcher{
													line: 3803, col: 15, offset: 129348,
												},
											},
										},
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2109, col: 19, offset: 71671},
								label: "derefsI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2109, col: 27, offset: 71679},
									expr: &litMatcher{
										pos:        position{line: 2109, col: 27, offset: 71679},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2109, col: 32, offset: 71684},
								label: "rootI",
								expr: &ruleRefExpr{
									pos:  position{line: 2109, col: 38, offset: 71690},
									name: "chainExpressionRoot",
								},
							},
							&labeledExpr{
								pos:   position{line: 2109, col: 58, offset: 71710},
								label: "checkRootI",
								expr: &zeroOrOneExpr{
									pos: position{line: 2109, col: 69, offset: 71721},
									expr: &litMatcher{
										pos:        position{line: 2109, col: 69, offset: 71721},
										val:        "?",
										ignoreCase: false,
										want:       "\"?\"",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2109, col: 74, offset: 71726},
								label: "chainI",
								expr: &zeroOrMoreExpr{
									pos: position{line: 2109, col: 81, offset: 71733},
									expr: &ruleRefExpr{
										pos:  position{line: 2109, col: 81, offset: 71733},
										name: "SingleLineChainExpressionItem",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 2109, col: 112, offset: 71764},
								label: "endPosI",
								expr: &actionExpr{
									pos: position{line: 3803, col: 8, offset: 129341},
									run: (*parser).callonSingleLineChainExpression76,
									expr: &choiceExpr{
										pos: position{line: 3803, col: 9, offset: 129342},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3803, col: 9, offset: 129342},
												expr: &anyMatcher{
													line: 3803, col: 10, offset: 129343,
												},
											},
											&notExpr{
												pos: position{line: 3803, col: 14, offset: 129347},
												expr: &anyMatcher{
													line: 3803, col: 15, offset: 129348,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2109, col: 124, offset: 71776},
								run: (*parser).callonSingleLineChainExpression82,
							},
							&labeledExpr{
								pos:   position{line: 2111, col: 3, offset: 71842},
								label: "malStartPosI",
								expr: &actionExpr{
									pos: position{line: 3803, col: 8, offset: 129341},
									run: (*parser).callonSingleLineChainExpression84,
									expr: &choiceExpr{
										pos: position{line: 3803, col: 9, offset: 129342},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3803, col: 9, offset: 129342},
												expr: &anyMatcher{
													line: 3803, col: 10, offset: 129343,
												},
											},
											&notExpr{
												pos: position{line: 3803, col: 14, offset: 129347},
												expr: &anyMatcher{
													line: 3803, col: 15, offset: 129348,
												},
											},
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2111, col: 20, offset: 71859},
								name: "SingleLineGoExpression",
							},
							&labeledExpr{
								pos:   position{line: 2111, col: 43, offset: 71882},
								label: "malEndPosI",
								expr: &actionExpr{
									pos: position{line: 3803, col: 8, offset: 129341},
									run: (*parser).callonSingleLineChainExpression92,
									expr: &choiceExpr{
										pos: position{line: 3803, col: 9, offset: 129342},
										alternatives: []interface{}{
											&andExpr{
												pos: position{line: 3803, col: 9, offset: 129342},
												expr: &anyMatcher{
													line: 3803, col: 10, offset: 129343,
												},
											},
											&notExpr{
												pos: position{line: 3803, col: 14, offset: 129347},
												expr: &anyMatcher{
													line: 3803, col: 15, offset: 129348,
												},
											},
										},
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 2111, col: 58, offset: 71897},
								run: (*parser).callonSingleLineChainExpression98,
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineChainExpressionRootParenContent",
			pos:  position{line: 2151, col: 1, offset: 73272},
			expr: &choiceExpr{
				pos: position{line: 2151, col: 46, offset: 73317},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2151, col: 46, offset: 73317},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2151, col: 46, offset: 73317},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2151, col: 50, offset: 73321},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2151, col: 92, offset: 73363},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2152, col: 46, offset: 73414},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2152, col: 46, offset: 73414},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2152, col: 50, offset: 73418},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2152, col: 92, offset: 73460},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2153, col: 46, offset: 73511},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2153, col: 46, offset: 73511},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2153, col: 50, offset: 73515},
								name: "singleLineChainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 2153, col: 92, offset: 73557},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 2154, col: 46, offset: 73608},
						expr: &charClassMatcher{
							pos:        position{line: 2154, col: 46, offset: 73608},
							val:        "[^({[]})\\r\\n]",
							chars:      []rune{'(', '{', '[', ']', '}', ')', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionItem",
			pos:  position{line: 2160, col: 1, offset: 73657},
			expr: &choiceExpr{
				pos: position{line: 2160, col: 34, offset: 73690},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2160, col: 34, offset: 73690},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 2204, col: 23, offset: 75552},
						run: (*parser).callonChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2204, col: 23, offset: 75552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2204, col: 23, offset: 75552},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2204, col: 27, offset: 75556},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2204, col: 31, offset: 75560},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 2375, col: 12, offset: 81034},
										run: (*parser).callonChainExpressionItem14,
										expr: &labeledExpr{
											pos:   position{line: 2375, col: 12, offset: 81034},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2414, col: 17, offset: 81960},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2397, col: 20, offset: 81715},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2414, col: 26, offset: 81969},
														expr: &charClassMatcher{
															pos:        position{line: 2397, col: 20, offset: 81715},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2204, col: 46, offset: 75575},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2204, col: 53, offset: 75582},
										expr: &litMatcher{
											pos:        position{line: 2204, col: 53, offset: 75582},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2160, col: 73, offset: 73729},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 2260, col: 28, offset: 77268},
						run: (*parser).callonChainExpressionItem24,
						expr: &seqExpr{
							pos: position{line: 2260, col: 28, offset: 77268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2260, col: 28, offset: 77268},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 33, offset: 77273},
									expr: &litMatcher{
										pos:        position{line: 2260, col: 33, offset: 77273},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 38, offset: 77278},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2260, col: 44, offset: 77284},
										expr: &litMatcher{
											pos:        position{line: 2260, col: 44, offset: 77284},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 49, offset: 77289},
									expr: &litMatcher{
										pos:        position{line: 2260, col: 49, offset: 77289},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 54, offset: 77294},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2260, col: 63, offset: 77303},
										expr: &seqExpr{
											pos: position{line: 2260, col: 64, offset: 77304},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2375, col: 12, offset: 81034},
													run: (*parser).callonChainExpressionItem37,
													expr: &labeledExpr{
														pos:   position{line: 2375, col: 12, offset: 81034},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2260, col: 72, offset: 77312},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2260, col: 76, offset: 77316},
													expr: &litMatcher{
														pos:        position{line: 2260, col: 76, offset: 77316},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 83, offset: 77323},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 2375, col: 12, offset: 81034},
										run: (*parser).callonChainExpressionItem47,
										expr: &labeledExpr{
											pos:   position{line: 2375, col: 12, offset: 81034},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2414, col: 17, offset: 81960},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2397, col: 20, offset: 81715},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2414, col: 26, offset: 81969},
														expr: &charClassMatcher{
															pos:        position{line: 2397, col: 20, offset: 81715},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 97, offset: 77337},
									expr: &litMatcher{
										pos:        position{line: 2260, col: 97, offset: 77337},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 102, offset: 77342},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonChainExpressionItem56,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 121, offset: 77361},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2260, col: 128, offset: 77368},
										expr: &litMatcher{
											pos:        position{line: 2260, col: 128, offset: 77368},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineChainExpressionItem",
			pos:  position{line: 2161, col: 1, offset: 73771},
			expr: &choiceExpr{
				pos: position{line: 2161, col: 34, offset: 73804},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2161, col: 34, offset: 73804},
						name: "SingleLineIndexExpression",
					},
					&actionExpr{
						pos: position{line: 2212, col: 33, offset: 75765},
						run: (*parser).callonSingleLineChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 2212, col: 33, offset: 75765},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2212, col: 33, offset: 75765},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2212, col: 37, offset: 75769},
									expr: &litMatcher{
										pos:        position{line: 2212, col: 37, offset: 75769},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2212, col: 42, offset: 75774},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 2375, col: 12, offset: 81034},
										run: (*parser).callonSingleLineChainExpressionItem9,
										expr: &labeledExpr{
											pos:   position{line: 2375, col: 12, offset: 81034},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2414, col: 17, offset: 81960},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2397, col: 20, offset: 81715},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2414, col: 26, offset: 81969},
														expr: &charClassMatcher{
															pos:        position{line: 2397, col: 20, offset: 81715},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2212, col: 57, offset: 75789},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2212, col: 64, offset: 75796},
										expr: &litMatcher{
											pos:        position{line: 2212, col: 64, offset: 75796},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2162, col: 34, offset: 73896},
						name: "SingleLineParenExpression",
					},
					&actionExpr{
						pos: position{line: 2260, col: 28, offset: 77268},
						run: (*parser).callonSingleLineChainExpressionItem19,
						expr: &seqExpr{
							pos: position{line: 2260, col: 28, offset: 77268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2260, col: 28, offset: 77268},
									val:        ".(",
									ignoreCase: false,
									want:       "\".(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 33, offset: 77273},
									expr: &litMatcher{
										pos:        position{line: 2260, col: 33, offset: 77273},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 38, offset: 77278},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2260, col: 44, offset: 77284},
										expr: &litMatcher{
											pos:        position{line: 2260, col: 44, offset: 77284},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 49, offset: 77289},
									expr: &litMatcher{
										pos:        position{line: 2260, col: 49, offset: 77289},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 54, offset: 77294},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2260, col: 63, offset: 77303},
										expr: &seqExpr{
											pos: position{line: 2260, col: 64, offset: 77304},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 2375, col: 12, offset: 81034},
													run: (*parser).callonSingleLineChainExpressionItem32,
													expr: &labeledExpr{
														pos:   position{line: 2375, col: 12, offset: 81034},
														label: "ident",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2260, col: 72, offset: 77312},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2260, col: 76, offset: 77316},
													expr: &litMatcher{
														pos:        position{line: 2260, col: 76, offset: 77316},
														val:        " ",
														ignoreCase: false,
														want:       "\" \"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 83, offset: 77323},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 2375, col: 12, offset: 81034},
										run: (*parser).callonSingleLineChainExpressionItem42,
										expr: &labeledExpr{
											pos:   position{line: 2375, col: 12, offset: 81034},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2414, col: 17, offset: 81960},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2397, col: 20, offset: 81715},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2414, col: 26, offset: 81969},
														expr: &charClassMatcher{
															pos:        position{line: 2397, col: 20, offset: 81715},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2260, col: 97, offset: 77337},
									expr: &litMatcher{
										pos:        position{line: 2260, col: 97, offset: 77337},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 102, offset: 77342},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonSingleLineChainExpressionItem51,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2260, col: 121, offset: 77361},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2260, col: 128, offset: 77368},
										expr: &litMatcher{
											pos:        position{line: 2260, col: 128, offset: 77368},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 2164, col: 1, offset: 73959},
			expr: &actionExpr{
				pos: position{line: 2164, col: 20, offset: 73978},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2164, col: 20, offset: 73978},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3828, col: 14, offset: 130133},
							run: (*parser).callonIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3828, col: 14, offset: 130133},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2164, col: 30, offset: 73988},
							expr: &choiceExpr{
								pos: position{line: 3816, col: 20, offset: 129757},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3813, col: 36, offset: 129680},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												expr: &litMatcher{
													pos:        position{line: 3813, col: 36, offset: 129680},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3813, col: 42, offset: 129686},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2164, col: 34, offset: 73992},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2164, col: 40, offset: 73998},
								name: "indexExpressionIndex",
							},
						},
						&labeledExpr{
							pos:   position{line: 2164, col: 61, offset: 74019},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2164, col: 73, offset: 74031},
								expr: &litMatcher{
									pos:        position{line: 2164, col: 73, offset: 74031},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2164, col: 78, offset: 74036},
							expr: &seqExpr{
								pos: position{line: 2164, col: 79, offset: 74037},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2164, col: 79, offset: 74037},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2164, col: 83, offset: 74041},
										expr: &choiceExpr{
											pos: position{line: 3816, col: 20, offset: 129757},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2164, col: 89, offset: 74047},
							expr: &litMatcher{
								pos:        position{line: 2164, col: 89, offset: 74047},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2164, col: 94, offset: 74052},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3829, col: 14, offset: 130173},
								run: (*parser).callonIndexExpression30,
								expr: &litMatcher{
									pos:        position{line: 3829, col: 14, offset: 130173},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2164, col: 115, offset: 74073},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2164, col: 127, offset: 74085},
								expr: &litMatcher{
									pos:        position{line: 2164, col: 127, offset: 74085},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "indexExpressionIndex",
			pos:  position{line: 2176, col: 1, offset: 74398},
			expr: &actionExpr{
				pos: position{line: 2176, col: 25, offset: 74422},
				run: (*parser).callonindexExpressionIndex1,
				expr: &labeledExpr{
					pos:   position{line: 2176, col: 25, offset: 74422},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 2176, col: 32, offset: 74429},
						expr: &choiceExpr{
							pos: position{line: 2177, col: 5, offset: 74435},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2177, col: 5, offset: 74435},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 2177, col: 19, offset: 74449},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 2177, col: 38, offset: 74468},
									name: "TernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callonindexExpressionIndex8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonindexExpressionIndex11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callonindexExpressionIndex27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callonindexExpressionIndex48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callonindexExpressionIndex80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callonindexExpressionIndex87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callonindexExpressionIndex98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callonindexExpressionIndex105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callonindexExpressionIndex110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callonindexExpressionIndex116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callonindexExpressionIndex128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callonindexExpressionIndex149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callonindexExpressionIndex181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callonindexExpressionIndex188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callonindexExpressionIndex199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callonindexExpressionIndex206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callonindexExpressionIndex211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonindexExpressionIndex218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2178, col: 5, offset: 74505},
									run: (*parser).callonindexExpressionIndex224,
									expr: &seqExpr{
										pos: position{line: 2178, col: 5, offset: 74505},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2178, col: 5, offset: 74505},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonindexExpressionIndex227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2178, col: 14, offset: 74514},
												expr: &choiceExpr{
													pos: position{line: 2174, col: 35, offset: 74367},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2174, col: 35, offset: 74367},
															val:        "[)}]?,]",
															chars:      []rune{')', '}', ']', '?', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2174, col: 56, offset: 74388},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2174, col: 56, offset: 74388},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2174, col: 60, offset: 74392},
																	expr: &litMatcher{
																		pos:        position{line: 2174, col: 61, offset: 74393},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 2178, col: 46, offset: 74546,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2178, col: 48, offset: 74548},
												expr: &seqExpr{
													pos: position{line: 2178, col: 49, offset: 74549},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 2178, col: 49, offset: 74549},
															expr: &choiceExpr{
																pos: position{line: 2174, col: 35, offset: 74367},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2174, col: 35, offset: 74367},
																		val:        "[)}]?,]",
																		chars:      []rune{')', '}', ']', '?', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2174, col: 56, offset: 74388},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2174, col: 56, offset: 74388},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2174, col: 60, offset: 74392},
																				expr: &litMatcher{
																					pos:        position{line: 2174, col: 61, offset: 74393},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2178, col: 81, offset: 74581},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineIndexExpression",
			pos:  position{line: 2185, col: 1, offset: 74746},
			expr: &actionExpr{
				pos: position{line: 2185, col: 30, offset: 74775},
				run: (*parser).callonSingleLineIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 2185, col: 30, offset: 74775},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3828, col: 14, offset: 130133},
							run: (*parser).callonSingleLineIndexExpression3,
							expr: &litMatcher{
								pos:        position{line: 3828, col: 14, offset: 130133},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2185, col: 40, offset: 74785},
							expr: &choiceExpr{
								pos: position{line: 3816, col: 20, offset: 129757},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 3813, col: 36, offset: 129680},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												expr: &litMatcher{
													pos:        position{line: 3813, col: 36, offset: 129680},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 3813, col: 42, offset: 129686},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2185, col: 44, offset: 74789},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2185, col: 50, offset: 74795},
								name: "singleLineIndexExpressionIndex",
							},
						},
						&labeledExpr{
							pos:   position{line: 2185, col: 81, offset: 74826},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2185, col: 93, offset: 74838},
								expr: &litMatcher{
									pos:        position{line: 2185, col: 93, offset: 74838},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2185, col: 98, offset: 74843},
							expr: &seqExpr{
								pos: position{line: 2185, col: 99, offset: 74844},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2185, col: 99, offset: 74844},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2185, col: 103, offset: 74848},
										expr: &litMatcher{
											pos:        position{line: 2185, col: 103, offset: 74848},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2185, col: 110, offset: 74855},
							expr: &litMatcher{
								pos:        position{line: 2185, col: 110, offset: 74855},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2185, col: 115, offset: 74860},
							label: "rBracePosI",
							expr: &actionExpr{
								pos: position{line: 3829, col: 14, offset: 130173},
								run: (*parser).callonSingleLineIndexExpression25,
								expr: &litMatcher{
									pos:        position{line: 3829, col: 14, offset: 130173},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2185, col: 136, offset: 74881},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2185, col: 148, offset: 74893},
								expr: &litMatcher{
									pos:        position{line: 2185, col: 148, offset: 74893},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineIndexExpressionIndex",
			pos:  position{line: 2195, col: 1, offset: 75141},
			expr: &actionExpr{
				pos: position{line: 2195, col: 35, offset: 75175},
				run: (*parser).callonsingleLineIndexExpressionIndex1,
				expr: &labeledExpr{
					pos:   position{line: 2195, col: 35, offset: 75175},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 2195, col: 42, offset: 75182},
						expr: &choiceExpr{
							pos: position{line: 2196, col: 5, offset: 75188},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2196, col: 5, offset: 75188},
									name: "singleLineGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 2196, col: 29, offset: 75212},
									name: "StringExpression",
								},
								&ruleRefExpr{
									pos:  position{line: 2196, col: 48, offset: 75231},
									name: "SingleLineTernaryExpression",
								},
								&actionExpr{
									pos: position{line: 1481, col: 15, offset: 47405},
									run: (*parser).callonsingleLineIndexExpressionIndex8,
									expr: &seqExpr{
										pos: position{line: 1481, col: 15, offset: 47405},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1481, col: 15, offset: 47405},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonsingleLineIndexExpressionIndex11,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2461, col: 14, offset: 83287},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2461, col: 14, offset: 83287},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2461, col: 14, offset: 83287},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
															&choiceExpr{
																pos: position{line: 2461, col: 20, offset: 83293},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 2509, col: 19, offset: 85438},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2509, col: 19, offset: 85438},
																				val:        "\\u",
																				ignoreCase: false,
																				want:       "\"\\\\u\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2510, col: 5, offset: 85497},
																		run: (*parser).callonsingleLineIndexExpressionIndex27,
																		expr: &seqExpr{
																			pos: position{line: 2510, col: 5, offset: 85497},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2510, col: 5, offset: 85497},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 14, offset: 85506},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 26, offset: 85518},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 38, offset: 85530},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2510, col: 50, offset: 85542},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2539, col: 16, offset: 86678},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2539, col: 16, offset: 86678},
																				val:        "\\U",
																				ignoreCase: false,
																				want:       "\"\\\\U\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2540, col: 5, offset: 86781},
																		run: (*parser).callonsingleLineIndexExpressionIndex48,
																		expr: &seqExpr{
																			pos: position{line: 2540, col: 5, offset: 86781},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2540, col: 5, offset: 86781},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 14, offset: 86790},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 26, offset: 86802},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 38, offset: 86814},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 50, offset: 86826},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 62, offset: 86838},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 74, offset: 86850},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 86, offset: 86862},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2540, col: 98, offset: 86874},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2574, col: 24, offset: 88259},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2574, col: 24, offset: 88259},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2574, col: 29, offset: 88264},
																				val:        "[abfnrtv\\\\\\]",
																				chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 2488, col: 75, offset: 84550},
																		val:        "[^\\\\\\\\n]",
																		chars:      []rune{'\'', '\\', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																	&seqExpr{
																		pos: position{line: 2490, col: 24, offset: 84696},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2490, col: 24, offset: 84696},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2407, col: 19, offset: 81885},
																				val:        "[0-7]",
																				ranges:     []rune{'0', '7'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2491, col: 24, offset: 84763},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2491, col: 24, offset: 84763},
																				val:        "\\x",
																				ignoreCase: false,
																				want:       "\"\\\\x\"",
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2408, col: 19, offset: 81909},
																				val:        "[0-9A-Fa-f]",
																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2492, col: 5, offset: 84800},
																		run: (*parser).callonsingleLineIndexExpressionIndex80,
																		expr: &seqExpr{
																			pos: position{line: 2492, col: 5, offset: 84800},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2492, col: 5, offset: 84800},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 14, offset: 84809},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2492, col: 26, offset: 84821},
																					expr: &charClassMatcher{
																						pos:        position{line: 2408, col: 19, offset: 81909},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2575, col: 24, offset: 88342},
																		run: (*parser).callonsingleLineIndexExpressionIndex87,
																		expr: &seqExpr{
																			pos: position{line: 2575, col: 24, offset: 88342},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2575, col: 24, offset: 88342},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2599, col: 5, offset: 89358},
																		run: (*parser).callonsingleLineIndexExpressionIndex98,
																		expr: &seqExpr{
																			pos: position{line: 2599, col: 5, offset: 89358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2599, col: 5, offset: 89358},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2620, col: 5, offset: 90199},
																		run: (*parser).callonsingleLineIndexExpressionIndex105,
																		expr: &seqExpr{
																			pos: position{line: 2620, col: 5, offset: 90199},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2620, col: 5, offset: 90199},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 2408, col: 19, offset: 81909},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2638, col: 5, offset: 90884},
																		run: (*parser).callonsingleLineIndexExpressionIndex110,
																		expr: &seqExpr{
																			pos: position{line: 2638, col: 5, offset: 90884},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2638, col: 5, offset: 90884},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2638, col: 10, offset: 90889},
																					expr: &charClassMatcher{
																						pos:        position{line: 3801, col: 12, offset: 129325},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2461, col: 76, offset: 83349},
																val:        "'",
																ignoreCase: false,
																want:       "\"'\"",
															},
														},
													},
													&actionExpr{
														pos: position{line: 2462, col: 5, offset: 83360},
														run: (*parser).callonsingleLineIndexExpressionIndex116,
														expr: &seqExpr{
															pos: position{line: 2462, col: 5, offset: 83360},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2462, col: 5, offset: 83360},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 10, offset: 83365},
																	label: "valsI",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 2462, col: 16, offset: 83371},
																		expr: &choiceExpr{
																			pos: position{line: 2462, col: 17, offset: 83372},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 2509, col: 19, offset: 85438},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2509, col: 19, offset: 85438},
																							val:        "\\u",
																							ignoreCase: false,
																							want:       "\"\\\\u\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2510, col: 5, offset: 85497},
																					run: (*parser).callonsingleLineIndexExpressionIndex128,
																					expr: &seqExpr{
																						pos: position{line: 2510, col: 5, offset: 85497},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2510, col: 5, offset: 85497},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 14, offset: 85506},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 26, offset: 85518},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 38, offset: 85530},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2510, col: 50, offset: 85542},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2539, col: 16, offset: 86678},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2539, col: 16, offset: 86678},
																							val:        "\\U",
																							ignoreCase: false,
																							want:       "\"\\\\U\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2540, col: 5, offset: 86781},
																					run: (*parser).callonsingleLineIndexExpressionIndex149,
																					expr: &seqExpr{
																						pos: position{line: 2540, col: 5, offset: 86781},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2540, col: 5, offset: 86781},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 14, offset: 86790},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 26, offset: 86802},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 38, offset: 86814},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 50, offset: 86826},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 62, offset: 86838},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 74, offset: 86850},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 86, offset: 86862},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2540, col: 98, offset: 86874},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2574, col: 24, offset: 88259},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2574, col: 24, offset: 88259},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2574, col: 29, offset: 88264},
																							val:        "[abfnrtv\\\\\\]",
																							chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 2488, col: 75, offset: 84550},
																					val:        "[^\\\\\\\\n]",
																					chars:      []rune{'\'', '\\', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																				&seqExpr{
																					pos: position{line: 2490, col: 24, offset: 84696},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2490, col: 24, offset: 84696},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2407, col: 19, offset: 81885},
																							val:        "[0-7]",
																							ranges:     []rune{'0', '7'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2491, col: 24, offset: 84763},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2491, col: 24, offset: 84763},
																							val:        "\\x",
																							ignoreCase: false,
																							want:       "\"\\\\x\"",
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2408, col: 19, offset: 81909},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2492, col: 5, offset: 84800},
																					run: (*parser).callonsingleLineIndexExpressionIndex181,
																					expr: &seqExpr{
																						pos: position{line: 2492, col: 5, offset: 84800},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2492, col: 5, offset: 84800},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 14, offset: 84809},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2492, col: 26, offset: 84821},
																								expr: &charClassMatcher{
																									pos:        position{line: 2408, col: 19, offset: 81909},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2575, col: 24, offset: 88342},
																					run: (*parser).callonsingleLineIndexExpressionIndex188,
																					expr: &seqExpr{
																						pos: position{line: 2575, col: 24, offset: 88342},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2575, col: 24, offset: 88342},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2599, col: 5, offset: 89358},
																					run: (*parser).callonsingleLineIndexExpressionIndex199,
																					expr: &seqExpr{
																						pos: position{line: 2599, col: 5, offset: 89358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2599, col: 5, offset: 89358},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2620, col: 5, offset: 90199},
																					run: (*parser).callonsingleLineIndexExpressionIndex206,
																					expr: &seqExpr{
																						pos: position{line: 2620, col: 5, offset: 90199},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2620, col: 5, offset: 90199},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 2408, col: 19, offset: 81909},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2638, col: 5, offset: 90884},
																					run: (*parser).callonsingleLineIndexExpressionIndex211,
																					expr: &seqExpr{
																						pos: position{line: 2638, col: 5, offset: 90884},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2638, col: 5, offset: 90884},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2638, col: 10, offset: 90889},
																								expr: &charClassMatcher{
																									pos:        position{line: 3801, col: 12, offset: 129325},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2462, col: 74, offset: 83429},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&labeledExpr{
																	pos:   position{line: 2462, col: 79, offset: 83434},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonsingleLineIndexExpressionIndex218,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2197, col: 5, offset: 75278},
									run: (*parser).callonsingleLineIndexExpressionIndex224,
									expr: &seqExpr{
										pos: position{line: 2197, col: 5, offset: 75278},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 2197, col: 5, offset: 75278},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 3803, col: 8, offset: 129341},
													run: (*parser).callonsingleLineIndexExpressionIndex227,
													expr: &choiceExpr{
														pos: position{line: 3803, col: 9, offset: 129342},
														alternatives: []interface{}{
															&andExpr{
																pos: position{line: 3803, col: 9, offset: 129342},
																expr: &anyMatcher{
																	line: 3803, col: 10, offset: 129343,
																},
															},
															&notExpr{
																pos: position{line: 3803, col: 14, offset: 129347},
																expr: &anyMatcher{
																	line: 3803, col: 15, offset: 129348,
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2197, col: 14, offset: 75287},
												expr: &choiceExpr{
													pos: position{line: 2174, col: 35, offset: 74367},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2174, col: 35, offset: 74367},
															val:        "[)}]?,]",
															chars:      []rune{')', '}', ']', '?', ','},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2174, col: 56, offset: 74388},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2174, col: 56, offset: 74388},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2174, col: 60, offset: 74392},
																	expr: &litMatcher{
																		pos:        position{line: 2174, col: 61, offset: 74393},
																		val:        "=",
																		ignoreCase: false,
																		want:       "\"=\"",
																	},
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 3801, col: 12, offset: 129325},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2197, col: 54, offset: 75327},
												expr: &seqExpr{
													pos: position{line: 2197, col: 55, offset: 75328},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 2197, col: 55, offset: 75328},
															expr: &choiceExpr{
																pos: position{line: 2174, col: 35, offset: 74367},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2174, col: 35, offset: 74367},
																		val:        "[)}]?,]",
																		chars:      []rune{')', '}', ']', '?', ','},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2174, col: 56, offset: 74388},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2174, col: 56, offset: 74388},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2174, col: 60, offset: 74392},
																				expr: &litMatcher{
																					pos:        position{line: 2174, col: 61, offset: 74393},
																					val:        "=",
																					ignoreCase: false,
																					want:       "\"=\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2197, col: 87, offset: 75360},
															expr: &seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2197, col: 92, offset: 75365},
															val:        "[^\\\"`?([{]",
															chars:      []rune{'\'', '"', '`', '?', '(', '[', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 2220, col: 1, offset: 75947},
			expr: &actionExpr{
				pos: position{line: 2220, col: 20, offset: 75966},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2220, col: 20, offset: 75966},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3822, col: 12, offset: 129977},
							run: (*parser).callonParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3822, col: 12, offset: 129977},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2220, col: 28, offset: 75974},
							expr: &litMatcher{
								pos:        position{line: 2220, col: 28, offset: 75974},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2220, col: 33, offset: 75979},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2220, col: 39, offset: 75985},
								expr: &ruleRefExpr{
									pos:  position{line: 2220, col: 39, offset: 75985},
									name: "parenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2220, col: 60, offset: 76006},
							expr: &litMatcher{
								pos:        position{line: 2220, col: 60, offset: 76006},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2220, col: 65, offset: 76011},
							expr: &seqExpr{
								pos: position{line: 2220, col: 66, offset: 76012},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2220, col: 66, offset: 76012},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2220, col: 70, offset: 76016},
										expr: &choiceExpr{
											pos: position{line: 3816, col: 20, offset: 129757},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2220, col: 76, offset: 76022},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3823, col: 12, offset: 130015},
								run: (*parser).callonParenExpression23,
								expr: &litMatcher{
									pos:        position{line: 3823, col: 12, offset: 130015},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2220, col: 95, offset: 76041},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2220, col: 102, offset: 76048},
								expr: &litMatcher{
									pos:        position{line: 2220, col: 102, offset: 76048},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 2228, col: 1, offset: 76239},
			expr: &actionExpr{
				pos: position{line: 2228, col: 24, offset: 76262},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2228, col: 24, offset: 76262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2228, col: 24, offset: 76262},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2228, col: 31, offset: 76269},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2228, col: 44, offset: 76282},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2228, col: 50, offset: 76288},
								expr: &seqExpr{
									pos: position{line: 2228, col: 51, offset: 76289},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2228, col: 51, offset: 76289},
											expr: &litMatcher{
												pos:        position{line: 2228, col: 51, offset: 76289},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2228, col: 56, offset: 76294},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2228, col: 60, offset: 76298},
											expr: &choiceExpr{
												pos: position{line: 3816, col: 20, offset: 129757},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																expr: &litMatcher{
																	pos:        position{line: 3813, col: 36, offset: 129680},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3813, col: 42, offset: 129686},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2228, col: 64, offset: 76302},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineParenExpression",
			pos:  position{line: 2240, col: 1, offset: 76569},
			expr: &actionExpr{
				pos: position{line: 2240, col: 30, offset: 76598},
				run: (*parser).callonSingleLineParenExpression1,
				expr: &seqExpr{
					pos: position{line: 2240, col: 30, offset: 76598},
					exprs: []interface{}{
						&actionExpr{
							pos: position{line: 3822, col: 12, offset: 129977},
							run: (*parser).callonSingleLineParenExpression3,
							expr: &litMatcher{
								pos:        position{line: 3822, col: 12, offset: 129977},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2240, col: 38, offset: 76606},
							expr: &litMatcher{
								pos:        position{line: 2240, col: 38, offset: 76606},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2240, col: 43, offset: 76611},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2240, col: 49, offset: 76617},
								expr: &ruleRefExpr{
									pos:  position{line: 2240, col: 49, offset: 76617},
									name: "singleLinearenExpressionArgs",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2240, col: 79, offset: 76647},
							expr: &litMatcher{
								pos:        position{line: 2240, col: 79, offset: 76647},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2240, col: 84, offset: 76652},
							expr: &seqExpr{
								pos: position{line: 2240, col: 85, offset: 76653},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2240, col: 85, offset: 76653},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2240, col: 89, offset: 76657},
										expr: &litMatcher{
											pos:        position{line: 2240, col: 89, offset: 76657},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2240, col: 96, offset: 76664},
							label: "rParenPosI",
							expr: &actionExpr{
								pos: position{line: 3823, col: 12, offset: 130015},
								run: (*parser).callonSingleLineParenExpression18,
								expr: &litMatcher{
									pos:        position{line: 3823, col: 12, offset: 130015},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2240, col: 115, offset: 76683},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2240, col: 122, offset: 76690},
								expr: &litMatcher{
									pos:        position{line: 2240, col: 122, offset: 76690},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLinearenExpressionArgs",
			pos:  position{line: 2248, col: 1, offset: 76881},
			expr: &actionExpr{
				pos: position{line: 2248, col: 33, offset: 76913},
				run: (*parser).callonsingleLinearenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 2248, col: 33, offset: 76913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2248, col: 33, offset: 76913},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2248, col: 40, offset: 76920},
								name: "SingleLineGoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2248, col: 63, offset: 76943},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2248, col: 69, offset: 76949},
								expr: &seqExpr{
									pos: position{line: 2248, col: 70, offset: 76950},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2248, col: 70, offset: 76950},
											expr: &litMatcher{
												pos:        position{line: 2248, col: 70, offset: 76950},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 2248, col: 75, offset: 76955},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2248, col: 79, offset: 76959},
											expr: &litMatcher{
												pos:        position{line: 2248, col: 79, offset: 76959},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2248, col: 84, offset: 76964},
											name: "SingleLineGoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 2278, col: 1, offset: 77848},
			expr: &choiceExpr{
				pos: position{line: 2278, col: 11, offset: 77858},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2278, col: 11, offset: 77858},
						name: "RawFilter",
					},
					&ruleRefExpr{
						pos:  position{line: 2278, col: 23, offset: 77870},
						name: "CommandFilter",
					},
					&ruleRefExpr{
						pos:  position{line: 2278, col: 39, offset: 77886},
						name: "BadFilter",
					},
				},
			},
		},
		{
			name: "RawFilter",
			pos:  position{line: 2284, col: 1, offset: 78082},
			expr: &actionExpr{
				pos: position{line: 2284, col: 14, offset: 78095},
				run: (*parser).callonRawFilter1,
				expr: &seqExpr{
					pos: position{line: 2284, col: 14, offset: 78095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2284, col: 14, offset: 78095},
							val:        ":raw",
							ignoreCase: false,
							want:       "\":raw\"",
						},
						&labeledExpr{
							pos:   position{line: 2284, col: 21, offset: 78102},
							label: "typI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2284, col: 26, offset: 78107},
								expr: &seqExpr{
									pos: position{line: 2284, col: 27, offset: 78108},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2284, col: 27, offset: 78108},
											expr: &litMatcher{
												pos:        position{line: 2284, col: 27, offset: 78108},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&choiceExpr{
											pos: position{line: 2297, col: 18, offset: 78422},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2297, col: 18, offset: 78422},
													run: (*parser).callonRawFilter10,
													expr: &choiceExpr{
														pos: position{line: 2297, col: 19, offset: 78423},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2297, col: 19, offset: 78423},
																val:        "html",
																ignoreCase: false,
																want:       "\"html\"",
															},
															&litMatcher{
																pos:        position{line: 2297, col: 28, offset: 78432},
																val:        "svg",
																ignoreCase: false,
																want:       "\"svg\"",
															},
															&litMatcher{
																pos:        position{line: 2297, col: 36, offset: 78440},
																val:        "js",
																ignoreCase: false,
																want:       "\"js\"",
															},
															&litMatcher{
																pos:        position{line: 2297, col: 43, offset: 78447},
																val:        "css",
																ignoreCase: false,
																want:       "\"css\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2299, col: 5, offset: 78511},
													run: (*parser).callonRawFilter16,
													expr: &oneOrMoreExpr{
														pos: position{line: 2299, col: 5, offset: 78511},
														expr: &charClassMatcher{
															pos:        position{line: 3801, col: 12, offset: 129325},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2284, col: 52, offset: 78133},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2284, col: 58, offset: 78139},
								expr: &ruleRefExpr{
									pos:  position{line: 2284, col: 58, offset: 78139},
									name: "filterBody",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommandFilter",
			pos:  position{line: 2319, col: 1, offset: 79184},
			expr: &actionExpr{
				pos: position{line: 2319, col: 18, offset: 79201},
				run: (*parser).callonCommandFilter1,
				expr: &seqExpr{
					pos: position{line: 2319, col: 18, offset: 79201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2319, col: 18, offset: 79201},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2319, col: 22, offset: 79205},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2319, col: 28, offset: 79211},
								expr: &charClassMatcher{
									pos:        position{line: 2319, col: 28, offset: 79211},
									val:        "[^ \\t\\r\\n]",
									chars:      []rune{' ', '\t', '\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2319, col: 40, offset: 79223},
							label: "argsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2319, col: 46, offset: 79229},
								expr: &seqExpr{
									pos: position{line: 2319, col: 47, offset: 79230},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2319, col: 47, offset: 79230},
											expr: &litMatcher{
												pos:        position{line: 2319, col: 47, offset: 79230},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&choiceExpr{
											pos: position{line: 2328, col: 21, offset: 79522},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2330, col: 27, offset: 79585},
													run: (*parser).callonCommandFilter13,
													expr: &labeledExpr{
														pos:   position{line: 2330, col: 27, offset: 79585},
														label: "stringI",
														expr: &choiceExpr{
															pos: position{line: 826, col: 11, offset: 25202},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 832, col: 14, offset: 25289},
																	run: (*parser).callonCommandFilter16,
																	expr: &seqExpr{
																		pos: position{line: 832, col: 14, offset: 25289},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 832, col: 14, offset: 25289},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 832, col: 18, offset: 25293},
																				label: "strI",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 832, col: 23, offset: 25298},
																					expr: &charClassMatcher{
																						pos:        position{line: 2751, col: 27, offset: 95033},
																						val:        "[^\\n`]",
																						chars:      []rune{'\n', '`'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 832, col: 47, offset: 25322},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 834, col: 5, offset: 25414},
																	run: (*parser).callonCommandFilter23,
																	expr: &seqExpr{
																		pos: position{line: 834, col: 5, offset: 25414},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 834, col: 5, offset: 25414},
																				val:        "`",
																				ignoreCase: false,
																				want:       "\"`\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 834, col: 9, offset: 25418},
																				label: "strI",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 834, col: 14, offset: 25423},
																					expr: &charClassMatcher{
																						pos:        position{line: 2751, col: 27, offset: 95033},
																						val:        "[^\\n`]",
																						chars:      []rune{'\n', '`'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&andExpr{
																				pos: position{line: 834, col: 38, offset: 25447},
																				expr: &seqExpr{
																					pos: position{line: 3800, col: 12, offset: 129292},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 3800, col: 12, offset: 129292},
																							expr: &charClassMatcher{
																								pos:        position{line: 3812, col: 36, offset: 129639},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3800, col: 16, offset: 129296},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3800, col: 16, offset: 129296},
																											expr: &litMatcher{
																												pos:        position{line: 3800, col: 16, offset: 129296},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3800, col: 22, offset: 129302},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3799, col: 12, offset: 129278},
																									expr: &anyMatcher{
																										line: 3799, col: 13, offset: 129279,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 853, col: 22, offset: 25851},
																	run: (*parser).callonCommandFilter40,
																	expr: &seqExpr{
																		pos: position{line: 853, col: 22, offset: 25851},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 853, col: 22, offset: 25851},
																				val:        "\"",
																				ignoreCase: false,
																				want:       "\"\\\"\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 853, col: 26, offset: 25855},
																				label: "strI",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 853, col: 31, offset: 25860},
																					expr: &choiceExpr{
																						pos: position{line: 853, col: 32, offset: 25861},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2490, col: 24, offset: 84696},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2490, col: 24, offset: 84696},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2407, col: 19, offset: 81885},
																										val:        "[0-7]",
																										ranges:     []rune{'0', '7'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2407, col: 19, offset: 81885},
																										val:        "[0-7]",
																										ranges:     []rune{'0', '7'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2407, col: 19, offset: 81885},
																										val:        "[0-7]",
																										ranges:     []rune{'0', '7'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2491, col: 24, offset: 84763},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2491, col: 24, offset: 84763},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2492, col: 5, offset: 84800},
																								run: (*parser).callonCommandFilter55,
																								expr: &seqExpr{
																									pos: position{line: 2492, col: 5, offset: 84800},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2492, col: 5, offset: 84800},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2492, col: 14, offset: 84809},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2492, col: 26, offset: 84821},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2509, col: 19, offset: 85438},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2509, col: 19, offset: 85438},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2510, col: 5, offset: 85497},
																								run: (*parser).callonCommandFilter68,
																								expr: &seqExpr{
																									pos: position{line: 2510, col: 5, offset: 85497},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2510, col: 5, offset: 85497},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 14, offset: 85506},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 26, offset: 85518},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 38, offset: 85530},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 50, offset: 85542},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2539, col: 16, offset: 86678},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2539, col: 16, offset: 86678},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2540, col: 5, offset: 86781},
																								run: (*parser).callonCommandFilter89,
																								expr: &seqExpr{
																									pos: position{line: 2540, col: 5, offset: 86781},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2540, col: 5, offset: 86781},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 14, offset: 86790},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 26, offset: 86802},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 38, offset: 86814},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 50, offset: 86826},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 62, offset: 86838},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 74, offset: 86850},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 86, offset: 86862},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 98, offset: 86874},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2767, col: 36, offset: 95811},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2767, col: 36, offset: 95811},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2767, col: 41, offset: 95816},
																										val:        "[abfnrtv\\\\\"]",
																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2765, col: 38, offset: 95703},
																								val:        "[^\"\\\\\\n]",
																								chars:      []rune{'"', '\\', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																							&actionExpr{
																								pos: position{line: 2654, col: 37, offset: 91461},
																								run: (*parser).callonCommandFilter112,
																								expr: &seqExpr{
																									pos: position{line: 2654, col: 37, offset: 91461},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2654, col: 37, offset: 91461},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2678, col: 5, offset: 92478},
																								run: (*parser).callonCommandFilter123,
																								expr: &seqExpr{
																									pos: position{line: 2678, col: 5, offset: 92478},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2678, col: 5, offset: 92478},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2699, col: 5, offset: 93320},
																								run: (*parser).callonCommandFilter130,
																								expr: &seqExpr{
																									pos: position{line: 2699, col: 5, offset: 93320},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2699, col: 5, offset: 93320},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2717, col: 5, offset: 94006},
																								run: (*parser).callonCommandFilter135,
																								expr: &seqExpr{
																									pos: position{line: 2717, col: 5, offset: 94006},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2717, col: 5, offset: 94006},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2717, col: 10, offset: 94011},
																											expr: &charClassMatcher{
																												pos:        position{line: 3801, col: 12, offset: 129325},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 853, col: 115, offset: 25944},
																				val:        "\"",
																				ignoreCase: false,
																				want:       "\"\\\"\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 855, col: 5, offset: 26036},
																	run: (*parser).callonCommandFilter141,
																	expr: &seqExpr{
																		pos: position{line: 855, col: 5, offset: 26036},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 855, col: 5, offset: 26036},
																				val:        "\"",
																				ignoreCase: false,
																				want:       "\"\\\"\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 855, col: 9, offset: 26040},
																				label: "strI",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 855, col: 14, offset: 26045},
																					expr: &choiceExpr{
																						pos: position{line: 855, col: 15, offset: 26046},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2490, col: 24, offset: 84696},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2490, col: 24, offset: 84696},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2407, col: 19, offset: 81885},
																										val:        "[0-7]",
																										ranges:     []rune{'0', '7'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2407, col: 19, offset: 81885},
																										val:        "[0-7]",
																										ranges:     []rune{'0', '7'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2407, col: 19, offset: 81885},
																										val:        "[0-7]",
																										ranges:     []rune{'0', '7'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2491, col: 24, offset: 84763},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2491, col: 24, offset: 84763},
																										val:        "\\x",
																										ignoreCase: false,
																										want:       "\"\\\\x\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2492, col: 5, offset: 84800},
																								run: (*parser).callonCommandFilter156,
																								expr: &seqExpr{
																									pos: position{line: 2492, col: 5, offset: 84800},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2492, col: 5, offset: 84800},
																											val:        "\\x",
																											ignoreCase: false,
																											want:       "\"\\\\x\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2492, col: 14, offset: 84809},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2492, col: 26, offset: 84821},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2509, col: 19, offset: 85438},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2509, col: 19, offset: 85438},
																										val:        "\\u",
																										ignoreCase: false,
																										want:       "\"\\\\u\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2510, col: 5, offset: 85497},
																								run: (*parser).callonCommandFilter169,
																								expr: &seqExpr{
																									pos: position{line: 2510, col: 5, offset: 85497},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2510, col: 5, offset: 85497},
																											val:        "\\u",
																											ignoreCase: false,
																											want:       "\"\\\\u\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 14, offset: 85506},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 26, offset: 85518},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 38, offset: 85530},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2510, col: 50, offset: 85542},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2539, col: 16, offset: 86678},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2539, col: 16, offset: 86678},
																										val:        "\\U",
																										ignoreCase: false,
																										want:       "\"\\\\U\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&charClassMatcher{
																										pos:        position{line: 2408, col: 19, offset: 81909},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2540, col: 5, offset: 86781},
																								run: (*parser).callonCommandFilter190,
																								expr: &seqExpr{
																									pos: position{line: 2540, col: 5, offset: 86781},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2540, col: 5, offset: 86781},
																											val:        "\\U",
																											ignoreCase: false,
																											want:       "\"\\\\U\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 14, offset: 86790},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 26, offset: 86802},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 38, offset: 86814},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 50, offset: 86826},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 62, offset: 86838},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 74, offset: 86850},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 86, offset: 86862},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2540, col: 98, offset: 86874},
																											expr: &charClassMatcher{
																												pos:        position{line: 2408, col: 19, offset: 81909},
																												val:        "[0-9A-Fa-f]",
																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2767, col: 36, offset: 95811},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2767, col: 36, offset: 95811},
																										val:        "\\",
																										ignoreCase: false,
																										want:       "\"\\\\\"",
																									},
																									&charClassMatcher{
																										pos:        position{line: 2767, col: 41, offset: 95816},
																										val:        "[abfnrtv\\\\\"]",
																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 2765, col: 38, offset: 95703},
																								val:        "[^\"\\\\\\n]",
																								chars:      []rune{'"', '\\', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																							&actionExpr{
																								pos: position{line: 2654, col: 37, offset: 91461},
																								run: (*parser).callonCommandFilter213,
																								expr: &seqExpr{
																									pos: position{line: 2654, col: 37, offset: 91461},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2654, col: 37, offset: 91461},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2678, col: 5, offset: 92478},
																								run: (*parser).callonCommandFilter224,
																								expr: &seqExpr{
																									pos: position{line: 2678, col: 5, offset: 92478},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2678, col: 5, offset: 92478},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2699, col: 5, offset: 93320},
																								run: (*parser).callonCommandFilter231,
																								expr: &seqExpr{
																									pos: position{line: 2699, col: 5, offset: 93320},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2699, col: 5, offset: 93320},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2408, col: 19, offset: 81909},
																											val:        "[0-9A-Fa-f]",
																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2717, col: 5, offset: 94006},
																								run: (*parser).callonCommandFilter236,
																								expr: &seqExpr{
																									pos: position{line: 2717, col: 5, offset: 94006},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2717, col: 5, offset: 94006},
																											val:        "\\",
																											ignoreCase: false,
																											want:       "\"\\\\\"",
																										},
																										&zeroOrOneExpr{
																											pos: position{line: 2717, col: 10, offset: 94011},
																											expr: &charClassMatcher{
																												pos:        position{line: 3801, col: 12, offset: 129325},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 855, col: 98, offset: 26129},
																				label: "endPosI",
																				expr: &actionExpr{
																					pos: position{line: 3803, col: 8, offset: 129341},
																					run: (*parser).callonCommandFilter242,
																					expr: &choiceExpr{
																						pos: position{line: 3803, col: 9, offset: 129342},
																						alternatives: []interface{}{
																							&andExpr{
																								pos: position{line: 3803, col: 9, offset: 129342},
																								expr: &anyMatcher{
																									line: 3803, col: 10, offset: 129343,
																								},
																							},
																							&notExpr{
																								pos: position{line: 3803, col: 14, offset: 129347},
																								expr: &anyMatcher{
																									line: 3803, col: 15, offset: 129348,
																								},
																							},
																						},
																					},
																				},
																			},
																			&andExpr{
																				pos: position{line: 855, col: 110, offset: 26141},
																				expr: &seqExpr{
																					pos: position{line: 3800, col: 12, offset: 129292},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 3800, col: 12, offset: 129292},
																							expr: &charClassMatcher{
																								pos:        position{line: 3812, col: 36, offset: 129639},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3800, col: 16, offset: 129296},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 3800, col: 16, offset: 129296},
																									exprs: []interface{}{
																										&zeroOrOneExpr{
																											pos: position{line: 3800, col: 16, offset: 129296},
																											expr: &litMatcher{
																												pos:        position{line: 3800, col: 16, offset: 129296},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 3800, col: 22, offset: 129302},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3799, col: 12, offset: 129278},
																									expr: &anyMatcher{
																										line: 3799, col: 13, offset: 129279,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 874, col: 22, offset: 26547},
																	run: (*parser).callonCommandFilter259,
																	expr: &seqExpr{
																		pos: position{line: 874, col: 22, offset: 26547},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 874, col: 22, offset: 26547},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 874, col: 27, offset: 26552},
																				label: "strI",
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 874, col: 32, offset: 26557},
																					expr: &charClassMatcher{
																						pos:        position{line: 874, col: 32, offset: 26557},
																						val:        "[^\\\\r\\n]",
																						chars:      []rune{'\'', '\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 874, col: 42, offset: 26567},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 874, col: 47, offset: 26572},
																				label: "endPosI",
																				expr: &actionExpr{
																					pos: position{line: 3803, col: 8, offset: 129341},
																					run: (*parser).callonCommandFilter267,
																					expr: &choiceExpr{
																						pos: position{line: 3803, col: 9, offset: 129342},
																						alternatives: []interface{}{
																							&andExpr{
																								pos: position{line: 3803, col: 9, offset: 129342},
																								expr: &anyMatcher{
																									line: 3803, col: 10, offset: 129343,
																								},
																							},
																							&notExpr{
																								pos: position{line: 3803, col: 14, offset: 129347},
																								expr: &anyMatcher{
																									line: 3803, col: 15, offset: 129348,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2334, col: 15, offset: 79686},
													run: (*parser).callonCommandFilter273,
													expr: &labeledExpr{
														pos:   position{line: 2334, col: 15, offset: 79686},
														label: "argI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2334, col: 20, offset: 79691},
															expr: &charClassMatcher{
																pos:        position{line: 2334, col: 20, offset: 79691},
																val:        "[^ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2319, col: 75, offset: 79258},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2319, col: 81, offset: 79264},
								expr: &ruleRefExpr{
									pos:  position{line: 2319, col: 81, offset: 79264},
									name: "filterBody",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BadFilter",
			pos:  position{line: 2342, col: 1, offset: 79973},
			expr: &actionExpr{
				pos: position{line: 2342, col: 14, offset: 79986},
				run: (*parser).callonBadFilter1,
				expr: &seqExpr{
					pos: position{line: 2342, col: 14, offset: 79986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2342, col: 14, offset: 79986},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2342, col: 22, offset: 79994},
							label: "bodyI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2342, col: 28, offset: 80000},
								expr: &ruleRefExpr{
									pos:  position{line: 2342, col: 28, offset: 80000},
									name: "filterBody",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "filterBody",
			pos:  position{line: 2360, col: 1, offset: 80541},
			expr: &actionExpr{
				pos: position{line: 2360, col: 15, offset: 80555},
				run: (*parser).callonfilterBody1,
				expr: &seqExpr{
					pos: position{line: 2360, col: 15, offset: 80555},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 4288, col: 11, offset: 150265},
							run: (*parser).callonfilterBody3,
						},
						&labeledExpr{
							pos:   position{line: 2360, col: 22, offset: 80562},
							label: "linesI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2360, col: 29, offset: 80569},
								expr: &seqExpr{
									pos: position{line: 2360, col: 30, offset: 80570},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 2360, col: 30, offset: 80570},
											expr: &oneOrMoreExpr{
												pos: position{line: 3814, col: 36, offset: 129726},
												expr: &seqExpr{
													pos: position{line: 3814, col: 37, offset: 129727},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															expr: &litMatcher{
																pos:        position{line: 3813, col: 36, offset: 129680},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 3813, col: 42, offset: 129686},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2360, col: 39, offset: 80579},
											name: "filterLine",
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 4293, col: 11, offset: 150370},
							run: (*parser).callonfilterBody16,
						},
					},
				},
			},
		},
		{
			name: "filterLine",
			pos:  position{line: 2364, col: 1, offset: 80670},
			expr: &actionExpr{
				pos: position{line: 2364, col: 15, offset: 80684},
				run: (*parser).callonfilterLine1,
				expr: &seqExpr{
					pos: position{line: 2364, col: 15, offset: 80684},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2364, col: 15, offset: 80684},
							name: "INDENTATION_IGNORE_ADDITIONAL",
						},
						&labeledExpr{
							pos:   position{line: 2364, col: 45, offset: 80714},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonfilterLine5,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2364, col: 54, offset: 80723},
							label: "lineI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2364, col: 60, offset: 80729},
								expr: &charClassMatcher{
									pos:        position{line: 3801, col: 12, offset: 129325},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoType",
			pos:  position{line: 2383, col: 1, offset: 81308},
			expr: &actionExpr{
				pos: position{line: 2383, col: 11, offset: 81318},
				run: (*parser).callonGoType1,
				expr: &labeledExpr{
					pos:   position{line: 2383, col: 11, offset: 81318},
					label: "goTypeI",
					expr: &ruleRefExpr{
						pos:  position{line: 2383, col: 19, offset: 81326},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 2773, col: 1, offset: 95888},
			expr: &choiceExpr{
				pos: position{line: 2773, col: 15, offset: 95902},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2773, col: 16, offset: 95903},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 2774, col: 15, offset: 95987},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 2431, col: 21, offset: 82512},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2397, col: 20, offset: 81715},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2414, col: 26, offset: 81969},
												expr: &charClassMatcher{
													pos:        position{line: 2397, col: 20, offset: 81715},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2431, col: 35, offset: 82526},
												expr: &litMatcher{
													pos:        position{line: 2431, col: 35, offset: 82526},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 2431, col: 40, offset: 82531},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2431, col: 44, offset: 82535},
												expr: &litMatcher{
													pos:        position{line: 2431, col: 44, offset: 82535},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&charClassMatcher{
												pos:        position{line: 2397, col: 20, offset: 81715},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2414, col: 26, offset: 81969},
												expr: &charClassMatcher{
													pos:        position{line: 2397, col: 20, offset: 81715},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2414, col: 17, offset: 81960},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2397, col: 20, offset: 81715},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2414, col: 26, offset: 81969},
												expr: &charClassMatcher{
													pos:        position{line: 2397, col: 20, offset: 81715},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 2773, col: 27, offset: 95914},
								expr: &seqExpr{
									pos: position{line: 2773, col: 28, offset: 95915},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2773, col: 28, offset: 95915},
											expr: &litMatcher{
												pos:        position{line: 2773, col: 28, offset: 95915},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2773, col: 33, offset: 95920},
											name: "goTypeArgs",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2773, col: 49, offset: 95936},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 2773, col: 61, offset: 95948},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2773, col: 61, offset: 95948},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2773, col: 65, offset: 95952},
								expr: &litMatcher{
									pos:        position{line: 2773, col: 65, offset: 95952},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2773, col: 70, offset: 95957},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2773, col: 77, offset: 95964},
								expr: &litMatcher{
									pos:        position{line: 2773, col: 77, offset: 95964},
									val:        " ",
									ignoreCase: false,
									want:       "\" \"",
								},
							},
							&litMatcher{
								pos:        position{line: 2773, col: 82, offset: 95969},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 2775, col: 1, offset: 96019},
			expr: &seqExpr{
				pos: position{line: 2775, col: 15, offset: 96033},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2775, col: 15, offset: 96033},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2775, col: 19, offset: 96037},
						expr: &litMatcher{
							pos:        position{line: 2775, col: 19, offset: 96037},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2775, col: 24, offset: 96042},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2775, col: 35, offset: 96053},
						expr: &litMatcher{
							pos:        position{line: 2775, col: 35, offset: 96053},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2775, col: 40, offset: 96058},
						expr: &seqExpr{
							pos: position{line: 2775, col: 41, offset: 96059},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2775, col: 41, offset: 96059},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2775, col: 45, offset: 96063},
									expr: &litMatcher{
										pos:        position{line: 2775, col: 45, offset: 96063},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2775, col: 52, offset: 96070},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 2776, col: 1, offset: 96074},
			expr: &seqExpr{
				pos: position{line: 2776, col: 15, offset: 96088},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2776, col: 15, offset: 96088},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2776, col: 22, offset: 96095},
						expr: &litMatcher{
							pos:        position{line: 2776, col: 22, offset: 96095},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2776, col: 27, offset: 96100},
						expr: &seqExpr{
							pos: position{line: 2776, col: 28, offset: 96101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2776, col: 28, offset: 96101},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2776, col: 32, offset: 96105},
									expr: &litMatcher{
										pos:        position{line: 2776, col: 32, offset: 96105},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2776, col: 37, offset: 96110},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 2777, col: 1, offset: 96119},
			expr: &choiceExpr{
				pos: position{line: 2777, col: 16, offset: 96134},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2777, col: 16, offset: 96134},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 30, offset: 96148},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 45, offset: 96163},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 61, offset: 96179},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 78, offset: 96196},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 96, offset: 96214},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 110, offset: 96228},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 2777, col: 122, offset: 96240},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 2783, col: 1, offset: 96278},
			expr: &seqExpr{
				pos: position{line: 2783, col: 18, offset: 96295},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2783, col: 18, offset: 96295},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2783, col: 22, offset: 96299},
						expr: &litMatcher{
							pos:        position{line: 2783, col: 22, offset: 96299},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2783, col: 27, offset: 96304},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2783, col: 41, offset: 96318},
						expr: &litMatcher{
							pos:        position{line: 2783, col: 41, offset: 96318},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2783, col: 46, offset: 96323},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2783, col: 50, offset: 96327},
						expr: &litMatcher{
							pos:        position{line: 2783, col: 50, offset: 96327},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2783, col: 55, offset: 96332},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 2784, col: 1, offset: 96346},
			expr: &seqExpr{
				pos: position{line: 2784, col: 18, offset: 96363},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 2784, col: 18, offset: 96363},
						expr: &charClassMatcher{
							pos:        position{line: 2784, col: 18, offset: 96363},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2784, col: 25, offset: 96370},
						expr: &seqExpr{
							pos: position{line: 2784, col: 26, offset: 96371},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2784, col: 26, offset: 96371},
									expr: &litMatcher{
										pos:        position{line: 2784, col: 26, offset: 96371},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2784, col: 32, offset: 96377},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2784, col: 32, offset: 96377},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 2784, col: 39, offset: 96384},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 2784, col: 46, offset: 96391},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2784, col: 69, offset: 96414},
									expr: &litMatcher{
										pos:        position{line: 2784, col: 69, offset: 96414},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2784, col: 74, offset: 96419},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 2785, col: 1, offset: 96516},
			expr: &ruleRefExpr{
				pos:  position{line: 2785, col: 18, offset: 96533},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 2791, col: 1, offset: 96563},
			expr: &seqExpr{
				pos: position{line: 2791, col: 16, offset: 96578},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2791, col: 16, offset: 96578},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2791, col: 21, offset: 96583},
						expr: &litMatcher{
							pos:        position{line: 2791, col: 21, offset: 96583},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2791, col: 26, offset: 96588},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 2797, col: 1, offset: 96626},
			expr: &seqExpr{
				pos: position{line: 2797, col: 20, offset: 96645},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2797, col: 20, offset: 96645},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2797, col: 29, offset: 96654},
						expr: &litMatcher{
							pos:        position{line: 2797, col: 29, offset: 96654},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2797, col: 34, offset: 96659},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2797, col: 38, offset: 96663},
						expr: &seqExpr{
							pos: position{line: 2797, col: 39, offset: 96664},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2797, col: 39, offset: 96664},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2797, col: 43, offset: 96668},
									expr: &ruleRefExpr{
										pos:  position{line: 2797, col: 43, offset: 96668},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 2797, col: 57, offset: 96682},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2797, col: 57, offset: 96682},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3813, col: 36, offset: 129680},
													expr: &litMatcher{
														pos:        position{line: 3813, col: 36, offset: 129680},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3813, col: 42, offset: 129686},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2797, col: 71, offset: 96696},
						expr: &choiceExpr{
							pos: position{line: 3816, col: 20, offset: 129757},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3812, col: 36, offset: 129639},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3813, col: 36, offset: 129680},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2797, col: 75, offset: 96700},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 2798, col: 1, offset: 96704},
			expr: &seqExpr{
				pos: position{line: 2798, col: 20, offset: 96723},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 2798, col: 21, offset: 96724},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2798, col: 21, offset: 96724},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2397, col: 20, offset: 81715},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2414, col: 26, offset: 81969},
										expr: &charClassMatcher{
											pos:        position{line: 2397, col: 20, offset: 81715},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2849, col: 34, offset: 97955},
										expr: &litMatcher{
											pos:        position{line: 2849, col: 34, offset: 97955},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2849, col: 39, offset: 97960},
										expr: &seqExpr{
											pos: position{line: 2849, col: 40, offset: 97961},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2849, col: 40, offset: 97961},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2849, col: 44, offset: 97965},
													expr: &choiceExpr{
														pos: position{line: 3816, col: 20, offset: 129757},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3813, col: 36, offset: 129680},
																		expr: &litMatcher{
																			pos:        position{line: 3813, col: 36, offset: 129680},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3813, col: 42, offset: 129686},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 2397, col: 20, offset: 81715},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 2414, col: 26, offset: 81969},
													expr: &charClassMatcher{
														pos:        position{line: 2397, col: 20, offset: 81715},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2798, col: 38, offset: 96741},
										expr: &litMatcher{
											pos:        position{line: 2798, col: 38, offset: 96741},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2798, col: 43, offset: 96746},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2798, col: 52, offset: 96755},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2798, col: 69, offset: 96772},
						expr: &choiceExpr{
							pos: position{line: 2738, col: 16, offset: 94590},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2740, col: 19, offset: 94649},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2740, col: 19, offset: 94649},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2740, col: 23, offset: 94653},
											expr: &charClassMatcher{
												pos:        position{line: 2751, col: 27, offset: 95033},
												val:        "[^\\n`]",
												chars:      []rune{'\n', '`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 2740, col: 47, offset: 94677},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2741, col: 5, offset: 94687},
									run: (*parser).callongoFieldDecl33,
									expr: &seqExpr{
										pos: position{line: 2741, col: 5, offset: 94687},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2741, col: 5, offset: 94687},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2741, col: 9, offset: 94691},
												expr: &charClassMatcher{
													pos:        position{line: 2751, col: 27, offset: 95033},
													val:        "[^\\n`]",
													chars:      []rune{'\n', '`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												expr: &charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 3800, col: 16, offset: 129296},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																expr: &litMatcher{
																	pos:        position{line: 3800, col: 16, offset: 129296},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3800, col: 22, offset: 129302},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 3799, col: 12, offset: 129278},
														expr: &anyMatcher{
															line: 3799, col: 13, offset: 129279,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 2753, col: 27, offset: 95117},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2753, col: 27, offset: 95117},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2753, col: 31, offset: 95121},
											expr: &choiceExpr{
												pos: position{line: 2753, col: 32, offset: 95122},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 2509, col: 19, offset: 85438},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2509, col: 19, offset: 85438},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2510, col: 5, offset: 85497},
														run: (*parser).callongoFieldDecl57,
														expr: &seqExpr{
															pos: position{line: 2510, col: 5, offset: 85497},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2510, col: 5, offset: 85497},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 14, offset: 85506},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 26, offset: 85518},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 38, offset: 85530},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2510, col: 50, offset: 85542},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2539, col: 16, offset: 86678},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2539, col: 16, offset: 86678},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2540, col: 5, offset: 86781},
														run: (*parser).callongoFieldDecl78,
														expr: &seqExpr{
															pos: position{line: 2540, col: 5, offset: 86781},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2540, col: 5, offset: 86781},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 14, offset: 86790},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 26, offset: 86802},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 38, offset: 86814},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 50, offset: 86826},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 62, offset: 86838},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 74, offset: 86850},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 86, offset: 86862},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2540, col: 98, offset: 86874},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 2767, col: 36, offset: 95811},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2767, col: 36, offset: 95811},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2767, col: 41, offset: 95816},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2765, col: 38, offset: 95703},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 2490, col: 24, offset: 84696},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2490, col: 24, offset: 84696},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 2407, col: 19, offset: 81885},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2407, col: 19, offset: 81885},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2407, col: 19, offset: 81885},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 2491, col: 24, offset: 84763},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 2491, col: 24, offset: 84763},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 2408, col: 19, offset: 81909},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 2492, col: 5, offset: 84800},
														run: (*parser).callongoFieldDecl110,
														expr: &seqExpr{
															pos: position{line: 2492, col: 5, offset: 84800},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2492, col: 5, offset: 84800},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2492, col: 14, offset: 84809},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 2492, col: 26, offset: 84821},
																	expr: &charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2654, col: 37, offset: 91461},
														run: (*parser).callongoFieldDecl117,
														expr: &seqExpr{
															pos: position{line: 2654, col: 37, offset: 91461},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2654, col: 37, offset: 91461},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2678, col: 5, offset: 92478},
														run: (*parser).callongoFieldDecl128,
														expr: &seqExpr{
															pos: position{line: 2678, col: 5, offset: 92478},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2678, col: 5, offset: 92478},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2699, col: 5, offset: 93320},
														run: (*parser).callongoFieldDecl135,
														expr: &seqExpr{
															pos: position{line: 2699, col: 5, offset: 93320},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2699, col: 5, offset: 93320},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2717, col: 5, offset: 94006},
														run: (*parser).callongoFieldDecl140,
														expr: &seqExpr{
															pos: position{line: 2717, col: 5, offset: 94006},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2717, col: 5, offset: 94006},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 2717, col: 10, offset: 94011},
																	expr: &charClassMatcher{
																		pos:        position{line: 3801, col: 12, offset: 129325},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2753, col: 115, offset: 95205},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2754, col: 5, offset: 95215},
									run: (*parser).callongoFieldDecl146,
									expr: &seqExpr{
										pos: position{line: 2754, col: 5, offset: 95215},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2754, col: 5, offset: 95215},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2754, col: 9, offset: 95219},
												expr: &choiceExpr{
													pos: position{line: 2754, col: 10, offset: 95220},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2509, col: 19, offset: 85438},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2509, col: 19, offset: 85438},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2510, col: 5, offset: 85497},
															run: (*parser).callongoFieldDecl157,
															expr: &seqExpr{
																pos: position{line: 2510, col: 5, offset: 85497},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2510, col: 5, offset: 85497},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2510, col: 14, offset: 85506},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2510, col: 26, offset: 85518},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2510, col: 38, offset: 85530},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2510, col: 50, offset: 85542},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2539, col: 16, offset: 86678},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2539, col: 16, offset: 86678},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2540, col: 5, offset: 86781},
															run: (*parser).callongoFieldDecl178,
															expr: &seqExpr{
																pos: position{line: 2540, col: 5, offset: 86781},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2540, col: 5, offset: 86781},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 14, offset: 86790},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 26, offset: 86802},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 38, offset: 86814},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 50, offset: 86826},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 62, offset: 86838},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 74, offset: 86850},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 86, offset: 86862},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2540, col: 98, offset: 86874},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2767, col: 36, offset: 95811},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2767, col: 36, offset: 95811},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2767, col: 41, offset: 95816},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 2765, col: 38, offset: 95703},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 2490, col: 24, offset: 84696},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2490, col: 24, offset: 84696},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2407, col: 19, offset: 81885},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2407, col: 19, offset: 81885},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2407, col: 19, offset: 81885},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 2491, col: 24, offset: 84763},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2491, col: 24, offset: 84763},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 2408, col: 19, offset: 81909},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2492, col: 5, offset: 84800},
															run: (*parser).callongoFieldDecl210,
															expr: &seqExpr{
																pos: position{line: 2492, col: 5, offset: 84800},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2492, col: 5, offset: 84800},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2492, col: 14, offset: 84809},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2492, col: 26, offset: 84821},
																		expr: &charClassMatcher{
																			pos:        position{line: 2408, col: 19, offset: 81909},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2654, col: 37, offset: 91461},
															run: (*parser).callongoFieldDecl217,
															expr: &seqExpr{
																pos: position{line: 2654, col: 37, offset: 91461},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2654, col: 37, offset: 91461},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2678, col: 5, offset: 92478},
															run: (*parser).callongoFieldDecl228,
															expr: &seqExpr{
																pos: position{line: 2678, col: 5, offset: 92478},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2678, col: 5, offset: 92478},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2699, col: 5, offset: 93320},
															run: (*parser).callongoFieldDecl235,
															expr: &seqExpr{
																pos: position{line: 2699, col: 5, offset: 93320},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2699, col: 5, offset: 93320},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 2408, col: 19, offset: 81909},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2717, col: 5, offset: 94006},
															run: (*parser).callongoFieldDecl240,
															expr: &seqExpr{
																pos: position{line: 2717, col: 5, offset: 94006},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2717, col: 5, offset: 94006},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2717, col: 10, offset: 94011},
																		expr: &charClassMatcher{
																			pos:        position{line: 3801, col: 12, offset: 129325},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3799, col: 12, offset: 129278},
												expr: &anyMatcher{
													line: 3799, col: 13, offset: 129279,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 2799, col: 1, offset: 96779},
			expr: &seqExpr{
				pos: position{line: 2799, col: 20, offset: 96798},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2799, col: 20, offset: 96798},
						expr: &litMatcher{
							pos:        position{line: 2799, col: 20, offset: 96798},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2799, col: 25, offset: 96803},
						expr: &litMatcher{
							pos:        position{line: 2799, col: 25, offset: 96803},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&choiceExpr{
						pos: position{line: 2774, col: 15, offset: 95987},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 2431, col: 21, offset: 82512},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2397, col: 20, offset: 81715},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2414, col: 26, offset: 81969},
										expr: &charClassMatcher{
											pos:        position{line: 2397, col: 20, offset: 81715},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2431, col: 35, offset: 82526},
										expr: &litMatcher{
											pos:        position{line: 2431, col: 35, offset: 82526},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&litMatcher{
										pos:        position{line: 2431, col: 40, offset: 82531},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 2431, col: 44, offset: 82535},
										expr: &litMatcher{
											pos:        position{line: 2431, col: 44, offset: 82535},
											val:        " ",
											ignoreCase: false,
											want:       "\" \"",
										},
									},
									&charClassMatcher{
										pos:        position{line: 2397, col: 20, offset: 81715},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2414, col: 26, offset: 81969},
										expr: &charClassMatcher{
											pos:        position{line: 2397, col: 20, offset: 81715},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 2414, col: 17, offset: 81960},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2397, col: 20, offset: 81715},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 2414, col: 26, offset: 81969},
										expr: &charClassMatcher{
											pos:        position{line: 2397, col: 20, offset: 81715},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2799, col: 41, offset: 96819},
						expr: &litMatcher{
							pos:        position{line: 2799, col: 41, offset: 96819},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2799, col: 46, offset: 96824},
						expr: &ruleRefExpr{
							pos:  position{line: 2799, col: 46, offset: 96824},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 2806, col: 1, offset: 96892},
			expr: &seqExpr{
				pos: position{line: 2806, col: 18, offset: 96909},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2806, col: 18, offset: 96909},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2806, col: 22, offset: 96913},
						expr: &litMatcher{
							pos:        position{line: 2806, col: 22, offset: 96913},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2806, col: 27, offset: 96918},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 2807, col: 1, offset: 96929},
			expr: &ruleRefExpr{
				pos:  position{line: 2807, col: 18, offset: 96946},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 2813, col: 1, offset: 96979},
			expr: &seqExpr{
				pos: position{line: 2813, col: 20, offset: 96998},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2813, col: 20, offset: 96998},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2813, col: 27, offset: 97005},
						expr: &litMatcher{
							pos:        position{line: 2813, col: 27, offset: 97005},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2813, col: 32, offset: 97010},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 2814, col: 1, offset: 97022},
			expr: &seqExpr{
				pos: position{line: 2814, col: 20, offset: 97041},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2814, col: 20, offset: 97041},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2814, col: 33, offset: 97054},
						expr: &litMatcher{
							pos:        position{line: 2814, col: 33, offset: 97054},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2814, col: 38, offset: 97059},
						expr: &ruleRefExpr{
							pos:  position{line: 2814, col: 38, offset: 97059},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 2815, col: 1, offset: 97069},
			expr: &choiceExpr{
				pos: position{line: 2815, col: 20, offset: 97088},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2815, col: 20, offset: 97088},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 2815, col: 35, offset: 97103},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 2816, col: 1, offset: 97110},
			expr: &seqExpr{
				pos: position{line: 2816, col: 20, offset: 97129},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2816, col: 20, offset: 97129},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2816, col: 24, offset: 97133},
						expr: &choiceExpr{
							pos: position{line: 3816, col: 20, offset: 129757},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3812, col: 36, offset: 129639},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3813, col: 36, offset: 129680},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2816, col: 28, offset: 97137},
						expr: &seqExpr{
							pos: position{line: 2816, col: 29, offset: 97138},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2816, col: 29, offset: 97138},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2816, col: 45, offset: 97154},
									expr: &litMatcher{
										pos:        position{line: 2816, col: 45, offset: 97154},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2816, col: 50, offset: 97159},
									expr: &seqExpr{
										pos: position{line: 2816, col: 51, offset: 97160},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2816, col: 51, offset: 97160},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2816, col: 55, offset: 97164},
												expr: &choiceExpr{
													pos: position{line: 3816, col: 20, offset: 129757},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2816, col: 63, offset: 97172},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 2817, col: 1, offset: 97176},
			expr: &seqExpr{
				pos: position{line: 2817, col: 20, offset: 97195},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2817, col: 20, offset: 97195},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2817, col: 36, offset: 97211},
						expr: &litMatcher{
							pos:        position{line: 2817, col: 36, offset: 97211},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2817, col: 41, offset: 97216},
						expr: &seqExpr{
							pos: position{line: 2817, col: 42, offset: 97217},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2817, col: 42, offset: 97217},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2817, col: 46, offset: 97221},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2817, col: 50, offset: 97225},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 2818, col: 1, offset: 97243},
			expr: &seqExpr{
				pos: position{line: 2818, col: 20, offset: 97262},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2818, col: 20, offset: 97262},
						expr: &seqExpr{
							pos: position{line: 2849, col: 21, offset: 97942},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2397, col: 20, offset: 81715},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 2414, col: 26, offset: 81969},
									expr: &charClassMatcher{
										pos:        position{line: 2397, col: 20, offset: 81715},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2849, col: 34, offset: 97955},
									expr: &litMatcher{
										pos:        position{line: 2849, col: 34, offset: 97955},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2849, col: 39, offset: 97960},
									expr: &seqExpr{
										pos: position{line: 2849, col: 40, offset: 97961},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2849, col: 40, offset: 97961},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2849, col: 44, offset: 97965},
												expr: &choiceExpr{
													pos: position{line: 3816, col: 20, offset: 129757},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2397, col: 20, offset: 81715},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 2414, col: 26, offset: 81969},
												expr: &charClassMatcher{
													pos:        position{line: 2397, col: 20, offset: 81715},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2818, col: 38, offset: 97280},
						expr: &litMatcher{
							pos:        position{line: 2818, col: 38, offset: 97280},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2818, col: 43, offset: 97285},
						expr: &litMatcher{
							pos:        position{line: 2818, col: 43, offset: 97285},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2818, col: 50, offset: 97292},
						expr: &litMatcher{
							pos:        position{line: 2818, col: 50, offset: 97292},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2818, col: 55, offset: 97297},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 2824, col: 1, offset: 97331},
			expr: &seqExpr{
				pos: position{line: 2824, col: 21, offset: 97351},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2824, col: 21, offset: 97351},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2824, col: 33, offset: 97363},
						expr: &litMatcher{
							pos:        position{line: 2824, col: 33, offset: 97363},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2824, col: 38, offset: 97368},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2824, col: 42, offset: 97372},
						expr: &seqExpr{
							pos: position{line: 2824, col: 43, offset: 97373},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2824, col: 43, offset: 97373},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2824, col: 47, offset: 97377},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2824, col: 63, offset: 97393},
									expr: &litMatcher{
										pos:        position{line: 2824, col: 63, offset: 97393},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&choiceExpr{
									pos: position{line: 2824, col: 69, offset: 97399},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 2824, col: 69, offset: 97399},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 3814, col: 36, offset: 129726},
											expr: &seqExpr{
												pos: position{line: 3814, col: 37, offset: 129727},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3814, col: 37, offset: 129727},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2824, col: 86, offset: 97416},
						expr: &choiceExpr{
							pos: position{line: 3816, col: 20, offset: 129757},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 3812, col: 36, offset: 129639},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 3813, col: 36, offset: 129680},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3813, col: 36, offset: 129680},
											expr: &litMatcher{
												pos:        position{line: 3813, col: 36, offset: 129680},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3813, col: 42, offset: 129686},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2824, col: 90, offset: 97420},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 2825, col: 1, offset: 97424},
			expr: &choiceExpr{
				pos: position{line: 2825, col: 21, offset: 97444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2825, col: 21, offset: 97444},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 2825, col: 36, offset: 97459},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 2826, col: 1, offset: 97470},
			expr: &seqExpr{
				pos: position{line: 2826, col: 21, offset: 97490},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 2397, col: 20, offset: 81715},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 2414, col: 26, offset: 81969},
						expr: &charClassMatcher{
							pos:        position{line: 2397, col: 20, offset: 81715},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2826, col: 34, offset: 97503},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 2828, col: 1, offset: 97548},
			expr: &seqExpr{
				pos: position{line: 2828, col: 21, offset: 97568},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2828, col: 21, offset: 97568},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2828, col: 32, offset: 97579},
						expr: &seqExpr{
							pos: position{line: 2828, col: 33, offset: 97580},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 2828, col: 33, offset: 97580},
									expr: &litMatcher{
										pos:        position{line: 2828, col: 33, offset: 97580},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 2828, col: 38, offset: 97585},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2828, col: 42, offset: 97589},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2828, col: 46, offset: 97593},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 2829, col: 1, offset: 97606},
			expr: &choiceExpr{
				pos: position{line: 2829, col: 21, offset: 97626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2829, col: 21, offset: 97626},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 2829, col: 30, offset: 97635},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 2830, col: 1, offset: 97652},
			expr: &seqExpr{
				pos: position{line: 2830, col: 21, offset: 97672},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2830, col: 21, offset: 97672},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 2830, col: 25, offset: 97676},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 2836, col: 1, offset: 97704},
			expr: &seqExpr{
				pos: position{line: 2836, col: 14, offset: 97717},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2836, col: 14, offset: 97717},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2836, col: 20, offset: 97723},
						expr: &litMatcher{
							pos:        position{line: 2836, col: 20, offset: 97723},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2836, col: 25, offset: 97728},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2836, col: 29, offset: 97732},
						expr: &litMatcher{
							pos:        position{line: 2836, col: 29, offset: 97732},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2836, col: 34, offset: 97737},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2836, col: 44, offset: 97747},
						expr: &litMatcher{
							pos:        position{line: 2836, col: 44, offset: 97747},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&litMatcher{
						pos:        position{line: 2836, col: 49, offset: 97752},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2836, col: 53, offset: 97756},
						expr: &litMatcher{
							pos:        position{line: 2836, col: 53, offset: 97756},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2836, col: 58, offset: 97761},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 2837, col: 1, offset: 97775},
			expr: &ruleRefExpr{
				pos:  position{line: 2837, col: 14, offset: 97788},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 2843, col: 1, offset: 97820},
			expr: &seqExpr{
				pos: position{line: 2843, col: 18, offset: 97837},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 2843, col: 18, offset: 97837},
						expr: &seqExpr{
							pos: position{line: 2843, col: 19, offset: 97838},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2843, col: 19, offset: 97838},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2843, col: 24, offset: 97843},
									expr: &litMatcher{
										pos:        position{line: 2843, col: 24, offset: 97843},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2843, col: 31, offset: 97850},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2843, col: 38, offset: 97857},
						expr: &litMatcher{
							pos:        position{line: 2843, col: 38, offset: 97857},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2843, col: 43, offset: 97862},
						expr: &seqExpr{
							pos: position{line: 2843, col: 44, offset: 97863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2843, col: 44, offset: 97863},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2843, col: 49, offset: 97868},
									expr: &litMatcher{
										pos:        position{line: 2843, col: 49, offset: 97868},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2843, col: 56, offset: 97875},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "Mixin",
			pos:  position{line: 2903, col: 1, offset: 100325},
			expr: &choiceExpr{
				pos: position{line: 2903, col: 10, offset: 100334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2903, col: 10, offset: 100334},
						run: (*parser).callonMixin2,
						expr: &seqExpr{
							pos: position{line: 2903, col: 10, offset: 100334},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2903, col: 10, offset: 100334},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 2903, col: 18, offset: 100342},
									expr: &litMatcher{
										pos:        position{line: 2903, col: 18, offset: 100342},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2903, col: 23, offset: 100347},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 777, col: 14, offset: 23657},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 777, col: 14, offset: 23657},
												run: (*parser).callonMixin9,
												expr: &labeledExpr{
													pos:   position{line: 777, col: 14, offset: 23657},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 763, col: 10, offset: 23102},
																run: (*parser).callonMixin12,
																expr: &labeledExpr{
																	pos:   position{line: 763, col: 10, offset: 23102},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 765, col: 5, offset: 23196},
																run: (*parser).callonMixin18,
																expr: &seqExpr{
																	pos: position{line: 765, col: 5, offset: 23196},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 765, col: 5, offset: 23196},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 765, col: 13, offset: 23204},
																						expr: &litMatcher{
																							pos:        position{line: 765, col: 13, offset: 23204},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 765, col: 18, offset: 23209},
																						expr: &choiceExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 765, col: 19, offset: 23210},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 765, col: 19, offset: 23210},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 765, col: 28, offset: 23219},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 38, offset: 23229},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 765, col: 49, offset: 23240},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonMixin31,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 779, col: 5, offset: 23699},
												run: (*parser).callonMixin37,
												expr: &seqExpr{
													pos: position{line: 779, col: 5, offset: 23699},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 779, col: 5, offset: 23699},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonMixin40,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
														&andExpr{
															pos: position{line: 779, col: 14, offset: 23708},
															expr: &choiceExpr{
																pos: position{line: 779, col: 16, offset: 23710},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		exprs: []interface{}{
																			&zeroOrMoreExpr{
																				pos: position{line: 3800, col: 12, offset: 129292},
																				expr: &charClassMatcher{
																					pos:        position{line: 3812, col: 36, offset: 129639},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 3800, col: 16, offset: 129296},
																								expr: &litMatcher{
																									pos:        position{line: 3800, col: 16, offset: 129296},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 3800, col: 22, offset: 129302},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3799, col: 12, offset: 129278},
																						expr: &anyMatcher{
																							line: 3799, col: 13, offset: 129279,
																						},
																					},
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 779, col: 22, offset: 23716},
																		val:        "[:!=()]",
																		chars:      []rune{':', '!', '=', '(', ')'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 790, col: 5, offset: 24048},
												run: (*parser).callonMixin59,
												expr: &seqExpr{
													pos: position{line: 790, col: 5, offset: 24048},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 790, col: 5, offset: 24048},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 790, col: 12, offset: 24055},
																expr: &charClassMatcher{
																	pos:        position{line: 790, col: 12, offset: 24055},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 790, col: 29, offset: 24072},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonMixin65,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2903, col: 39, offset: 100363},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2903, col: 47, offset: 100371},
										expr: &ruleRefExpr{
											pos:  position{line: 2903, col: 47, offset: 100371},
											name: "mixinParamList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2903, col: 63, offset: 100387},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2903, col: 69, offset: 100393},
										name: "Beaitb",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2913, col: 5, offset: 100687},
						run: (*parser).callonMixin76,
						expr: &seqExpr{
							pos: position{line: 2913, col: 5, offset: 100687},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2913, col: 5, offset: 100687},
									val:        "mixin",
									ignoreCase: false,
									want:       "\"mixin\"",
								},
								&labeledExpr{
									pos:   position{line: 2913, col: 13, offset: 100695},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonMixin80,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2913, col: 22, offset: 100704},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 2913, col: 28, offset: 100710},
										name: "Beaitb",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamList",
			pos:  position{line: 2929, col: 1, offset: 101123},
			expr: &choiceExpr{
				pos: position{line: 2929, col: 19, offset: 101141},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2929, col: 19, offset: 101141},
						run: (*parser).callonmixinParamList2,
						expr: &seqExpr{
							pos: position{line: 2929, col: 19, offset: 101141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2929, col: 19, offset: 101141},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2929, col: 23, offset: 101145},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2929, col: 27, offset: 101149},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2929, col: 35, offset: 101157},
										expr: &ruleRefExpr{
											pos:  position{line: 2929, col: 35, offset: 101157},
											name: "mixinParams",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2929, col: 48, offset: 101170},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2929, col: 51, offset: 101173},
									expr: &seqExpr{
										pos: position{line: 2929, col: 52, offset: 101174},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2929, col: 52, offset: 101174},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2929, col: 56, offset: 101178},
												expr: &choiceExpr{
													pos: position{line: 3816, col: 20, offset: 129757},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2929, col: 62, offset: 101184},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonmixinParamList28,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2935, col: 5, offset: 101385},
						run: (*parser).callonmixinParamList30,
						expr: &seqExpr{
							pos: position{line: 2935, col: 5, offset: 101385},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2935, col: 5, offset: 101385},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2935, col: 9, offset: 101389},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2935, col: 13, offset: 101393},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2935, col: 21, offset: 101401},
										expr: &ruleRefExpr{
											pos:  position{line: 2935, col: 21, offset: 101401},
											name: "mixinParams",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 2935, col: 34, offset: 101414},
									expr: &seqExpr{
										pos: position{line: 2935, col: 35, offset: 101415},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2935, col: 35, offset: 101415},
												expr: &charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2935, col: 38, offset: 101418},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2935, col: 44, offset: 101424},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonmixinParamList49,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParams",
			pos:  position{line: 2954, col: 1, offset: 101969},
			expr: &actionExpr{
				pos: position{line: 2954, col: 16, offset: 101984},
				run: (*parser).callonmixinParams1,
				expr: &seqExpr{
					pos: position{line: 2954, col: 16, offset: 101984},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2954, col: 16, offset: 101984},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2954, col: 23, offset: 101991},
								name: "mixinParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 2954, col: 34, offset: 102002},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2954, col: 40, offset: 102008},
								expr: &seqExpr{
									pos: position{line: 2954, col: 41, offset: 102009},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2954, col: 41, offset: 102009},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2954, col: 44, offset: 102012},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2954, col: 48, offset: 102016},
											expr: &choiceExpr{
												pos: position{line: 3816, col: 20, offset: 129757},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																expr: &litMatcher{
																	pos:        position{line: 3813, col: 36, offset: 129680},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3813, col: 42, offset: 129686},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2954, col: 52, offset: 102020},
											name: "mixinParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParam",
			pos:  position{line: 2965, col: 1, offset: 102298},
			expr: &actionExpr{
				pos: position{line: 2965, col: 15, offset: 102312},
				run: (*parser).callonmixinParam1,
				expr: &seqExpr{
					pos: position{line: 2965, col: 15, offset: 102312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2965, col: 15, offset: 102312},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 805, col: 20, offset: 24518},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 805, col: 20, offset: 24518},
										run: (*parser).callonmixinParam5,
										expr: &labeledExpr{
											pos:   position{line: 805, col: 20, offset: 24518},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 763, col: 10, offset: 23102},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														run: (*parser).callonmixinParam8,
														expr: &labeledExpr{
															pos:   position{line: 763, col: 10, offset: 23102},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														run: (*parser).callonmixinParam14,
														expr: &seqExpr{
															pos: position{line: 765, col: 5, offset: 23196},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 765, col: 5, offset: 23196},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 765, col: 13, offset: 23204},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				expr: &litMatcher{
																					pos:        position{line: 765, col: 13, offset: 23204},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 765, col: 18, offset: 23209},
																				expr: &choiceExpr{
																					pos: position{line: 765, col: 19, offset: 23210},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 765, col: 19, offset: 23210},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 28, offset: 23219},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 765, col: 38, offset: 23229},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 765, col: 49, offset: 23240},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonmixinParam27,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 807, col: 5, offset: 24560},
										run: (*parser).callonmixinParam33,
										expr: &seqExpr{
											pos: position{line: 807, col: 5, offset: 24560},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 807, col: 5, offset: 24560},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 807, col: 12, offset: 24567},
														expr: &charClassMatcher{
															pos:        position{line: 807, col: 12, offset: 24567},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 807, col: 29, offset: 24584},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonmixinParam39,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2965, col: 37, offset: 102334},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonmixinParam46,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2965, col: 46, offset: 102343},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2965, col: 52, offset: 102349},
								expr: &seqExpr{
									pos: position{line: 2965, col: 53, offset: 102350},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2965, col: 53, offset: 102350},
											expr: &litMatcher{
												pos:        position{line: 2965, col: 53, offset: 102350},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2965, col: 58, offset: 102355},
											name: "GoType",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2965, col: 67, offset: 102364},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2965, col: 76, offset: 102373},
								expr: &seqExpr{
									pos: position{line: 2965, col: 77, offset: 102374},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 2965, col: 77, offset: 102374},
											expr: &litMatcher{
												pos:        position{line: 2965, col: 77, offset: 102374},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2965, col: 82, offset: 102379},
											name: "mixinParamDefault",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinParamDefault",
			pos:  position{line: 3003, col: 1, offset: 103599},
			expr: &choiceExpr{
				pos: position{line: 3003, col: 22, offset: 103620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3003, col: 22, offset: 103620},
						run: (*parser).callonmixinParamDefault2,
						expr: &seqExpr{
							pos: position{line: 3003, col: 22, offset: 103620},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3003, col: 22, offset: 103620},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3003, col: 26, offset: 103624},
									expr: &litMatcher{
										pos:        position{line: 3003, col: 26, offset: 103624},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3003, col: 31, offset: 103629},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3003, col: 37, offset: 103635},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3008, col: 5, offset: 103776},
						run: (*parser).callonmixinParamDefault9,
						expr: &seqExpr{
							pos: position{line: 3008, col: 5, offset: 103776},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3008, col: 5, offset: 103776},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&labeledExpr{
									pos:   position{line: 3008, col: 9, offset: 103780},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonmixinParamDefault13,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 3033, col: 1, offset: 104572},
			expr: &actionExpr{
				pos: position{line: 3033, col: 11, offset: 104582},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 3033, col: 11, offset: 104582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3033, col: 11, offset: 104582},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 3033, col: 20, offset: 104591},
							label: "errExprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3033, col: 29, offset: 104600},
								expr: &ruleRefExpr{
									pos:  position{line: 3033, col: 29, offset: 104600},
									name: "Expression",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 3033, col: 41, offset: 104612},
							expr: &actionExpr{
								pos: position{line: 1390, col: 21, offset: 44340},
								run: (*parser).callonReturn8,
								expr: &oneOrMoreExpr{
									pos: position{line: 1390, col: 21, offset: 44340},
									expr: &charClassMatcher{
										pos:        position{line: 3801, col: 12, offset: 129325},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCall",
			pos:  position{line: 3044, col: 1, offset: 104935},
			expr: &actionExpr{
				pos: position{line: 3044, col: 14, offset: 104948},
				run: (*parser).callonMixinCall1,
				expr: &seqExpr{
					pos: position{line: 3044, col: 14, offset: 104948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3044, col: 14, offset: 104948},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3044, col: 18, offset: 104952},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3044, col: 29, offset: 104963},
								expr: &seqExpr{
									pos: position{line: 3044, col: 30, offset: 104964},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 763, col: 10, offset: 23102},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 763, col: 10, offset: 23102},
													run: (*parser).callonMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 763, col: 10, offset: 23102},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 765, col: 5, offset: 23196},
													run: (*parser).callonMixinCall14,
													expr: &seqExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 765, col: 5, offset: 23196},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 765, col: 13, offset: 23204},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 765, col: 13, offset: 23204},
																			expr: &litMatcher{
																				pos:        position{line: 765, col: 13, offset: 23204},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 765, col: 18, offset: 23209},
																			expr: &choiceExpr{
																				pos: position{line: 765, col: 19, offset: 23210},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 765, col: 19, offset: 23210},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 765, col: 19, offset: 23210},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 765, col: 28, offset: 23219},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 765, col: 38, offset: 23229},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 765, col: 49, offset: 23240},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3044, col: 36, offset: 104970},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3044, col: 42, offset: 104976},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 777, col: 14, offset: 23657},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 777, col: 14, offset: 23657},
										run: (*parser).callonMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 777, col: 14, offset: 23657},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 763, col: 10, offset: 23102},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														run: (*parser).callonMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 763, col: 10, offset: 23102},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														run: (*parser).callonMixinCall45,
														expr: &seqExpr{
															pos: position{line: 765, col: 5, offset: 23196},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 765, col: 5, offset: 23196},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 765, col: 13, offset: 23204},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				expr: &litMatcher{
																					pos:        position{line: 765, col: 13, offset: 23204},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 765, col: 18, offset: 23209},
																				expr: &choiceExpr{
																					pos: position{line: 765, col: 19, offset: 23210},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 765, col: 19, offset: 23210},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 28, offset: 23219},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 765, col: 38, offset: 23229},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 765, col: 49, offset: 23240},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 779, col: 5, offset: 23699},
										run: (*parser).callonMixinCall64,
										expr: &seqExpr{
											pos: position{line: 779, col: 5, offset: 23699},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 779, col: 5, offset: 23699},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 779, col: 14, offset: 23708},
													expr: &choiceExpr{
														pos: position{line: 779, col: 16, offset: 23710},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 779, col: 22, offset: 23716},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 790, col: 5, offset: 24048},
										run: (*parser).callonMixinCall86,
										expr: &seqExpr{
											pos: position{line: 790, col: 5, offset: 24048},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 790, col: 5, offset: 24048},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 790, col: 12, offset: 24055},
														expr: &charClassMatcher{
															pos:        position{line: 790, col: 12, offset: 24055},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 790, col: 29, offset: 24072},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3044, col: 58, offset: 104992},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3044, col: 64, offset: 104998},
								expr: &ruleRefExpr{
									pos:  position{line: 3044, col: 64, offset: 104998},
									name: "mixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3044, col: 78, offset: 105012},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 3044, col: 84, offset: 105018},
								name: "mixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMixinCall",
			pos:  position{line: 3063, col: 1, offset: 105468},
			expr: &actionExpr{
				pos: position{line: 3063, col: 20, offset: 105487},
				run: (*parser).callonInlineMixinCall1,
				expr: &seqExpr{
					pos: position{line: 3063, col: 20, offset: 105487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3063, col: 20, offset: 105487},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3063, col: 24, offset: 105491},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3063, col: 35, offset: 105502},
								expr: &seqExpr{
									pos: position{line: 3063, col: 36, offset: 105503},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 763, col: 10, offset: 23102},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 763, col: 10, offset: 23102},
													run: (*parser).callonInlineMixinCall8,
													expr: &labeledExpr{
														pos:   position{line: 763, col: 10, offset: 23102},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 765, col: 5, offset: 23196},
													run: (*parser).callonInlineMixinCall14,
													expr: &seqExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 765, col: 5, offset: 23196},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 765, col: 13, offset: 23204},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 765, col: 13, offset: 23204},
																			expr: &litMatcher{
																				pos:        position{line: 765, col: 13, offset: 23204},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 765, col: 18, offset: 23209},
																			expr: &choiceExpr{
																				pos: position{line: 765, col: 19, offset: 23210},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 765, col: 19, offset: 23210},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 765, col: 19, offset: 23210},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 765, col: 28, offset: 23219},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 765, col: 38, offset: 23229},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 765, col: 49, offset: 23240},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonInlineMixinCall27,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3063, col: 42, offset: 105509},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3063, col: 48, offset: 105515},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 777, col: 14, offset: 23657},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 777, col: 14, offset: 23657},
										run: (*parser).callonInlineMixinCall36,
										expr: &labeledExpr{
											pos:   position{line: 777, col: 14, offset: 23657},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 763, col: 10, offset: 23102},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														run: (*parser).callonInlineMixinCall39,
														expr: &labeledExpr{
															pos:   position{line: 763, col: 10, offset: 23102},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														run: (*parser).callonInlineMixinCall45,
														expr: &seqExpr{
															pos: position{line: 765, col: 5, offset: 23196},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 765, col: 5, offset: 23196},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 765, col: 13, offset: 23204},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				expr: &litMatcher{
																					pos:        position{line: 765, col: 13, offset: 23204},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 765, col: 18, offset: 23209},
																				expr: &choiceExpr{
																					pos: position{line: 765, col: 19, offset: 23210},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 765, col: 19, offset: 23210},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 28, offset: 23219},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 765, col: 38, offset: 23229},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 765, col: 49, offset: 23240},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonInlineMixinCall58,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 779, col: 5, offset: 23699},
										run: (*parser).callonInlineMixinCall64,
										expr: &seqExpr{
											pos: position{line: 779, col: 5, offset: 23699},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 779, col: 5, offset: 23699},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonInlineMixinCall67,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 779, col: 14, offset: 23708},
													expr: &choiceExpr{
														pos: position{line: 779, col: 16, offset: 23710},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 779, col: 22, offset: 23716},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 790, col: 5, offset: 24048},
										run: (*parser).callonInlineMixinCall86,
										expr: &seqExpr{
											pos: position{line: 790, col: 5, offset: 24048},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 790, col: 5, offset: 24048},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 790, col: 12, offset: 24055},
														expr: &charClassMatcher{
															pos:        position{line: 790, col: 12, offset: 24055},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 790, col: 29, offset: 24072},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonInlineMixinCall92,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3063, col: 64, offset: 105531},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3063, col: 70, offset: 105537},
								expr: &ruleRefExpr{
									pos:  position{line: 3063, col: 70, offset: 105537},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3063, col: 94, offset: 105561},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 3063, col: 100, offset: 105567},
								name: "singleLineMixinCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgList",
			pos:  position{line: 3082, col: 1, offset: 106027},
			expr: &choiceExpr{
				pos: position{line: 3082, col: 17, offset: 106043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3082, col: 17, offset: 106043},
						run: (*parser).callonmixinArgList2,
						expr: &seqExpr{
							pos: position{line: 3082, col: 17, offset: 106043},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3082, col: 17, offset: 106043},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3082, col: 21, offset: 106047},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 25, offset: 106051},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3082, col: 31, offset: 106057},
										expr: &ruleRefExpr{
											pos:  position{line: 3082, col: 31, offset: 106057},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3082, col: 42, offset: 106068},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3082, col: 45, offset: 106071},
									expr: &seqExpr{
										pos: position{line: 3082, col: 46, offset: 106072},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3082, col: 46, offset: 106072},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 3082, col: 50, offset: 106076},
												expr: &choiceExpr{
													pos: position{line: 3816, col: 20, offset: 129757},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 3813, col: 36, offset: 129680},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3082, col: 56, offset: 106082},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonmixinArgList28,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3088, col: 5, offset: 106281},
						run: (*parser).callonmixinArgList30,
						expr: &seqExpr{
							pos: position{line: 3088, col: 5, offset: 106281},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3088, col: 5, offset: 106281},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3088, col: 9, offset: 106285},
									expr: &choiceExpr{
										pos: position{line: 3816, col: 20, offset: 129757},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 3813, col: 36, offset: 129680},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														expr: &litMatcher{
															pos:        position{line: 3813, col: 36, offset: 129680},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 3813, col: 42, offset: 129686},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3088, col: 13, offset: 106289},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3088, col: 19, offset: 106295},
										expr: &ruleRefExpr{
											pos:  position{line: 3088, col: 19, offset: 106295},
											name: "mixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3088, col: 30, offset: 106306},
									expr: &seqExpr{
										pos: position{line: 3088, col: 31, offset: 106307},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3088, col: 31, offset: 106307},
												expr: &charClassMatcher{
													pos:        position{line: 3812, col: 36, offset: 129639},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 3088, col: 34, offset: 106310},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3088, col: 40, offset: 106316},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonmixinArgList49,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgList",
			pos:  position{line: 3106, col: 1, offset: 106852},
			expr: &choiceExpr{
				pos: position{line: 3106, col: 27, offset: 106878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3106, col: 27, offset: 106878},
						run: (*parser).callonsingleLineMixinArgList2,
						expr: &seqExpr{
							pos: position{line: 3106, col: 27, offset: 106878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3106, col: 27, offset: 106878},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3106, col: 31, offset: 106882},
									expr: &litMatcher{
										pos:        position{line: 3106, col: 31, offset: 106882},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3106, col: 36, offset: 106887},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3106, col: 42, offset: 106893},
										expr: &ruleRefExpr{
											pos:  position{line: 3106, col: 42, offset: 106893},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3106, col: 63, offset: 106914},
									expr: &litMatcher{
										pos:        position{line: 3106, col: 63, offset: 106914},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3106, col: 68, offset: 106919},
									expr: &seqExpr{
										pos: position{line: 3106, col: 69, offset: 106920},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 3106, col: 69, offset: 106920},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 3106, col: 73, offset: 106924},
												expr: &litMatcher{
													pos:        position{line: 3106, col: 73, offset: 106924},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3106, col: 80, offset: 106931},
									label: "rParenPosI",
									expr: &actionExpr{
										pos: position{line: 3823, col: 12, offset: 130015},
										run: (*parser).callonsingleLineMixinArgList18,
										expr: &litMatcher{
											pos:        position{line: 3823, col: 12, offset: 130015},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3112, col: 5, offset: 107130},
						run: (*parser).callonsingleLineMixinArgList20,
						expr: &seqExpr{
							pos: position{line: 3112, col: 5, offset: 107130},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3112, col: 5, offset: 107130},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3112, col: 9, offset: 107134},
									expr: &litMatcher{
										pos:        position{line: 3112, col: 9, offset: 107134},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3112, col: 14, offset: 107139},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3112, col: 20, offset: 107145},
										expr: &ruleRefExpr{
											pos:  position{line: 3112, col: 20, offset: 107145},
											name: "singleLineMixinArgs",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3112, col: 41, offset: 107166},
									expr: &seqExpr{
										pos: position{line: 3112, col: 42, offset: 107167},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3112, col: 42, offset: 107167},
												expr: &litMatcher{
													pos:        position{line: 3112, col: 42, offset: 107167},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3112, col: 47, offset: 107172},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3112, col: 53, offset: 107178},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsingleLineMixinArgList34,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArgs",
			pos:  position{line: 3131, col: 1, offset: 107715},
			expr: &actionExpr{
				pos: position{line: 3131, col: 14, offset: 107728},
				run: (*parser).callonmixinArgs1,
				expr: &seqExpr{
					pos: position{line: 3131, col: 14, offset: 107728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3131, col: 14, offset: 107728},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3131, col: 21, offset: 107735},
								name: "mixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 3131, col: 30, offset: 107744},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3131, col: 36, offset: 107750},
								expr: &seqExpr{
									pos: position{line: 3131, col: 37, offset: 107751},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3131, col: 37, offset: 107751},
											expr: &charClassMatcher{
												pos:        position{line: 3812, col: 36, offset: 129639},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 3131, col: 40, offset: 107754},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3131, col: 44, offset: 107758},
											expr: &choiceExpr{
												pos: position{line: 3816, col: 20, offset: 129757},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																expr: &litMatcher{
																	pos:        position{line: 3813, col: 36, offset: 129680},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3813, col: 42, offset: 129686},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3131, col: 48, offset: 107762},
											name: "mixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArgs",
			pos:  position{line: 3141, col: 1, offset: 108023},
			expr: &actionExpr{
				pos: position{line: 3141, col: 24, offset: 108046},
				run: (*parser).callonsingleLineMixinArgs1,
				expr: &seqExpr{
					pos: position{line: 3141, col: 24, offset: 108046},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3141, col: 24, offset: 108046},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3141, col: 31, offset: 108053},
								name: "singleLineMixinArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 3141, col: 50, offset: 108072},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3141, col: 56, offset: 108078},
								expr: &seqExpr{
									pos: position{line: 3141, col: 57, offset: 108079},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 3141, col: 57, offset: 108079},
											expr: &litMatcher{
												pos:        position{line: 3141, col: 57, offset: 108079},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&litMatcher{
											pos:        position{line: 3141, col: 62, offset: 108084},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3141, col: 66, offset: 108088},
											expr: &litMatcher{
												pos:        position{line: 3141, col: 66, offset: 108088},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3141, col: 71, offset: 108093},
											name: "singleLineMixinArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinArg",
			pos:  position{line: 3152, col: 1, offset: 108365},
			expr: &choiceExpr{
				pos: position{line: 3152, col: 13, offset: 108377},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3152, col: 13, offset: 108377},
						run: (*parser).callonmixinArg2,
						expr: &seqExpr{
							pos: position{line: 3152, col: 13, offset: 108377},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3152, col: 13, offset: 108377},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 805, col: 20, offset: 24518},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 805, col: 20, offset: 24518},
												run: (*parser).callonmixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 805, col: 20, offset: 24518},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 763, col: 10, offset: 23102},
																run: (*parser).callonmixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 763, col: 10, offset: 23102},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 765, col: 5, offset: 23196},
																run: (*parser).callonmixinArg15,
																expr: &seqExpr{
																	pos: position{line: 765, col: 5, offset: 23196},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 765, col: 5, offset: 23196},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 765, col: 13, offset: 23204},
																						expr: &litMatcher{
																							pos:        position{line: 765, col: 13, offset: 23204},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 765, col: 18, offset: 23209},
																						expr: &choiceExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 765, col: 19, offset: 23210},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 765, col: 19, offset: 23210},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 765, col: 28, offset: 23219},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 38, offset: 23229},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 765, col: 49, offset: 23240},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonmixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 807, col: 5, offset: 24560},
												run: (*parser).callonmixinArg34,
												expr: &seqExpr{
													pos: position{line: 807, col: 5, offset: 24560},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 807, col: 5, offset: 24560},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 807, col: 12, offset: 24567},
																expr: &charClassMatcher{
																	pos:        position{line: 807, col: 12, offset: 24567},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 807, col: 29, offset: 24584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonmixinArg40,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3152, col: 35, offset: 108399},
									expr: &litMatcher{
										pos:        position{line: 3152, col: 35, offset: 108399},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3152, col: 40, offset: 108404},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3152, col: 44, offset: 108408},
									expr: &litMatcher{
										pos:        position{line: 3152, col: 44, offset: 108408},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3152, col: 49, offset: 108413},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3152, col: 54, offset: 108418},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3157, col: 5, offset: 108545},
						run: (*parser).callonmixinArg53,
						expr: &seqExpr{
							pos: position{line: 3157, col: 5, offset: 108545},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3157, col: 5, offset: 108545},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 805, col: 20, offset: 24518},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 805, col: 20, offset: 24518},
												run: (*parser).callonmixinArg57,
												expr: &labeledExpr{
													pos:   position{line: 805, col: 20, offset: 24518},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 763, col: 10, offset: 23102},
																run: (*parser).callonmixinArg60,
																expr: &labeledExpr{
																	pos:   position{line: 763, col: 10, offset: 23102},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 765, col: 5, offset: 23196},
																run: (*parser).callonmixinArg66,
																expr: &seqExpr{
																	pos: position{line: 765, col: 5, offset: 23196},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 765, col: 5, offset: 23196},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 765, col: 13, offset: 23204},
																						expr: &litMatcher{
																							pos:        position{line: 765, col: 13, offset: 23204},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 765, col: 18, offset: 23209},
																						expr: &choiceExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 765, col: 19, offset: 23210},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 765, col: 19, offset: 23210},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 765, col: 28, offset: 23219},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 38, offset: 23229},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 765, col: 49, offset: 23240},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonmixinArg79,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 807, col: 5, offset: 24560},
												run: (*parser).callonmixinArg85,
												expr: &seqExpr{
													pos: position{line: 807, col: 5, offset: 24560},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 807, col: 5, offset: 24560},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 807, col: 12, offset: 24567},
																expr: &charClassMatcher{
																	pos:        position{line: 807, col: 12, offset: 24567},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 807, col: 29, offset: 24584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonmixinArg91,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3157, col: 27, offset: 108567},
									expr: &seqExpr{
										pos: position{line: 3157, col: 28, offset: 108568},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3157, col: 28, offset: 108568},
												expr: &litMatcher{
													pos:        position{line: 3157, col: 28, offset: 108568},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3157, col: 33, offset: 108573},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3157, col: 39, offset: 108579},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonmixinArg103,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleLineMixinArg",
			pos:  position{line: 3172, col: 1, offset: 109073},
			expr: &choiceExpr{
				pos: position{line: 3172, col: 23, offset: 109095},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3172, col: 23, offset: 109095},
						run: (*parser).callonsingleLineMixinArg2,
						expr: &seqExpr{
							pos: position{line: 3172, col: 23, offset: 109095},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3172, col: 23, offset: 109095},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 805, col: 20, offset: 24518},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 805, col: 20, offset: 24518},
												run: (*parser).callonsingleLineMixinArg6,
												expr: &labeledExpr{
													pos:   position{line: 805, col: 20, offset: 24518},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 763, col: 10, offset: 23102},
																run: (*parser).callonsingleLineMixinArg9,
																expr: &labeledExpr{
																	pos:   position{line: 763, col: 10, offset: 23102},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 765, col: 5, offset: 23196},
																run: (*parser).callonsingleLineMixinArg15,
																expr: &seqExpr{
																	pos: position{line: 765, col: 5, offset: 23196},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 765, col: 5, offset: 23196},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 765, col: 13, offset: 23204},
																						expr: &litMatcher{
																							pos:        position{line: 765, col: 13, offset: 23204},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 765, col: 18, offset: 23209},
																						expr: &choiceExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 765, col: 19, offset: 23210},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 765, col: 19, offset: 23210},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 765, col: 28, offset: 23219},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 38, offset: 23229},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 765, col: 49, offset: 23240},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonsingleLineMixinArg28,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 807, col: 5, offset: 24560},
												run: (*parser).callonsingleLineMixinArg34,
												expr: &seqExpr{
													pos: position{line: 807, col: 5, offset: 24560},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 807, col: 5, offset: 24560},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 807, col: 12, offset: 24567},
																expr: &charClassMatcher{
																	pos:        position{line: 807, col: 12, offset: 24567},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 807, col: 29, offset: 24584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonsingleLineMixinArg40,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3172, col: 45, offset: 109117},
									expr: &litMatcher{
										pos:        position{line: 3172, col: 45, offset: 109117},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&litMatcher{
									pos:        position{line: 3172, col: 50, offset: 109122},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3172, col: 54, offset: 109126},
									expr: &litMatcher{
										pos:        position{line: 3172, col: 54, offset: 109126},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3172, col: 59, offset: 109131},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 3172, col: 64, offset: 109136},
										name: "SingleLineExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3177, col: 5, offset: 109273},
						run: (*parser).callonsingleLineMixinArg53,
						expr: &seqExpr{
							pos: position{line: 3177, col: 5, offset: 109273},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3177, col: 5, offset: 109273},
									label: "nameI",
									expr: &choiceExpr{
										pos: position{line: 805, col: 20, offset: 24518},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 805, col: 20, offset: 24518},
												run: (*parser).callonsingleLineMixinArg57,
												expr: &labeledExpr{
													pos:   position{line: 805, col: 20, offset: 24518},
													label: "identI",
													expr: &choiceExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 763, col: 10, offset: 23102},
																run: (*parser).callonsingleLineMixinArg60,
																expr: &labeledExpr{
																	pos:   position{line: 763, col: 10, offset: 23102},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 2414, col: 17, offset: 81960},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 2397, col: 20, offset: 81715},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2414, col: 26, offset: 81969},
																				expr: &charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 765, col: 5, offset: 23196},
																run: (*parser).callonsingleLineMixinArg66,
																expr: &seqExpr{
																	pos: position{line: 765, col: 5, offset: 23196},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 765, col: 5, offset: 23196},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 765, col: 13, offset: 23204},
																						expr: &litMatcher{
																							pos:        position{line: 765, col: 13, offset: 23204},
																							val:        "$",
																							ignoreCase: false,
																							want:       "\"$\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 765, col: 18, offset: 23209},
																						expr: &choiceExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 765, col: 19, offset: 23210},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 765, col: 19, offset: 23210},
																											val:        "[\\pNd]",
																											classes:    []*unicode.RangeTable{rangeTable("Nd")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 765, col: 28, offset: 23219},
																											val:        "[_-\\pL]",
																											chars:      []rune{'_', '-'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 38, offset: 23229},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 765, col: 49, offset: 23240},
																			label: "endPosI",
																			expr: &actionExpr{
																				pos: position{line: 3803, col: 8, offset: 129341},
																				run: (*parser).callonsingleLineMixinArg79,
																				expr: &choiceExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					alternatives: []interface{}{
																						&andExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							expr: &anyMatcher{
																								line: 3803, col: 10, offset: 129343,
																							},
																						},
																						&notExpr{
																							pos: position{line: 3803, col: 14, offset: 129347},
																							expr: &anyMatcher{
																								line: 3803, col: 15, offset: 129348,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 807, col: 5, offset: 24560},
												run: (*parser).callonsingleLineMixinArg85,
												expr: &seqExpr{
													pos: position{line: 807, col: 5, offset: 24560},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 807, col: 5, offset: 24560},
															label: "identI",
															expr: &oneOrMoreExpr{
																pos: position{line: 807, col: 12, offset: 24567},
																expr: &charClassMatcher{
																	pos:        position{line: 807, col: 12, offset: 24567},
																	val:        "[^ \\t\\r\\n:!=()]",
																	chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 807, col: 29, offset: 24584},
															label: "endPosI",
															expr: &actionExpr{
																pos: position{line: 3803, col: 8, offset: 129341},
																run: (*parser).callonsingleLineMixinArg91,
																expr: &choiceExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	alternatives: []interface{}{
																		&andExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			expr: &anyMatcher{
																				line: 3803, col: 10, offset: 129343,
																			},
																		},
																		&notExpr{
																			pos: position{line: 3803, col: 14, offset: 129347},
																			expr: &anyMatcher{
																				line: 3803, col: 15, offset: 129348,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 3177, col: 27, offset: 109295},
									expr: &seqExpr{
										pos: position{line: 3177, col: 28, offset: 109296},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 3177, col: 28, offset: 109296},
												expr: &litMatcher{
													pos:        position{line: 3177, col: 28, offset: 109296},
													val:        " ",
													ignoreCase: false,
													want:       "\" \"",
												},
											},
											&litMatcher{
												pos:        position{line: 3177, col: 33, offset: 109301},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3177, col: 39, offset: 109307},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonsingleLineMixinArg103,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallBody",
			pos:  position{line: 3193, col: 1, offset: 109802},
			expr: &choiceExpr{
				pos: position{line: 3193, col: 18, offset: 109819},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3193, col: 18, offset: 109819},
						run: (*parser).callonmixinCallBody2,
						expr: &labeledExpr{
							pos:   position{line: 3193, col: 18, offset: 109819},
							label: "shI",
							expr: &ruleRefExpr{
								pos:  position{line: 3193, col: 22, offset: 109823},
								name: "MixinMainBlockShorthand",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3195, col: 5, offset: 109916},
						name: "Beaitb",
					},
				},
			},
		},
		{
			name: "singleLineMixinCallBody",
			pos:  position{line: 3196, col: 1, offset: 109923},
			expr: &ruleRefExpr{
				pos:  position{line: 3196, col: 28, offset: 109950},
				name: "Beait",
			},
		},
		{
			name: "MixinMainBlockShorthand",
			pos:  position{line: 3202, col: 1, offset: 110158},
			expr: &choiceExpr{
				pos: position{line: 3202, col: 28, offset: 110185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3202, col: 28, offset: 110185},
						run: (*parser).callonMixinMainBlockShorthand2,
						expr: &seqExpr{
							pos: position{line: 3202, col: 28, offset: 110185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3202, col: 28, offset: 110185},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3202, col: 33, offset: 110190},
									expr: &actionExpr{
										pos: position{line: 1390, col: 21, offset: 44340},
										run: (*parser).callonMixinMainBlockShorthand6,
										expr: &oneOrMoreExpr{
											pos: position{line: 1390, col: 21, offset: 44340},
											expr: &charClassMatcher{
												pos:        position{line: 3801, col: 12, offset: 129325},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3202, col: 55, offset: 110212},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 3202, col: 61, offset: 110218},
										name: "Body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3207, col: 5, offset: 110341},
						run: (*parser).callonMixinMainBlockShorthand20,
						expr: &seqExpr{
							pos: position{line: 3207, col: 5, offset: 110341},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3207, col: 5, offset: 110341},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 3207, col: 10, offset: 110346},
									expr: &actionExpr{
										pos: position{line: 1390, col: 21, offset: 44340},
										run: (*parser).callonMixinMainBlockShorthand24,
										expr: &oneOrMoreExpr{
											pos: position{line: 1390, col: 21, offset: 44340},
											expr: &charClassMatcher{
												pos:        position{line: 3801, col: 12, offset: 129325},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3207, col: 28, offset: 110364},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonMixinMainBlockShorthand28,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Func",
			pos:  position{line: 3409, col: 1, offset: 116323},
			expr: &choiceExpr{
				pos: position{line: 3409, col: 9, offset: 116331},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3409, col: 9, offset: 116331},
						run: (*parser).callonFunc2,
						expr: &seqExpr{
							pos: position{line: 3409, col: 9, offset: 116331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3409, col: 9, offset: 116331},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 3409, col: 16, offset: 116338},
									expr: &litMatcher{
										pos:        position{line: 3409, col: 16, offset: 116338},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3409, col: 21, offset: 116343},
									label: "nameI",
									expr: &actionExpr{
										pos: position{line: 2375, col: 12, offset: 81034},
										run: (*parser).callonFunc8,
										expr: &labeledExpr{
											pos:   position{line: 2375, col: 12, offset: 81034},
											label: "ident",
											expr: &seqExpr{
												pos: position{line: 2414, col: 17, offset: 81960},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 2397, col: 20, offset: 81715},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 2414, col: 26, offset: 81969},
														expr: &charClassMatcher{
															pos:        position{line: 2397, col: 20, offset: 81715},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3409, col: 35, offset: 116357},
									label: "paramsI",
									expr: &choiceExpr{
										pos: position{line: 3410, col: 5, offset: 116371},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3410, col: 5, offset: 116371},
												run: (*parser).callonFunc16,
												expr: &seqExpr{
													pos: position{line: 3410, col: 5, offset: 116371},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3410, col: 5, offset: 116371},
															label: "lParenPosI",
															expr: &actionExpr{
																pos: position{line: 3822, col: 12, offset: 129977},
																run: (*parser).callonFunc19,
																expr: &litMatcher{
																	pos:        position{line: 3822, col: 12, offset: 129977},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3410, col: 24, offset: 116390},
															label: "paramsI",
															expr: &choiceExpr{
																pos: position{line: 3411, col: 9, offset: 116408},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3411, col: 9, offset: 116408},
																		run: (*parser).callonFunc23,
																		expr: &seqExpr{
																			pos: position{line: 3411, col: 9, offset: 116408},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3411, col: 9, offset: 116408},
																					expr: &choiceExpr{
																						pos: position{line: 3816, col: 20, offset: 129757},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 3812, col: 36, offset: 129639},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&seqExpr{
																								pos: position{line: 3813, col: 36, offset: 129680},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3813, col: 36, offset: 129680},
																										expr: &litMatcher{
																											pos:        position{line: 3813, col: 36, offset: 129680},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 3813, col: 42, offset: 129686},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3411, col: 13, offset: 116412},
																					label: "paramsI",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 3411, col: 21, offset: 116420},
																						expr: &ruleRefExpr{
																							pos:  position{line: 3411, col: 21, offset: 116420},
																							name: "funcParamList",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 3411, col: 36, offset: 116435},
																					expr: &litMatcher{
																						pos:        position{line: 3411, col: 36, offset: 116435},
																						val:        " ",
																						ignoreCase: false,
																						want:       "\" \"",
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 3411, col: 41, offset: 116440},
																					expr: &seqExpr{
																						pos: position{line: 3411, col: 42, offset: 116441},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3411, col: 42, offset: 116441},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 3411, col: 46, offset: 116445},
																								expr: &choiceExpr{
																									pos: position{line: 3816, col: 20, offset: 129757},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 3812, col: 36, offset: 129639},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 3813, col: 36, offset: 129680},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 3813, col: 36, offset: 129680},
																													expr: &litMatcher{
																														pos:        position{line: 3813, col: 36, offset: 129680},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 3813, col: 42, offset: 129686},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3413, col: 13, offset: 116529},
																		run: (*parser).callonFunc47,
																		expr: &seqExpr{
																			pos: position{line: 3413, col: 13, offset: 116529},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 3413, col: 13, offset: 116529},
																					expr: &charClassMatcher{
																						pos:        position{line: 3413, col: 13, offset: 116529},
																						val:        "[^)]",
																						chars:      []rune{')'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 3413, col: 19, offset: 116535},
																					label: "endPosI",
																					expr: &actionExpr{
																						pos: position{line: 3803, col: 8, offset: 129341},
																						run: (*parser).callonFunc52,
																						expr: &choiceExpr{
																							pos: position{line: 3803, col: 9, offset: 129342},
																							alternatives: []interface{}{
																								&andExpr{
																									pos: position{line: 3803, col: 9, offset: 129342},
																									expr: &anyMatcher{
																										line: 3803, col: 10, offset: 129343,
																									},
																								},
																								&notExpr{
																									pos: position{line: 3803, col: 14, offset: 129347},
																									expr: &anyMatcher{
																										line: 3803, col: 15, offset: 129348,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3423, col: 7, offset: 116928},
															label: "rParenPosI",
															expr: &actionExpr{
																pos: position{line: 3823, col: 12, offset: 130015},
																run: (*parser).callonFunc59,
																expr: &litMatcher{
																	pos:        position{line: 3823, col: 12, offset: 130015},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3429, col: 9, offset: 117148},
												run: (*parser).callonFunc61,
												expr: &zeroOrMoreExpr{
													pos: position{line: 3429, col: 9, offset: 117148},
													expr: &charClassMatcher{
														pos:        position{line: 3801, col: 12, offset: 129325},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3448, col: 5, offset: 117692},
						run: (*parser).callonFunc73,
						expr: &seqExpr{
							pos: position{line: 3448, col: 5, offset: 117692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3448, col: 5, offset: 117692},
									val:        "func",
									ignoreCase: false,
									want:       "\"func\"",
								},
								&labeledExpr{
									pos:   position{line: 3448, col: 12, offset: 117699},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonFunc77,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParamList",
			pos:  position{line: 3460, col: 1, offset: 118048},
			expr: &choiceExpr{
				pos: position{line: 3460, col: 18, offset: 118065},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3460, col: 18, offset: 118065},
						name: "funcOtherParamList",
					},
					&ruleRefExpr{
						pos:  position{line: 3460, col: 39, offset: 118086},
						name: "funcOnlyVariadicParamList",
					},
				},
			},
		},
		{
			name: "funcOnlyVariadicParamList",
			pos:  position{line: 3461, col: 1, offset: 118112},
			expr: &actionExpr{
				pos: position{line: 3461, col: 30, offset: 118141},
				run: (*parser).callonfuncOnlyVariadicParamList1,
				expr: &labeledExpr{
					pos:   position{line: 3461, col: 30, offset: 118141},
					label: "variadicI",
					expr: &ruleRefExpr{
						pos:  position{line: 3461, col: 40, offset: 118151},
						name: "funcVariadicParam",
					},
				},
			},
		},
		{
			name: "funcOtherParamList",
			pos:  position{line: 3464, col: 1, offset: 118234},
			expr: &actionExpr{
				pos: position{line: 3464, col: 23, offset: 118256},
				run: (*parser).callonfuncOtherParamList1,
				expr: &seqExpr{
					pos: position{line: 3464, col: 23, offset: 118256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3464, col: 23, offset: 118256},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 3464, col: 30, offset: 118263},
								name: "funcParam",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3464, col: 40, offset: 118273},
							expr: &litMatcher{
								pos:        position{line: 3464, col: 40, offset: 118273},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
						&labeledExpr{
							pos:   position{line: 3464, col: 45, offset: 118278},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3464, col: 51, offset: 118284},
								expr: &seqExpr{
									pos: position{line: 3464, col: 52, offset: 118285},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3464, col: 52, offset: 118285},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3464, col: 56, offset: 118289},
											expr: &choiceExpr{
												pos: position{line: 3816, col: 20, offset: 129757},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																expr: &litMatcher{
																	pos:        position{line: 3813, col: 36, offset: 129680},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3813, col: 42, offset: 129686},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3464, col: 60, offset: 118293},
											name: "funcParam",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3464, col: 72, offset: 118305},
							label: "variadicI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3464, col: 82, offset: 118315},
								expr: &seqExpr{
									pos: position{line: 3464, col: 83, offset: 118316},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 3464, col: 83, offset: 118316},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 3464, col: 87, offset: 118320},
											expr: &choiceExpr{
												pos: position{line: 3816, col: 20, offset: 129757},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 3812, col: 36, offset: 129639},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 3813, col: 36, offset: 129680},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 3813, col: 36, offset: 129680},
																expr: &litMatcher{
																	pos:        position{line: 3813, col: 36, offset: 129680},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 3813, col: 42, offset: 129686},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 3464, col: 91, offset: 118324},
											name: "funcVariadicParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "funcParam",
			pos:  position{line: 3485, col: 1, offset: 118775},
			expr: &choiceExpr{
				pos: position{line: 3485, col: 14, offset: 118788},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3485, col: 14, offset: 118788},
						run: (*parser).callonfuncParam2,
						expr: &seqExpr{
							pos: position{line: 3485, col: 14, offset: 118788},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3485, col: 14, offset: 118788},
									label: "namesI",
									expr: &actionExpr{
										pos: position{line: 3508, col: 18, offset: 119368},
										run: (*parser).callonfuncParam5,
										expr: &seqExpr{
											pos: position{line: 3508, col: 18, offset: 119368},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3508, col: 18, offset: 119368},
													label: "firstI",
													expr: &actionExpr{
														pos: position{line: 2375, col: 12, offset: 81034},
														run: (*parser).callonfuncParam8,
														expr: &labeledExpr{
															pos:   position{line: 2375, col: 12, offset: 81034},
															label: "ident",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3508, col: 33, offset: 119383},
													label: "restI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 3508, col: 39, offset: 119389},
														expr: &seqExpr{
															pos: position{line: 3508, col: 40, offset: 119390},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3508, col: 40, offset: 119390},
																	expr: &litMatcher{
																		pos:        position{line: 3508, col: 40, offset: 119390},
																		val:        " ",
																		ignoreCase: false,
																		want:       "\" \"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3508, col: 45, offset: 119395},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 3508, col: 49, offset: 119399},
																	expr: &choiceExpr{
																		pos: position{line: 3816, col: 20, offset: 129757},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 3812, col: 36, offset: 129639},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 3813, col: 36, offset: 129680},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3813, col: 36, offset: 129680},
																						expr: &litMatcher{
																							pos:        position{line: 3813, col: 36, offset: 129680},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3813, col: 42, offset: 129686},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2375, col: 12, offset: 81034},
																	run: (*parser).callonfuncParam27,
																	expr: &labeledExpr{
																		pos:   position{line: 2375, col: 12, offset: 81034},
																		label: "ident",
																		expr: &seqExpr{
																			pos: position{line: 2414, col: 17, offset: 81960},
																			exprs: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2397, col: 20, offset: 81715},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2414, col: 26, offset: 81969},
																					expr: &charClassMatcher{
																						pos:        position{line: 2397, col: 20, offset: 81715},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 3485, col: 35, offset: 118809},
									expr: &litMatcher{
										pos:        position{line: 3485, col: 35, offset: 118809},
										val:        " ",
										ignoreCase: false,
										want:       "\" \"",
									},
								},
								&labeledExpr{
									pos:   position{line: 3485, col: 40, offset: 118814},
									label: "typeI",
									expr: &ruleRefExpr{
										pos:  position{line: 3485, col: 46, offset: 118820},
										name: "funcType",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3490, col: 5, offset: 118948},
						run: (*parser).callonfuncParam37,
						expr: &labeledExpr{
							pos:   position{line: 3490, col: 5, offset: 118948},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3490, col: 11, offset: 118954},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcVariadicParam",
			pos:  position{line: 3495, col: 1, offset: 119040},
			expr: &actionExpr{
				pos: position{line: 3495, col: 22, offset: 119061},
				run: (*parser).callonfuncVariadicParam1,
				expr: &seqExpr{
					pos: position{line: 3495, col: 22, offset: 119061},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3495, col: 22, offset: 119061},
							label: "nameI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3495, col: 28, offset: 119067},
								expr: &seqExpr{
									pos: position{line: 3495, col: 29, offset: 119068},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 2375, col: 12, offset: 81034},
											run: (*parser).callonfuncVariadicParam6,
											expr: &labeledExpr{
												pos:   position{line: 2375, col: 12, offset: 81034},
												label: "ident",
												expr: &seqExpr{
													pos: position{line: 2414, col: 17, offset: 81960},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2397, col: 20, offset: 81715},
															val:        "[_\\pL]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 2414, col: 26, offset: 81969},
															expr: &charClassMatcher{
																pos:        position{line: 2397, col: 20, offset: 81715},
																val:        "[_\\pL\\pNd]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 3495, col: 37, offset: 119076},
											expr: &litMatcher{
												pos:        position{line: 3495, col: 37, offset: 119076},
												val:        " ",
												ignoreCase: false,
												want:       "\" \"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3495, col: 44, offset: 119083},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
						&labeledExpr{
							pos:   position{line: 3495, col: 50, offset: 119089},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 3495, col: 56, offset: 119095},
								name: "funcType",
							},
						},
					},
				},
			},
		},
		{
			name: "funcType",
			pos:  position{line: 3520, col: 1, offset: 119674},
			expr: &choiceExpr{
				pos: position{line: 3520, col: 13, offset: 119686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3520, col: 13, offset: 119686},
						name: "GoType",
					},
					&actionExpr{
						pos: position{line: 3520, col: 22, offset: 119695},
						run: (*parser).callonfuncType3,
						expr: &seqExpr{
							pos: position{line: 3520, col: 22, offset: 119695},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3520, col: 22, offset: 119695},
									label: "typeI",
									expr: &oneOrMoreExpr{
										pos: position{line: 3520, col: 28, offset: 119701},
										expr: &charClassMatcher{
											pos:        position{line: 3520, col: 28, offset: 119701},
											val:        "[^,)]",
											chars:      []rune{',', ')'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3520, col: 35, offset: 119708},
									label: "endPosI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonfuncType9,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineText",
			pos:  position{line: 3538, col: 1, offset: 120226},
			expr: &actionExpr{
				pos: position{line: 3538, col: 15, offset: 120240},
				run: (*parser).callonInlineText1,
				expr: &seqExpr{
					pos: position{line: 3538, col: 15, offset: 120240},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3538, col: 15, offset: 120240},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
						&labeledExpr{
							pos:   position{line: 3538, col: 19, offset: 120244},
							label: "lineI",
							expr: &ruleRefExpr{
								pos:  position{line: 3538, col: 25, offset: 120250},
								name: "TextLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 3549, col: 1, offset: 120552},
			expr: &choiceExpr{
				pos: position{line: 3549, col: 15, offset: 120566},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3549, col: 15, offset: 120566},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3549, col: 15, offset: 120566},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3549, col: 15, offset: 120566},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3549, col: 20, offset: 120571},
									label: "firstLineI",
									expr: &choiceExpr{
										pos: position{line: 3549, col: 32, offset: 120583},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3549, col: 32, offset: 120583},
												name: "TextLine",
											},
											&seqExpr{
												pos: position{line: 3800, col: 12, offset: 129292},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 3800, col: 12, offset: 129292},
														expr: &charClassMatcher{
															pos:        position{line: 3812, col: 36, offset: 129639},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 3800, col: 16, offset: 129296},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 16, offset: 129296},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		expr: &litMatcher{
																			pos:        position{line: 3800, col: 16, offset: 129296},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 3800, col: 22, offset: 129302},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 3799, col: 12, offset: 129278},
																expr: &anyMatcher{
																	line: 3799, col: 13, offset: 129279,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3549, col: 48, offset: 120599},
									label: "additionalLinesI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3549, col: 65, offset: 120616},
										expr: &seqExpr{
											pos: position{line: 3549, col: 66, offset: 120617},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3549, col: 66, offset: 120617},
													expr: &oneOrMoreExpr{
														pos: position{line: 3814, col: 36, offset: 129726},
														expr: &seqExpr{
															pos: position{line: 3814, col: 37, offset: 129727},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3814, col: 37, offset: 129727},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 3813, col: 36, offset: 129680},
																	expr: &litMatcher{
																		pos:        position{line: 3813, col: 36, offset: 129680},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 3813, col: 42, offset: 129686},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 3549, col: 75, offset: 120626},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 3549, col: 88, offset: 120639},
													name: "TextLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3570, col: 5, offset: 121154},
						run: (*parser).callonArrowBlock31,
						expr: &seqExpr{
							pos: position{line: 3570, col: 5, offset: 121154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3570, col: 5, offset: 121154},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineArrowBlock",
			pos:  position{line: 3574, col: 1, offset: 121217},
			expr: &choiceExpr{
				pos: position{line: 3574, col: 21, offset: 121237},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3574, col: 21, offset: 121237},
						run: (*parser).callonInlineArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 3574, col: 21, offset: 121237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3574, col: 21, offset: 121237},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 3574, col: 26, offset: 121242},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3574, col: 32, offset: 121248},
										name: "TextLine",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3579, col: 5, offset: 121383},
						run: (*parser).callonInlineArrowBlock7,
						expr: &seqExpr{
							pos: position{line: 3579, col: 5, offset: 121383},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3579, col: 5, offset: 121383},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&labeledExpr{
									pos:   position{line: 3579, col: 9, offset: 121387},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 3803, col: 8, offset: 129341},
										run: (*parser).callonInlineArrowBlock11,
										expr: &choiceExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											alternatives: []interface{}{
												&andExpr{
													pos: position{line: 3803, col: 9, offset: 129342},
													expr: &anyMatcher{
														line: 3803, col: 10, offset: 129343,
													},
												},
												&notExpr{
													pos: position{line: 3803, col: 14, offset: 129347},
													expr: &anyMatcher{
														line: 3803, col: 15, offset: 129348,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3579, col: 18, offset: 121396},
									label: "lineI",
									expr: &ruleRefExpr{
										pos:  position{line: 3579, col: 24, offset: 121402},
										name: "TextLine",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextLine",
			pos:  position{line: 3597, col: 1, offset: 121982},
			expr: &actionExpr{
				pos: position{line: 3597, col: 13, offset: 121994},
				run: (*parser).callonTextLine1,
				expr: &seqExpr{
					pos: position{line: 3597, col: 13, offset: 121994},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3597, col: 13, offset: 121994},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3597, col: 20, offset: 122001},
								expr: &ruleRefExpr{
									pos:  position{line: 3597, col: 20, offset: 122001},
									name: "TextItem",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 3800, col: 12, offset: 129292},
							expr: &charClassMatcher{
								pos:        position{line: 3812, col: 36, offset: 129639},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 3800, col: 16, offset: 129296},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											expr: &litMatcher{
												pos:        position{line: 3800, col: 16, offset: 129296},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 3800, col: 22, offset: 129302},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 3799, col: 12, offset: 129278},
									expr: &anyMatcher{
										line: 3799, col: 13, offset: 129279,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextItem",
			pos:  position{line: 3605, col: 1, offset: 122268},
			expr: &choiceExpr{
				pos: position{line: 3605, col: 13, offset: 122280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3611, col: 9, offset: 122489},
						run: (*parser).callonTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 3611, col: 9, offset: 122489},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 3611, col: 15, offset: 122495},
								expr: &choiceExpr{
									pos: position{line: 3611, col: 16, offset: 122496},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 3611, col: 16, offset: 122496},
											expr: &seqExpr{
												pos: position{line: 3611, col: 17, offset: 122497},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 3611, col: 17, offset: 122497},
														expr: &seqExpr{
															pos: position{line: 3800, col: 12, offset: 129292},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 3800, col: 12, offset: 129292},
																	expr: &charClassMatcher{
																		pos:        position{line: 3812, col: 36, offset: 129639},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	alternatives: []interface{}{
																		&seqExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3800, col: 16, offset: 129296},
																					expr: &litMatcher{
																						pos:        position{line: 3800, col: 16, offset: 129296},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 3800, col: 22, offset: 129302},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3799, col: 12, offset: 129278},
																			expr: &anyMatcher{
																				line: 3799, col: 13, offset: 129279,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 3611, col: 22, offset: 122502},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3611, col: 31, offset: 122511},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3605, col: 20, offset: 122287},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 3622, col: 1, offset: 122799},
			expr: &choiceExpr{
				pos: position{line: 3622, col: 18, offset: 122816},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 3622, col: 18, offset: 122816},
						name: "SimpleInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3622, col: 40, offset: 122838},
						name: "ElementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 3622, col: 63, offset: 122861},
						name: "MixinCallInterpolation",
					},
					&actionExpr{
						pos: position{line: 3624, col: 21, offset: 122924},
						run: (*parser).callonInterpolation5,
						expr: &litMatcher{
							pos:        position{line: 3624, col: 21, offset: 122924},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SimpleInterpolation",
			pos:  position{line: 3648, col: 1, offset: 123771},
			expr: &choiceExpr{
				pos: position{line: 3648, col: 24, offset: 123794},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3648, col: 24, offset: 123794},
						run: (*parser).callonSimpleInterpolation2,
						expr: &seqExpr{
							pos: position{line: 3648, col: 24, offset: 123794},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3648, col: 24, offset: 123794},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 3648, col: 28, offset: 123798},
									label: "noEscapeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 3648, col: 38, offset: 123808},
										expr: &litMatcher{
											pos:        position{line: 3648, col: 38, offset: 123808},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3648, col: 43, offset: 123813},
									label: "valueI",
									expr: &choiceExpr{
										pos: position{line: 3725, col: 27, offset: 126613},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3725, col: 27, offset: 126613},
												run: (*parser).callonSimpleInterpolation10,
												expr: &seqExpr{
													pos: position{line: 3725, col: 27, offset: 126613},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3725, col: 27, offset: 126613},
															label: "lBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3828, col: 14, offset: 130133},
																run: (*parser).callonSimpleInterpolation13,
																expr: &litMatcher{
																	pos:        position{line: 3828, col: 14, offset: 130133},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3725, col: 50, offset: 126636},
															label: "textI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3725, col: 56, offset: 126642},
																expr: &charClassMatcher{
																	pos:        position{line: 3725, col: 56, offset: 126642},
																	val:        "[^]\\r\\n]",
																	chars:      []rune{']', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3725, col: 67, offset: 126653},
															label: "rBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3829, col: 14, offset: 130173},
																run: (*parser).callonSimpleInterpolation19,
																expr: &litMatcher{
																	pos:        position{line: 3829, col: 14, offset: 130173},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3731, col: 5, offset: 126864},
												run: (*parser).callonSimpleInterpolation21,
												expr: &seqExpr{
													pos: position{line: 3731, col: 5, offset: 126864},
													exprs: []interface{}{
														&labeledExpr{
															pos:   position{line: 3731, col: 5, offset: 126864},
															label: "lBracketPosI",
															expr: &actionExpr{
																pos: position{line: 3828, col: 14, offset: 130133},
																run: (*parser).callonSimpleInterpolation24,
																expr: &litMatcher{
																	pos:        position{line: 3828, col: 14, offset: 130133},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 3731, col: 28, offset: 126887},
															label: "textI",
															expr: &zeroOrMoreExpr{
																pos: position{line: 3731, col: 34, offset: 126893},
																expr: &charClassMatcher{
																	pos:        position{line: 3731, col: 34, offset: 126893},
																	val:        "[^]\\r\\n]",
																	chars:      []rune{']', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 3800, col: 12, offset: 129292},
															expr: &charClassMatcher{
																pos:        position{line: 3812, col: 36, offset: 129639},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 3800, col: 16, offset: 129296},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 3800, col: 16, offset: 129296},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3800, col: 16, offset: 129296},
																			expr: &litMatcher{
																				pos:        position{line: 3800, col: 16, offset: 129296},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 3800, col: 22, offset: 129302},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3799, col: 12, offset: 129278},
																	expr: &anyMatcher{
																		line: 3799, col: 13, offset: 129279,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3654, col: 5, offset: 124008},
						run: (*parser).callonSimpleInterpolation38,
						expr: &seqExpr{
							pos: position{line: 3654, col: 5, offset: 124008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 3654, col: 5, offset: 124008},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 3654, col: 9, offset: 124012},
									label: "valueI",
									expr: &choiceExpr{
										pos: position{line: 3654, col: 17, offset: 124020},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 3654, col: 17, offset: 124020},
												name: "expressionInterpolationValue",
											},
											&ruleRefExpr{
												pos:  position{line: 3654, col: 48, offset: 124051},
												name: "fmtExpressionInterpolationValue",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 3665, col: 1, offset: 124407},
			expr: &actionExpr{
				pos: position{line: 3665, col: 25, offset: 124431},
				run: (*parser).callonElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3665, col: 25, offset: 124431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3665, col: 25, offset: 124431},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3665, col: 29, offset: 124435},
							label: "elPosI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonElementInterpolation5,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3665, col: 40, offset: 124446},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2883, col: 16, offset: 99644},
								expr: &charClassMatcher{
									pos:        position{line: 2869, col: 27, offset: 98983},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3665, col: 58, offset: 124464},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 3665, col: 65, offset: 124471},
								expr: &ruleRefExpr{
									pos:  position{line: 3665, col: 65, offset: 124471},
									name: "SingleLineAttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3665, col: 96, offset: 124502},
							label: "valueI",
							expr: &ruleRefExpr{
								pos:  position{line: 3665, col: 103, offset: 124509},
								name: "elementInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "elementInterpolationValue",
			pos:  position{line: 3678, col: 1, offset: 124914},
			expr: &choiceExpr{
				pos: position{line: 3678, col: 30, offset: 124943},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3725, col: 27, offset: 126613},
						run: (*parser).callonelementInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3725, col: 27, offset: 126613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3725, col: 27, offset: 126613},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3828, col: 14, offset: 130133},
										run: (*parser).callonelementInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3828, col: 14, offset: 130133},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 50, offset: 126636},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3725, col: 56, offset: 126642},
										expr: &charClassMatcher{
											pos:        position{line: 3725, col: 56, offset: 126642},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 67, offset: 126653},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3829, col: 14, offset: 130173},
										run: (*parser).callonelementInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3829, col: 14, offset: 130173},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3731, col: 5, offset: 126864},
						run: (*parser).callonelementInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3731, col: 5, offset: 126864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3731, col: 5, offset: 126864},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3828, col: 14, offset: 130133},
										run: (*parser).callonelementInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3828, col: 14, offset: 130133},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3731, col: 28, offset: 126887},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3731, col: 34, offset: 126893},
										expr: &charClassMatcher{
											pos:        position{line: 3731, col: 34, offset: 126893},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3678, col: 55, offset: 124968},
						name: "expressionInterpolationValue",
					},
					&actionExpr{
						pos: position{line: 3678, col: 86, offset: 124999},
						run: (*parser).callonelementInterpolationValue31,
						expr: &litMatcher{
							pos:        position{line: 3678, col: 86, offset: 124999},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 3680, col: 5, offset: 125051},
						run: (*parser).callonelementInterpolationValue33,
						expr: &andExpr{
							pos: position{line: 3680, col: 5, offset: 125051},
							expr: &choiceExpr{
								pos: position{line: 3680, col: 7, offset: 125053},
								alternatives: []interface{}{
									&anyMatcher{
										line: 3680, col: 7, offset: 125053,
									},
									&notExpr{
										pos: position{line: 3680, col: 11, offset: 125057},
										expr: &anyMatcher{
											line: 3680, col: 12, offset: 125058,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MixinCallInterpolation",
			pos:  position{line: 3694, col: 1, offset: 125538},
			expr: &actionExpr{
				pos: position{line: 3694, col: 27, offset: 125564},
				run: (*parser).callonMixinCallInterpolation1,
				expr: &seqExpr{
					pos: position{line: 3694, col: 27, offset: 125564},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 3694, col: 27, offset: 125564},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 3694, col: 31, offset: 125568},
							label: "mcPosI",
							expr: &actionExpr{
								pos: position{line: 3803, col: 8, offset: 129341},
								run: (*parser).callonMixinCallInterpolation5,
								expr: &choiceExpr{
									pos: position{line: 3803, col: 9, offset: 129342},
									alternatives: []interface{}{
										&andExpr{
											pos: position{line: 3803, col: 9, offset: 129342},
											expr: &anyMatcher{
												line: 3803, col: 10, offset: 129343,
											},
										},
										&notExpr{
											pos: position{line: 3803, col: 14, offset: 129347},
											expr: &anyMatcher{
												line: 3803, col: 15, offset: 129348,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 3694, col: 42, offset: 125579},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 3694, col: 46, offset: 125583},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3694, col: 57, offset: 125594},
								expr: &seqExpr{
									pos: position{line: 3694, col: 58, offset: 125595},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 763, col: 10, offset: 23102},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 763, col: 10, offset: 23102},
													run: (*parser).callonMixinCallInterpolation16,
													expr: &labeledExpr{
														pos:   position{line: 763, col: 10, offset: 23102},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 2414, col: 17, offset: 81960},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2397, col: 20, offset: 81715},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2414, col: 26, offset: 81969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 765, col: 5, offset: 23196},
													run: (*parser).callonMixinCallInterpolation22,
													expr: &seqExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 765, col: 5, offset: 23196},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 765, col: 13, offset: 23204},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 765, col: 13, offset: 23204},
																			expr: &litMatcher{
																				pos:        position{line: 765, col: 13, offset: 23204},
																				val:        "$",
																				ignoreCase: false,
																				want:       "\"$\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 765, col: 18, offset: 23209},
																			expr: &choiceExpr{
																				pos: position{line: 765, col: 19, offset: 23210},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 765, col: 19, offset: 23210},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 765, col: 19, offset: 23210},
																								val:        "[\\pNd]",
																								classes:    []*unicode.RangeTable{rangeTable("Nd")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 765, col: 28, offset: 23219},
																								val:        "[_-\\pL]",
																								chars:      []rune{'_', '-'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 765, col: 38, offset: 23229},
																						val:        "[_-\\pL]",
																						chars:      []rune{'_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 765, col: 49, offset: 23240},
																label: "endPosI",
																expr: &actionExpr{
																	pos: position{line: 3803, col: 8, offset: 129341},
																	run: (*parser).callonMixinCallInterpolation35,
																	expr: &choiceExpr{
																		pos: position{line: 3803, col: 9, offset: 129342},
																		alternatives: []interface{}{
																			&andExpr{
																				pos: position{line: 3803, col: 9, offset: 129342},
																				expr: &anyMatcher{
																					line: 3803, col: 10, offset: 129343,
																				},
																			},
																			&notExpr{
																				pos: position{line: 3803, col: 14, offset: 129347},
																				expr: &anyMatcher{
																					line: 3803, col: 15, offset: 129348,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 3694, col: 64, offset: 125601},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3694, col: 70, offset: 125607},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 777, col: 14, offset: 23657},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 777, col: 14, offset: 23657},
										run: (*parser).callonMixinCallInterpolation44,
										expr: &labeledExpr{
											pos:   position{line: 777, col: 14, offset: 23657},
											label: "identI",
											expr: &choiceExpr{
												pos: position{line: 763, col: 10, offset: 23102},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 763, col: 10, offset: 23102},
														run: (*parser).callonMixinCallInterpolation47,
														expr: &labeledExpr{
															pos:   position{line: 763, col: 10, offset: 23102},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 2414, col: 17, offset: 81960},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2397, col: 20, offset: 81715},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2414, col: 26, offset: 81969},
																		expr: &charClassMatcher{
																			pos:        position{line: 2397, col: 20, offset: 81715},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 765, col: 5, offset: 23196},
														run: (*parser).callonMixinCallInterpolation53,
														expr: &seqExpr{
															pos: position{line: 765, col: 5, offset: 23196},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 765, col: 5, offset: 23196},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 765, col: 13, offset: 23204},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 765, col: 13, offset: 23204},
																				expr: &litMatcher{
																					pos:        position{line: 765, col: 13, offset: 23204},
																					val:        "$",
																					ignoreCase: false,
																					want:       "\"$\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 765, col: 18, offset: 23209},
																				expr: &choiceExpr{
																					pos: position{line: 765, col: 19, offset: 23210},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 765, col: 19, offset: 23210},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 765, col: 19, offset: 23210},
																									val:        "[\\pNd]",
																									classes:    []*unicode.RangeTable{rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 765, col: 28, offset: 23219},
																									val:        "[_-\\pL]",
																									chars:      []rune{'_', '-'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 765, col: 38, offset: 23229},
																							val:        "[_-\\pL]",
																							chars:      []rune{'_', '-'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 765, col: 49, offset: 23240},
																	label: "endPosI",
																	expr: &actionExpr{
																		pos: position{line: 3803, col: 8, offset: 129341},
																		run: (*parser).callonMixinCallInterpolation66,
																		expr: &choiceExpr{
																			pos: position{line: 3803, col: 9, offset: 129342},
																			alternatives: []interface{}{
																				&andExpr{
																					pos: position{line: 3803, col: 9, offset: 129342},
																					expr: &anyMatcher{
																						line: 3803, col: 10, offset: 129343,
																					},
																				},
																				&notExpr{
																					pos: position{line: 3803, col: 14, offset: 129347},
																					expr: &anyMatcher{
																						line: 3803, col: 15, offset: 129348,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 779, col: 5, offset: 23699},
										run: (*parser).callonMixinCallInterpolation72,
										expr: &seqExpr{
											pos: position{line: 779, col: 5, offset: 23699},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 779, col: 5, offset: 23699},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonMixinCallInterpolation75,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 779, col: 14, offset: 23708},
													expr: &choiceExpr{
														pos: position{line: 779, col: 16, offset: 23710},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 3800, col: 12, offset: 129292},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 3800, col: 12, offset: 129292},
																		expr: &charClassMatcher{
																			pos:        position{line: 3812, col: 36, offset: 129639},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3800, col: 16, offset: 129296},
																		alternatives: []interface{}{
																			&seqExpr{
																				pos: position{line: 3800, col: 16, offset: 129296},
																				exprs: []interface{}{
																					&zeroOrOneExpr{
																						pos: position{line: 3800, col: 16, offset: 129296},
																						expr: &litMatcher{
																							pos:        position{line: 3800, col: 16, offset: 129296},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 3800, col: 22, offset: 129302},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3799, col: 12, offset: 129278},
																				expr: &anyMatcher{
																					line: 3799, col: 13, offset: 129279,
																				},
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 779, col: 22, offset: 23716},
																val:        "[:!=()]",
																chars:      []rune{':', '!', '=', '(', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 790, col: 5, offset: 24048},
										run: (*parser).callonMixinCallInterpolation94,
										expr: &seqExpr{
											pos: position{line: 790, col: 5, offset: 24048},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 790, col: 5, offset: 24048},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 790, col: 12, offset: 24055},
														expr: &charClassMatcher{
															pos:        position{line: 790, col: 12, offset: 24055},
															val:        "[^ \\t\\r\\n:!=()]",
															chars:      []rune{' ', '\t', '\r', '\n', ':', '!', '=', '(', ')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 790, col: 29, offset: 24072},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonMixinCallInterpolation100,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3694, col: 86, offset: 125623},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3694, col: 92, offset: 125629},
								expr: &ruleRefExpr{
									pos:  position{line: 3694, col: 92, offset: 125629},
									name: "singleLineMixinArgList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3694, col: 116, offset: 125653},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 3694, col: 123, offset: 125660},
								expr: &ruleRefExpr{
									pos:  position{line: 3694, col: 123, offset: 125660},
									name: "mixinCallInterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "mixinCallInterpolationValue",
			pos:  position{line: 3716, col: 1, offset: 126278},
			expr: &choiceExpr{
				pos: position{line: 3716, col: 32, offset: 126309},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3725, col: 27, offset: 126613},
						run: (*parser).callonmixinCallInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3725, col: 27, offset: 126613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3725, col: 27, offset: 126613},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3828, col: 14, offset: 130133},
										run: (*parser).callonmixinCallInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3828, col: 14, offset: 130133},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 50, offset: 126636},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3725, col: 56, offset: 126642},
										expr: &charClassMatcher{
											pos:        position{line: 3725, col: 56, offset: 126642},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3725, col: 67, offset: 126653},
									label: "rBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3829, col: 14, offset: 130173},
										run: (*parser).callonmixinCallInterpolationValue11,
										expr: &litMatcher{
											pos:        position{line: 3829, col: 14, offset: 130173},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3731, col: 5, offset: 126864},
						run: (*parser).callonmixinCallInterpolationValue13,
						expr: &seqExpr{
							pos: position{line: 3731, col: 5, offset: 126864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3731, col: 5, offset: 126864},
									label: "lBracketPosI",
									expr: &actionExpr{
										pos: position{line: 3828, col: 14, offset: 130133},
										run: (*parser).callonmixinCallInterpolationValue16,
										expr: &litMatcher{
											pos:        position{line: 3828, col: 14, offset: 130133},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3731, col: 28, offset: 126887},
									label: "textI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 3731, col: 34, offset: 126893},
										expr: &charClassMatcher{
											pos:        position{line: 3731, col: 34, offset: 126893},
											val:        "[^]\\r\\n]",
											chars:      []rune{']', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 3716, col: 57, offset: 126334},
						name: "expressionInterpolationValue",
					},
				},
			},
		},
		{
			name: "expressionInterpolationValue",
			pos:  position{line: 3759, col: 1, offset: 127715},
			expr: &choiceExpr{
				pos: position{line: 3759, col: 33, offset: 127747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3759, col: 33, offset: 127747},
						run: (*parser).callonexpressionInterpolationValue2,
						expr: &seqExpr{
							pos: position{line: 3759, col: 33, offset: 127747},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3759, col: 33, offset: 127747},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3825, col: 12, offset: 130054},
										run: (*parser).callonexpressionInterpolationValue5,
										expr: &litMatcher{
											pos:        position{line: 3825, col: 12, offset: 130054},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3759, col: 52, offset: 127766},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3759, col: 58, offset: 127772},
										name: "SingleLineExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 3759, col: 79, offset: 127793},
									label: "rBracePosI",
									expr: &actionExpr{
										pos: position{line: 3826, col: 12, offset: 130092},
										run: (*parser).callonexpressionInterpolationValue10,
										expr: &litMatcher{
											pos:        position{line: 3826, col: 12, offset: 130092},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3765, col: 5, offset: 128014},
						run: (*parser).callonexpressionInterpolationValue12,
						expr: &seqExpr{
							pos: position{line: 3765, col: 5, offset: 128014},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 3765, col: 5, offset: 128014},
									label: "lBracePosI",
									expr: &actionExpr{
										pos: position{line: 3825, col: 12, offset: 130054},
										run: (*parser).callonexpressionInterpolationValue15,
										expr: &litMatcher{
											pos:        position{line: 3825, col: 12, offset: 130054},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 3765, col: 24, offset: 128033},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 3765, col: 30, offset: 128039},
										name: "SingleLineExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 3800, col: 12, offset: 129292},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 3800, col: 16, offset: 129296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 3800, col: 16, offset: 129296},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 3800, col: 16, offset: 129296},
													expr: &litMatcher{
														pos:        position{line: 3800, col: 16, offset: 129296},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 3800, col: 22, offset: 129302},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 3799, col: 12, offset: 129278},
											expr: &anyMatcher{
												line: 3799, col: 13, offset: 129279,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fmtExpressionInterpolationValue",
			pos:  position{line: 3789, col: 1, offset: 128856},
			expr: &actionExpr{
				pos: position{line: 3789, col: 36, offset: 128891},
				run: (*parser).callonfmtExpressionInterpolationValue1,
				expr: &seqExpr{
					pos: position{line: 3789, col: 36, offset: 128891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 3789, col: 36, offset: 128891},
							label: "fmtDirectiveI",
							expr: &choiceExpr{
								pos: position{line: 1844, col: 17, offset: 60271},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1844, col: 17, offset: 60271},
										run: (*parser).callonfmtExpressionInterpolationValue5,
										expr: &seqExpr{
											pos: position{line: 1844, col: 17, offset: 60271},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1844, col: 17, offset: 60271},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1844, col: 21, offset: 60275},
													expr: &charClassMatcher{
														pos:        position{line: 1860, col: 12, offset: 60952},
														val:        "[ 0+-#]",
														chars:      []rune{' ', '0'},
														ranges:     []rune{'+', '#'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 1844, col: 30, offset: 60284},
													expr: &seqExpr{
														pos: position{line: 1844, col: 31, offset: 60285},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 1844, col: 31, offset: 60285},
																val:        "[1-9]",
																ranges:     []rune{'1', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 1844, col: 36, offset: 60290},
																expr: &charClassMatcher{
																	pos:        position{line: 1844, col: 36, offset: 60290},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 1844, col: 45, offset: 60299},
													expr: &seqExpr{
														pos: position{line: 1844, col: 46, offset: 60300},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1844, col: 46, offset: 60300},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1844, col: 50, offset: 60304},
																expr: &charClassMatcher{
																	pos:        position{line: 1844, col: 50, offset: 60304},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1861, col: 12, offset: 60971},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 1861, col: 12, offset: 60971},
															val:        "[vTtbcdoOqxXUeEfFgGsp]",
															chars:      []rune{'v', 'T', 't', 'b', 'c', 'd', 'o', 'O', 'q', 'x', 'X', 'U', 'e', 'E', 'f', 'F', 'g', 'G', 's', 'p'},
															ignoreCase: false,
															inverted:   false,
														},
														&actionExpr{
															pos: position{line: 1861, col: 74, offset: 61033},
															run: (*parser).callonfmtExpressionInterpolationValue22,
															expr: &andExpr{
																pos: position{line: 1861, col: 74, offset: 61033},
																expr: &charClassMatcher{
																	pos:        position{line: 1861, col: 76, offset: 61035},
																	val:        "[{\"`]",
																	chars:      []rune{'{', '"', '`'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1873, col: 5, offset: 61572},
															run: (*parser).callonfmtExpressionInterpolationValue25,
															expr: &anyMatcher{
																line: 1873, col: 5, offset: 61572,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1846, col: 5, offset: 60362},
										run: (*parser).callonfmtExpressionInterpolationValue27,
										expr: &seqExpr{
											pos: position{line: 1846, col: 5, offset: 60362},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 5, offset: 60362},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 9, offset: 60366},
													expr: &charClassMatcher{
														pos:        position{line: 1846, col: 9, offset: 60366},
														val:        "[^`\"{]",
														chars:      []rune{'`', '"', '{'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&labeledExpr{
													pos:   position{line: 1846, col: 17, offset: 60374},
													label: "endPosI",
													expr: &actionExpr{
														pos: position{line: 3803, col: 8, offset: 129341},
														run: (*parser).callonfmtExpressionInterpolationValue33,
														expr: &choiceExpr{
															pos: position{line: 3803, col: 9, offset: 129342},
															alternatives: []interface{}{
																&andExpr{
																	pos: position{line: 3803, col: 9, offset: 129342},
																	expr: &anyMatcher{
																		line: 3803, col: 10, offset: 129343,
																	},
																},
																&notExpr{
																	pos: position{line: 3803, col: 14, offset: 129347},
																	expr: &anyMatcher{
																		line: 3803, col: 15, offset: 129348,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 3789, col: 63, offset: 128918},
							label: "eivI",
							expr: &ruleRefExpr{
								pos:  position{line: 3789, col: 68, offset: 128923},
								name: "expressionInterpolationValue",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION_IGNORE_ADDITIONAL",
			pos:  position{line: 4123, col: 1, offset: 143213},
			expr: &choiceExpr{
				pos: position{line: 4123, col: 34, offset: 143246},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4123, col: 34, offset: 143246},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4123, col: 34, offset: 143246},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL3,
							},
							&actionExpr{
								pos: position{line: 3901, col: 17, offset: 133533},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 3901, col: 17, offset: 133533},
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 3901, col: 41, offset: 133557},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL7,
							},
							&choiceExpr{
								pos: position{line: 3953, col: 5, offset: 135467},
								alternatives: []interface{}{
									&andCodeExpr{
										pos: position{line: 3953, col: 5, offset: 135467},
										run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL9,
									},
									&seqExpr{
										pos: position{line: 3955, col: 9, offset: 135550},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3955, col: 9, offset: 135550},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL11,
											},
											&stateCodeExpr{
												pos: position{line: 3957, col: 7, offset: 135673},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL12,
											},
										},
									},
									&seqExpr{
										pos: position{line: 3964, col: 9, offset: 136009},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 3964, col: 9, offset: 136009},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL14,
											},
											&andCodeExpr{
												pos: position{line: 3966, col: 7, offset: 136117},
												run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL15,
											},
											&choiceExpr{
												pos: position{line: 4019, col: 9, offset: 138452},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 4019, col: 9, offset: 138452},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 4019, col: 9, offset: 138452},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL18,
															},
															&andCodeExpr{
																pos: position{line: 4023, col: 11, offset: 138702},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL19,
															},
															&stateCodeExpr{
																pos: position{line: 4089, col: 11, offset: 141908},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL20,
															},
														},
													},
													&seqExpr{
														pos: position{line: 4097, col: 13, offset: 142261},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 4097, col: 13, offset: 142261},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL22,
															},
															&andCodeExpr{
																pos: position{line: 4101, col: 11, offset: 142516},
																run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL23,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 4126, col: 17, offset: 143397},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4126, col: 17, offset: 143397},
								run: (*parser).callonINDENTATION_IGNORE_ADDITIONAL25,
							},
							&ruleRefExpr{
								pos:  position{line: 4128, col: 3, offset: 143463},
								name: "_INDENTATION_IGNORE_ADDITIONAL",
							},
						},
					},
				},
			},
		},
		{
			name: "_INDENTATION_IGNORE_ADDITIONAL",
			pos:  position{line: 4130, col: 1, offset: 143495},
			expr: &choiceExpr{
				pos: position{line: 4130, col: 35, offset: 143529},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4131, col: 5, offset: 143535},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 4132, col: 9, offset: 143545},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 4132, col: 9, offset: 143545},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4132, col: 9, offset: 143545},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL5,
											},
											&choiceExpr{
												pos: position{line: 4137, col: 13, offset: 143809},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 4137, col: 13, offset: 143809},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 4137, col: 13, offset: 143809},
																expr: &charClassMatcher{
																	pos:        position{line: 3812, col: 36, offset: 129639},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 4137, col: 16, offset: 143812},
																run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL10,
															},
														},
													},
													&seqExpr{
														pos: position{line: 4148, col: 17, offset: 144206},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 4148, col: 17, offset: 144206},
																expr: &charClassMatcher{
																	pos:        position{line: 3812, col: 36, offset: 129639},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andCodeExpr{
																pos: position{line: 4148, col: 20, offset: 144209},
																run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL14,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 4213, col: 11, offset: 147440},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL15,
											},
										},
									},
									&seqExpr{
										pos: position{line: 4220, col: 13, offset: 147762},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 4220, col: 13, offset: 147762},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL17,
											},
											&andCodeExpr{
												pos: position{line: 4224, col: 11, offset: 148017},
												run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL18,
											},
										},
									},
								},
							},
							&stateCodeExpr{
								pos: position{line: 4229, col: 7, offset: 148198},
								run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL19,
							},
						},
					},
					&seqExpr{
						pos: position{line: 4233, col: 5, offset: 148275},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 4233, col: 5, offset: 148275},
								label: "spaceI",
								expr: &actionExpr{
									pos: position{line: 4233, col: 13, offset: 148283},
									run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL22,
									expr: &charClassMatcher{
										pos:        position{line: 3812, col: 36, offset: 129639},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&andCodeExpr{
								pos: position{line: 4233, col: 39, offset: 148309},
								run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL24,
							},
							&stateCodeExpr{
								pos: position{line: 4283, col: 3, offset: 150121},
								run: (*parser).callon_INDENTATION_IGNORE_ADDITIONAL25,
							},
							&ruleRefExpr{
								pos:  position{line: 4286, col: 3, offset: 150223},
								name: "_INDENTATION_IGNORE_ADDITIONAL",
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 4306, col: 1, offset: 150892},
			expr: &choiceExpr{
				pos: position{line: 4306, col: 17, offset: 150908},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 4306, col: 17, offset: 150908},
						exprs: []interface{}{
							&andCodeExpr{
								pos: position{line: 4306, col: 17, offset: 150908},
								run: (*parser).callonINDENTATION23,
							},
							&litMatcher{
								pos:        position{line: 4308, col: 3, offset: 150969},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 4308, col: 10, offset: 150976},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 4308, col: 10, offset: 150976},
								name: "INDENTATION_IGNORE_ADDITIONAL",
							},
							&litMatcher{
								pos:        position{line: 4308, col: 40, offset: 151006},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onFile3() error {
	c.state["Indentation.Level"] = 0       // the lvl we are in rn
	c.state["Indentation.Char"] = byte(0)  // the char used for indentation
	c.state["Indentation.Repetitions"] = 0 // num of repetitions of char per lvl
	c.state["Indentation.RefLine"] = 0     // the line no where we got char and repetitions from

	// a stack containing the actual number of repetitions of char per lvl
	// used to recover from inconsistent indentations errs
	c.state["Indentation.ActualRepetitions"] = &stack.Stack[int]{}
	c.state["Indentation.TotalRepetitions"] = 0 // sum of the stack above

	// used by INDENTATION_NO_INCREASE to count how many chars it has found
	c.state["Indentation.CharCount"] = 0
	return nil
}

func (p *parser) callonFile3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile3()
}

func (c *current) onFile1(extendAndCommentsI, importsAndCommentsI, usesAndCommentsI, globalCodeAndFuncI, preScopeI, scopeI interface{}) (interface{}, error) {
	var f file.File

	if extendAndCommentsI != nil {
		f.Extend = ptrOrNil[file.Extend](getTuple[file.Extend](extendAndCommentsI, 0))
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](extendAndCommentsI, 1)...)
	}

	if importsAndCommentsI != nil {
		f.Imports = getTuple[[]file.Import](importsAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](importsAndCommentsI, 1)...)
	}

	if usesAndCommentsI != nil {
		f.Uses = getTuple[[]file.Use](usesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](usesAndCommentsI, 1)...)
	}

	if globalCodeAndFuncI != nil {
		partFile := globalCodeAndFuncI.(file.File)

		f.TopLevelComments = append(f.TopLevelComments, partFile.TopLevelComments...)
		f.GlobalCode = partFile.GlobalCode
		f.Func = partFile.Func
	}

	preScope := castedOrZero[file.Scope](preScopeI)
	s := castedOrZero[file.Scope](scopeI)

	f.Scope = append(preScope, s...)

	return &f, nil
}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["extendAndCommentsI"], stack["importsAndCommentsI"], stack["usesAndCommentsI"], stack["globalCodeAndFuncI"], stack["preScopeI"], stack["scopeI"])
}

func (c *current) onextendAndComments26(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonextendAndComments26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments26(stack["strI"])
}

func (c *current) onextendAndComments33(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonextendAndComments33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments33(stack["strI"])
}

func (c *current) onextendAndComments65() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonextendAndComments65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments65()
}

func (c *current) onextendAndComments78() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonextendAndComments78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments78()
}

func (c *current) onextendAndComments99() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonextendAndComments99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments99()
}

func (c *current) onextendAndComments122() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonextendAndComments122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments122()
}

func (c *current) onextendAndComments133() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonextendAndComments133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments133()
}

func (c *current) onextendAndComments140() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonextendAndComments140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments140()
}

func (c *current) onextendAndComments145() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonextendAndComments145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments145()
}

func (c *current) onextendAndComments50(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonextendAndComments50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments50(stack["strI"])
}

func (c *current) onextendAndComments166() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonextendAndComments166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments166()
}

func (c *current) onextendAndComments179() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonextendAndComments179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments179()
}

func (c *current) onextendAndComments200() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonextendAndComments200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments200()
}

func (c *current) onextendAndComments223() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonextendAndComments223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments223()
}

func (c *current) onextendAndComments234() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonextendAndComments234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments234()
}

func (c *current) onextendAndComments241() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonextendAndComments241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments241()
}

func (c *current) onextendAndComments246() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonextendAndComments246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments246()
}

func (c *current) onextendAndComments252() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonextendAndComments252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments252()
}

func (c *current) onextendAndComments151(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonextendAndComments151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments151(stack["strI"], stack["endPosI"])
}

func (c *current) onextendAndComments277() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonextendAndComments277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments277()
}

func (c *current) onextendAndComments269(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonextendAndComments269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments269(stack["strI"], stack["endPosI"])
}

func (c *current) onextendAndComments20(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonextendAndComments20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments20(stack["sI"])
}

func (c *current) onextendAndComments283(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonextendAndComments283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments283(stack["pathI"])
}

func (c *current) onextendAndComments15(extendI interface{}) (interface{}, error) {
	return file.Extend{Path: extendI.(file.String), Position: pos(c)}, nil
}

func (p *parser) callonextendAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments15(stack["extendI"])
}

func (c *current) onextendAndComments1(commsI, extI interface{}) (interface{}, error) {
	return []any{extI.(file.Extend), castedOrZero[[]file.CorgiComment](commsI)}, nil
}

func (p *parser) callonextendAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onextendAndComments1(stack["commsI"], stack["extI"])
}

func (c *current) onimportsAndComments43() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonimportsAndComments43() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments43()
}

func (c *current) onimportsAndComments55() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonimportsAndComments55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments55()
}

func (c *current) onimportsAndComments58() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonimportsAndComments58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments58()
}

func (c *current) onimportsAndComments60() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonimportsAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments60()
}

func (c *current) onimportsAndComments62() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonimportsAndComments62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments62()
}

func (c *current) onimportsAndComments63() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonimportsAndComments63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments63()
}

func (c *current) onimportsAndComments65() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonimportsAndComments65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments65()
}

func (c *current) onimportsAndComments66() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments66()
}

func (c *current) onimportsAndComments69() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonimportsAndComments69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments69()
}

func (c *current) onimportsAndComments70() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonimportsAndComments70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments70()
}

func (c *current) onimportsAndComments71() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonimportsAndComments71() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments71()
}

func (c *current) onimportsAndComments73() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonimportsAndComments73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments73()
}

func (c *current) onimportsAndComments74() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonimportsAndComments74() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments74()
}

func (c *current) onimportsAndComments81() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments81()
}

func (c *current) onimportsAndComments83(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments83(stack["ident"])
}

func (c *current) onimportsAndComments94() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments94()
}

func (c *current) onimportsAndComments89(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments89(stack["endPosI"])
}

func (c *current) onimportsAndComments104(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments104(stack["strI"])
}

func (c *current) onimportsAndComments111(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments111(stack["strI"])
}

func (c *current) onimportsAndComments143() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments143()
}

func (c *current) onimportsAndComments156() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments156()
}

func (c *current) onimportsAndComments177() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments177()
}

func (c *current) onimportsAndComments200() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments200()
}

func (c *current) onimportsAndComments211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments211()
}

func (c *current) onimportsAndComments218() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments218()
}

func (c *current) onimportsAndComments223() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments223()
}

func (c *current) onimportsAndComments128(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments128(stack["strI"])
}

func (c *current) onimportsAndComments244() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments244()
}

func (c *current) onimportsAndComments257() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments257()
}

func (c *current) onimportsAndComments278() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments278()
}

func (c *current) onimportsAndComments301() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments301()
}

func (c *current) onimportsAndComments312() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments312()
}

func (c *current) onimportsAndComments319() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments319()
}

func (c *current) onimportsAndComments324() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments324()
}

func (c *current) onimportsAndComments330() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments330()
}

func (c *current) onimportsAndComments229(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments229(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments355() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments355()
}

func (c *current) onimportsAndComments347(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments347(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments361(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments361(stack["pathI"])
}

func (c *current) onimportsAndComments75(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments75(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments374(importsI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonimportsAndComments374() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments374(stack["importsI"])
}

func (c *current) onimportsAndComments41(importsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.ImportSpec](importsI, -1), nil
}

func (p *parser) callonimportsAndComments41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments41(stack["importsI"])
}

func (c *current) onimportsAndComments28(specsI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  specsI.([]file.ImportSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments28(stack["specsI"])
}

func (c *current) onimportsAndComments387() (interface{}, error) {
	return file.GoIdent{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments387()
}

func (c *current) onimportsAndComments389(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments389(stack["ident"])
}

func (c *current) onimportsAndComments400() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments400()
}

func (c *current) onimportsAndComments395(endPosI interface{}) (interface{}, error) {
	return file.GoIdent{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonimportsAndComments395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments395(stack["endPosI"])
}

func (c *current) onimportsAndComments410(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments410(stack["strI"])
}

func (c *current) onimportsAndComments417(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments417(stack["strI"])
}

func (c *current) onimportsAndComments449() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments449() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments449()
}

func (c *current) onimportsAndComments462() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments462()
}

func (c *current) onimportsAndComments483() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments483() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments483()
}

func (c *current) onimportsAndComments506() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments506()
}

func (c *current) onimportsAndComments517() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments517()
}

func (c *current) onimportsAndComments524() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments524()
}

func (c *current) onimportsAndComments529() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments529()
}

func (c *current) onimportsAndComments434(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonimportsAndComments434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments434(stack["strI"])
}

func (c *current) onimportsAndComments550() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonimportsAndComments550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments550()
}

func (c *current) onimportsAndComments563() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments563()
}

func (c *current) onimportsAndComments584() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonimportsAndComments584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments584()
}

func (c *current) onimportsAndComments607() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments607()
}

func (c *current) onimportsAndComments618() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments618()
}

func (c *current) onimportsAndComments625() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments625()
}

func (c *current) onimportsAndComments630() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonimportsAndComments630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments630()
}

func (c *current) onimportsAndComments636() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments636()
}

func (c *current) onimportsAndComments535(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonimportsAndComments535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments535(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments661() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments661()
}

func (c *current) onimportsAndComments653(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonimportsAndComments653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments653(stack["strI"], stack["endPosI"])
}

func (c *current) onimportsAndComments667(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonimportsAndComments667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments667(stack["pathI"])
}

func (c *current) onimportsAndComments381(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.ImportSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.GoIdent](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonimportsAndComments381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments381(stack["aliasI"], stack["pathI"])
}

func (c *current) onimportsAndComments375(specI interface{}) (interface{}, error) {
	return file.Import{
		Imports:  []file.ImportSpec{specI.(file.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonimportsAndComments375() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments375(stack["specI"])
}

func (c *current) onimportsAndComments684() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonimportsAndComments684() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments684()
}

func (c *current) onimportsAndComments680(posI interface{}) (interface{}, error) {
	return file.Import{Position: pos(c)}, &corgierr.Error{
		Message: "missing import path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an import path, optionally preceded by an import alias",
		}),
	}
}

func (p *parser) callonimportsAndComments680() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments680(stack["posI"])
}

func (c *current) onimportsAndComments15(importsI interface{}) (interface{}, error) {
	impTuples := islice(importsI)
	if impTuples == nil {
		return []file.Import(nil), nil
	}

	var imps []file.Import
	for _, impTuple := range impTuples {
		imps = append(imps, getTuple[file.Import](impTuple, 1))
	}

	return imps, nil
}

func (p *parser) callonimportsAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments15(stack["importsI"])
}

func (c *current) onimportsAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var imports []file.Import

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		imports = append(imports, getTuple[[]file.Import](t, -1)...)
	}

	return []any{imports, comments}, nil
}

func (p *parser) callonimportsAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimportsAndComments1(stack["valsI"])
}

func (c *current) onusesAndComments43() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonusesAndComments43() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments43()
}

func (c *current) onusesAndComments55() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonusesAndComments55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments55()
}

func (c *current) onusesAndComments58() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonusesAndComments58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments58()
}

func (c *current) onusesAndComments60() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonusesAndComments60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments60()
}

func (c *current) onusesAndComments62() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonusesAndComments62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments62()
}

func (c *current) onusesAndComments63() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonusesAndComments63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments63()
}

func (c *current) onusesAndComments65() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonusesAndComments65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments65()
}

func (c *current) onusesAndComments66() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments66()
}

func (c *current) onusesAndComments69() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonusesAndComments69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments69()
}

func (c *current) onusesAndComments70() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonusesAndComments70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments70()
}

func (c *current) onusesAndComments71() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonusesAndComments71() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments71()
}

func (c *current) onusesAndComments73() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonusesAndComments73() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments73()
}

func (c *current) onusesAndComments74() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonusesAndComments74() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments74()
}

func (c *current) onusesAndComments81() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments81()
}

func (c *current) onusesAndComments83(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments83(stack["identI"])
}

func (c *current) onusesAndComments102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments102()
}

func (c *current) onusesAndComments89(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments89(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments113() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments113()
}

func (c *current) onusesAndComments108(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments108(stack["endPosI"])
}

func (c *current) onusesAndComments123(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments123(stack["strI"])
}

func (c *current) onusesAndComments130(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments130(stack["strI"])
}

func (c *current) onusesAndComments162() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments162()
}

func (c *current) onusesAndComments175() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments175()
}

func (c *current) onusesAndComments196() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments196()
}

func (c *current) onusesAndComments219() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments219()
}

func (c *current) onusesAndComments230() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments230()
}

func (c *current) onusesAndComments237() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments237()
}

func (c *current) onusesAndComments242() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments242()
}

func (c *current) onusesAndComments147(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments147(stack["strI"])
}

func (c *current) onusesAndComments263() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments263()
}

func (c *current) onusesAndComments276() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments276()
}

func (c *current) onusesAndComments297() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments297()
}

func (c *current) onusesAndComments320() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments320()
}

func (c *current) onusesAndComments331() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments331()
}

func (c *current) onusesAndComments338() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments338()
}

func (c *current) onusesAndComments343() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments343()
}

func (c *current) onusesAndComments349() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments349()
}

func (c *current) onusesAndComments248(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments248(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments374() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments374()
}

func (c *current) onusesAndComments366(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments366(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments380(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments380(stack["pathI"])
}

func (c *current) onusesAndComments75(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments75(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments393(usesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonusesAndComments393() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments393(stack["usesI"])
}

func (c *current) onusesAndComments41(usesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.UseSpec](usesI, -1), nil
}

func (p *parser) callonusesAndComments41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments41(stack["usesI"])
}

func (c *current) onusesAndComments28(specsI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     specsI.([]file.UseSpec),
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments28(stack["specsI"])
}

func (c *current) onusesAndComments406() (interface{}, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments406()
}

func (c *current) onusesAndComments408(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments408(stack["identI"])
}

func (c *current) onusesAndComments427() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments427()
}

func (c *current) onusesAndComments414(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonusesAndComments414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments414(stack["identI"], stack["endPosI"])
}

func (c *current) onusesAndComments438() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments438()
}

func (c *current) onusesAndComments433(endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    string(c.text),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid import alias",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
		}
}

func (p *parser) callonusesAndComments433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments433(stack["endPosI"])
}

func (c *current) onusesAndComments448(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments448(stack["strI"])
}

func (c *current) onusesAndComments455(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments455(stack["strI"])
}

func (c *current) onusesAndComments487() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments487()
}

func (c *current) onusesAndComments500() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments500()
}

func (c *current) onusesAndComments521() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments521()
}

func (c *current) onusesAndComments544() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments544()
}

func (c *current) onusesAndComments555() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments555()
}

func (c *current) onusesAndComments562() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments562()
}

func (c *current) onusesAndComments567() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments567()
}

func (c *current) onusesAndComments472(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonusesAndComments472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments472(stack["strI"])
}

func (c *current) onusesAndComments588() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonusesAndComments588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments588()
}

func (c *current) onusesAndComments601() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments601()
}

func (c *current) onusesAndComments622() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonusesAndComments622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments622()
}

func (c *current) onusesAndComments645() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments645()
}

func (c *current) onusesAndComments656() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments656()
}

func (c *current) onusesAndComments663() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonusesAndComments663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments663()
}

func (c *current) onusesAndComments668() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonusesAndComments668() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments668()
}

func (c *current) onusesAndComments674() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments674()
}

func (c *current) onusesAndComments573(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonusesAndComments573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments573(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments699() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments699()
}

func (c *current) onusesAndComments691(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonusesAndComments691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments691(stack["strI"], stack["endPosI"])
}

func (c *current) onusesAndComments705(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonusesAndComments705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments705(stack["pathI"])
}

func (c *current) onusesAndComments400(aliasI, pathI interface{}) (interface{}, error) {
	var spec file.UseSpec
	spec.Position = pos(c)

	if aliasI != nil {
		alias := getTuple[file.Ident](aliasI, 0)
		spec.Alias = &alias
	}

	spec.Path = pathI.(file.String)
	return spec, nil
}

func (p *parser) callonusesAndComments400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments400(stack["aliasI"], stack["pathI"])
}

func (c *current) onusesAndComments394(specI interface{}) (interface{}, error) {
	return file.Use{
		Uses:     []file.UseSpec{specI.(file.UseSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonusesAndComments394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments394(stack["specI"])
}

func (c *current) onusesAndComments722() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonusesAndComments722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments722()
}

func (c *current) onusesAndComments718(posI interface{}) (interface{}, error) {
	return file.Use{Position: pos(c)}, &corgierr.Error{
		Message: "missing use path",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an use path, optionally preceded by an use alias",
		}),
	}
}

func (p *parser) callonusesAndComments718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments718(stack["posI"])
}

func (c *current) onusesAndComments15(usesI interface{}) (interface{}, error) {
	useTuples := islice(usesI)
	if useTuples == nil {
		return []file.Use(nil), nil
	}

	var uses []file.Use
	for _, useTuple := range useTuples {
		uses = append(uses, getTuple[file.Use](useTuple, 1))
	}

	return uses, nil
}

func (p *parser) callonusesAndComments15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments15(stack["usesI"])
}

func (c *current) onusesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var uses []file.Use

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		uses = append(uses, getTuple[[]file.Use](t, -1)...)
	}

	return []any{uses, comments}, nil
}

func (p *parser) callonusesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onusesAndComments1(stack["valsI"])
}

func (c *current) oncodesAndComments1(valsI interface{}) (interface{}, error) {
	tuples := islice(valsI)

	var comments []file.CorgiComment
	var codes []file.Code

	for _, t := range tuples {
		comments = append(comments, castedOrZero[[]file.CorgiComment](islice(t)[0])...)
		codes = append(codes, getTuple[[]file.Code](t, -1)...)
	}

	return []any{codes, comments}, nil
}

func (p *parser) calloncodesAndComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodesAndComments1(stack["valsI"])
}

func (c *current) onglobalCodeAndFunc1(codesAndCommentsI, commentsI, funcI interface{}) (interface{}, error) {
	var f file.File

	if codesAndCommentsI != nil {
		f.GlobalCode = getTuple[[]file.Code](codesAndCommentsI, 0)
		f.TopLevelComments = append(f.TopLevelComments, getTuple[[]file.CorgiComment](codesAndCommentsI, 1)...)
	}

	if commentsI != nil {
		f.TopLevelComments = append(f.TopLevelComments, commentsI.([]file.CorgiComment)...)
	}

	fun := funcI.(file.Func)
	f.Func = &fun

	return f, nil
}

func (p *parser) callonglobalCodeAndFunc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalCodeAndFunc1(stack["codesAndCommentsI"], stack["commentsI"], stack["funcI"])
}

func (c *current) onpreScope39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonpreScope39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope39()
}

func (c *current) onpreScope35(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope35(stack["startPosI"])
}

func (c *current) onpreScope56() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope56()
}

func (c *current) onpreScope20() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonpreScope20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope20()
}

func (c *current) onpreScope90() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonpreScope90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope90()
}

func (c *current) onpreScope86(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope86(stack["startPosI"])
}

func (c *current) onpreScope107() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonpreScope107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope107()
}

func (c *current) onpreScope71() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonpreScope71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope71()
}

func (c *current) onpreScope1(itmsI, doctypeI interface{}) (interface{}, error) {
	itmIs := islice(itmsI)
	n := len(itmIs)
	if doctypeI != nil {
		n++
	}

	itms := make(file.Scope, n)
	for i, itmI := range itmIs {
		itms[i] = getTuple[file.ScopeItem](itmI, 0)
	}

	if doctypeI != nil {
		itms[len(itms)-1] = doctypeI.(file.Doctype)
	}

	return itms, nil
}

func (p *parser) callonpreScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreScope1(stack["itmsI"], stack["doctypeI"])
}

func (c *current) onScope13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonScope13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope13()
}

func (c *current) onScope16() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonScope16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope16()
}

func (c *current) onScope18() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonScope18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope18()
}

func (c *current) onScope20() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonScope20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope20()
}

func (c *current) onScope21() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonScope21() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope21()
}

func (c *current) onScope23() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonScope23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope23()
}

func (c *current) onScope24() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonScope24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope24()
}

func (c *current) onScope27() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27()
}

func (c *current) onScope28() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonScope28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope28()
}

func (c *current) onScope29() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonScope29() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope29()
}

func (c *current) onScope31() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonScope31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope31()
}

func (c *current) onScope32() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonScope32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope32()
}

func (c *current) onScope1(itemsI interface{}) (interface{}, error) {
	itemTuples := islice(itemsI)

	scope := make(file.Scope, 0, len(itemTuples))
	for _, it := range itemTuples {
		tuple := islice(it)
		if si, ok := tuple[len(tuple)-1].(file.ScopeItem); ok {
			scope = append(scope, si)
		}
	}

	return scope, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["itemsI"])
}

func (c *current) onscopeItem25(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem25(stack["strI"])
}

func (c *current) onscopeItem32(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem32(stack["strI"])
}

func (c *current) onscopeItem64() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem64()
}

func (c *current) onscopeItem77() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem77()
}

func (c *current) onscopeItem98() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem98()
}

func (c *current) onscopeItem121() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem121()
}

func (c *current) onscopeItem132() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem132()
}

func (c *current) onscopeItem139() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem139()
}

func (c *current) onscopeItem144() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem144()
}

func (c *current) onscopeItem49(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem49(stack["strI"])
}

func (c *current) onscopeItem165() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonscopeItem165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem165()
}

func (c *current) onscopeItem178() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem178()
}

func (c *current) onscopeItem199() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonscopeItem199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem199()
}

func (c *current) onscopeItem222() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem222()
}

func (c *current) onscopeItem233() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem233()
}

func (c *current) onscopeItem240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonscopeItem240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem240()
}

func (c *current) onscopeItem245() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonscopeItem245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem245()
}

func (c *current) onscopeItem251() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem251()
}

func (c *current) onscopeItem150(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonscopeItem150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem150(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem276() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem276()
}

func (c *current) onscopeItem268(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonscopeItem268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem268(stack["strI"], stack["endPosI"])
}

func (c *current) onscopeItem19(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonscopeItem19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem19(stack["sI"])
}

func (c *current) onscopeItem282(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callonscopeItem282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem282(stack["pathI"])
}

func (c *current) onscopeItem14(pathI interface{}) (interface{}, error) {
	return file.Include{
		Path:     pathI.(file.String),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem14(stack["pathI"])
}

func (c *current) onscopeItem315() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem315()
}

func (c *current) onscopeItem311(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem311(stack["startPosI"])
}

func (c *current) onscopeItem332() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem332()
}

func (c *current) onscopeItem296() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonscopeItem296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem296()
}

func (c *current) onscopeItem366() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem366()
}

func (c *current) onscopeItem362(startPosI interface{}) (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			ToEOL:      true,
			Annotation: "doctypes other than the HTML5 doctype are not supported",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem362(stack["startPosI"])
}

func (c *current) onscopeItem383() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected `html`",
		}),
		ShouldBe: "`doctype html`",
	}

}

func (p *parser) callonscopeItem383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem383()
}

func (c *current) onscopeItem347() (interface{}, error) {
	return file.Doctype{Position: pos(c)}, &corgierr.Error{
		Message: "the corgi doctype directive does not start with a `!`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "remove this",
		}),
		ShouldBe: "`doctype html`",
	}
}

func (p *parser) callonscopeItem347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem347()
}

func (c *current) onscopeItem293(doctypeI interface{}) (interface{}, error) {
	return doctypeI, &corgierr.Error{
		Message: "`doctype` not first item",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             pos(c),
			ToEOL:             true,
			Annotation:        "cannot place doctype directive here",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "`doctype`s may only be placed as the first element after the `func` declaration\n" +
					"remove this `doctype` and move it right under the `func` of your file, if there isn't a doctype there already",
			},
		},
	}
}

func (p *parser) callonscopeItem293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem293(stack["doctypeI"])
}

func (c *current) onBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody3()
}

func (c *current) onBody6(scopeI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonBody6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody6(stack["scopeI"])
}

func (c *current) onBody1(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody1(stack["scopeI"])
}

func (c *current) onBeaitb2(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil
}

func (p *parser) callonBeaitb2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb2(stack["scopeItemI"])
}

func (c *current) onBeaitb7(bodyI interface{}) (interface{}, error) {
	return bodyI, nil
}

func (p *parser) callonBeaitb7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb7(stack["bodyI"])
}

func (c *current) onBeaitb20() (interface{}, error) {
	return file.Scope(nil), nil
}

func (p *parser) callonBeaitb20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb20()
}

func (c *current) onBeaitb31(lineI, bodyI interface{}) (interface{}, error) {
	return file.Scope{file.BadItem{
			Line:     concat(lineI),
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}}, &corgierr.Error{
			Message: "unexpected tokens",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				ToEOL:      true,
				Annotation: "expected a block expansion (`:`), inline text, a body, or nothing",
			}),
		}
}

func (p *parser) callonBeaitb31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeaitb31(stack["lineI"], stack["bodyI"])
}

func (c *current) onBeait2(scopeItemI interface{}) (interface{}, error) {
	return file.Scope{scopeItemI.(file.ScopeItem)}, nil
}

func (p *parser) callonBeait2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait2(stack["scopeItemI"])
}

func (c *current) onBeait7() (interface{}, error) {
	return file.Scope(nil), nil
}

func (p *parser) callonBeait7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait7()
}

func (c *current) onBeait18(lineI interface{}) (interface{}, error) {
	return file.Scope{file.BadItem{
			Line:     concat(lineI),
			Position: pos(c),
		}}, &corgierr.Error{
			Message: "unexpected tokens",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				ToEOL:      true,
				Annotation: "expected a block expansion (`:`), inline text, or nothing",
			}),
		}
}

func (p *parser) callonBeait18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeait18(stack["lineI"])
}

func (c *current) onBadItem1(lineI, bodyI interface{}) (interface{}, error) {
	line := concat(lineI)

	firstWordLen := strings.IndexByte(line, ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(line))
	}

	return file.BadItem{
			Line:     line,
			Body:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive or invalid element name",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a valid corgi directive or an element name",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{
					Suggestion: "use a valid corgi directive",
					ShouldBe: "a block (`block`, `append`, `prepend`), code (`-`), a conditional (`if`, `else if`, `else`, `switch`),\n" +
						"a loop (`for`), a filter (`:`), an include (`include`), a mixin (`mixin`), a mixin call (`+`),\n" +
						"a Go import (`import`), a corgi use (`use`), the func header (`func`), an arrow block (`>`)",
				},
			},
		}
}

func (p *parser) callonBadItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem1(stack["lineI"], stack["bodyI"])
}

func (c *current) onBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock18(stack["identI"])
}

func (c *current) onBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock37()
}

func (c *current) onBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock15(stack["identI"])
}

func (c *current) onBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock46()
}

func (c *current) onBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock43(stack["posI"])
}

func (c *current) onBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock71()
}

func (c *current) onBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock9(stack["identI"])
}

func (c *current) onBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock77()
}

func (c *current) onBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock4(stack["nameI"])
}

func (c *current) onBlock1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["blockI"], stack["bodyI"])
}

func (c *current) onInlineBlock18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock18(stack["identI"])
}

func (c *current) onInlineBlock37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock37()
}

func (c *current) onInlineBlock24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineBlock24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock24(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock15(stack["identI"])
}

func (c *current) onInlineBlock46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock46()
}

func (c *current) onInlineBlock43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock43(stack["posI"])
}

func (c *current) onInlineBlock71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineBlock71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock71()
}

func (c *current) onInlineBlock65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock65(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineBlock9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock9(stack["identI"])
}

func (c *current) onInlineBlock77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonInlineBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock77()
}

func (c *current) onInlineBlock4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeBlock,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock4(stack["nameI"])
}

func (c *current) onInlineBlock1(blockI, scopeI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = castedOrZero[file.Scope](scopeI)
	return block, nil
}

func (p *parser) callonInlineBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineBlock1(stack["blockI"], stack["scopeI"])
}

func (c *current) onPrepend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonPrepend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend18(stack["identI"])
}

func (c *current) onPrepend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend37()
}

func (c *current) onPrepend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonPrepend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend24(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend15(stack["identI"])
}

func (c *current) onPrepend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend46()
}

func (c *current) onPrepend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend43(stack["posI"])
}

func (c *current) onPrepend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonPrepend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend71()
}

func (c *current) onPrepend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonPrepend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend65(stack["identI"], stack["endPosI"])
}

func (c *current) onPrepend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonPrepend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend9(stack["identI"])
}

func (c *current) onPrepend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonPrepend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend77()
}

func (c *current) onPrepend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypePrepend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonPrepend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend4(stack["nameI"])
}

func (c *current) onPrepend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonPrepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrepend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onAppend18(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonAppend18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend18(stack["identI"])
}

func (c *current) onAppend37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend37()
}

func (c *current) onAppend24(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonAppend24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend24(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend15(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend15(stack["identI"])
}

func (c *current) onAppend46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend46()
}

func (c *current) onAppend43(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend43(stack["posI"])
}

func (c *current) onAppend71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAppend71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend71()
}

func (c *current) onAppend65(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonAppend65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend65(stack["identI"], stack["endPosI"])
}

func (c *current) onAppend9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonAppend9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend9(stack["identI"])
}

func (c *current) onAppend77() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonAppend77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend77()
}

func (c *current) onAppend4(nameI interface{}) (interface{}, error) {
	name := nameI.(file.Ident)
	return file.Block{
		Type:     file.BlockTypeAppend,
		Name:     name,
		Position: pos(c),
	}, nil
}

func (p *parser) callonAppend4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend4(stack["nameI"])
}

func (c *current) onAppend1(blockI, bodyI interface{}) (interface{}, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonAppend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAppend1(stack["blockI"], stack["bodyI"])
}

func (c *current) onBlockExpansion1(sI interface{}) (interface{}, error) {
	return file.BlockExpansion{
		Item:     sI.(file.ScopeItem),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlockExpansion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockExpansion1(stack["sI"])
}

func (c *current) onblockExpansionItem4(lineI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	bi := file.BadItem{
		Line:     concat(lineI),
		Position: pos(c),
	}

	var suggestions []corgierr.Suggestion
	if bi.Line != "" {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec",
		})
	}

	return bi, &corgierr.Error{
		Message: "malformed block expansion",
		ErrorAnnotation: anno(c, annotation{
			Start: pos(c),
			Len:   firstWordLen,
			Annotation: "expected a block directive, an inline element, an inline arrow block,\n" +
				"a mixin call, or inline &-attributes",
		}),
		Suggestions: suggestions,
	}
}

func (p *parser) callonblockExpansionItem4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblockExpansionItem4(stack["lineI"])
}

func (c *current) onspacedBlockExpansionItem2(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callonspacedBlockExpansionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem2(stack["sI"])
}

func (c *current) onspacedBlockExpansionItem11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonspacedBlockExpansionItem11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem11()
}

func (c *current) onspacedBlockExpansionItem8(posI, sI interface{}) (interface{}, error) {
	var fromThe string
	switch sI.(type) {
	case file.Block:
		fromThe = "block"
	case file.Element:
		fromThe = "inline element"
	case file.DivShorthand:
		fromThe = "div shorthand"
	case file.MixinCall:
		fromThe = "mixin call"
	case file.And:
		fromThe = "&"
	case file.If:
		fromThe = "if"
	case file.IfBlock:
		fromThe = "if block"
	case file.For:
		fromThe = "for"
	case file.Include:
		fromThe = "include"
	case file.Return:
		fromThe = "return"
	default:
		fromThe = "rest"
	}

	return file.BlockExpansion{
			Item:     sI.(file.ScopeItem),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `:` from the " + fromThe,
			}),
		}
}

func (p *parser) callonspacedBlockExpansionItem8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onspacedBlockExpansionItem8(stack["posI"], stack["sI"])
}

func (c *current) on_spacedBlockExpansionItem20(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callon_spacedBlockExpansionItem20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem20(stack["strI"])
}

func (c *current) on_spacedBlockExpansionItem27(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callon_spacedBlockExpansionItem27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem27(stack["strI"])
}

func (c *current) on_spacedBlockExpansionItem59() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callon_spacedBlockExpansionItem59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem59()
}

func (c *current) on_spacedBlockExpansionItem72() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem72()
}

func (c *current) on_spacedBlockExpansionItem93() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem93()
}

func (c *current) on_spacedBlockExpansionItem116() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem116()
}

func (c *current) on_spacedBlockExpansionItem127() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem127()
}

func (c *current) on_spacedBlockExpansionItem134() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem134()
}

func (c *current) on_spacedBlockExpansionItem139() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem139()
}

func (c *current) on_spacedBlockExpansionItem44(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callon_spacedBlockExpansionItem44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem44(stack["strI"])
}

func (c *current) on_spacedBlockExpansionItem160() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callon_spacedBlockExpansionItem160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem160()
}

func (c *current) on_spacedBlockExpansionItem173() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem173()
}

func (c *current) on_spacedBlockExpansionItem194() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callon_spacedBlockExpansionItem194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem194()
}

func (c *current) on_spacedBlockExpansionItem217() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem217()
}

func (c *current) on_spacedBlockExpansionItem228() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem228()
}

func (c *current) on_spacedBlockExpansionItem235() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem235()
}

func (c *current) on_spacedBlockExpansionItem240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callon_spacedBlockExpansionItem240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem240()
}

func (c *current) on_spacedBlockExpansionItem246() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callon_spacedBlockExpansionItem246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem246()
}

func (c *current) on_spacedBlockExpansionItem145(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callon_spacedBlockExpansionItem145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem145(stack["strI"], stack["endPosI"])
}

func (c *current) on_spacedBlockExpansionItem271() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callon_spacedBlockExpansionItem271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem271()
}

func (c *current) on_spacedBlockExpansionItem263(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callon_spacedBlockExpansionItem263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem263(stack["strI"], stack["endPosI"])
}

func (c *current) on_spacedBlockExpansionItem14(sI interface{}) (interface{}, error) {
	return sI, nil
}

func (p *parser) callon_spacedBlockExpansionItem14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem14(stack["sI"])
}

func (c *current) on_spacedBlockExpansionItem277(pathI interface{}) (interface{}, error) {
	return file.String{Position: pos(c)}, &corgierr.Error{
		Message: "invalid path",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected a path wrapped in quotes",
		}),
		Example: "`\"github.com/mavolin/woof/bark\"`",
	}
}

func (p *parser) callon_spacedBlockExpansionItem277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem277(stack["pathI"])
}

func (c *current) on_spacedBlockExpansionItem9(pathI interface{}) (interface{}, error) {
	return file.Include{
		Path:     pathI.(file.String),
		Position: pos(c),
	}, nil
}

func (p *parser) callon_spacedBlockExpansionItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_spacedBlockExpansionItem9(stack["pathI"])
}

func (c *current) onCodes1(codesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.Code](codesI, 1), nil
}

func (p *parser) callonCodes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCodes1(stack["codesI"])
}

func (c *current) onCode6(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode6(stack["code"])
}

func (c *current) onCode32(code interface{}) (interface{}, error) {
	return file.CodeLine{Code: concat(code), Position: pos(c)}, nil
}

func (p *parser) callonCode32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode32(stack["code"])
}

func (c *current) onCode2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	additionalLineTuples := islice(additionalLinesI)

	lines := make([]file.CodeLine, 1+len(additionalLineTuples))
	lines[0] = firstLineI.(file.CodeLine)
	for i, lt := range additionalLineTuples {
		lines[i+1] = getTuple[file.CodeLine](lt, -1)
	}

	return file.Code{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonCode2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onCode50() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonCode50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode50()
}

func (c *current) onCode46(posI interface{}) (interface{}, error) {
	return file.Code{Position: pos(c)}, &corgierr.Error{
		Message: "empty code block",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected code here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) callonCode46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCode46(stack["posI"])
}

func (c *current) oncondition2(condI interface{}) (interface{}, error) {
	return condI, nil
}

func (p *parser) calloncondition2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition2(stack["condI"])
}

func (c *current) oncondition11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition11()
}

func (c *current) oncondition8(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition8(stack["posI"])
}

func (c *current) oncondition30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) calloncondition30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition30()
}

func (c *current) oncondition28(posI interface{}) (interface{}, error) {
	return file.Expression{}, &corgierr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an expression here",
		}),
	}
}

func (p *parser) calloncondition28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28(stack["posI"])
}

func (c *current) onthen2(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonthen2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen2(stack["scopeI"])
}

func (c *current) onthen15(beI interface{}) (interface{}, error) {
	return file.Scope{beI.(file.BlockExpansion)}, nil
}

func (p *parser) callonthen15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen15(stack["beI"])
}

func (c *current) onthen18() (interface{}, error) {
	return file.Scope(nil), &corgierr.Error{
		Message: "missing body",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}
}

func (p *parser) callonthen18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen18()
}

func (c *current) onthen30() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonthen30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen30()
}

func (c *current) onthen33() (bool, error) {
	return true, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an indented body or a block expansion",
		}),
	}

}

func (p *parser) callonthen33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onthen33()
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.If{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		ElseIfs:   typedSlice[file.ElseIf](elseIfsI),
		Else:      ptrOrNil[file.Else](elseI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onInlineIf1(condI, thenI interface{}) (interface{}, error) {
	return file.If{
		Condition: condI.(file.Expression),
		Then:      file.Scope{thenI.(file.BlockExpansion)},
		Position:  pos(c),
	}, nil
}

func (p *parser) callonInlineIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIf1(stack["condI"], stack["thenI"])
}

func (c *current) onElseIf11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIf11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf11()
}

func (c *current) onElseIf14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIf14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf14()
}

func (c *current) onElseIf16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIf16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf16()
}

func (c *current) onElseIf18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonElseIf18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf18()
}

func (c *current) onElseIf19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIf19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf19()
}

func (c *current) onElseIf21() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonElseIf21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf21()
}

func (c *current) onElseIf22() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIf22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf22()
}

func (c *current) onElseIf25() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIf25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf25()
}

func (c *current) onElseIf26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIf26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf26()
}

func (c *current) onElseIf27() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIf27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf27()
}

func (c *current) onElseIf29() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIf29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf29()
}

func (c *current) onElseIf30() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIf30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf30()
}

func (c *current) onElseIf32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIf32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf32()
}

func (c *current) onElseIf1(posI, condI, thenI interface{}) (interface{}, error) {
	return file.ElseIf{
		Condition: condI.(file.Expression),
		Then:      thenI.(file.Scope),
		Position:  posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["posI"], stack["condI"], stack["thenI"])
}

func (c *current) onElse11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElse11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse11()
}

func (c *current) onElse14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElse14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse14()
}

func (c *current) onElse16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElse16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse16()
}

func (c *current) onElse18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonElse18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse18()
}

func (c *current) onElse19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElse19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse19()
}

func (c *current) onElse21() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonElse21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse21()
}

func (c *current) onElse22() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElse22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse22()
}

func (c *current) onElse25() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElse25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse25()
}

func (c *current) onElse26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElse26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse26()
}

func (c *current) onElse27() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElse27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse27()
}

func (c *current) onElse29() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElse29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse29()
}

func (c *current) onElse30() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElse30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse30()
}

func (c *current) onElse1(thenI interface{}) (interface{}, error) {
	return file.Else{
		Then:     thenI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onIfBlock15(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonIfBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock15(stack["identI"])
}

func (c *current) onIfBlock34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock34()
}

func (c *current) onIfBlock21(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonIfBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock21(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock12(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock12(stack["identI"])
}

func (c *current) onIfBlock43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock43()
}

func (c *current) onIfBlock40(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock40(stack["posI"])
}

func (c *current) onIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock68()
}

func (c *current) onIfBlock62(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonIfBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock62(stack["identI"], stack["endPosI"])
}

func (c *current) onIfBlock6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonIfBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock6(stack["identI"])
}

func (c *current) onIfBlock74() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock74()
}

func (c *current) onIfBlock1(nameI, thenI, elseIfsI, elseI interface{}) (interface{}, error) {
	return file.IfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		ElseIfs:  typedSlice[file.ElseIfBlock](elseIfsI),
		Else:     ptrOrNil[file.Else](elseI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfBlock1(stack["nameI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onInlineIfBlock15(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineIfBlock15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock15(stack["identI"])
}

func (c *current) onInlineIfBlock34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineIfBlock34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock34()
}

func (c *current) onInlineIfBlock21(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineIfBlock21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock21(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineIfBlock12(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineIfBlock12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock12(stack["identI"])
}

func (c *current) onInlineIfBlock43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineIfBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock43()
}

func (c *current) onInlineIfBlock40(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineIfBlock40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock40(stack["posI"])
}

func (c *current) onInlineIfBlock68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineIfBlock68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock68()
}

func (c *current) onInlineIfBlock62(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineIfBlock62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock62(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineIfBlock6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineIfBlock6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock6(stack["identI"])
}

func (c *current) onInlineIfBlock74() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonInlineIfBlock74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock74()
}

func (c *current) onInlineIfBlock1(nameI, thenI interface{}) (interface{}, error) {
	return file.IfBlock{
		Name:     nameI.(file.Ident),
		Then:     file.Scope{thenI.(file.BlockExpansion)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIfBlock1(stack["nameI"], stack["thenI"])
}

func (c *current) onElseIfBlock11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonElseIfBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock11()
}

func (c *current) onElseIfBlock14() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonElseIfBlock14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock14()
}

func (c *current) onElseIfBlock16() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonElseIfBlock16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock16()
}

func (c *current) onElseIfBlock18() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonElseIfBlock18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock18()
}

func (c *current) onElseIfBlock19() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonElseIfBlock19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock19()
}

func (c *current) onElseIfBlock21() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonElseIfBlock21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock21()
}

func (c *current) onElseIfBlock22() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock22()
}

func (c *current) onElseIfBlock25() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonElseIfBlock25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock25()
}

func (c *current) onElseIfBlock26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonElseIfBlock26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock26()
}

func (c *current) onElseIfBlock27() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonElseIfBlock27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock27()
}

func (c *current) onElseIfBlock29() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonElseIfBlock29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock29()
}

func (c *current) onElseIfBlock30() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonElseIfBlock30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock30()
}

func (c *current) onElseIfBlock32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock32()
}

func (c *current) onElseIfBlock50(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonElseIfBlock50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock50(stack["identI"])
}

func (c *current) onElseIfBlock69() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock69()
}

func (c *current) onElseIfBlock56(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonElseIfBlock56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock56(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock47(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock47(stack["identI"])
}

func (c *current) onElseIfBlock78() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock78()
}

func (c *current) onElseIfBlock75(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock75(stack["posI"])
}

func (c *current) onElseIfBlock103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElseIfBlock103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock103()
}

func (c *current) onElseIfBlock97(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonElseIfBlock97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock97(stack["identI"], stack["endPosI"])
}

func (c *current) onElseIfBlock41(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonElseIfBlock41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock41(stack["identI"])
}

func (c *current) onElseIfBlock109() (interface{}, error) {
	return file.Ident{}, &corgierr.Error{
		Message: "missing block name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a block name",
		}),
	}
}

func (p *parser) callonElseIfBlock109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock109()
}

func (c *current) onElseIfBlock1(posI, nameI, thenI interface{}) (interface{}, error) {
	return file.ElseIfBlock{
		Name:     nameI.(file.Ident),
		Then:     thenI.(file.Scope),
		Position: posI.(file.Position),
	}, nil
}

func (p *parser) callonElseIfBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfBlock1(stack["posI"], stack["nameI"], stack["thenI"])
}

func (c *current) onSwitch1(comparatorI, bodyI interface{}) (interface{}, error) {
	body := bodyI.(file.Switch)

	s := file.Switch{
		Comparator: comparatorI.(*file.Expression),
		Cases:      body.Cases,
		Default:    body.Default,
		Position:   pos(c),
	}

	if len(s.Cases) == 0 {
		return s, &corgierr.Error{
			Message: "switch must have at least one case",
			ErrorAnnotation: anno(c, annotation{
				ContextEndDelta: 1,
				Start:           pos(c),
				ToEOL:           true,
				Annotation:      "expected switch to have at least one non-default case",
			}),
		}
	}

	return s, nil
}

func (p *parser) callonSwitch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["bodyI"])
}

func (c *current) onswitchComparator2() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonswitchComparator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator13(compI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, nil
}

func (p *parser) callonswitchComparator13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator13(stack["compI"])
}

func (c *current) onswitchComparator35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonswitchComparator35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator35()
}

func (c *current) onswitchComparator28(compI, startPosI interface{}) (interface{}, error) {
	comp := compI.(file.Expression)
	return &comp, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			Annotation: "expression was terminated here, but should span entire line",
		}),
	}
}

func (p *parser) callonswitchComparator28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator28(stack["compI"], stack["startPosI"])
}

func (c *current) onswitchBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonswitchBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody3()
}

func (c *current) onswitchBody15() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonswitchBody15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody15()
}

func (c *current) onswitchBody18() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonswitchBody18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody18()
}

func (c *current) onswitchBody20() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonswitchBody20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody20()
}

func (c *current) onswitchBody22() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonswitchBody22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody22()
}

func (c *current) onswitchBody23() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonswitchBody23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody23()
}

func (c *current) onswitchBody25() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonswitchBody25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody25()
}

func (c *current) onswitchBody26() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody26()
}

func (c *current) onswitchBody29() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonswitchBody29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody29()
}

func (c *current) onswitchBody30() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonswitchBody30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody30()
}

func (c *current) onswitchBody31() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonswitchBody31() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody31()
}

func (c *current) onswitchBody33() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonswitchBody33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody33()
}

func (c *current) onswitchBody34() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonswitchBody34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody34()
}

func (c *current) onswitchBody36(itms interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonswitchBody36() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody36(stack["itms"])
}

func (c *current) onswitchBody1(itms interface{}) (interface{}, error) {
	tupleTuples := islice(itms)

	s := file.Switch{Cases: make([]file.Case, 0, len(tupleTuples))}

	var err error
	for _, tupleTuple := range tupleTuples {
		tuple := getTuple[any](tupleTuple, -1)

		switchCase, ok := getTuple[file.Case](tuple, 0), getTuple[bool](tuple, -1)
		if switchCase.Expression != nil || !ok {
			s.Cases = append(s.Cases, switchCase)
		} else {
			if s.Default != nil {
				err = &corgierr.Error{
					Message: "multiple default cases in switch",
					ErrorAnnotation: anno(c, annotation{
						Start:      switchCase.Position,
						Len:        len("default"),
						Annotation: "second default case",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      s.Default.Position,
							Len:        len("default"),
							Annotation: "first default case",
						}),
					},
				}
			} else {
				s.Default = &switchCase
			}
		}
	}

	return s, err
}

func (p *parser) callonswitchBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBody1(stack["itms"])
}

func (c *current) onswitchBodyItem2(caseI interface{}) (interface{}, error) {
	return []any{caseI, true}, nil
}

func (p *parser) callonswitchBodyItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem2(stack["caseI"])
}

func (c *current) onswitchBodyItem7(caseI interface{}) (interface{}, error) {
	return []any{caseI, false}, nil
}

func (p *parser) callonswitchBodyItem7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchBodyItem7(stack["caseI"])
}

func (c *current) onCase1(condI, thenI interface{}) (interface{}, error) {
	return file.Case{
		Expression: ptrOrNil[file.Expression](condI),
		Then:       castedOrZero[file.Scope](thenI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["thenI"])
}

func (c *current) onDefault1(thenI interface{}) (interface{}, error) {
	return file.Case{
		Then:     castedOrZero[file.Scope](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["thenI"])
}

func (c *current) onswitchThen2(scopeI interface{}) (interface{}, error) {
	return scopeI, nil
}

func (p *parser) callonswitchThen2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen2(stack["scopeI"])
}

func (c *current) onswitchThen15(beI interface{}) (interface{}, error) {
	return file.Scope{beI.(file.BlockExpansion)}, nil
}

func (p *parser) callonswitchThen15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen15(stack["beI"])
}

func (c *current) onBadCase1(bodyI interface{}) (interface{}, error) {
	firstWordLen := strings.IndexByte(string(c.text), ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(string(c.text)))
	}

	return file.Case{
			Then:     castedOrZero[file.Scope](bodyI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unrecognized directive in switch body",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a case or a default",
			}),
		}
}

func (p *parser) callonBadCase1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadCase1(stack["bodyI"])
}

func (c *current) onFor1(exprI, bodyI interface{}) (interface{}, error) {
	return file.For{
		Expression: exprI.(*file.Expression),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonFor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onInlineFor1(exprI, bodyI interface{}) (interface{}, error) {
	return file.For{
		Expression: exprI.(*file.Expression),
		Body:       file.Scope{bodyI.(file.BlockExpansion)},
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineFor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onCorgiComments1(commentsI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiComment](commentsI, -1), nil
}

func (p *parser) callonCorgiComments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComments1(stack["commentsI"])
}

func (c *current) onCorgiComment1(linesI interface{}) (interface{}, error) {
	return file.CorgiComment{
		Lines:    linesI.([]file.CorgiCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonCorgiComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCorgiComment1(stack["linesI"])
}

func (c *current) oncorgiCommentLines2(linesI interface{}) (interface{}, error) {
	return linesI, nil
}

func (p *parser) calloncorgiCommentLines2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentLines2(stack["linesI"])
}

func (c *current) oncorgiCommentLines19(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) calloncorgiCommentLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentLines19(stack["commentI"])
}

func (c *current) oncorgiCommentLines17(lineI interface{}) (interface{}, error) {
	return []file.CorgiCommentLine{lineI.(file.CorgiCommentLine)}, nil
}

func (p *parser) calloncorgiCommentLines17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentLines17(stack["lineI"])
}

func (c *current) oncorgiCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) calloncorgiCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock3()
}

func (c *current) oncorgiCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.CorgiCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) calloncorgiCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock16(stack["commentI"])
}

func (c *current) oncorgiCommentBlock30(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) calloncorgiCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock30(stack["linesI"])
}

func (c *current) oncorgiCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.CorgiCommentLine](linesI, -1), nil
}

func (p *parser) calloncorgiCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncorgiCommentBlock1(stack["linesI"])
}

func (c *current) onHTMLComment8(linesI interface{}) (interface{}, error) {
	return linesI, nil

}

func (p *parser) callonHTMLComment8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment8(stack["linesI"])
}

func (c *current) onHTMLComment23(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonHTMLComment23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment23(stack["commentI"])
}

func (c *current) onHTMLComment21(lineI interface{}) (interface{}, error) {
	return []file.HTMLCommentLine{lineI.(file.HTMLCommentLine)}, nil

}

func (p *parser) callonHTMLComment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment21(stack["lineI"])
}

func (c *current) onHTMLComment1(linesI interface{}) (interface{}, error) {
	return file.HTMLComment{
		Lines:    linesI.([]file.HTMLCommentLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonHTMLComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTMLComment1(stack["linesI"])
}

func (c *current) onhtmlCommentBlock3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonhtmlCommentBlock3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock3()
}

func (c *current) onhtmlCommentBlock16(commentI interface{}) (interface{}, error) {
	return file.HTMLCommentLine{Comment: concat(commentI), Position: pos(c)}, nil
}

func (p *parser) callonhtmlCommentBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock16(stack["commentI"])
}

func (c *current) onhtmlCommentBlock30(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonhtmlCommentBlock30() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock30(stack["linesI"])
}

func (c *current) onhtmlCommentBlock1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.HTMLCommentLine](linesI, -1), nil
}

func (p *parser) callonhtmlCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhtmlCommentBlock1(stack["linesI"])
}

func (c *current) onElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onInlineElement1(nameI, attrsI, voidI, bodyI interface{}) (interface{}, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: typedSlice[file.AttributeCollection](attrsI),
		Body:       bodyI.(file.Scope),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["nameI"], stack["attrsI"], stack["voidI"], stack["bodyI"])
}

func (c *current) onDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand5(stack["nameI"])
}

func (c *current) onDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand15()
}

func (c *current) onDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand11(stack["posI"])
}

func (c *current) onDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand21(stack["idI"])
}

func (c *current) onDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand31()
}

func (c *current) onDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand27(stack["posI"])
}

func (c *current) onDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](moreAttrsI)...),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onInlineDivShorthand5(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand5(stack["nameI"])
}

func (c *current) onInlineDivShorthand15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand15()
}

func (c *current) onInlineDivShorthand11(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand11(stack["posI"])
}

func (c *current) onInlineDivShorthand21(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand21(stack["idI"])
}

func (c *current) onInlineDivShorthand31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineDivShorthand31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand31()
}

func (c *current) onInlineDivShorthand27(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonInlineDivShorthand27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand27(stack["posI"])
}

func (c *current) onInlineDivShorthand1(firstAttrI, moreAttrsI, bodyI interface{}) (interface{}, error) {
	return file.DivShorthand{
		Attributes: append([]file.AttributeCollection{firstAttrI.(file.AttributeCollection)}, typedSlice[file.AttributeCollection](moreAttrsI)...),
		Body:       bodyI.(file.Scope),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineDivShorthand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineDivShorthand1(stack["firstAttrI"], stack["moreAttrsI"], stack["bodyI"])
}

func (c *current) onAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd2(stack["collsI"])
}

func (c *current) onAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd21()
}

func (c *current) onAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd17(stack["posI"])
}

func (c *current) onAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd43()
}

func (c *current) onAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onInlineAnd2(collsI interface{}) (interface{}, error) {
	return file.And{
		Attributes: typedSlice[file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonInlineAnd2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd2(stack["collsI"])
}

func (c *current) onInlineAnd21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineAnd21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd21()
}

func (c *current) onInlineAnd17(posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "`&` with no attributes",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an attribute here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonInlineAnd17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd17(stack["posI"])
}

func (c *current) onInlineAnd43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineAnd43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd43()
}

func (c *current) onInlineAnd36(collsI, posI interface{}) (interface{}, error) {
	return file.And{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "bad attribute syntax",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "this is not a valid attribute (list)",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
					Example:    "`&#bark .woof (title=\"howl\")`",
					ShouldBe:   "`&#bark.woof(title=\"howl\")`",
				},
				{Suggestion: "write a class shorthand", Example: "`&.woof`"},
				{Suggestion: "write an id shorthand", Example: "`&#bark`"},
				{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
			},
		}
}

func (p *parser) callonInlineAnd36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAnd36(stack["collsI"], stack["posI"])
}

func (c *current) onAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection2(stack["idI"])
}

func (c *current) onAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection12()
}

func (c *current) onAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection8(stack["posI"])
}

func (c *current) onAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection18(stack["nameI"])
}

func (c *current) onAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection28()
}

func (c *current) onAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection24(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection2(idI interface{}) (interface{}, error) {
	return file.IDShorthand{
		ID:       concat(idI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection2(stack["idI"])
}

func (c *current) onSingleLineAttributeCollection12() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection12()
}

func (c *current) onSingleLineAttributeCollection8(posI interface{}) (interface{}, error) {
	return file.IDShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected an id here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection8(stack["posI"])
}

func (c *current) onSingleLineAttributeCollection18(nameI interface{}) (interface{}, error) {
	return file.ClassShorthand{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineAttributeCollection18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection18(stack["nameI"])
}

func (c *current) onSingleLineAttributeCollection28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeCollection28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection28()
}

func (c *current) onSingleLineAttributeCollection24(posI interface{}) (interface{}, error) {
	return file.ClassShorthand{Position: pos(c)}, &corgierr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a class name here",
		}),
	}
}

func (p *parser) callonSingleLineAttributeCollection24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeCollection24(stack["posI"])
}

func (c *current) onAttributeList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList28()
}

func (c *current) onAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onAttributeList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList49()
}

func (c *current) onAttributeList30(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(` or missing `,`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)` or `,`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonAttributeList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList30(stack["attributesI"], stack["posI"])
}

func (c *current) onattributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonattributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineAttributeList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList18()
}

func (c *current) onSingleLineAttributeList2(attributesI, rParenPosI interface{}) (interface{}, error) {
	return file.AttributeList{
		LParenPos:  pos(c),
		Attributes: castedOrZero[[]file.Attribute](attributesI),
		RParenPos:  rParenPosI.(file.Position),
	}, nil
}

func (p *parser) callonSingleLineAttributeList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList2(stack["attributesI"], stack["rParenPosI"])
}

func (c *current) onSingleLineAttributeList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineAttributeList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList34()
}

func (c *current) onSingleLineAttributeList20(attributesI, posI interface{}) (interface{}, error) {
	return file.AttributeList{
			LParenPos:  pos(c),
			Attributes: castedOrZero[[]file.Attribute](attributesI),
		}, &corgierr.Error{
			Message: "attribute list: unclosed `(` or missing `,`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)` or `,`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonSingleLineAttributeList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttributeList20(stack["attributesI"], stack["posI"])
}

func (c *current) onsingleLineAttributes1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	attributes := make([]file.Attribute, 1+len(restIs))
	attributes[0] = firstI.(file.Attribute)
	for i, ai := range restIs {
		attributes[i+1] = getTuple[file.Attribute](ai, -1)
	}

	return attributes, nil
}

func (p *parser) callonsingleLineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineAttributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute3()
}

func (c *current) onSingleLineAttribute3() (interface{}, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonSingleLineAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineAttribute3()
}

func (c *current) onSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute3(stack["nameI"])
}

func (c *current) onSingleLineSimpleAttribute3(nameI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:     concat(nameI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineSimpleAttribute3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineSimpleAttribute3(stack["nameI"])
}

func (c *current) onsimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute15()
}

func (c *current) onsimpleValueAttribute30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute30()
}

func (c *current) onsimpleValueAttribute2(nameI, assignPosI, posI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		AssignPos: ptr(assignPosI.(file.Position)),
		Value:     ptrOrNil[file.Expression](exprI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonsimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["posI"], stack["exprI"])
}

func (c *current) onsimpleValueAttribute51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute51()
}

func (c *current) onsimpleValueAttribute59() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleValueAttribute59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute59()
}

func (c *current) onsimpleValueAttribute38(nameI, assignPosI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			AssignPos: ptrOrNil[file.Position](assignPosI),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression here",
			}),
		}
}

func (p *parser) callonsimpleValueAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleValueAttribute38(stack["nameI"], stack["assignPosI"], stack["posI"])
}

func (c *current) onsingleLineSimpleValueAttribute15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute15()
}

func (c *current) onsingleLineSimpleValueAttribute2(nameI, assignPosI, exprI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
		Name:      concat(nameI),
		AssignPos: ptrOrNil[file.Position](assignPosI),
		Value:     ptrOrNil[file.Expression](exprI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonsingleLineSimpleValueAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute2(stack["nameI"], stack["assignPosI"], stack["exprI"])
}

func (c *current) onsingleLineSimpleValueAttribute39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute39()
}

func (c *current) onsingleLineSimpleValueAttribute47() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineSimpleValueAttribute47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute47()
}

func (c *current) onsingleLineSimpleValueAttribute26(nameI, assignPosI, posI interface{}) (interface{}, error) {
	return file.SimpleAttribute{
			Name:      concat(nameI),
			AssignPos: ptrOrNil[file.Position](assignPosI),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "attribute: missing value expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an expression or a mixin call here",
			}),
		}
}

func (p *parser) callonsingleLineSimpleValueAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineSimpleValueAttribute26(stack["nameI"], stack["assignPosI"], stack["posI"])
}

func (c *current) onMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute14()
}

func (c *current) onMixinCallAttribute1(nameI, assignPosI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["callI"])
}

func (c *current) onSingleLineMixinCallAttribute14() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineMixinCallAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute14()
}

func (c *current) onSingleLineMixinCallAttribute1(nameI, assignPosI, callI interface{}) (interface{}, error) {
	call := callI.(file.MixinCallAttribute)
	return file.MixinCallAttribute{
		Name:      concat(nameI),
		AssignPos: assignPosI.(file.Position),
		MixinCall: call.MixinCall,
		Value:     call.Value,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineMixinCallAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineMixinCallAttribute1(stack["nameI"], stack["assignPosI"], stack["callI"])
}

func (c *current) onmixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall8(stack["identI"])
}

func (c *current) onmixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall27()
}

func (c *current) onmixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall39(stack["identI"])
}

func (c *current) onmixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall58()
}

func (c *current) onmixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall36(stack["identI"])
}

func (c *current) onmixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall67()
}

func (c *current) onmixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall64(stack["posI"])
}

func (c *current) onmixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall92()
}

func (c *current) onmixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Namespace: namespace,
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonmixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onsingleLineMixinCallAttributeCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall8(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall27()
}

func (c *current) onsingleLineMixinCallAttributeCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall39(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall58()
}

func (c *current) onsingleLineMixinCallAttributeCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinCallAttributeCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall36(stack["identI"])
}

func (c *current) onsingleLineMixinCallAttributeCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall67()
}

func (c *current) onsingleLineMixinCallAttributeCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall64(stack["posI"])
}

func (c *current) onsingleLineMixinCallAttributeCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall92()
}

func (c *current) onsingleLineMixinCallAttributeCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinCallAttributeCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinCallAttributeCall1(namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCallAttribute{
		MixinCall: file.MixinCall{
			Namespace: namespace,
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  pos(c),
		},
		Value: castedOrZero[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonsingleLineMixinCallAttributeCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinCallAttributeCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallAttributeValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue5()
}

func (c *current) onmixinCallAttributeValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue11()
}

func (c *current) onmixinCallAttributeValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallAttributeValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallAttributeValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue16()
}

func (c *current) onmixinCallAttributeValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonmixinCallAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallAttributeValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression2(stack["cExprI"])
}

func (c *current) onSingleLineExpression2(cExprI interface{}) (interface{}, error) {
	return file.Expression{Expressions: []file.ExpressionItem{cExprI.(file.ChainExpression)}}, nil
}

func (p *parser) callonSingleLineExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineExpression2(stack["cExprI"])
}

func (c *current) onGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression11()
}

func (c *current) onGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression27()
}

func (c *current) onGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression48()
}

func (c *current) onGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression80()
}

func (c *current) onGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression87()
}

func (c *current) onGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression98()
}

func (c *current) onGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression105()
}

func (c *current) onGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression110()
}

func (c *current) onGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression128()
}

func (c *current) onGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression149()
}

func (c *current) onGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression181()
}

func (c *current) onGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression188()
}

func (c *current) onGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression199()
}

func (c *current) onGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression206()
}

func (c *current) onGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression211()
}

func (c *current) onGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression218()
}

func (c *current) onGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression8(stack["posI"])
}

func (c *current) onGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression227()
}

func (c *current) onGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression224(stack["posI"])
}

func (c *current) onGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["exprsI"])
}

func (c *current) ongoParenExpr9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr9()
}

func (c *current) ongoParenExpr20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr20()
}

func (c *current) ongoParenExpr31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr31()
}

func (c *current) ongoParenExpr2(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]), // opening paren
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]), // closing paren
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil
}

func (p *parser) callongoParenExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr2(stack["exprI"])
}

func (c *current) ongoParenExpr43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr43()
}

func (c *current) ongoParenExpr38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			ContextLen: 3,
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here or on a line below",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}
}

func (p *parser) callongoParenExpr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) ongoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression11()
}

func (c *current) ongoSubExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression27()
}

func (c *current) ongoSubExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression48()
}

func (c *current) ongoSubExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression80()
}

func (c *current) ongoSubExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression87()
}

func (c *current) ongoSubExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression98()
}

func (c *current) ongoSubExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression105()
}

func (c *current) ongoSubExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression110()
}

func (c *current) ongoSubExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression128()
}

func (c *current) ongoSubExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoSubExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression149()
}

func (c *current) ongoSubExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoSubExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression181()
}

func (c *current) ongoSubExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression188()
}

func (c *current) ongoSubExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression199()
}

func (c *current) ongoSubExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoSubExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression206()
}

func (c *current) ongoSubExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoSubExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression211()
}

func (c *current) ongoSubExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression218()
}

func (c *current) ongoSubExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callongoSubExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) ongoSubExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callongoSubExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression8(stack["posI"])
}

func (c *current) ongoSubExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callongoSubExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression227()
}

func (c *current) ongoSubExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callongoSubExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression224(stack["posI"])
}

func (c *current) ongoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callongoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoSubExpression1(stack["exprsI"])
}

func (c *current) onmultiLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression11()
}

func (c *current) onmultiLineGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression27()
}

func (c *current) onmultiLineGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression48()
}

func (c *current) onmultiLineGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression80()
}

func (c *current) onmultiLineGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression87()
}

func (c *current) onmultiLineGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression98()
}

func (c *current) onmultiLineGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression105()
}

func (c *current) onmultiLineGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression110()
}

func (c *current) onmultiLineGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression128()
}

func (c *current) onmultiLineGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonmultiLineGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression149()
}

func (c *current) onmultiLineGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression181()
}

func (c *current) onmultiLineGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression188()
}

func (c *current) onmultiLineGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression199()
}

func (c *current) onmultiLineGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression206()
}

func (c *current) onmultiLineGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonmultiLineGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression211()
}

func (c *current) onmultiLineGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression218()
}

func (c *current) onmultiLineGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonmultiLineGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onmultiLineGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonmultiLineGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression8(stack["posI"])
}

func (c *current) onmultiLineGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmultiLineGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression227()
}

func (c *current) onmultiLineGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonmultiLineGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression224(stack["posI"])
}

func (c *current) onmultiLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonmultiLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmultiLineGoExpression1(stack["exprsI"])
}

func (c *current) onSingleLineGoExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression11()
}

func (c *current) onSingleLineGoExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression27()
}

func (c *current) onSingleLineGoExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression48()
}

func (c *current) onSingleLineGoExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression80()
}

func (c *current) onSingleLineGoExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression87()
}

func (c *current) onSingleLineGoExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression98()
}

func (c *current) onSingleLineGoExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression105()
}

func (c *current) onSingleLineGoExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression110()
}

func (c *current) onSingleLineGoExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression128()
}

func (c *current) onSingleLineGoExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineGoExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression149()
}

func (c *current) onSingleLineGoExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression181()
}

func (c *current) onSingleLineGoExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression188()
}

func (c *current) onSingleLineGoExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression199()
}

func (c *current) onSingleLineGoExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression206()
}

func (c *current) onSingleLineGoExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineGoExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression211()
}

func (c *current) onSingleLineGoExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression218()
}

func (c *current) onSingleLineGoExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonSingleLineGoExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onSingleLineGoExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonSingleLineGoExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression8(stack["posI"])
}

func (c *current) onSingleLineGoExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineGoExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression227()
}

func (c *current) onSingleLineGoExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonSingleLineGoExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression224(stack["posI"])
}

func (c *current) onSingleLineGoExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonSingleLineGoExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineGoExpression1(stack["exprsI"])
}

func (c *current) onsingleLineGoParenExpr9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr9()
}

func (c *current) onsingleLineGoParenExpr20() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr20()
}

func (c *current) onsingleLineGoParenExpr31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr31()
}

func (c *current) onsingleLineGoParenExpr2(exprI interface{}) (interface{}, error) {
	exprIs := islice(exprI)
	if exprIs[1] == nil {
		return file.GoExpression{
			Expression: concat(exprIs[0]) + concat(exprIs[3]),
			Position:   pos(c),
		}, nil
	}

	expr := exprIs[1].(file.Expression)

	exprs := make([]file.ExpressionItem, len(expr.Expressions)+ /* open/closing paren */ 2)
	copy(exprs[1:], expr.Expressions)
	exprs[0] = file.GoExpression{
		Expression: concat(exprIs[0]),
		Position:   pos(c),
	}
	exprs[len(exprs)-1] = file.GoExpression{
		Expression: concat(exprIs[3]),
		Position:   exprIs[2].(file.Position),
	}

	return exprs, nil
}

func (p *parser) callonsingleLineGoParenExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr2(stack["exprI"])
}

func (c *current) onsingleLineGoParenExpr43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoParenExpr43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr43()
}

func (c *current) onsingleLineGoParenExpr38(parenI, startPosI, exprI interface{}) (interface{}, error) {
	openParen := string(char(parenI))

	closeParen := ")"
	if openParen == "[" {
		closeParen = "]"
	} else if openParen == "{" {
		closeParen = "}"
	}

	exprs := append([]file.ExpressionItem{file.GoExpression{
		Expression: openParen,
		Position:   pos(c),
	}}, castedOrZero[file.Expression](exprI).Expressions...)

	return exprs, &corgierr.Error{
		Message: "unclosed `" + openParen + "` in expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      startPosI.(file.Position),
			EOLDelta:   1,
			Annotation: "expected a `" + closeParen + "` somewhere here",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "for the `" + openParen + "` you opened here",
			}),
		},
	}
}

func (p *parser) callonsingleLineGoParenExpr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoParenExpr38(stack["parenI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onsingleLineGoSubExpression11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression11()
}

func (c *current) onsingleLineGoSubExpression27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression27()
}

func (c *current) onsingleLineGoSubExpression48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression48()
}

func (c *current) onsingleLineGoSubExpression80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression80()
}

func (c *current) onsingleLineGoSubExpression87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression87()
}

func (c *current) onsingleLineGoSubExpression98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression98()
}

func (c *current) onsingleLineGoSubExpression105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression105()
}

func (c *current) onsingleLineGoSubExpression110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression110()
}

func (c *current) onsingleLineGoSubExpression128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression128()
}

func (c *current) onsingleLineGoSubExpression149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineGoSubExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression149()
}

func (c *current) onsingleLineGoSubExpression181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression181()
}

func (c *current) onsingleLineGoSubExpression188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression188()
}

func (c *current) onsingleLineGoSubExpression199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression199()
}

func (c *current) onsingleLineGoSubExpression206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression206()
}

func (c *current) onsingleLineGoSubExpression211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineGoSubExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression211()
}

func (c *current) onsingleLineGoSubExpression218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression218()
}

func (c *current) onsingleLineGoSubExpression116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineGoSubExpression116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression116(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineGoSubExpression8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonsingleLineGoSubExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression8(stack["posI"])
}

func (c *current) onsingleLineGoSubExpression227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineGoSubExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression227()
}

func (c *current) onsingleLineGoSubExpression224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonsingleLineGoSubExpression224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression224(stack["posI"])
}

func (c *current) onsingleLineGoSubExpression1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineGoSubExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineGoSubExpression1(stack["exprsI"])
}

func (c *current) onIfExpression2(cExprI interface{}) (interface{}, error) {
	cExpr := cExprI.(file.ChainExpression)
	expr := file.Expression{Expressions: []file.ExpressionItem{cExpr}}
	if cExpr.Default != nil {
		return expr, &corgierr.Error{
			Message: "chain expression with default as conditional",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "here", // todo: span the entire len of the expression
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the default"},
			},
		}
	}

	return expr, nil
}

func (p *parser) callonIfExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression2(stack["cExprI"])
}

func (c *current) onIfExpression15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression15()
}

func (c *current) onIfExpression31() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression31()
}

func (c *current) onIfExpression52() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression52()
}

func (c *current) onIfExpression84() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression84()
}

func (c *current) onIfExpression91() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression91()
}

func (c *current) onIfExpression102() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression102()
}

func (c *current) onIfExpression109() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression109()
}

func (c *current) onIfExpression114() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression114()
}

func (c *current) onIfExpression132() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression132()
}

func (c *current) onIfExpression153() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonIfExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression153()
}

func (c *current) onIfExpression185() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonIfExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression185()
}

func (c *current) onIfExpression192() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression192()
}

func (c *current) onIfExpression203() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression203()
}

func (c *current) onIfExpression210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonIfExpression210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression210()
}

func (c *current) onIfExpression215() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonIfExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression215()
}

func (c *current) onIfExpression222() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression222()
}

func (c *current) onIfExpression120(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonIfExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression120(stack["valsI"], stack["endPosI"])
}

func (c *current) onIfExpression12(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonIfExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression12(stack["posI"])
}

func (c *current) onIfExpression231() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIfExpression231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression231()
}

func (c *current) onIfExpression228(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonIfExpression228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression228(stack["posI"])
}

func (c *current) onIfExpression5(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonIfExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression5(stack["exprsI"])
}

func (c *current) onSingleLineIfExpression2(cExprI interface{}) (interface{}, error) {
	cExpr := cExprI.(file.ChainExpression)
	expr := file.Expression{Expressions: []file.ExpressionItem{cExpr}}
	if cExpr.Default != nil {
		return expr, &corgierr.Error{
			Message: "chain expression with default as conditional",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "here", // todo: span the entire len of the expression
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the default"},
			},
		}
	}

	return expr, nil
}

func (p *parser) callonSingleLineIfExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression2(stack["cExprI"])
}

func (c *current) onSingleLineIfExpression15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIfExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression15()
}

func (c *current) onSingleLineIfExpression31() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression31()
}

func (c *current) onSingleLineIfExpression52() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression52()
}

func (c *current) onSingleLineIfExpression84() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineIfExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression84()
}

func (c *current) onSingleLineIfExpression91() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression91()
}

func (c *current) onSingleLineIfExpression102() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression102()
}

func (c *current) onSingleLineIfExpression109() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression109()
}

func (c *current) onSingleLineIfExpression114() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression114()
}

func (c *current) onSingleLineIfExpression132() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression132()
}

func (c *current) onSingleLineIfExpression153() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonSingleLineIfExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression153()
}

func (c *current) onSingleLineIfExpression185() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonSingleLineIfExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression185()
}

func (c *current) onSingleLineIfExpression192() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression192()
}

func (c *current) onSingleLineIfExpression203() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression203()
}

func (c *current) onSingleLineIfExpression210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression210()
}

func (c *current) onSingleLineIfExpression215() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonSingleLineIfExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression215()
}

func (c *current) onSingleLineIfExpression222() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIfExpression222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression222()
}

func (c *current) onSingleLineIfExpression120(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonSingleLineIfExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression120(stack["valsI"], stack["endPosI"])
}

func (c *current) onSingleLineIfExpression12(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonSingleLineIfExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression12(stack["posI"])
}

func (c *current) onSingleLineIfExpression231() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIfExpression231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression231()
}

func (c *current) onSingleLineIfExpression228(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonSingleLineIfExpression228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression228(stack["posI"])
}

func (c *current) onSingleLineIfExpression5(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonSingleLineIfExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIfExpression5(stack["exprsI"])
}

func (c *current) onForExpression2(rExprI interface{}) (interface{}, error) {
	return &file.Expression{Expressions: []file.ExpressionItem{rExprI.(file.RangeExpression)}}, nil
}

func (p *parser) callonForExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForExpression2(stack["rExprI"])
}

func (c *current) onForExpression8(exprI interface{}) (interface{}, error) {
	return ptr(exprI.(file.Expression)), nil
}

func (p *parser) callonForExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForExpression8(stack["exprI"])
}

func (c *current) onForExpression14() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonForExpression14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForExpression14()
}

func (c *current) onSingleLineForExpression2(rExprI interface{}) (interface{}, error) {
	return &file.Expression{Expressions: []file.ExpressionItem{rExprI.(file.RangeExpression)}}, nil
}

func (p *parser) callonSingleLineForExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineForExpression2(stack["rExprI"])
}

func (c *current) onSingleLineForExpression8(exprI interface{}) (interface{}, error) {
	return ptr(exprI.(file.Expression)), nil
}

func (p *parser) callonSingleLineForExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineForExpression8(stack["exprI"])
}

func (c *current) onSingleLineForExpression14() (interface{}, error) {
	return (*file.Expression)(nil), nil
}

func (p *parser) callonSingleLineForExpression14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineForExpression14()
}

func (c *current) onRangeExpression8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression8(stack["ident"])
}

func (c *current) onRangeExpression22(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression22(stack["ident"])
}

func (c *current) onRangeExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRangeExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression31()
}

func (c *current) onRangeExpression5(var1I, var2I, eqPosI, declaresI interface{}) (interface{}, error) {
	var1 := var1I.(file.GoIdent)

	var var2 *file.GoIdent
	if var2I != nil {
		var2Val := getTuple[file.GoIdent](var2I, -1)
		var2 = &var2Val
	}

	return file.RangeExpression{
		Var1:     &var1,
		Var2:     var2,
		EqPos:    eqPosI.(file.Position),
		Declares: declaresI != nil,
	}, nil
}

func (p *parser) callonRangeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onRangeExpression1(varsI, orderedI, exprI interface{}) (interface{}, error) {
	re := file.RangeExpression{
		Ordered:         orderedI != nil,
		Position:        pos(c),
		RangeExpression: exprI.(file.Expression),
	}

	if partRE, ok := varsI.(file.RangeExpression); ok {
		re.Var1 = partRE.Var1
		re.Var2 = partRE.Var2
		re.EqPos = partRE.EqPos
		re.Declares = partRE.Declares
	}

	return re, nil
}

func (p *parser) callonRangeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onSingleLineRangeExpression8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineRangeExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression8(stack["ident"])
}

func (c *current) onSingleLineRangeExpression22(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineRangeExpression22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression22(stack["ident"])
}

func (c *current) onSingleLineRangeExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineRangeExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression31()
}

func (c *current) onSingleLineRangeExpression5(var1I, var2I, eqPosI, declaresI interface{}) (interface{}, error) {
	var1 := var1I.(file.GoIdent)

	var var2 *file.GoIdent
	if var2I != nil {
		var2Val := getTuple[file.GoIdent](var2I, -1)
		var2 = &var2Val
	}

	return file.RangeExpression{
		Var1:     &var1,
		Var2:     var2,
		EqPos:    eqPosI.(file.Position),
		Declares: declaresI != nil,
	}, nil
}

func (p *parser) callonSingleLineRangeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onSingleLineRangeExpression1(varsI, orderedI, exprI interface{}) (interface{}, error) {
	re := file.RangeExpression{
		Ordered:         orderedI != nil,
		Position:        pos(c),
		RangeExpression: exprI.(file.Expression),
	}

	if partRE, ok := varsI.(file.RangeExpression); ok {
		re.Var1 = partRE.Var1
		re.Var2 = partRE.Var2
		re.EqPos = partRE.EqPos
		re.Declares = partRE.Declares
	}

	return re, nil
}

func (p *parser) callonSingleLineRangeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onInterpretedStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '"',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression2(stack["contentsI"])
}

func (c *current) onInterpretedStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression13()
}

func (c *current) onInterpretedStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '"',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a `\"` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonInterpretedStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onRawStringExpression2(contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
		Quote:    '`',
		Contents: typedSlice[file.StringExpressionItem](contentsI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression2(stack["contentsI"])
}

func (c *current) onRawStringExpression13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonRawStringExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression13()
}

func (c *current) onRawStringExpression9(startPosI, contentsI interface{}) (interface{}, error) {
	return file.StringExpression{
			Quote:    '`',
			Contents: typedSlice[file.StringExpressionItem](contentsI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				ToEOL:      true,
				Annotation: "expected a ``` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the string literal started here",
				}),
			},
		}
}

func (p *parser) callonRawStringExpression9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpression9(stack["startPosI"], stack["contentsI"])
}

func (c *current) onInterpretedStringExpressionItem16() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem16()
}

func (c *current) onInterpretedStringExpressionItem37() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringExpressionItem37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem37()
}

func (c *current) onInterpretedStringExpressionItem69() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringExpressionItem69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem69()
}

func (c *current) onInterpretedStringExpressionItem76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem76()
}

func (c *current) onInterpretedStringExpressionItem87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem87()
}

func (c *current) onInterpretedStringExpressionItem94() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem94()
}

func (c *current) onInterpretedStringExpressionItem99() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringExpressionItem99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem99()
}

func (c *current) onInterpretedStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringExpressionItem2()
}

func (c *current) onRawStringExpressionItem2() (interface{}, error) {
	return file.StringExpressionText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringExpressionItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringExpressionItem2()
}

func (c *current) onStringExpressionInterpolation25() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation25()
}

func (c *current) onStringExpressionInterpolation28() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation28()
}

func (c *current) onStringExpressionInterpolation8() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation8()
}

func (c *current) onStringExpressionInterpolation36() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation36()
}

func (c *current) onStringExpressionInterpolation30(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation30(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation43() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation43()
}

func (c *current) onStringExpressionInterpolation48() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation48()
}

func (c *current) onStringExpressionInterpolation2(fmtDirectiveI, lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
		FormatDirective: castedOrZero[string](fmtDirectiveI),
		Expression:      exprI.(file.Expression),
		LBracePos:       lBracePosI.(file.Position),
		RBracePos:       rBracePosI.(file.Position),
		Position:        pos(c),
	}, nil
}

func (p *parser) callonStringExpressionInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation2(stack["fmtDirectiveI"], stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onStringExpressionInterpolation73() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation73()
}

func (c *current) onStringExpressionInterpolation76() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation76()
}

func (c *current) onStringExpressionInterpolation56() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation56()
}

func (c *current) onStringExpressionInterpolation84() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation84()
}

func (c *current) onStringExpressionInterpolation78(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation78(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation91()
}

func (c *current) onStringExpressionInterpolation50(fmtDirectiveI, parenPosI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			FormatDirective: castedOrZero[string](fmtDirectiveI),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "string interpolation is missing an expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      parenPosI.(file.Position),
				Annotation: "expected a `" + lbrace + "` here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "add an expression enclosed in braces",
					Code:       "`" + string(c.text) + "{1+1}`",
				},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation50(stack["fmtDirectiveI"], stack["parenPosI"])
}

func (c *current) onStringExpressionInterpolation120() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation120()
}

func (c *current) onStringExpressionInterpolation123() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation123()
}

func (c *current) onStringExpressionInterpolation103() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringExpressionInterpolation103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation103()
}

func (c *current) onStringExpressionInterpolation131() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation131()
}

func (c *current) onStringExpressionInterpolation125(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonStringExpressionInterpolation125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation125(stack["endPosI"])
}

func (c *current) onStringExpressionInterpolation138() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation138()
}

func (c *current) onStringExpressionInterpolation145() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation145()
}

func (c *current) onStringExpressionInterpolation148() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonStringExpressionInterpolation148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation148()
}

func (c *current) onStringExpressionInterpolation97(fmtDirectiveI, parenPosI, lBracePosI, startPosI, exprI interface{}) (interface{}, error) {
	return file.StringExpressionInterpolation{
			FormatDirective: castedOrZero[string](fmtDirectiveI),
			Expression:      exprI.(file.Expression),
			LBracePos:       lBracePosI.(file.Position),
			Position:        pos(c),
		}, &corgierr.Error{
			Message: "unclosed string interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				EOLDelta:   1,
				Annotation: "expected a `" + rbrace + "` somewhere here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					End:        startPosI.(file.Position),
					Annotation: "for the interpolation started here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "add the missing `" + rbrace + "`"},
				{
					Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation",
					Code:       "`#" + string(c.text) + "`",
				},
			},
		}
}

func (p *parser) callonStringExpressionInterpolation97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringExpressionInterpolation97(stack["fmtDirectiveI"], stack["parenPosI"], stack["lBracePosI"], stack["startPosI"], stack["exprI"])
}

func (c *current) onTernaryExpression51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression51()
}

func (c *current) onTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression57() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression57()
}

func (c *current) onTernaryExpression71() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression71()
}

func (c *current) onTernaryExpression53(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression53(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression93() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression93()
}

func (c *current) onTernaryExpression87(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression87(stack["posI"])
}

func (c *current) onTernaryExpression109() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression109()
}

func (c *current) onTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression106(stack["posI"])
}

func (c *current) onTernaryExpression118() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression118()
}

func (c *current) onTernaryExpression73(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression73(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onTernaryExpression152() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression152()
}

func (c *current) onTernaryExpression146(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression146(stack["posI"])
}

func (c *current) onTernaryExpression168() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression168()
}

func (c *current) onTernaryExpression165(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonTernaryExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression165(stack["posI"])
}

func (c *current) onTernaryExpression177() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonTernaryExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression177()
}

func (c *current) onTernaryExpression120(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonTernaryExpression120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernaryExpression120(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression31()
}

func (c *current) onSingleLineTernaryExpression2(conditionI, ifTrueI, ifFalseI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
		Condition: conditionI.(file.Expression),
		IfTrue:    ifTrueI.(file.Expression),
		IfFalse:   ifFalseI.(file.Expression),
		RParenPos: rParenPosI.(file.Position),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonSingleLineTernaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression2(stack["conditionI"], stack["ifTrueI"], stack["ifFalseI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression37()
}

func (c *current) onSingleLineTernaryExpression46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression46()
}

func (c *current) onSingleLineTernaryExpression33(startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected a condition, an if-true value, and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression33(stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression63() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression63()
}

func (c *current) onSingleLineTernaryExpression57(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression57(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression79()
}

func (c *current) onSingleLineTernaryExpression76(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression76(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression88() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression88()
}

func (c *current) onSingleLineTernaryExpression48(conditionI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-true value and an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression48(stack["conditionI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onSingleLineTernaryExpression112() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression112()
}

func (c *current) onSingleLineTernaryExpression106(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression106(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression128() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression128()
}

func (c *current) onSingleLineTernaryExpression125(posI interface{}) (interface{}, error) {
	return posI, nil
}

func (p *parser) callonSingleLineTernaryExpression125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression125(stack["posI"])
}

func (c *current) onSingleLineTernaryExpression137() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineTernaryExpression137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression137()
}

func (c *current) onSingleLineTernaryExpression90(conditionI, ifTrueI, startPosI, rParenPosI interface{}) (interface{}, error) {
	return file.TernaryExpression{
			Condition: conditionI.(file.Expression),
			IfTrue:    ifTrueI.(file.Expression),
			RParenPos: rParenPosI.(file.Position),
			Position:  pos(c),
		}, &corgierr.Error{
			Message: "malformed ternary expression",
			ErrorAnnotation: anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        rParenPosI.(file.Position),
				Annotation: "expected an if-false value here",
			}),
			ShouldBe: "`?(condition, valueIfTrue, valueIfFalse)`",
			Example:  "`?(num % 2 == 0, \"num is even\", \"num is uneven\")`",
		}
}

func (p *parser) callonSingleLineTernaryExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineTernaryExpression90(stack["conditionI"], stack["ifTrueI"], stack["startPosI"], stack["rParenPosI"])
}

func (c *current) onChainExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression21()
}

func (c *current) onChainExpression37() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression37()
}

func (c *current) onChainExpression64(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)) || defaultI != nil, nil
}

func (p *parser) callonChainExpression64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression64(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression68() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression68()
}

func (c *current) onChainExpression86() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression86()
}

func (c *current) onChainExpression92(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)), nil
}

func (p *parser) callonChainExpression92() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression92(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onChainExpression94() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression94()
}

func (c *current) onChainExpression102() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression102()
}

func (c *current) onChainExpression65(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}

	var multiline string
	if malEndPosI.(file.Position).Line > malStartPosI.(file.Position).Line {
		multiline += " and the lines below"
	}

	return expr, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this" + multiline + " part",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonChainExpression65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression65(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onchainExpressionRoot2() (interface{}, error) {
	return file.GoExpression{
		Expression: string(c.text),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot2()
}

func (c *current) onchainExpressionRoot10(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonchainExpressionRoot10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot10(stack["ident"])
}

func (c *current) onchainExpressionRoot8(identI interface{}) (interface{}, error) {
	ident := identI.(file.GoIdent)
	return file.GoExpression{
		Expression: ident.Ident,
		Position:   ident.Position,
	}, nil
}

func (p *parser) callonchainExpressionRoot8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot8(stack["identI"])
}

func (c *current) onSingleLineChainExpression21() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression21()
}

func (c *current) onSingleLineChainExpression32() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression32()
}

func (c *current) onSingleLineChainExpression55(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(typedSlice[file.ChainExpressionItem](chainI)) || defaultI != nil, nil
}

func (p *parser) callonSingleLineChainExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression55(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression2(derefsI, rootI, checkRootI, chainI, defaultI, endPosI interface{}) (interface{}, error) {
	expr := file.ChainExpression{
		Root:       rootI.(file.GoExpression),
		CheckRoot:  checkRootI != nil,
		Chain:      typedSlice[file.ChainExpressionItem](chainI),
		DerefCount: len(islice(derefsI)),
		Position:   pos(c),
	}
	if defaultI != nil {
		defaultOpPos := getTuple[file.Position](defaultI, 1)
		expr.DefaultOpPos = &defaultOpPos
		defaultVal := getTuple[file.Expression](defaultI, -1)
		expr.Default = &defaultVal
	}

	return expr, nil
}

func (p *parser) callonSingleLineChainExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression2(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression58()
}

func (c *current) onSingleLineChainExpression76() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression76()
}

func (c *current) onSingleLineChainExpression82(startPosI, derefsI, rootI, checkRootI, chainI, endPosI interface{}) (bool, error) {
	return checkRootI != nil || len(islice(chainI)) > 0, nil
}

func (p *parser) callonSingleLineChainExpression82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression82(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"])
}

func (c *current) onSingleLineChainExpression84() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression84()
}

func (c *current) onSingleLineChainExpression92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpression92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression92()
}

func (c *current) onSingleLineChainExpression98(startPosI, derefsI, rootI, checkRootI, chainI, endPosI, malStartPosI, malEndPosI interface{}) (bool, error) {
	return false, &corgierr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      malStartPosI.(file.Position),
			End:        malEndPosI.(file.Position),
			Annotation: "unable to parse this part",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:      startPosI.(file.Position),
				End:        malStartPosI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "did you mean to put a default here? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonSingleLineChainExpression98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpression98(stack["startPosI"], stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["endPosI"], stack["malStartPosI"], stack["malEndPosI"])
}

func (c *current) onChainExpressionItem14(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem14(stack["ident"])
}

func (c *current) onChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionItem37(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem37(stack["ident"])
}

func (c *current) onChainExpressionItem47(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem47(stack["ident"])
}

func (c *current) onChainExpressionItem56() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem56()
}

func (c *current) onChainExpressionItem24(ptrsI, packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		PointerCount: len(islice(ptrsI)),
		Package:      packageIdent,
		Type:         typeI.(file.GoIdent),
		RParenPos:    rParenPosI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonChainExpressionItem24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem24(stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem9(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem9(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem3(identI, checkI interface{}) (interface{}, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.GoIdent),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onSingleLineChainExpressionItem32(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem32(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem42(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonSingleLineChainExpressionItem42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem42(stack["ident"])
}

func (c *current) onSingleLineChainExpressionItem51() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineChainExpressionItem51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem51()
}

func (c *current) onSingleLineChainExpressionItem19(ptrsI, packageI, typeI, rParenPosI, checkI interface{}) (interface{}, error) {
	var packageIdent *file.GoIdent
	if packageI != nil {
		packageIdentVal := getTuple[file.GoIdent](packageI, 0)
		packageIdent = &packageIdentVal
	}

	return file.TypeAssertionExpression{
		PointerCount: len(islice(ptrsI)),
		Package:      packageIdent,
		Type:         typeI.(file.GoIdent),
		RParenPos:    rParenPosI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineChainExpressionItem19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineChainExpressionItem19(stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3()
}

func (c *current) onIndexExpression30() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression30()
}

func (c *current) onIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onindexExpressionIndex11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex11()
}

func (c *current) onindexExpressionIndex27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex27()
}

func (c *current) onindexExpressionIndex48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex48()
}

func (c *current) onindexExpressionIndex80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex80()
}

func (c *current) onindexExpressionIndex87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex87()
}

func (c *current) onindexExpressionIndex98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex98()
}

func (c *current) onindexExpressionIndex105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex105()
}

func (c *current) onindexExpressionIndex110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex110()
}

func (c *current) onindexExpressionIndex128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex128()
}

func (c *current) onindexExpressionIndex149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonindexExpressionIndex149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex149()
}

func (c *current) onindexExpressionIndex181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex181()
}

func (c *current) onindexExpressionIndex188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex188()
}

func (c *current) onindexExpressionIndex199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex199()
}

func (c *current) onindexExpressionIndex206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex206()
}

func (c *current) onindexExpressionIndex211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonindexExpressionIndex211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex211()
}

func (c *current) onindexExpressionIndex218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex218()
}

func (c *current) onindexExpressionIndex116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonindexExpressionIndex116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex116(stack["valsI"], stack["endPosI"])
}

func (c *current) onindexExpressionIndex8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonindexExpressionIndex8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex8(stack["posI"])
}

func (c *current) onindexExpressionIndex227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonindexExpressionIndex227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex227()
}

func (c *current) onindexExpressionIndex224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonindexExpressionIndex224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex224(stack["posI"])
}

func (c *current) onindexExpressionIndex1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonindexExpressionIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindexExpressionIndex1(stack["exprsI"])
}

func (c *current) onSingleLineIndexExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression3()
}

func (c *current) onSingleLineIndexExpression25() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineIndexExpression25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression25()
}

func (c *current) onSingleLineIndexExpression1(exprI, checkIndexI, rBracePosI, checkValueI interface{}) (interface{}, error) {
	return file.IndexExpression{
		LBracePos:  pos(c),
		Index:      exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonSingleLineIndexExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracePosI"], stack["checkValueI"])
}

func (c *current) onsingleLineIndexExpressionIndex11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex11()
}

func (c *current) onsingleLineIndexExpressionIndex27() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex27()
}

func (c *current) onsingleLineIndexExpressionIndex48() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex48()
}

func (c *current) onsingleLineIndexExpressionIndex80() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex80()
}

func (c *current) onsingleLineIndexExpressionIndex87() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex87()
}

func (c *current) onsingleLineIndexExpressionIndex98() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex98()
}

func (c *current) onsingleLineIndexExpressionIndex105() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex105()
}

func (c *current) onsingleLineIndexExpressionIndex110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex110()
}

func (c *current) onsingleLineIndexExpressionIndex128() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex128()
}

func (c *current) onsingleLineIndexExpressionIndex149() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex149()
}

func (c *current) onsingleLineIndexExpressionIndex181() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex181()
}

func (c *current) onsingleLineIndexExpressionIndex188() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex188()
}

func (c *current) onsingleLineIndexExpressionIndex199() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex199()
}

func (c *current) onsingleLineIndexExpressionIndex206() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex206()
}

func (c *current) onsingleLineIndexExpressionIndex211() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonsingleLineIndexExpressionIndex211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex211()
}

func (c *current) onsingleLineIndexExpressionIndex218() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex218()
}

func (c *current) onsingleLineIndexExpressionIndex116(valsI, endPosI interface{}) (interface{}, error) {
	valIs := islice(valsI)
	return c.text, &corgierr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonsingleLineIndexExpressionIndex116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex116(stack["valsI"], stack["endPosI"])
}

func (c *current) onsingleLineIndexExpressionIndex8(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil
}

func (p *parser) callonsingleLineIndexExpressionIndex8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex8(stack["posI"])
}

func (c *current) onsingleLineIndexExpressionIndex227() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineIndexExpressionIndex227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex227()
}

func (c *current) onsingleLineIndexExpressionIndex224(posI interface{}) (interface{}, error) {
	return file.GoExpression{Expression: string(c.text), Position: posI.(file.Position)}, nil

}

func (p *parser) callonsingleLineIndexExpressionIndex224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex224(stack["posI"])
}

func (c *current) onsingleLineIndexExpressionIndex1(exprsI interface{}) (interface{}, error) {
	return combineExpressions(exprsI)
}

func (p *parser) callonsingleLineIndexExpressionIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineIndexExpressionIndex1(stack["exprsI"])
}

func (c *current) onParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3()
}

func (c *current) onParenExpression23() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression23()
}

func (c *current) onParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onparenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonparenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onSingleLineParenExpression3() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression3()
}

func (c *current) onSingleLineParenExpression18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSingleLineParenExpression18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression18()
}

func (c *current) onSingleLineParenExpression1(argsI, rParenPosI, checkI interface{}) (interface{}, error) {
	return file.ParenExpression{
		LParenPos: pos(c),
		Args:      castedOrZero[[]file.Expression](argsI),
		RParenPos: pos(c),
		Check:     checkI != nil,
	}, nil
}

func (p *parser) callonSingleLineParenExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineParenExpression1(stack["argsI"], stack["rParenPosI"], stack["checkI"])
}

func (c *current) onsingleLinearenExpressionArgs1(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	args := make([]file.Expression, 1+len(restTuples))
	args[0] = firstI.(file.Expression)
	for i, at := range restTuples {
		args[i+1] = getTuple[file.Expression](at, -1)
	}

	return args, nil
}

func (p *parser) callonsingleLinearenExpressionArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLinearenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onRawFilter10() (interface{}, error) {
	return file.RawFilterType(string(c.text)), nil
}

func (p *parser) callonRawFilter10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFilter10()
}

func (c *current) onRawFilter16() (interface{}, error) {
	return file.RawFilterType(string(c.text)), &corgierr.Error{
		Message: "invalid raw filter type",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected either `html`, `svg`, `js`, or `css`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "remove the type entirely, or replace it with one of the above",
			},
		},
	}
}

func (p *parser) callonRawFilter16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFilter16()
}

func (c *current) onRawFilter1(typI, bodyI interface{}) (interface{}, error) {
	var typ file.RawFilterType
	if typI != nil {
		typ = getTuple[file.RawFilterType](typI, -1)
	}

	return file.RawFilter{
		Type:     typ,
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFilter1(stack["typI"], stack["bodyI"])
}

func (c *current) onCommandFilter16(strI interface{}) (interface{}, error) {
	return file.String{Quote: '`', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonCommandFilter16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter16(stack["strI"])
}

func (c *current) onCommandFilter23(strI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '`',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a ``` somewhere here",
			}),
		}
}

func (p *parser) callonCommandFilter23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter23(stack["strI"])
}

func (c *current) onCommandFilter55() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonCommandFilter55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter55()
}

func (c *current) onCommandFilter68() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonCommandFilter68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter68()
}

func (c *current) onCommandFilter89() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonCommandFilter89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter89()
}

func (c *current) onCommandFilter112() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonCommandFilter112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter112()
}

func (c *current) onCommandFilter123() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonCommandFilter123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter123()
}

func (c *current) onCommandFilter130() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonCommandFilter130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter130()
}

func (c *current) onCommandFilter135() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonCommandFilter135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter135()
}

func (c *current) onCommandFilter40(strI interface{}) (interface{}, error) {
	return file.String{Quote: '"', Contents: concat(strI), Position: pos(c)}, nil
}

func (p *parser) callonCommandFilter40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter40(stack["strI"])
}

func (c *current) onCommandFilter156() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonCommandFilter156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter156()
}

func (c *current) onCommandFilter169() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonCommandFilter169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter169()
}

func (c *current) onCommandFilter190() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonCommandFilter190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter190()
}

func (c *current) onCommandFilter213() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonCommandFilter213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter213()
}

func (c *current) onCommandFilter224() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonCommandFilter224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter224()
}

func (c *current) onCommandFilter231() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonCommandFilter231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter231()
}

func (c *current) onCommandFilter236() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonCommandFilter236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter236()
}

func (c *current) onCommandFilter242() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonCommandFilter242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter242()
}

func (c *current) onCommandFilter141(strI, endPosI interface{}) (interface{}, error) {
	return file.String{
			Quote:    '"',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "unclosed string literal",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				EOLDelta:   1,
				Annotation: "expected a `\"` somewhere here",
			}),
		}
}

func (p *parser) callonCommandFilter141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter141(stack["strI"], stack["endPosI"])
}

func (c *current) onCommandFilter267() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonCommandFilter267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter267()
}

func (c *current) onCommandFilter259(strI, endPosI interface{}) (interface{}, error) {
	raw := concat(strI)

	suggestion := corgierr.Suggestion{
		Suggestion: "enclose this string in double quotes or backticks, instead of single quotes",
		Code:       "`" + strconv.Quote(raw) + "` or ``" + raw + "``",
	}
	if strings.Contains(raw, "`") {
		suggestion = corgierr.Suggestion{
			Suggestion: "enclose this string in double quotes, instead of single quotes",
			Code:       "`" + strconv.Quote(raw) + "`",
		}
	}

	return file.String{
			Quote:    '\'',
			Contents: concat(strI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "use of single-quoted string",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "this should be a valid Go string",
			}),
			Suggestions: []corgierr.Suggestion{suggestion},
		}
}

func (p *parser) callonCommandFilter259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter259(stack["strI"], stack["endPosI"])
}

func (c *current) onCommandFilter13(stringI interface{}) (interface{}, error) {
	return file.StringCommandFilterArg(stringI.(file.String)), nil
}

func (p *parser) callonCommandFilter13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter13(stack["stringI"])
}

func (c *current) onCommandFilter273(argI interface{}) (interface{}, error) {
	return file.RawCommandFilterArg{Value: concat(argI), Position: pos(c)}, nil
}

func (p *parser) callonCommandFilter273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter273(stack["argI"])
}

func (c *current) onCommandFilter1(nameI, argsI, bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
		Name:     concat(nameI),
		Args:     typedSliceFromTuples[file.CommandFilterArg](argsI, -1),
		Body:     castedOrZero[[]file.FilterLine](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonCommandFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommandFilter1(stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onBadFilter1(bodyI interface{}) (interface{}, error) {
	return file.CommandFilter{
			Position: pos(c),
			Body:     castedOrZero[[]file.FilterLine](bodyI),
		}, &corgierr.Error{
			Message: "bad filter",
			ErrorAnnotation: anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected `raw` or a command name",
			}),
		}
}

func (p *parser) callonBadFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadFilter1(stack["bodyI"])
}

func (c *current) onfilterBody3() error {
	c.state["Indentation.Level"] = c.state["Indentation.Level"].(int) + 1
	return nil
}

func (p *parser) callonfilterBody3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilterBody3()
}

func (c *current) onfilterBody16(linesI interface{}) error {
	lvl := c.state["Indentation.Level"].(int)
	c.state["Indentation.Level"] = lvl - 1

	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	c.state["Indentation.TotalRepetitions"] = c.state["Indentation.TotalRepetitions"].(int) - actualReps.Pop()
	return nil
}

func (p *parser) callonfilterBody16() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilterBody16(stack["linesI"])
}

func (c *current) onfilterBody1(linesI interface{}) (interface{}, error) {
	return typedSliceFromTuples[file.FilterLine](linesI, -1), nil
}

func (p *parser) callonfilterBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilterBody1(stack["linesI"])
}

func (c *current) onfilterLine5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfilterLine5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilterLine5()
}

func (c *current) onfilterLine1(posI, lineI interface{}) (interface{}, error) {
	return file.FilterLine{
		Line:     concat(lineI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonfilterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilterLine1(stack["posI"], stack["lineI"])
}

func (c *current) onGoType1(goTypeI interface{}) (interface{}, error) {
	return file.GoType{Type: concat(goTypeI), Position: pos(c)}, nil
}

func (p *parser) callonGoType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoType1(stack["goTypeI"])
}

func (c *current) ongoFieldDecl33() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a ``` somewhere here",
		}),
	}
}

func (p *parser) callongoFieldDecl33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl33()
}

func (c *current) ongoFieldDecl57() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl57()
}

func (c *current) ongoFieldDecl78() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl78()
}

func (c *current) ongoFieldDecl110() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl110()
}

func (c *current) ongoFieldDecl117() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl117()
}

func (c *current) ongoFieldDecl128() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl128()
}

func (c *current) ongoFieldDecl135() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl135()
}

func (c *current) ongoFieldDecl140() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl140()
}

func (c *current) ongoFieldDecl157() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &corgierr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl157()
}

func (c *current) ongoFieldDecl178() (interface{}, error) {
	suggestions := []corgierr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, corgierr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, corgierr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &corgierr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl178()
}

func (c *current) ongoFieldDecl210() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl210()
}

func (c *current) ongoFieldDecl217() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl217()
}

func (c *current) ongoFieldDecl228() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl228()
}

func (c *current) ongoFieldDecl235() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl235()
}

func (c *current) ongoFieldDecl240() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl240()
}

func (c *current) ongoFieldDecl146() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a `\"` somewhere here",
		}),
	}

}

func (p *parser) callongoFieldDecl146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl146()
}

func (c *current) onMixin12(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixin12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin12(stack["identI"])
}

func (c *current) onMixin31() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin31()
}

func (c *current) onMixin18(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixin18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin18(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin9(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixin9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin9(stack["identI"])
}

func (c *current) onMixin40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin40()
}

func (c *current) onMixin37(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin37(stack["posI"])
}

func (c *current) onMixin65() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin65()
}

func (c *current) onMixin59(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixin59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin59(stack["identI"], stack["endPosI"])
}

func (c *current) onMixin2(nameI, paramsI, bodyI interface{}) (interface{}, error) {
	params := castedOrZero[file.Mixin](paramsI)
	return file.Mixin{
		Name:      nameI.(file.Ident),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixin2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin2(stack["nameI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) onMixin80() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixin80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin80()
}

func (c *current) onMixin76(posI, bodyI interface{}) (interface{}, error) {
	return file.Mixin{
			Body:     bodyI.(file.Scope),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "mixin: missing name",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected the name of the mixin here",
			}),
			Example: "`mixin woof\n" +
				"  > bark`",
		}
}

func (p *parser) callonMixin76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixin76(stack["posI"], stack["bodyI"])
}

func (c *current) onmixinParamList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList28()
}

func (c *current) onmixinParamList2(paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Mixin{
		LParenPos: ptr(pos(c)),
		Params:    castedOrZero[[]file.MixinParam](paramsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinParamList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList2(stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onmixinParamList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList49()
}

func (c *current) onmixinParamList30(paramsI, posI interface{}) (interface{}, error) {
	return file.Mixin{
			LParenPos: ptr(pos(c)),
			Params:    castedOrZero[[]file.MixinParam](paramsI),
		}, &corgierr.Error{
			Message: "mixin parameters: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinParamList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamList30(stack["paramsI"], stack["posI"])
}

func (c *current) onmixinParams1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinParams := make([]file.MixinParam, 1+len(restIs))
	mixinParams[0] = firstI.(file.MixinParam)
	for i, ai := range restIs {
		mixinParams[i+1] = getTuple[file.MixinParam](ai, -1)
	}

	return mixinParams, nil
}

func (p *parser) callonmixinParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParams1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinParam8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam8(stack["identI"])
}

func (c *current) onmixinParam27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam27()
}

func (c *current) onmixinParam14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinParam14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam14(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam5(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam5(stack["identI"])
}

func (c *current) onmixinParam39() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam39()
}

func (c *current) onmixinParam33(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinParam33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam33(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinParam46() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParam46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam46()
}

func (c *current) onmixinParam1(nameI, posI, typeI, defaultI interface{}) (interface{}, error) {
	defaultTuple := islice(defaultI)
	var paramDefault file.MixinParam
	if len(defaultTuple) == 2 {
		paramDefault = defaultTuple[1].(file.MixinParam)
	}

	typeTuple := islice(typeI)
	var paramType *file.GoType
	if len(typeTuple) == 2 {
		paramType = ptr(typeTuple[1].(file.GoType))
	}

	p := file.MixinParam{
		Name:      nameI.(file.Ident),
		Type:      paramType,
		AssignPos: paramDefault.AssignPos,
		Default:   paramDefault.Default,
		Position:  pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &corgierr.Error{
			Message: "mixin param: need either a type or a default",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected either a type or a default here",
			}),
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "give this param a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this param a default with an inferrable type", Code: "`" + p.Name.Ident + "=\"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) callonmixinParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParam1(stack["nameI"], stack["posI"], stack["typeI"], stack["defaultI"])
}

func (c *current) onmixinParamDefault2(exprI interface{}) (interface{}, error) {
	return file.MixinParam{
		AssignPos: ptr(pos(c)),
		Default:   ptrOrNil[file.Expression](exprI),
	}, nil
}

func (p *parser) callonmixinParamDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault2(stack["exprI"])
}

func (c *current) onmixinParamDefault13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinParamDefault13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault13()
}

func (c *current) onmixinParamDefault9(posI interface{}) (interface{}, error) {
	return file.MixinParam{
			AssignPos: ptr(pos(c)),
		}, &corgierr.Error{
			Message: "mixin param: missing default",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "here",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "because of this `=`",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remove the `=`, if you didn't mean to define a default"},
			},
		}
}

func (p *parser) callonmixinParamDefault9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinParamDefault9(stack["posI"])
}

func (c *current) onReturn8() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonReturn8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn8()
}

func (c *current) onReturn1(errExprI interface{}) (interface{}, error) {
	return file.Return{
		Err:      ptrOrNil[file.Expression](errExprI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errExprI"])
}

func (c *current) onMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall8(stack["identI"])
}

func (c *current) onMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall27()
}

func (c *current) onMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall39(stack["identI"])
}

func (c *current) onMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall58()
}

func (c *current) onMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall36(stack["identI"])
}

func (c *current) onMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall67()
}

func (c *current) onMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall64(stack["posI"])
}

func (c *current) onMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall92()
}

func (c *current) onMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCall{
		Namespace: namespace,
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onInlineMixinCall8(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall8(stack["identI"])
}

func (c *current) onInlineMixinCall27() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall27()
}

func (c *current) onInlineMixinCall14(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall14(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall39(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonInlineMixinCall39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall39(stack["identI"])
}

func (c *current) onInlineMixinCall58() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall58()
}

func (c *current) onInlineMixinCall45(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonInlineMixinCall45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall45(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall36(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonInlineMixinCall36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall36(stack["identI"])
}

func (c *current) onInlineMixinCall67() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall67()
}

func (c *current) onInlineMixinCall64(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall64(stack["posI"])
}

func (c *current) onInlineMixinCall92() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineMixinCall92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall92()
}

func (c *current) onInlineMixinCall86(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonInlineMixinCall86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall86(stack["identI"], stack["endPosI"])
}

func (c *current) onInlineMixinCall1(namespaceI, nameI, argsI, bodyI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCall{
		Namespace: namespace,
		Name:      nameI.(file.Ident),
		LParenPos: args.LParenPos,
		Args:      args.Args,
		RParenPos: args.RParenPos,
		Body:      bodyI.(file.Scope),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonInlineMixinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMixinCall1(stack["namespaceI"], stack["nameI"], stack["argsI"], stack["bodyI"])
}

func (c *current) onmixinArgList28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList28()
}

func (c *current) onmixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonmixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onmixinArgList49() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArgList49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList49()
}

func (c *current) onmixinArgList30(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin args: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonmixinArgList30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgList30(stack["argsI"], stack["posI"])
}

func (c *current) onsingleLineMixinArgList18() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList18()
}

func (c *current) onsingleLineMixinArgList2(argsI, rParenPosI interface{}) (interface{}, error) {
	return file.MixinCall{
		LParenPos: ptr(pos(c)),
		Args:      castedOrZero[[]file.MixinArg](argsI),
		RParenPos: ptr(rParenPosI.(file.Position)),
	}, nil
}

func (p *parser) callonsingleLineMixinArgList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList2(stack["argsI"], stack["rParenPosI"])
}

func (c *current) onsingleLineMixinArgList34() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArgList34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList34()
}

func (c *current) onsingleLineMixinArgList20(argsI, posI interface{}) (interface{}, error) {
	return file.MixinCall{
			LParenPos: ptr(pos(c)),
			Args:      castedOrZero[[]file.MixinArg](argsI),
		}, &corgierr.Error{
			Message: "mixin args: unclosed `(`",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a `)`",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:      pos(c),
					Annotation: "for the `(` you opened here",
				}),
			},
		}
}

func (p *parser) callonsingleLineMixinArgList20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgList20(stack["argsI"], stack["posI"])
}

func (c *current) onmixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonmixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onsingleLineMixinArgs1(firstI, restI interface{}) (interface{}, error) {
	restIs := islice(restI)
	mixinArgs := make([]file.MixinArg, 1+len(restIs))
	mixinArgs[0] = firstI.(file.MixinArg)
	for i, ai := range restIs {
		mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
	}

	return mixinArgs, nil
}

func (p *parser) callonsingleLineMixinArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onmixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg9(stack["identI"])
}

func (c *current) onmixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg28()
}

func (c *current) onmixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg6(stack["identI"])
}

func (c *current) onmixinArg40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg40()
}

func (c *current) onmixinArg34(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg34(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonmixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onmixinArg60(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonmixinArg60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg60(stack["identI"])
}

func (c *current) onmixinArg79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg79()
}

func (c *current) onmixinArg66(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonmixinArg66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg66(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg57(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonmixinArg57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg57(stack["identI"])
}

func (c *current) onmixinArg91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg91()
}

func (c *current) onmixinArg85(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonmixinArg85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg85(stack["identI"], stack["endPosI"])
}

func (c *current) onmixinArg103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinArg103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg103()
}

func (c *current) onmixinArg53(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonmixinArg53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinArg53(stack["nameI"], stack["posI"])
}

func (c *current) onsingleLineMixinArg9(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg9(stack["identI"])
}

func (c *current) onsingleLineMixinArg28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg28()
}

func (c *current) onsingleLineMixinArg15(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg15(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg6(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg6(stack["identI"])
}

func (c *current) onsingleLineMixinArg40() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg40()
}

func (c *current) onsingleLineMixinArg34(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg34(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg2(nameI, valI interface{}) (interface{}, error) {
	return file.MixinArg{
		Name:  nameI.(file.Ident),
		Value: valI.(file.Expression),
	}, nil
}

func (p *parser) callonsingleLineMixinArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg2(stack["nameI"], stack["valI"])
}

func (c *current) onsingleLineMixinArg60(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonsingleLineMixinArg60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg60(stack["identI"])
}

func (c *current) onsingleLineMixinArg79() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg79()
}

func (c *current) onsingleLineMixinArg66(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonsingleLineMixinArg66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg66(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg57(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonsingleLineMixinArg57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg57(stack["identI"])
}

func (c *current) onsingleLineMixinArg91() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg91()
}

func (c *current) onsingleLineMixinArg85(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonsingleLineMixinArg85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg85(stack["identI"], stack["endPosI"])
}

func (c *current) onsingleLineMixinArg103() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonsingleLineMixinArg103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg103()
}

func (c *current) onsingleLineMixinArg53(nameI, posI interface{}) (interface{}, error) {
	return file.MixinArg{
			Name: nameI.(file.Ident),
		}, &corgierr.Error{
			Message: "missing mixin argument value",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a value here",
			}),
			Example: "`argName=123`",
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "remember that you always need to write the name of the arg before it's value"},
			},
		}
}

func (p *parser) callonsingleLineMixinArg53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleLineMixinArg53(stack["nameI"], stack["posI"])
}

func (c *current) onmixinCallBody2(shI interface{}) (interface{}, error) {
	return file.Scope{shI.(file.MixinMainBlockShorthand)}, nil
}

func (p *parser) callonmixinCallBody2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallBody2(stack["shI"])
}

func (c *current) onMixinMainBlockShorthand6() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand6()
}

func (c *current) onMixinMainBlockShorthand2(bodyI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
		Body:     bodyI.(file.Scope),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinMainBlockShorthand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand2(stack["bodyI"])
}

func (c *current) onMixinMainBlockShorthand24() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}
}

func (p *parser) callonMixinMainBlockShorthand24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand24()
}

func (c *current) onMixinMainBlockShorthand28() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinMainBlockShorthand28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand28()
}

func (c *current) onMixinMainBlockShorthand20(posI interface{}) (interface{}, error) {
	return file.MixinMainBlockShorthand{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing body",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an indented body",
			}),
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "if you want the `_` block to write nothing,\n" +
						"use a block directive inside the body of the mixin call",
					Example: "`+woof\n" +
						"  block _`",
				},
			},
		}
}

func (p *parser) callonMixinMainBlockShorthand20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinMainBlockShorthand20(stack["posI"])
}

func (c *current) onFunc8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonFunc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc8(stack["ident"])
}

func (c *current) onFunc19() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc19()
}

func (c *current) onFunc23(paramsI interface{}) (interface{}, error) {
	return castedOrZero[[]file.FuncParam](paramsI), nil

}

func (p *parser) callonFunc23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc23(stack["paramsI"])
}

func (c *current) onFunc52() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc52()
}

func (c *current) onFunc47(endPosI interface{}) (interface{}, error) {
	return ([]file.FuncParam)(nil), &corgierr.Error{
		Message: "invalid parameter list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "this is not correct, maybe a missing comma?",
		}),
	}

}

func (p *parser) callonFunc47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc47(stack["endPosI"])
}

func (c *current) onFunc59() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc59()
}

func (c *current) onFunc16(lParenPosI, paramsI, rParenPosI interface{}) (interface{}, error) {
	return file.Func{
		LParenPos: lParenPosI.(file.Position),
		Params:    paramsI.([]file.FuncParam),
		RParenPos: rParenPosI.(file.Position),
	}, nil

}

func (p *parser) callonFunc16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc16(stack["lParenPosI"], stack["paramsI"], stack["rParenPosI"])
}

func (c *current) onFunc61() (interface{}, error) {
	return file.Func{}, &corgierr.Error{
		Message: "missing `(` or `)` or invalid param list",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "here",
		}),
	}

}

func (p *parser) callonFunc61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc61()
}

func (c *current) onFunc2(nameI, paramsI interface{}) (interface{}, error) {
	params := paramsI.(file.Func)
	return file.Func{
		Name:      nameI.(file.GoIdent),
		LParenPos: params.LParenPos,
		Params:    params.Params,
		RParenPos: params.RParenPos,
		Position:  pos(c),
	}, nil
}

func (p *parser) callonFunc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc2(stack["nameI"], stack["paramsI"])
}

func (c *current) onFunc77() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonFunc77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc77()
}

func (c *current) onFunc73(posI interface{}) (interface{}, error) {
	return file.Func{Position: pos(c)}, &corgierr.Error{
		Message: "missing func name",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			ToEOL:       true,
			Annotation:  "expected an identifier followed by a parameter list",
		}),
	}
}

func (p *parser) callonFunc73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunc73(stack["posI"])
}

func (c *current) onfuncOnlyVariadicParamList1(variadicI interface{}) (interface{}, error) {
	return []file.FuncParam{variadicI.(file.FuncParam)}, nil
}

func (p *parser) callonfuncOnlyVariadicParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOnlyVariadicParamList1(stack["variadicI"])
}

func (c *current) onfuncOtherParamList1(firstI, restI, variadicI interface{}) (interface{}, error) {
	restTuples := islice(restI)

	n := 1 + len(restTuples)
	if variadicI != nil {
		n++
	}
	params := make([]file.FuncParam, 1, n)
	params[0] = firstI.(file.FuncParam)

	for _, t := range restTuples {
		params = append(params, getTuple[file.FuncParam](t, -1))
	}

	if variadicI != nil {
		params = append(params, getTuple[file.FuncParam](variadicI, -1))
	}

	return params, nil
}

func (p *parser) callonfuncOtherParamList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncOtherParamList1(stack["firstI"], stack["restI"], stack["variadicI"])
}

func (c *current) onfuncParam8(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam8(stack["ident"])
}

func (c *current) onfuncParam27(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncParam27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam27(stack["ident"])
}

func (c *current) onfuncParam5(firstI, restI interface{}) (interface{}, error) {
	restTuples := islice(restI)
	idents := make([]file.GoIdent, 1, 1+len(restTuples))
	idents[0] = firstI.(file.GoIdent)

	for _, t := range restTuples {
		idents = append(idents, getTuple[file.GoIdent](t, -1))
	}

	return idents, nil
}

func (p *parser) callonfuncParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam5(stack["firstI"], stack["restI"])
}

func (c *current) onfuncParam2(namesI, typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Names: namesI.([]file.GoIdent),
		Type:  typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam2(stack["namesI"], stack["typeI"])
}

func (c *current) onfuncParam37(typeI interface{}) (interface{}, error) {
	return file.FuncParam{
		Type: typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncParam37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncParam37(stack["typeI"])
}

func (c *current) onfuncVariadicParam6(ident interface{}) (interface{}, error) {
	return file.GoIdent{Ident: concat(ident), Position: pos(c)}, nil
}

func (p *parser) callonfuncVariadicParam6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam6(stack["ident"])
}

func (c *current) onfuncVariadicParam1(nameI, typeI interface{}) (interface{}, error) {
	var names []file.GoIdent
	if nameI != nil {
		names = []file.GoIdent{getTuple[file.GoIdent](nameI, 0)}
	}

	return file.FuncParam{
		Names:    names,
		Variadic: true,
		Type:     typeI.(file.GoType),
	}, nil
}

func (p *parser) callonfuncVariadicParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncVariadicParam1(stack["nameI"], stack["typeI"])
}

func (c *current) onfuncType9() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfuncType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType9()
}

func (c *current) onfuncType3(typeI, endPosI interface{}) (interface{}, error) {
	return file.GoType{
			Type:     concat(typeI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid type",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "not a valid Go type",
			}),
		}
}

func (p *parser) callonfuncType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfuncType3(stack["typeI"], stack["endPosI"])
}

func (c *current) onInlineText1(lineI interface{}) (interface{}, error) {
	return file.InlineText{
		Text:     lineI.(file.TextLine),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineText1(stack["lineI"])
}

func (c *current) onArrowBlock2(firstLineI, additionalLinesI interface{}) (interface{}, error) {
	firstLine, firstLineOk := firstLineI.(file.TextLine)
	additionalLineTuples := islice(additionalLinesI)

	n := len(additionalLineTuples)
	if firstLineOk {
		n++
	}

	lines := make([]file.TextLine, 0, n)
	if firstLineOk {
		lines = append(lines, firstLine)
	}
	for _, lt := range additionalLineTuples {
		lines = append(lines, getTuple[file.TextLine](lt, -1))
	}

	return file.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstLineI"], stack["additionalLinesI"])
}

func (c *current) onArrowBlock31() (interface{}, error) {
	return file.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock31()
}

func (c *current) onInlineArrowBlock2(lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
		Lines:    []file.TextLine{lineI.(file.TextLine)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonInlineArrowBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock2(stack["lineI"])
}

func (c *current) onInlineArrowBlock11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonInlineArrowBlock11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock11()
}

func (c *current) onInlineArrowBlock7(posI, lineI interface{}) (interface{}, error) {
	return file.ArrowBlock{
			Lines:    []file.TextLine{lineI.(file.TextLine)},
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing space",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected a space here, separating the `>` from the text",
			}),
			Example: "`> woof`",
		}
}

func (p *parser) callonInlineArrowBlock7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineArrowBlock7(stack["posI"], stack["lineI"])
}

func (c *current) onTextLine1(itemsI interface{}) (interface{}, error) {
	return file.TextLine(typedSlice[file.TextItem](itemsI)), nil
}

func (p *parser) callonTextLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextLine1(stack["itemsI"])
}

func (c *current) onTextItem2(textI interface{}) (interface{}, error) {
	return file.Text{
		Text:     concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTextItem2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextItem2(stack["textI"])
}

func (c *current) onInterpolation5() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "start of interpolation",
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation:  "expected a `#`, `[`, `" + lbrace + "`, a mixin call, or an element name here",
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation5()
}

func (c *current) onSimpleInterpolation13() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation13()
}

func (c *current) onSimpleInterpolation19() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation19()
}

func (c *current) onSimpleInterpolation10(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonSimpleInterpolation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation10(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onSimpleInterpolation24() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonSimpleInterpolation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation24()
}

func (c *current) onSimpleInterpolation21(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonSimpleInterpolation21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation21(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onSimpleInterpolation2(noEscapeI, valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		NoEscape: noEscapeI != nil,
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation2(stack["noEscapeI"], stack["valueI"])
}

func (c *current) onSimpleInterpolation38(valueI interface{}) (interface{}, error) {
	return file.SimpleInterpolation{
		Value:    valueI.(file.InterpolationValue),
		Position: pos(c),
	}, nil
}

func (p *parser) callonSimpleInterpolation38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleInterpolation38(stack["valueI"])
}

func (c *current) onElementInterpolation5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonElementInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation5()
}

func (c *current) onElementInterpolation1(elPosI, nameI, attrsI, valueI interface{}) (interface{}, error) {
	return file.ElementInterpolation{
		Element: file.Element{
			Name:       concat(nameI),
			Attributes: typedSlice[file.AttributeCollection](attrsI),
			Void:       castedOrZero[bool](valueI),
			Position:   elPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElementInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementInterpolation1(stack["elPosI"], stack["nameI"], stack["attrsI"], stack["valueI"])
}

func (c *current) onelementInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue5()
}

func (c *current) onelementInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue11()
}

func (c *current) onelementInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonelementInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onelementInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonelementInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue16()
}

func (c *current) onelementInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonelementInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onelementInterpolationValue31() (interface{}, error) {
	return true, nil // hacky, but whatev
}

func (p *parser) callonelementInterpolationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue31()
}

func (c *current) onelementInterpolationValue33() (interface{}, error) {
	return nil, &corgierr.Error{
		Message: "invalid interpolation value",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected either an `{` expression `}`, `[` text `]`, or a `/` void indicator",
		}),
	}
}

func (p *parser) callonelementInterpolationValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolationValue33()
}

func (c *current) onMixinCallInterpolation5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation5()
}

func (c *current) onMixinCallInterpolation16(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCallInterpolation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation16(stack["identI"])
}

func (c *current) onMixinCallInterpolation35() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation35()
}

func (c *current) onMixinCallInterpolation22(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCallInterpolation22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation22(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation47(identI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, nil
}

func (p *parser) callonMixinCallInterpolation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation47(stack["identI"])
}

func (c *current) onMixinCallInterpolation66() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation66()
}

func (c *current) onMixinCallInterpolation53(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{Ident: concat(identI), Position: pos(c)}, &corgierr.Error{
		Message: "invalid identifier",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
		}),
		Example: "`woofBark`",
	}
}

func (p *parser) callonMixinCallInterpolation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation53(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation44(identI interface{}) (interface{}, error) {
	return identI, nil
}

func (p *parser) callonMixinCallInterpolation44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation44(stack["identI"])
}

func (c *current) onMixinCallInterpolation75() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation75()
}

func (c *current) onMixinCallInterpolation72(posI interface{}) (interface{}, error) {
	return file.Ident{
			Position: pos(c),
		}, &corgierr.Error{
			Message: "missing identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      posI.(file.Position),
				Annotation: "expected an identifier",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCallInterpolation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation72(stack["posI"])
}

func (c *current) onMixinCallInterpolation100() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonMixinCallInterpolation100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation100()
}

func (c *current) onMixinCallInterpolation94(identI, endPosI interface{}) (interface{}, error) {
	return file.Ident{
			Ident:    concat(identI),
			Position: pos(c),
		}, &corgierr.Error{
			Message: "invalid identifier",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        endPosI.(file.Position),
				Annotation: "expected a letter, or `_`, optionally followed by `_`s, letters, and numbers",
			}),
			Example: "`woofBark`",
		}
}

func (p *parser) callonMixinCallInterpolation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation94(stack["identI"], stack["endPosI"])
}

func (c *current) onMixinCallInterpolation1(mcPosI, namespaceI, nameI, argsI, valueI interface{}) (interface{}, error) {
	args := castedOrZero[file.MixinCall](argsI)

	var namespace *file.Ident
	if namespaceI != nil {
		namespace = ptr(getTuple[file.Ident](namespaceI, 0))
	}

	return file.MixinCallInterpolation{
		MixinCall: file.MixinCall{
			Namespace: namespace,
			Name:      nameI.(file.Ident),
			LParenPos: args.LParenPos,
			Args:      args.Args,
			RParenPos: args.RParenPos,
			Position:  mcPosI.(file.Position),
		},
		Value:    castedOrZero[file.InterpolationValue](valueI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonMixinCallInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMixinCallInterpolation1(stack["mcPosI"], stack["namespaceI"], stack["nameI"], stack["argsI"], stack["valueI"])
}

func (c *current) onmixinCallInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue5()
}

func (c *current) onmixinCallInterpolationValue11() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue11()
}

func (c *current) onmixinCallInterpolationValue2(lBracketPosI, textI, rBracketPosI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
		LBracketPos: lBracketPosI.(file.Position),
		Text:        concat(textI),
		RBracketPos: rBracketPosI.(file.Position),
	}, nil
}

func (p *parser) callonmixinCallInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue2(stack["lBracketPosI"], stack["textI"], stack["rBracketPosI"])
}

func (c *current) onmixinCallInterpolationValue16() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonmixinCallInterpolationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue16()
}

func (c *current) onmixinCallInterpolationValue13(lBracketPosI, textI interface{}) (interface{}, error) {
	return file.TextInterpolationValue{
			LBracketPos: lBracketPosI.(file.Position),
			Text:        concat(textI),
		}, &corgierr.Error{
			Message: "unclosed text interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `]` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonmixinCallInterpolationValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmixinCallInterpolationValue13(stack["lBracketPosI"], stack["textI"])
}

func (c *current) onexpressionInterpolationValue5() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue5()
}

func (c *current) onexpressionInterpolationValue10() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue10()
}

func (c *current) onexpressionInterpolationValue2(lBracePosI, exprI, rBracePosI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
		LBracePos:  lBracePosI.(file.Position),
		Expression: exprI.(file.Expression),
		RBracePos:  rBracePosI.(file.Position),
	}, nil
}

func (p *parser) callonexpressionInterpolationValue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue2(stack["lBracePosI"], stack["exprI"], stack["rBracePosI"])
}

func (c *current) onexpressionInterpolationValue15() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonexpressionInterpolationValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue15()
}

func (c *current) onexpressionInterpolationValue12(lBracePosI, exprI interface{}) (interface{}, error) {
	return file.ExpressionInterpolationValue{
			LBracePos:  lBracePosI.(file.Position),
			Expression: exprI.(file.Expression),
		}, &corgierr.Error{
			Message: "unclosed expression interpolation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`{` opened here, but never closeed",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					Start:       pos(c),
					StartOffset: 1,
					EOLDelta:    1,
					Annotation:  "expected a `}` somewhere here",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
			},
		}
}

func (p *parser) callonexpressionInterpolationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpressionInterpolationValue12(stack["lBracePosI"], stack["exprI"])
}

func (c *current) onfmtExpressionInterpolationValue22() (interface{}, error) {
	return []byte(nil), &corgierr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb here",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue22()
}

func (c *current) onfmtExpressionInterpolationValue25() (interface{}, error) {
	return c.text, &corgierr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid verb",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue25()
}

func (c *current) onfmtExpressionInterpolationValue5() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonfmtExpressionInterpolationValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue5()
}

func (c *current) onfmtExpressionInterpolationValue33() (interface{}, error) {
	return pos(c), nil
}

func (p *parser) callonfmtExpressionInterpolationValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue33()
}

func (c *current) onfmtExpressionInterpolationValue27(endPosI interface{}) (interface{}, error) {
	return string(c.text[1:]), &corgierr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []corgierr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "escape the `#` by writing `##`, if you didn't mean to start an interpolation"},
		},
	}
}

func (p *parser) callonfmtExpressionInterpolationValue27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue27(stack["endPosI"])
}

func (c *current) onfmtExpressionInterpolationValue1(fmtDirectiveI, eivI interface{}) (interface{}, error) {
	eiv := eivI.(file.ExpressionInterpolationValue)
	eiv.FormatDirective = fmtDirectiveI.(string)
	return eiv, nil
}

func (p *parser) callonfmtExpressionInterpolationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfmtExpressionInterpolationValue1(stack["fmtDirectiveI"], stack["eivI"])
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	// this is our first ever indentation, INDENTATION will handle it
	return c.state["Indentation.Repetitions"].(int) == 0, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL3()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL4()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	// preliminary checks that there is no mix of tabs and spaces

	lvl := c.state["Indentation.Level"].(int)
	if len(c.text) == 0 {
		return lvl == 0, nil
	}

	firstChar := c.text[0]

	for i, ws := range c.text[1:] {
		if byte(ws) != firstChar {
			if firstChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: i + 2},
						Annotation: "this is a tab",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							Start:      file.Position{Line: c.pos.line, Col: 1},
							Annotation: "this is a space",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: i + 2},
					Annotation: "this is a space",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Annotation: "this is a tab",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL7()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	// lvl == 0
	return c.state["Indentation.Level"].(int) == 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL9()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	// this is our first indentation
	return c.state["Indentation.RefLine"].(int) == 0 && len(c.text) > 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL11()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL12() error {
	c.state["Indentation.Char"] = c.text[0]
	c.state["Indentation.Repetitions"] = len(c.text)
	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(len(c.text))
	c.state["Indentation.TotalRepetitions"] = len(c.text)
	c.state["Indentation.RefLine"] = c.pos.line
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL12()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	// this is NOT our first indentation
	return c.state["Indentation.RefLine"].(int) != 0, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL14()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL15() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	for _, space := range c.text {
		if space != indentChar {
			if indentChar == ' ' {
				panic(&corgierr.Error{
					Message: "mix of tabs and spaces for indentation",
					ErrorAnnotation: anno(c, annotation{
						Start:      file.Position{Line: c.pos.line, Col: 1},
						Len:        len(c.text),
						Annotation: "but these are tabs",
					}),
					HintAnnotations: []corgierr.Annotation{
						anno(c, annotation{
							ContextStartDelta: -1,
							Start:             file.Position{Line: refLine, Col: 1},
							Len:               refReps,
							Annotation:        "these are spaces",
						}),
					},
					Suggestions: []corgierr.Suggestion{
						{Suggestion: "use only tabs OR spaces for indentation, but not both"},
					},
				})
			}

			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      file.Position{Line: c.pos.line, Col: 1},
					Len:        len(c.text),
					Annotation: "but these are spaces",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        "these are tabs",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL15()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL18()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL19() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	actualCount := len(c.text)

	if actualCount <= totalReps { // indentation didn't increase
		return false, nil
	}

	if (actualCount - totalReps) != refReps {
		if indentChar == ' ' {
			return true, &corgierr.Error{
				Message: "inconsistent indentation",
				ErrorAnnotation: anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
					Len:               actualCount - totalReps,
					Annotation:        fmt.Sprintf("however, here you used %d spaces", actualCount-totalReps),
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               refReps,
						Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{
						Suggestion: "be consistent in your indentation:\n" +
							"if you use two spaces for a single indentation, use four for a two-level indentation",
					},
				},
			}
		}

		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               actualCount - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d tabs", actualCount-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
				},
			},
		}
	}

	return true, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL19()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL20() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	actualCount := len(c.text)

	actualReps.Push(actualCount - totalReps)
	c.state["Indentation.TotalRepetitions"] = actualCount
	return nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL20() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL20()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL22()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL23() (bool, error) {
	actualCount := len(c.text)
	expectCount := c.state["Indentation.TotalRepetitions"].(int)
	if actualCount == expectCount {
		return true, nil
	} else if actualCount < expectCount {
		return false, nil
	}

	panic(&corgierr.Error{
		Message: "unexpected increase of indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: 1},
			Len:               actualCount,
			Annotation:        "here",
		}),
	})

}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL23()
}

func (c *current) onINDENTATION_IGNORE_ADDITIONAL25() (bool, error) {
	return c.state["Indentation.Repetitions"].(int) > 0, nil
}

func (p *parser) callonINDENTATION_IGNORE_ADDITIONAL25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION_IGNORE_ADDITIONAL25()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL5() (bool, error) {
	// if this is the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() < lvl, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL5()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL10() (bool, error) {
	refReps := c.state["Indentation.Repetitions"].(int)
	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	want := totalReps + refReps
	have := c.state["Indentation.CharCount"].(int)
	if want == have {
		return true, nil
	}

	return false, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL10()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	indentChar := c.state["Indentation.Char"].(byte)
	refReps := c.state["Indentation.Repetitions"].(int)
	refLine := c.state["Indentation.RefLine"].(int)

	totalReps := c.state["Indentation.TotalRepetitions"].(int)

	have := c.state["Indentation.CharCount"].(int)
	want := totalReps + refReps
	if have == want {
		return true, nil
	} else if have <= totalReps {
		return false, nil
	}

	if indentChar == ' ' {
		return true, &corgierr.Error{
			Message: "inconsistent indentation",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
				Len:               have - totalReps,
				Annotation:        fmt.Sprintf("however, here you used %d spaces", have-totalReps),
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               refReps,
					Annotation:        fmt.Sprintf("this line uses %d spaces to indent a single level", refReps),
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{
					Suggestion: "be consistent in your indentation:\n" +
						"if you use two spaces for a single indentation, use four for a two-level indentation",
				},
			},
		}
	}

	return true, &corgierr.Error{
		Message: "inconsistent indentation",
		ErrorAnnotation: anno(c, annotation{
			ContextStartDelta: -1,
			Start:             file.Position{Line: c.pos.line, Col: totalReps + 1},
			Len:               have - totalReps,
			Annotation:        fmt.Sprintf("however, here you used %d tabs", have-totalReps),
		}),
		HintAnnotations: []corgierr.Annotation{
			anno(c, annotation{
				ContextStartDelta: -1,
				Start:             file.Position{Line: refLine, Col: 1},
				Len:               refReps,
				Annotation:        fmt.Sprintf("this line uses %d tabs to indent a single level", refReps),
			}),
		},
		Suggestions: []corgierr.Suggestion{
			{
				Suggestion: "be consistent in your indentation:\n" +
					"if you use two tabs for a single indentation, use four for a two-level indentation, ...",
			},
		},
	}

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL14()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL15() error {
	totalReps := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)

	c.state["Indentation.ActualRepetitions"].(*stack.Stack[int]).Push(have - totalReps)
	c.state["Indentation.TotalRepetitions"] = have
	return nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL15()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	// if this is NOT the first INDENTATION after INDENT
	actualReps := c.state["Indentation.ActualRepetitions"].(*stack.Stack[int])
	lvl := c.state["Indentation.Level"].(int)
	return actualReps.Len() == lvl, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL17()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	want := c.state["Indentation.TotalRepetitions"].(int)
	have := c.state["Indentation.CharCount"].(int)
	return want == have, nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL18()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL19() error {
	c.state["Indentation.CharCount"] = 0
	return nil

}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL19()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL22() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL22()
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL24(spaceI interface{}) (bool, error) {
	space := byte(char(spaceI))

	indentChar := c.state["Indentation.Char"].(byte)
	if indentChar != space {
		refLine := c.state["Indentation.RefLine"].(int)
		reps := c.state["Indentation.Repetitions"].(int)

		if indentChar == ' ' {
			panic(&corgierr.Error{
				Message: "mix of tabs and spaces for indentation",
				ErrorAnnotation: anno(c, annotation{
					Start:      pos(c),
					Annotation: "this is a tab",
				}),
				HintAnnotations: []corgierr.Annotation{
					anno(c, annotation{
						ContextStartDelta: -1,
						Start:             file.Position{Line: refLine, Col: 1},
						Len:               reps,
						Annotation:        "these are spaces",
					}),
				},
				Suggestions: []corgierr.Suggestion{
					{Suggestion: "use only tabs OR spaces for indentation, but not both"},
				},
			})
		}

		panic(&corgierr.Error{
			Message: "mix of tabs and spaces for indentation",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "this is a space",
			}),
			HintAnnotations: []corgierr.Annotation{
				anno(c, annotation{
					ContextStartDelta: -1,
					Start:             file.Position{Line: refLine, Col: 1},
					Len:               reps,
					Annotation:        "these are tabs",
				}),
			},
			Suggestions: []corgierr.Suggestion{
				{Suggestion: "use only tabs OR spaces for indentation, but not both"},
			},
		})
	}

	return true, nil
}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL24(stack["spaceI"])
}

func (c *current) on_INDENTATION_IGNORE_ADDITIONAL25(spaceI interface{}) error {
	c.state["Indentation.CharCount"] = c.state["Indentation.CharCount"].(int) + 1
	return nil
}

func (p *parser) callon_INDENTATION_IGNORE_ADDITIONAL25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_INDENTATION_IGNORE_ADDITIONAL25(stack["spaceI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return c.state["Indentation.Level"].(int) == 0, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
