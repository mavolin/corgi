// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/escape/attrtype"
	"github.com/mavolin/corgi/file"
	"github.com/mavolin/corgi/file/fileerr"
)

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 8, col: 1, offset: 89},
			expr: &actionExpr{
				pos: position{line: 8, col: 9, offset: 97},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 8, col: 9, offset: 97},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 16, col: 9, offset: 394},
							run: (*parser).callonFile3,
						},
						&labeledExpr{
							pos:   position{line: 8, col: 14, offset: 102},
							label: "docI",
							expr: &actionExpr{
								pos: position{line: 2059, col: 15, offset: 70248},
								run: (*parser).callonFile5,
								expr: &labeledExpr{
									pos:   position{line: 2059, col: 15, offset: 70248},
									label: "commentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2059, col: 25, offset: 70258},
										expr: &choiceExpr{
											pos: position{line: 2059, col: 26, offset: 70259},
											alternatives: []any{
												&oneOrMoreExpr{
													pos: position{line: 2059, col: 26, offset: 70259},
													expr: &seqExpr{
														pos: position{line: 2640, col: 28, offset: 89578},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2640, col: 28, offset: 89578},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 477, col: 17, offset: 15436},
													run: (*parser).callonFile16,
													expr: &seqExpr{
														pos: position{line: 477, col: 17, offset: 15436},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 477, col: 17, offset: 15436},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&notExpr{
																pos: position{line: 477, col: 22, offset: 15441},
																expr: &litMatcher{
																	pos:        position{line: 477, col: 23, offset: 15442},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 477, col: 27, offset: 15446},
																label: "textI",
																expr: &seqExpr{
																	pos: position{line: 477, col: 34, offset: 15453},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 477, col: 34, offset: 15453},
																			expr: &actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonFile24,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 477, col: 39, offset: 15458,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																run: (*parser).callonFile36,
																expr: &seqExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2637, col: 27, offset: 89506},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							expr: &litMatcher{
																								pos:        position{line: 2637, col: 27, offset: 89506},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2637, col: 33, offset: 89512},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2636, col: 23, offset: 89477},
																					expr: &anyMatcher{
																						line: 2636, col: 24, offset: 89478,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 30, offset: 118},
							expr: &seqExpr{
								pos: position{line: 2640, col: 28, offset: 89578},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2640, col: 28, offset: 89578},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2664, col: 37, offset: 90378},
										expr: &litMatcher{
											pos:        position{line: 2664, col: 37, offset: 90378},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2664, col: 43, offset: 90384},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 42, offset: 130},
							label: "pkgI",
							expr: &choiceExpr{
								pos: position{line: 2071, col: 12, offset: 70621},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2073, col: 21, offset: 70685},
										run: (*parser).callonFile56,
										expr: &seqExpr{
											pos: position{line: 2073, col: 21, offset: 70685},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2073, col: 21, offset: 70685},
													val:        "package",
													ignoreCase: false,
													want:       "\"package\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 2073, col: 31, offset: 70695},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2073, col: 34, offset: 70698},
													label: "nameI",
													expr: &choiceExpr{
														pos: position{line: 2080, col: 16, offset: 70845},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2080, col: 16, offset: 70845},
																run: (*parser).callonFile63,
																expr: &seqExpr{
																	pos: position{line: 2080, col: 16, offset: 70845},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2080, col: 16, offset: 70845},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 263, col: 10, offset: 7729},
																				run: (*parser).callonFile66,
																				expr: &labeledExpr{
																					pos:   position{line: 263, col: 10, offset: 7729},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1577, col: 17, offset: 52172},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1560, col: 20, offset: 51927},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1577, col: 26, offset: 52181},
																								expr: &charClassMatcher{
																									pos:        position{line: 1560, col: 20, offset: 51927},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			run: (*parser).callonFile72,
																			expr: &seqExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										expr: &litMatcher{
																											pos:        position{line: 2637, col: 27, offset: 89506},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2637, col: 33, offset: 89512},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2636, col: 23, offset: 89477},
																								expr: &anyMatcher{
																									line: 2636, col: 24, offset: 89478,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2082, col: 5, offset: 70891},
																run: (*parser).callonFile83,
																expr: &actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callonFile84,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2092, col: 5, offset: 71194},
																run: (*parser).callonFile95,
																expr: &seqExpr{
																	pos: position{line: 2092, col: 5, offset: 71194},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2092, col: 5, offset: 71194},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonFile98,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2092, col: 16, offset: 71205},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 2647, col: 35, offset: 89777},
																				run: (*parser).callonFile105,
																				expr: &seqExpr{
																					pos: position{line: 2647, col: 35, offset: 89777},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2647, col: 35, offset: 89777},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2647, col: 38, offset: 89780},
																							label: "unexpectedI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2647, col: 50, offset: 89792},
																								expr: &seqExpr{
																									pos: position{line: 2647, col: 51, offset: 89793},
																									exprs: []any{
																										&notExpr{
																											pos: position{line: 2647, col: 51, offset: 89793},
																											expr: &actionExpr{
																												pos: position{line: 2642, col: 26, offset: 89615},
																												run: (*parser).callonFile113,
																												expr: &choiceExpr{
																													pos: position{line: 2642, col: 27, offset: 89616},
																													alternatives: []any{
																														&actionExpr{
																															pos: position{line: 2637, col: 23, offset: 89502},
																															run: (*parser).callonFile115,
																															expr: &seqExpr{
																																pos: position{line: 2637, col: 23, offset: 89502},
																																exprs: []any{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2637, col: 23, offset: 89502},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2663, col: 37, offset: 90336},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 2637, col: 27, offset: 89506},
																																		alternatives: []any{
																																			&seqExpr{
																																				pos: position{line: 2637, col: 27, offset: 89506},
																																				exprs: []any{
																																					&zeroOrOneExpr{
																																						pos: position{line: 2637, col: 27, offset: 89506},
																																						expr: &litMatcher{
																																							pos:        position{line: 2637, col: 27, offset: 89506},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2637, col: 33, offset: 89512},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2636, col: 23, offset: 89477},
																																				expr: &anyMatcher{
																																					line: 2636, col: 24, offset: 89478,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2642, col: 33, offset: 89622},
																															val:        ";",
																															ignoreCase: false,
																															want:       "\";\"",
																														},
																														&andExpr{
																															pos: position{line: 2642, col: 39, offset: 89628},
																															expr: &seqExpr{
																																pos: position{line: 2642, col: 41, offset: 89630},
																																exprs: []any{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2642, col: 41, offset: 89630},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2663, col: 37, offset: 90336},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2642, col: 44, offset: 89633},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2647, col: 57, offset: 89799},
																											alternatives: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 2647, col: 57, offset: 89799},
																													expr: &charClassMatcher{
																														pos:        position{line: 2647, col: 57, offset: 89799},
																														val:        "[^\\r\\n;{}]",
																														chars:      []rune{'\r', '\n', ';', '{', '}'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2647, col: 71, offset: 89813},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 2647, col: 71, offset: 89813},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2647, col: 75, offset: 89817},
																															expr: &charClassMatcher{
																																pos:        position{line: 2647, col: 75, offset: 89817},
																																val:        "[^}]",
																																chars:      []rune{'}'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2647, col: 81, offset: 89823},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			run: (*parser).callonFile140,
																			expr: &seqExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										expr: &litMatcher{
																											pos:        position{line: 2637, col: 27, offset: 89506},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2637, col: 33, offset: 89512},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2636, col: 23, offset: 89477},
																								expr: &anyMatcher{
																									line: 2636, col: 24, offset: 89478,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2096, col: 28, offset: 71338},
										run: (*parser).callonFile151,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonFile152,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 55, offset: 143},
							expr: &seqExpr{
								pos: position{line: 2640, col: 28, offset: 89578},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2640, col: 28, offset: 89578},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2664, col: 37, offset: 90378},
										expr: &litMatcher{
											pos:        position{line: 2664, col: 37, offset: 90378},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2664, col: 43, offset: 90384},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 67, offset: 155},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 74, offset: 162},
								name: "GlobalScope",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 86, offset: 174},
							expr: &seqExpr{
								pos: position{line: 2640, col: 28, offset: 89578},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2640, col: 28, offset: 89578},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2664, col: 37, offset: 90378},
										expr: &litMatcher{
											pos:        position{line: 2664, col: 37, offset: 90378},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2664, col: 43, offset: 90384},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2636, col: 23, offset: 89477},
							expr: &anyMatcher{
								line: 2636, col: 24, offset: 89478,
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 24, col: 1, offset: 608},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 615},
				run: (*parser).callonAnd1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 615},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 24, col: 8, offset: 615},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 619},
							label: "collsI",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 19, offset: 626},
								name: "andAttributes",
							},
						},
						&actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonAnd6,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonAnd8,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andAttributes",
			pos:  position{line: 31, col: 1, offset: 774},
			expr: &choiceExpr{
				pos: position{line: 31, col: 18, offset: 791},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 31, col: 18, offset: 791},
						name: "AttributeCollection",
					},
					&actionExpr{
						pos: position{line: 31, col: 40, offset: 813},
						run: (*parser).callonandAttributes3,
						expr: &andExpr{
							pos: position{line: 31, col: 40, offset: 813},
							expr: &actionExpr{
								pos: position{line: 2642, col: 26, offset: 89615},
								run: (*parser).callonandAttributes5,
								expr: &choiceExpr{
									pos: position{line: 2642, col: 27, offset: 89616},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											run: (*parser).callonandAttributes7,
											expr: &seqExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														expr: &charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2637, col: 27, offset: 89506},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		expr: &litMatcher{
																			pos:        position{line: 2637, col: 27, offset: 89506},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2637, col: 33, offset: 89512},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2636, col: 23, offset: 89477},
																expr: &anyMatcher{
																	line: 2636, col: 24, offset: 89478,
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2642, col: 33, offset: 89622},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2642, col: 39, offset: 89628},
											expr: &seqExpr{
												pos: position{line: 2642, col: 41, offset: 89630},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														expr: &charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&litMatcher{
														pos:        position{line: 2642, col: 44, offset: 89633},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 1375},
						run: (*parser).callonandAttributes24,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 1375},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 44, col: 5, offset: 1375},
									label: "attrsI",
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 12, offset: 1382},
										name: "AttributeCollection",
									},
								},
								&labeledExpr{
									pos:   position{line: 44, col: 32, offset: 1402},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonandAttributes29,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonandAttributes35,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonandAttributes43,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonandAttributes45,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 44, col: 54, offset: 1424},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonandAttributes71,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonandAttributes73,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 69, col: 1, offset: 2498},
			expr: &actionExpr{
				pos: position{line: 69, col: 24, offset: 2521},
				run: (*parser).callonAttributeCollection1,
				expr: &seqExpr{
					pos: position{line: 69, col: 24, offset: 2521},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 69, col: 24, offset: 2521},
							expr: &actionExpr{
								pos: position{line: 72, col: 30, offset: 2694},
								run: (*parser).callonAttributeCollection4,
								expr: &seqExpr{
									pos: position{line: 72, col: 30, offset: 2694},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 72, col: 30, offset: 2694},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 72, col: 33, offset: 2697},
											label: "endI",
											expr: &actionExpr{
												pos: position{line: 2654, col: 8, offset: 90032},
												run: (*parser).callonAttributeCollection9,
												expr: &choiceExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2654, col: 9, offset: 90033},
															expr: &anyMatcher{
																line: 2654, col: 10, offset: 90034,
															},
														},
														&notExpr{
															pos: position{line: 2654, col: 14, offset: 90038},
															expr: &anyMatcher{
																line: 2654, col: 15, offset: 90039,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 51, offset: 2548},
							label: "attrsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 69, col: 58, offset: 2555},
								expr: &choiceExpr{
									pos: position{line: 69, col: 59, offset: 2556},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 83, col: 16, offset: 2919},
											run: (*parser).callonAttributeCollection18,
											expr: &seqExpr{
												pos: position{line: 83, col: 16, offset: 2919},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 83, col: 16, offset: 2919},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&labeledExpr{
														pos:   position{line: 83, col: 20, offset: 2923},
														label: "idI",
														expr: &choiceExpr{
															pos: position{line: 90, col: 20, offset: 3065},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 76, col: 18, offset: 2827},
																	run: (*parser).callonAttributeCollection23,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 76, col: 18, offset: 2827},
																		expr: &charClassMatcher{
																			pos:        position{line: 76, col: 18, offset: 2827},
																			val:        "[^ \\t\\r\\n.#()[]{};]",
																			chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ';'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 90, col: 36, offset: 3081},
																	run: (*parser).callonAttributeCollection26,
																	expr: &actionExpr{
																		pos: position{line: 2654, col: 8, offset: 90032},
																		run: (*parser).callonAttributeCollection27,
																		expr: &choiceExpr{
																			pos: position{line: 2654, col: 9, offset: 90033},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					expr: &anyMatcher{
																						line: 2654, col: 10, offset: 90034,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2654, col: 14, offset: 90038},
																					expr: &anyMatcher{
																						line: 2654, col: 15, offset: 90039,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 104, col: 19, offset: 3346},
											run: (*parser).callonAttributeCollection33,
											expr: &seqExpr{
												pos: position{line: 104, col: 19, offset: 3346},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 104, col: 19, offset: 3346},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&labeledExpr{
														pos:   position{line: 104, col: 23, offset: 3350},
														label: "nameI",
														expr: &choiceExpr{
															pos: position{line: 111, col: 23, offset: 3505},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 76, col: 18, offset: 2827},
																	run: (*parser).callonAttributeCollection38,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 76, col: 18, offset: 2827},
																		expr: &charClassMatcher{
																			pos:        position{line: 76, col: 18, offset: 2827},
																			val:        "[^ \\t\\r\\n.#()[]{};]",
																			chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ';'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 111, col: 39, offset: 3521},
																	run: (*parser).callonAttributeCollection41,
																	expr: &actionExpr{
																		pos: position{line: 2654, col: 8, offset: 90032},
																		run: (*parser).callonAttributeCollection42,
																		expr: &choiceExpr{
																			pos: position{line: 2654, col: 9, offset: 90033},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					expr: &anyMatcher{
																						line: 2654, col: 10, offset: 90034,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2654, col: 14, offset: 90038},
																					expr: &anyMatcher{
																						line: 2654, col: 15, offset: 90039,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 69, col: 90, offset: 2587},
											name: "AttributeList",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 126, col: 1, offset: 3786},
			expr: &actionExpr{
				pos: position{line: 126, col: 18, offset: 3803},
				run: (*parser).callonAttributeList1,
				expr: &seqExpr{
					pos: position{line: 126, col: 18, offset: 3803},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2746, col: 14, offset: 93228},
							run: (*parser).callonAttributeList3,
							expr: &seqExpr{
								pos: position{line: 2746, col: 14, offset: 93228},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonAttributeList5,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2720, col: 18, offset: 92335},
										run: (*parser).callonAttributeList11,
									},
									&actionExpr{
										pos: position{line: 2672, col: 12, offset: 90673},
										run: (*parser).callonAttributeList12,
										expr: &litMatcher{
											pos:        position{line: 2672, col: 12, offset: 90673},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2746, col: 32, offset: 93246},
										expr: &choiceExpr{
											pos: position{line: 2666, col: 20, offset: 90409},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2666, col: 31, offset: 90420},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															run: (*parser).callonAttributeList18,
														},
														&zeroOrOneExpr{
															pos: position{line: 2664, col: 37, offset: 90378},
															expr: &litMatcher{
																pos:        position{line: 2664, col: 37, offset: 90378},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2664, col: 43, offset: 90384},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 28, offset: 3813},
							label: "attributesI",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 40, offset: 3825},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 40, offset: 3825},
									name: "attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 52, offset: 3837},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 134, col: 21, offset: 4062},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2750, col: 12, offset: 93289},
										run: (*parser).callonAttributeList27,
										expr: &seqExpr{
											pos: position{line: 2750, col: 12, offset: 93289},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2750, col: 12, offset: 93289},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2750, col: 15, offset: 93292},
													expr: &seqExpr{
														pos: position{line: 2750, col: 16, offset: 93293},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2750, col: 16, offset: 93293},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2750, col: 20, offset: 93297},
																expr: &choiceExpr{
																	pos: position{line: 2666, col: 20, offset: 90409},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2666, col: 31, offset: 90420},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					run: (*parser).callonAttributeList38,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2664, col: 37, offset: 90378},
																					expr: &litMatcher{
																						pos:        position{line: 2664, col: 37, offset: 90378},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2664, col: 43, offset: 90384},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2750, col: 26, offset: 93303},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2673, col: 12, offset: 90711},
														run: (*parser).callonAttributeList43,
														expr: &litMatcher{
															pos:        position{line: 2673, col: 12, offset: 90711},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonAttributeList45,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 134, col: 31, offset: 4072},
										run: (*parser).callonAttributeList46,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonAttributeList47,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 138, col: 1, offset: 4126},
			expr: &actionExpr{
				pos: position{line: 138, col: 15, offset: 4140},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 138, col: 15, offset: 4140},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 138, col: 15, offset: 4140},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 22, offset: 4147},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 32, offset: 4157},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 138, col: 38, offset: 4163},
								expr: &seqExpr{
									pos: position{line: 138, col: 39, offset: 4164},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 138, col: 39, offset: 4164},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 138, col: 42, offset: 4167},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 138, col: 46, offset: 4171},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).callonattributes15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 138, col: 50, offset: 4175},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 146, col: 1, offset: 4439},
			expr: &choiceExpr{
				pos: position{line: 146, col: 14, offset: 4452},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 165, col: 19, offset: 4961},
						run: (*parser).callonAttribute2,
						expr: &seqExpr{
							pos: position{line: 165, col: 19, offset: 4961},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 165, col: 19, offset: 4961},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 165, col: 24, offset: 4966},
									expr: &seqExpr{
										pos: position{line: 165, col: 26, offset: 4968},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 165, col: 26, offset: 4968},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 165, col: 29, offset: 4971},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 146, col: 31, offset: 4469},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 173, col: 1, offset: 5062},
			expr: &actionExpr{
				pos: position{line: 173, col: 20, offset: 5081},
				run: (*parser).callonSimpleAttribute1,
				expr: &seqExpr{
					pos: position{line: 173, col: 20, offset: 5081},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 173, col: 20, offset: 5081},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 148, col: 18, offset: 4503},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 148, col: 18, offset: 4503},
										run: (*parser).callonSimpleAttribute5,
										expr: &seqExpr{
											pos: position{line: 148, col: 18, offset: 4503},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 148, col: 18, offset: 4503},
													expr: &seqExpr{
														pos: position{line: 148, col: 19, offset: 4504},
														exprs: []any{
															&notExpr{
																pos: position{line: 148, col: 19, offset: 4504},
																expr: &charClassMatcher{
																	pos:        position{line: 148, col: 20, offset: 4505},
																	val:        "[(),=]",
																	chars:      []rune{'(', ')', ',', '='},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&notExpr{
																pos: position{line: 2053, col: 26, offset: 69964},
																expr: &charClassMatcher{
																	pos:        position{line: 2029, col: 27, offset: 68872},
																	val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
																	chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
																	ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&anyMatcher{
																line: 2053, col: 101, offset: 70039,
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 148, col: 51, offset: 4536},
													expr: &seqExpr{
														pos: position{line: 148, col: 53, offset: 4538},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 148, col: 53, offset: 4538},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 148, col: 56, offset: 4541},
																val:        "[\\r\\n=,)]",
																chars:      []rune{'\r', '\n', '=', ',', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 150, col: 5, offset: 4589},
										run: (*parser).callonSimpleAttribute19,
										expr: &oneOrMoreExpr{
											pos: position{line: 150, col: 5, offset: 4589},
											expr: &seqExpr{
												pos: position{line: 150, col: 6, offset: 4590},
												exprs: []any{
													&notExpr{
														pos: position{line: 150, col: 6, offset: 4590},
														expr: &seqExpr{
															pos: position{line: 150, col: 8, offset: 4592},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 150, col: 8, offset: 4592},
																	expr: &charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 150, col: 11, offset: 4595},
																	val:        "[,=)]",
																	chars:      []rune{',', '=', ')'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 150, col: 18, offset: 4602},
														val:        "[^\\r\\t(),=]",
														chars:      []rune{'\r', '\t', '(', ')', ',', '='},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 40, offset: 5101},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 173, col: 43, offset: 5104},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 48, offset: 5109},
								name: "simpleAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "simpleAttributeValue",
			pos:  position{line: 180, col: 1, offset: 5242},
			expr: &choiceExpr{
				pos: position{line: 180, col: 25, offset: 5266},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 180, col: 25, offset: 5266},
						run: (*parser).callonsimpleAttributeValue2,
						expr: &andExpr{
							pos: position{line: 180, col: 25, offset: 5266},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 26, offset: 5267},
								val:        "[,)]",
								chars:      []rune{',', ')'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5317},
						run: (*parser).callonsimpleAttributeValue5,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5317},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 182, col: 5, offset: 5317},
									label: "assignI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonsimpleAttributeValue8,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 182, col: 17, offset: 5329},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 182, col: 21, offset: 5333},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonsimpleAttributeValue19,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 25, offset: 5337},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 30, offset: 5342},
										name: "AttributeValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 194, col: 1, offset: 5699},
			expr: &choiceExpr{
				pos: position{line: 194, col: 19, offset: 5717},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 194, col: 19, offset: 5717},
						name: "TypedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 41, offset: 5739},
						name: "ComponentCallAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 71, offset: 5769},
						name: "Expression",
					},
					&actionExpr{
						pos: position{line: 194, col: 84, offset: 5782},
						run: (*parser).callonAttributeValue5,
						expr: &actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonAttributeValue6,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypedAttributeValue",
			pos:  position{line: 214, col: 1, offset: 6297},
			expr: &actionExpr{
				pos: position{line: 214, col: 24, offset: 6320},
				run: (*parser).callonTypedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 214, col: 24, offset: 6320},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 214, col: 24, offset: 6320},
							label: "typeI",
							expr: &choiceExpr{
								pos: position{line: 228, col: 18, offset: 6778},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 228, col: 18, offset: 6778},
										run: (*parser).callonTypedAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 228, col: 18, offset: 6778},
											val:        "plain",
											ignoreCase: false,
											want:       "\"plain\"",
										},
									},
									&actionExpr{
										pos: position{line: 230, col: 5, offset: 6823},
										run: (*parser).callonTypedAttributeValue7,
										expr: &litMatcher{
											pos:        position{line: 230, col: 5, offset: 6823},
											val:        "css",
											ignoreCase: false,
											want:       "\"css\"",
										},
									},
									&actionExpr{
										pos: position{line: 232, col: 5, offset: 6864},
										run: (*parser).callonTypedAttributeValue9,
										expr: &litMatcher{
											pos:        position{line: 232, col: 5, offset: 6864},
											val:        "js",
											ignoreCase: false,
											want:       "\"js\"",
										},
									},
									&actionExpr{
										pos: position{line: 234, col: 5, offset: 6903},
										run: (*parser).callonTypedAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 234, col: 5, offset: 6903},
											val:        "url",
											ignoreCase: false,
											want:       "\"url\"",
										},
									},
									&actionExpr{
										pos: position{line: 236, col: 5, offset: 6944},
										run: (*parser).callonTypedAttributeValue13,
										expr: &litMatcher{
											pos:        position{line: 236, col: 5, offset: 6944},
											val:        "urlList",
											ignoreCase: false,
											want:       "\"urlList\"",
										},
									},
									&actionExpr{
										pos: position{line: 238, col: 5, offset: 6993},
										run: (*parser).callonTypedAttributeValue15,
										expr: &litMatcher{
											pos:        position{line: 238, col: 5, offset: 6993},
											val:        "resourceURL",
											ignoreCase: false,
											want:       "\"resourceURL\"",
										},
									},
									&actionExpr{
										pos: position{line: 240, col: 5, offset: 7050},
										run: (*parser).callonTypedAttributeValue17,
										expr: &litMatcher{
											pos:        position{line: 240, col: 5, offset: 7050},
											val:        "srcset",
											ignoreCase: false,
											want:       "\"srcset\"",
										},
									},
									&actionExpr{
										pos: position{line: 242, col: 5, offset: 7097},
										run: (*parser).callonTypedAttributeValue19,
										expr: &litMatcher{
											pos:        position{line: 242, col: 5, offset: 7097},
											val:        "unsafe",
											ignoreCase: false,
											want:       "\"unsafe\"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 214, col: 44, offset: 6340},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 47, offset: 6343},
							label: "lParenI",
							expr: &actionExpr{
								pos: position{line: 2746, col: 14, offset: 93228},
								run: (*parser).callonTypedAttributeValue24,
								expr: &seqExpr{
									pos: position{line: 2746, col: 14, offset: 93228},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonTypedAttributeValue26,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2720, col: 18, offset: 92335},
											run: (*parser).callonTypedAttributeValue32,
										},
										&actionExpr{
											pos: position{line: 2672, col: 12, offset: 90673},
											run: (*parser).callonTypedAttributeValue33,
											expr: &litMatcher{
												pos:        position{line: 2672, col: 12, offset: 90673},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2746, col: 32, offset: 93246},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).callonTypedAttributeValue39,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 65, offset: 6361},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 70, offset: 6366},
								name: "typedAttributeValueValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 95, offset: 6391},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 224, col: 27, offset: 6696},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2750, col: 12, offset: 93289},
										run: (*parser).callonTypedAttributeValue47,
										expr: &seqExpr{
											pos: position{line: 2750, col: 12, offset: 93289},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2750, col: 12, offset: 93289},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2750, col: 15, offset: 93292},
													expr: &seqExpr{
														pos: position{line: 2750, col: 16, offset: 93293},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2750, col: 16, offset: 93293},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2750, col: 20, offset: 93297},
																expr: &choiceExpr{
																	pos: position{line: 2666, col: 20, offset: 90409},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2666, col: 31, offset: 90420},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					run: (*parser).callonTypedAttributeValue58,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2664, col: 37, offset: 90378},
																					expr: &litMatcher{
																						pos:        position{line: 2664, col: 37, offset: 90378},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2664, col: 43, offset: 90384},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2750, col: 26, offset: 93303},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2673, col: 12, offset: 90711},
														run: (*parser).callonTypedAttributeValue63,
														expr: &litMatcher{
															pos:        position{line: 2673, col: 12, offset: 90711},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonTypedAttributeValue65,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 224, col: 37, offset: 6706},
										run: (*parser).callonTypedAttributeValue66,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonTypedAttributeValue67,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typedAttributeValueValue",
			pos:  position{line: 246, col: 1, offset: 7143},
			expr: &choiceExpr{
				pos: position{line: 246, col: 29, offset: 7171},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 246, col: 29, offset: 7171},
						name: "ComponentCallAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 59, offset: 7201},
						name: "Expression",
					},
				},
			},
		},
		{
			name: "ComponentCallAttributeValue",
			pos:  position{line: 252, col: 1, offset: 7254},
			expr: &actionExpr{
				pos: position{line: 252, col: 32, offset: 7285},
				run: (*parser).callonComponentCallAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 252, col: 32, offset: 7285},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 252, col: 32, offset: 7285},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&stateCodeExpr{
							pos: position{line: 2786, col: 16, offset: 94324},
							run: (*parser).callonComponentCallAttributeValue4,
						},
						&labeledExpr{
							pos:   position{line: 252, col: 48, offset: 7301},
							label: "headerI",
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 56, offset: 7309},
								name: "ComponentCallHeader",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2793, col: 14, offset: 94423},
							run: (*parser).callonComponentCallAttributeValue7,
						},
						&labeledExpr{
							pos:   position{line: 252, col: 86, offset: 7339},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 252, col: 93, offset: 7346},
								expr: &ruleRefExpr{
									pos:  position{line: 252, col: 93, offset: 7346},
									name: "InterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 275, col: 1, offset: 8059},
			expr: &actionExpr{
				pos: position{line: 275, col: 9, offset: 8067},
				run: (*parser).callonType1,
				expr: &labeledExpr{
					pos:   position{line: 275, col: 9, offset: 8067},
					label: "typeI",
					expr: &ruleRefExpr{
						pos:  position{line: 275, col: 15, offset: 8073},
						name: "goType",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 315, col: 1, offset: 9207},
			expr: &choiceExpr{
				pos: position{line: 315, col: 9, offset: 9215},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 315, col: 9, offset: 9215},
						run: (*parser).callonBody2,
						expr: &seqExpr{
							pos: position{line: 315, col: 9, offset: 9215},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 315, col: 9, offset: 9215},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 315, col: 12, offset: 9218},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 18, offset: 9224},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 317, col: 5, offset: 9257},
						run: (*parser).callonBody8,
						expr: &actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonBody9,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonBody11,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 329, col: 5, offset: 9667},
						run: (*parser).callonBody28,
						expr: &seqExpr{
							pos: position{line: 329, col: 5, offset: 9667},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 329, col: 5, offset: 9667},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 329, col: 8, offset: 9670},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonBody33,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 329, col: 19, offset: 9681},
									expr: &charClassMatcher{
										pos:        position{line: 329, col: 19, offset: 9681},
										val:        "[^\\r\\n;[{}]",
										chars:      []rune{'\r', '\n', ';', '[', '{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 329, col: 32, offset: 9694},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonBody42,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 329, col: 41, offset: 9703},
									expr: &charClassMatcher{
										pos:        position{line: 329, col: 42, offset: 9704},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 329, col: 47, offset: 9709},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 53, offset: 9715},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 9837},
						run: (*parser).callonBody52,
						expr: &seqExpr{
							pos: position{line: 331, col: 5, offset: 9837},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 331, col: 5, offset: 9837},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 331, col: 8, offset: 9840},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonBody57,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonBody63,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonBody71,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonBody73,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 331, col: 30, offset: 9862},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonBody99,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonBody101,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalBody",
			pos:  position{line: 335, col: 1, offset: 9983},
			expr: &choiceExpr{
				pos: position{line: 335, col: 17, offset: 9999},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 335, col: 17, offset: 9999},
						exprs: []any{
							&zeroOrMoreExpr{
								pos: position{line: 335, col: 17, offset: 9999},
								expr: &charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 335, col: 20, offset: 10002},
								name: "body",
							},
						},
					},
					&actionExpr{
						pos: position{line: 335, col: 27, offset: 10009},
						run: (*parser).callonOptionalBody6,
						expr: &actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonOptionalBody7,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonOptionalBody9,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 10039},
						run: (*parser).callonOptionalBody26,
						expr: &seqExpr{
							pos: position{line: 337, col: 5, offset: 10039},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 337, col: 5, offset: 10039},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 337, col: 8, offset: 10042},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonOptionalBody31,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 337, col: 19, offset: 10053},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 19, offset: 10053},
										val:        "[^\\r\\n;[{}]",
										chars:      []rune{'\r', '\n', ';', '[', '{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 337, col: 32, offset: 10066},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonOptionalBody40,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 337, col: 41, offset: 10075},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 42, offset: 10076},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 337, col: 47, offset: 10081},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 337, col: 53, offset: 10087},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 339, col: 5, offset: 10209},
						run: (*parser).callonOptionalBody50,
						expr: &seqExpr{
							pos: position{line: 339, col: 5, offset: 10209},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 339, col: 5, offset: 10209},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 339, col: 8, offset: 10212},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonOptionalBody55,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonOptionalBody61,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonOptionalBody69,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonOptionalBody71,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 339, col: 30, offset: 10234},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonOptionalBody97,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonOptionalBody99,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "body",
			pos:  position{line: 343, col: 1, offset: 10367},
			expr: &choiceExpr{
				pos: position{line: 343, col: 9, offset: 10375},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 343, col: 9, offset: 10375},
						name: "Scope",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 17, offset: 10383},
						name: "BracketText",
					},
				},
			},
		},
		{
			name: "GlobalScope",
			pos:  position{line: 349, col: 1, offset: 10576},
			expr: &actionExpr{
				pos: position{line: 349, col: 16, offset: 10591},
				run: (*parser).callonGlobalScope1,
				expr: &labeledExpr{
					pos:   position{line: 349, col: 16, offset: 10591},
					label: "itmsI",
					expr: &zeroOrMoreExpr{
						pos: position{line: 349, col: 22, offset: 10597},
						expr: &ruleRefExpr{
							pos:  position{line: 349, col: 22, offset: 10597},
							name: "globalScopeItem",
						},
					},
				},
			},
		},
		{
			name: "globalScopeItem",
			pos:  position{line: 353, col: 1, offset: 10685},
			expr: &actionExpr{
				pos: position{line: 353, col: 20, offset: 10704},
				run: (*parser).callonglobalScopeItem1,
				expr: &seqExpr{
					pos: position{line: 353, col: 20, offset: 10704},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 20, offset: 10704},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonglobalScopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 24, offset: 10708},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 353, col: 30, offset: 10714},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 384, col: 14, offset: 11797},
										run: (*parser).callonglobalScopeItem13,
										expr: &actionExpr{
											pos: position{line: 2676, col: 12, offset: 90788},
											run: (*parser).callonglobalScopeItem14,
											expr: &litMatcher{
												pos:        position{line: 2676, col: 12, offset: 90788},
												val:        "}",
												ignoreCase: false,
												want:       "\"}\"",
											},
										},
									},
									&actionExpr{
										pos: position{line: 2114, col: 17, offset: 71952},
										run: (*parser).callonglobalScopeItem16,
										expr: &seqExpr{
											pos: position{line: 2114, col: 17, offset: 71952},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2114, col: 17, offset: 71952},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 2114, col: 26, offset: 71961},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2114, col: 29, offset: 71964},
													label: "specI",
													expr: &actionExpr{
														pos: position{line: 2167, col: 15, offset: 73537},
														run: (*parser).callonglobalScopeItem22,
														expr: &seqExpr{
															pos: position{line: 2167, col: 15, offset: 73537},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2167, col: 15, offset: 73537},
																	label: "aliasI",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 2167, col: 22, offset: 73544},
																		expr: &choiceExpr{
																			pos: position{line: 2175, col: 16, offset: 73760},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2175, col: 16, offset: 73760},
																					run: (*parser).callonglobalScopeItem27,
																					expr: &seqExpr{
																						pos: position{line: 2175, col: 16, offset: 73760},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 2175, col: 16, offset: 73760},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2175, col: 20, offset: 73764},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2177, col: 5, offset: 73830},
																					run: (*parser).callonglobalScopeItem32,
																					expr: &seqExpr{
																						pos: position{line: 2177, col: 5, offset: 73830},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2177, col: 5, offset: 73830},
																								label: "identI",
																								expr: &actionExpr{
																									pos: position{line: 263, col: 10, offset: 7729},
																									run: (*parser).callonglobalScopeItem35,
																									expr: &labeledExpr{
																										pos:   position{line: 263, col: 10, offset: 7729},
																										label: "identI",
																										expr: &seqExpr{
																											pos: position{line: 1577, col: 17, offset: 52172},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1560, col: 20, offset: 51927},
																													val:        "[_\\pL]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1577, col: 26, offset: 52181},
																													expr: &charClassMatcher{
																														pos:        position{line: 1560, col: 20, offset: 51927},
																														val:        "[_\\pL\\pNd]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2177, col: 18, offset: 73843},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2179, col: 5, offset: 73875},
																					run: (*parser).callonglobalScopeItem43,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2179, col: 5, offset: 73875},
																						expr: &seqExpr{
																							pos: position{line: 2179, col: 6, offset: 73876},
																							exprs: []any{
																								&notExpr{
																									pos: position{line: 2179, col: 6, offset: 73876},
																									expr: &seqExpr{
																										pos: position{line: 2179, col: 8, offset: 73878},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2179, col: 8, offset: 73878},
																												expr: &charClassMatcher{
																													pos:        position{line: 2663, col: 37, offset: 90336},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2179, col: 11, offset: 73881},
																												val:        "[`\"]",
																												chars:      []rune{'`', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 2179, col: 17, offset: 73887,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2167, col: 35, offset: 73557},
																	label: "pathI",
																	expr: &choiceExpr{
																		pos: position{line: 283, col: 17, offset: 8355},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 289, col: 20, offset: 8440},
																				run: (*parser).callonglobalScopeItem54,
																				expr: &seqExpr{
																					pos: position{line: 289, col: 20, offset: 8440},
																					exprs: []any{
																						&actionExpr{
																							pos: position{line: 2654, col: 8, offset: 90032},
																							run: (*parser).callonglobalScopeItem56,
																							expr: &choiceExpr{
																								pos: position{line: 2654, col: 9, offset: 90033},
																								alternatives: []any{
																									&andExpr{
																										pos: position{line: 2654, col: 9, offset: 90033},
																										expr: &anyMatcher{
																											line: 2654, col: 10, offset: 90034,
																										},
																									},
																									&notExpr{
																										pos: position{line: 2654, col: 14, offset: 90038},
																										expr: &anyMatcher{
																											line: 2654, col: 15, offset: 90039,
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 2720, col: 18, offset: 92335},
																							run: (*parser).callonglobalScopeItem62,
																						},
																						&litMatcher{
																							pos:        position{line: 1439, col: 29, offset: 47484},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 289, col: 35, offset: 8455},
																							label: "contentsI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 289, col: 45, offset: 8465},
																								expr: &actionExpr{
																									pos: position{line: 1461, col: 18, offset: 48190},
																									run: (*parser).callonglobalScopeItem66,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1461, col: 18, offset: 48190},
																										expr: &choiceExpr{
																											pos: position{line: 1461, col: 19, offset: 48191},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 1461, col: 19, offset: 48191},
																													val:        "##",
																													ignoreCase: false,
																													want:       "\"##\"",
																												},
																												&seqExpr{
																													pos: position{line: 1461, col: 26, offset: 48198},
																													exprs: []any{
																														&notExpr{
																															pos: position{line: 1461, col: 26, offset: 48198},
																															expr: &choiceExpr{
																																pos: position{line: 1548, col: 37, offset: 51606},
																																alternatives: []any{
																																	&litMatcher{
																																		pos:        position{line: 1548, col: 37, offset: 51606},
																																		val:        "#%",
																																		ignoreCase: false,
																																		want:       "\"#%\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1548, col: 44, offset: 51613},
																																		val:        "#{",
																																		ignoreCase: false,
																																		want:       "\"#{\"",
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2800, col: 17, offset: 94525},
																															alternatives: []any{
																																&seqExpr{
																																	pos: position{line: 2800, col: 17, offset: 94525},
																																	exprs: []any{
																																		&andCodeExpr{
																																			pos: position{line: 2800, col: 17, offset: 94525},
																																			run: (*parser).callonglobalScopeItem77,
																																		},
																																		&notExpr{
																																			pos: position{line: 2800, col: 50, offset: 94558},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2800, col: 51, offset: 94559},
																																				val:        "[\\r\\n]",
																																				chars:      []rune{'\r', '\n'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&andCodeExpr{
																																	pos: position{line: 2800, col: 60, offset: 94568},
																																	run: (*parser).callonglobalScopeItem80,
																																},
																															},
																														},
																														&charClassMatcher{
																															pos:        position{line: 1914, col: 27, offset: 65192},
																															val:        "[^`]",
																															chars:      []rune{'`'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 289, col: 60, offset: 8480},
																							label: "endI",
																							expr: &choiceExpr{
																								pos: position{line: 1440, col: 17, offset: 47504},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1440, col: 17, offset: 47504},
																										run: (*parser).callonglobalScopeItem84,
																										expr: &seqExpr{
																											pos: position{line: 1440, col: 17, offset: 47504},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 1440, col: 17, offset: 47504},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&stateCodeExpr{
																													pos: position{line: 2726, col: 13, offset: 92468},
																													run: (*parser).callonglobalScopeItem87,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1442, col: 5, offset: 47546},
																										run: (*parser).callonglobalScopeItem88,
																										expr: &actionExpr{
																											pos: position{line: 2654, col: 8, offset: 90032},
																											run: (*parser).callonglobalScopeItem89,
																											expr: &choiceExpr{
																												pos: position{line: 2654, col: 9, offset: 90033},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2654, col: 9, offset: 90033},
																														expr: &anyMatcher{
																															line: 2654, col: 10, offset: 90034,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2654, col: 14, offset: 90038},
																														expr: &anyMatcher{
																															line: 2654, col: 15, offset: 90039,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 302, col: 28, offset: 8751},
																				run: (*parser).callonglobalScopeItem95,
																				expr: &seqExpr{
																					pos: position{line: 302, col: 28, offset: 8751},
																					exprs: []any{
																						&actionExpr{
																							pos: position{line: 2654, col: 8, offset: 90032},
																							run: (*parser).callonglobalScopeItem97,
																							expr: &choiceExpr{
																								pos: position{line: 2654, col: 9, offset: 90033},
																								alternatives: []any{
																									&andExpr{
																										pos: position{line: 2654, col: 9, offset: 90033},
																										expr: &anyMatcher{
																											line: 2654, col: 10, offset: 90034,
																										},
																									},
																									&notExpr{
																										pos: position{line: 2654, col: 14, offset: 90038},
																										expr: &anyMatcher{
																											line: 2654, col: 15, offset: 90039,
																										},
																									},
																								},
																							},
																						},
																						&stateCodeExpr{
																							pos: position{line: 2720, col: 18, offset: 92335},
																							run: (*parser).callonglobalScopeItem103,
																						},
																						&litMatcher{
																							pos:        position{line: 1408, col: 37, offset: 46600},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 302, col: 51, offset: 8774},
																							label: "contentsI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 302, col: 61, offset: 8784},
																								expr: &actionExpr{
																									pos: position{line: 1455, col: 26, offset: 47943},
																									run: (*parser).callonglobalScopeItem107,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1455, col: 26, offset: 47943},
																										expr: &choiceExpr{
																											pos: position{line: 1455, col: 27, offset: 47944},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 1455, col: 27, offset: 47944},
																													val:        "##",
																													ignoreCase: false,
																													want:       "\"##\"",
																												},
																												&seqExpr{
																													pos: position{line: 1455, col: 34, offset: 47951},
																													exprs: []any{
																														&notExpr{
																															pos: position{line: 1455, col: 34, offset: 47951},
																															expr: &choiceExpr{
																																pos: position{line: 1548, col: 37, offset: 51606},
																																alternatives: []any{
																																	&litMatcher{
																																		pos:        position{line: 1548, col: 37, offset: 51606},
																																		val:        "#%",
																																		ignoreCase: false,
																																		want:       "\"#%\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1548, col: 44, offset: 51613},
																																		val:        "#{",
																																		ignoreCase: false,
																																		want:       "\"#{\"",
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 1455, col: 69, offset: 47986},
																															alternatives: []any{
																																&seqExpr{
																																	pos: position{line: 1672, col: 19, offset: 55641},
																																	exprs: []any{
																																		&litMatcher{
																																			pos:        position{line: 1672, col: 19, offset: 55641},
																																			val:        "\\u",
																																			ignoreCase: false,
																																			want:       "\"\\\\u\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1673, col: 5, offset: 55700},
																																	run: (*parser).callonglobalScopeItem123,
																																	expr: &seqExpr{
																																		pos: position{line: 1673, col: 5, offset: 55700},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1673, col: 5, offset: 55700},
																																				val:        "\\u",
																																				ignoreCase: false,
																																				want:       "\"\\\\u\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1673, col: 14, offset: 55709},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1673, col: 26, offset: 55721},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1673, col: 38, offset: 55733},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1673, col: 50, offset: 55745},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 1702, col: 16, offset: 56877},
																																	exprs: []any{
																																		&litMatcher{
																																			pos:        position{line: 1702, col: 16, offset: 56877},
																																			val:        "\\U",
																																			ignoreCase: false,
																																			want:       "\"\\\\U\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1703, col: 5, offset: 56980},
																																	run: (*parser).callonglobalScopeItem144,
																																	expr: &seqExpr{
																																		pos: position{line: 1703, col: 5, offset: 56980},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1703, col: 5, offset: 56980},
																																				val:        "\\U",
																																				ignoreCase: false,
																																				want:       "\"\\\\U\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 14, offset: 56989},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 26, offset: 57001},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 38, offset: 57013},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 50, offset: 57025},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 62, offset: 57037},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 74, offset: 57049},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 86, offset: 57061},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1703, col: 98, offset: 57073},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 1930, col: 36, offset: 65917},
																																	exprs: []any{
																																		&litMatcher{
																																			pos:        position{line: 1930, col: 36, offset: 65917},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1930, col: 41, offset: 65922},
																																			val:        "[abfnrtv\\\\\"]",
																																			chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&charClassMatcher{
																																	pos:        position{line: 1928, col: 38, offset: 65809},
																																	val:        "[^\"\\\\\\n]",
																																	chars:      []rune{'"', '\\', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																																&seqExpr{
																																	pos: position{line: 1653, col: 24, offset: 54901},
																																	exprs: []any{
																																		&litMatcher{
																																			pos:        position{line: 1653, col: 24, offset: 54901},
																																			val:        "\\",
																																			ignoreCase: false,
																																			want:       "\"\\\\\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1570, col: 19, offset: 52097},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1570, col: 19, offset: 52097},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1570, col: 19, offset: 52097},
																																			val:        "[0-7]",
																																			ranges:     []rune{'0', '7'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&seqExpr{
																																	pos: position{line: 1654, col: 24, offset: 54968},
																																	exprs: []any{
																																		&litMatcher{
																																			pos:        position{line: 1654, col: 24, offset: 54968},
																																			val:        "\\x",
																																			ignoreCase: false,
																																			want:       "\"\\\\x\"",
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 1571, col: 19, offset: 52121},
																																			val:        "[0-9A-Fa-f]",
																																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1655, col: 5, offset: 55005},
																																	run: (*parser).callonglobalScopeItem176,
																																	expr: &seqExpr{
																																		pos: position{line: 1655, col: 5, offset: 55005},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1655, col: 5, offset: 55005},
																																				val:        "\\x",
																																				ignoreCase: false,
																																				want:       "\"\\\\x\"",
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1655, col: 14, offset: 55014},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&zeroOrOneExpr{
																																				pos: position{line: 1655, col: 26, offset: 55026},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1571, col: 19, offset: 52121},
																																					val:        "[0-9A-Fa-f]",
																																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1817, col: 37, offset: 61638},
																																	run: (*parser).callonglobalScopeItem183,
																																	expr: &seqExpr{
																																		pos: position{line: 1817, col: 37, offset: 61638},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1817, col: 37, offset: 61638},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1841, col: 5, offset: 62653},
																																	run: (*parser).callonglobalScopeItem194,
																																	expr: &seqExpr{
																																		pos: position{line: 1841, col: 5, offset: 62653},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1841, col: 5, offset: 62653},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1862, col: 5, offset: 63493},
																																	run: (*parser).callonglobalScopeItem201,
																																	expr: &seqExpr{
																																		pos: position{line: 1862, col: 5, offset: 63493},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1862, col: 5, offset: 63493},
																																				val:        "\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 1571, col: 19, offset: 52121},
																																				val:        "[0-9A-Fa-f]",
																																				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1880, col: 5, offset: 64177},
																																	run: (*parser).callonglobalScopeItem206,
																																	expr: &litMatcher{
																																		pos:        position{line: 1880, col: 5, offset: 64177},
																																		val:        "\\",
																																		ignoreCase: false,
																																		want:       "\"\\\\\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 302, col: 84, offset: 8807},
																							label: "endI",
																							expr: &choiceExpr{
																								pos: position{line: 1409, col: 25, offset: 46628},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1409, col: 25, offset: 46628},
																										run: (*parser).callonglobalScopeItem210,
																										expr: &seqExpr{
																											pos: position{line: 1409, col: 25, offset: 46628},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 1409, col: 25, offset: 46628},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&stateCodeExpr{
																													pos: position{line: 2726, col: 13, offset: 92468},
																													run: (*parser).callonglobalScopeItem213,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1411, col: 5, offset: 46670},
																										run: (*parser).callonglobalScopeItem214,
																										expr: &actionExpr{
																											pos: position{line: 2654, col: 8, offset: 90032},
																											run: (*parser).callonglobalScopeItem215,
																											expr: &choiceExpr{
																												pos: position{line: 2654, col: 9, offset: 90033},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2654, col: 9, offset: 90033},
																														expr: &anyMatcher{
																															line: 2654, col: 10, offset: 90034,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2654, col: 14, offset: 90038},
																														expr: &anyMatcher{
																															line: 2654, col: 15, offset: 90039,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonglobalScopeItem221,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonglobalScopeItem223,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2642, col: 26, offset: 89615},
													run: (*parser).callonglobalScopeItem240,
													expr: &choiceExpr{
														pos: position{line: 2642, col: 27, offset: 89616},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																run: (*parser).callonglobalScopeItem242,
																expr: &seqExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2637, col: 27, offset: 89506},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							expr: &litMatcher{
																								pos:        position{line: 2637, col: 27, offset: 89506},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2637, col: 33, offset: 89512},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2636, col: 23, offset: 89477},
																					expr: &anyMatcher{
																						line: 2636, col: 24, offset: 89478,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 33, offset: 89622},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2642, col: 39, offset: 89628},
																expr: &seqExpr{
																	pos: position{line: 2642, col: 41, offset: 89630},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2642, col: 41, offset: 89630},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2642, col: 44, offset: 89633},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2121, col: 16, offset: 72133},
										run: (*parser).callonglobalScopeItem259,
										expr: &seqExpr{
											pos: position{line: 2121, col: 16, offset: 72133},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2121, col: 16, offset: 72133},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2121, col: 25, offset: 72142},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2121, col: 28, offset: 72145},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2746, col: 14, offset: 93228},
														run: (*parser).callonglobalScopeItem265,
														expr: &seqExpr{
															pos: position{line: 2746, col: 14, offset: 93228},
															exprs: []any{
																&actionExpr{
																	pos: position{line: 2654, col: 8, offset: 90032},
																	run: (*parser).callonglobalScopeItem267,
																	expr: &choiceExpr{
																		pos: position{line: 2654, col: 9, offset: 90033},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				expr: &anyMatcher{
																					line: 2654, col: 10, offset: 90034,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2654, col: 14, offset: 90038},
																				expr: &anyMatcher{
																					line: 2654, col: 15, offset: 90039,
																				},
																			},
																		},
																	},
																},
																&stateCodeExpr{
																	pos: position{line: 2720, col: 18, offset: 92335},
																	run: (*parser).callonglobalScopeItem273,
																},
																&actionExpr{
																	pos: position{line: 2672, col: 12, offset: 90673},
																	run: (*parser).callonglobalScopeItem274,
																	expr: &litMatcher{
																		pos:        position{line: 2672, col: 12, offset: 90673},
																		val:        "(",
																		ignoreCase: false,
																		want:       "\"(\"",
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2746, col: 32, offset: 93246},
																	expr: &choiceExpr{
																		pos: position{line: 2666, col: 20, offset: 90409},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2666, col: 31, offset: 90420},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2666, col: 31, offset: 90420},
																						run: (*parser).callonglobalScopeItem280,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2664, col: 37, offset: 90378},
																						expr: &litMatcher{
																							pos:        position{line: 2664, col: 37, offset: 90378},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2664, col: 43, offset: 90384},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2121, col: 45, offset: 72162},
													label: "itmsI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2121, col: 51, offset: 72168},
														expr: &actionExpr{
															pos: position{line: 2163, col: 20, offset: 73444},
															run: (*parser).callonglobalScopeItem286,
															expr: &seqExpr{
																pos: position{line: 2163, col: 20, offset: 73444},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2163, col: 20, offset: 73444},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).callonglobalScopeItem292,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2163, col: 24, offset: 73448},
																		label: "itmI",
																		expr: &choiceExpr{
																			pos: position{line: 2163, col: 30, offset: 73454},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 477, col: 17, offset: 15436},
																					run: (*parser).callonglobalScopeItem298,
																					expr: &seqExpr{
																						pos: position{line: 477, col: 17, offset: 15436},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 477, col: 17, offset: 15436},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 477, col: 22, offset: 15441},
																								expr: &litMatcher{
																									pos:        position{line: 477, col: 23, offset: 15442},
																									val:        "-",
																									ignoreCase: false,
																									want:       "\"-\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 477, col: 27, offset: 15446},
																								label: "textI",
																								expr: &seqExpr{
																									pos: position{line: 477, col: 34, offset: 15453},
																									exprs: []any{
																										&notExpr{
																											pos: position{line: 477, col: 34, offset: 15453},
																											expr: &actionExpr{
																												pos: position{line: 2637, col: 23, offset: 89502},
																												run: (*parser).callonglobalScopeItem306,
																												expr: &seqExpr{
																													pos: position{line: 2637, col: 23, offset: 89502},
																													exprs: []any{
																														&zeroOrMoreExpr{
																															pos: position{line: 2637, col: 23, offset: 89502},
																															expr: &charClassMatcher{
																																pos:        position{line: 2663, col: 37, offset: 90336},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2637, col: 27, offset: 89506},
																															alternatives: []any{
																																&seqExpr{
																																	pos: position{line: 2637, col: 27, offset: 89506},
																																	exprs: []any{
																																		&zeroOrOneExpr{
																																			pos: position{line: 2637, col: 27, offset: 89506},
																																			expr: &litMatcher{
																																				pos:        position{line: 2637, col: 27, offset: 89506},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2637, col: 33, offset: 89512},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2636, col: 23, offset: 89477},
																																	expr: &anyMatcher{
																																		line: 2636, col: 24, offset: 89478,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&anyMatcher{
																											line: 477, col: 39, offset: 15458,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								run: (*parser).callonglobalScopeItem318,
																								expr: &seqExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2637, col: 23, offset: 89502},
																											expr: &charClassMatcher{
																												pos:        position{line: 2663, col: 37, offset: 90336},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2637, col: 27, offset: 89506},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2637, col: 27, offset: 89506},
																															expr: &litMatcher{
																																pos:        position{line: 2637, col: 27, offset: 89506},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2637, col: 33, offset: 89512},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2636, col: 23, offset: 89477},
																													expr: &anyMatcher{
																														line: 2636, col: 24, offset: 89478,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2167, col: 15, offset: 73537},
																					run: (*parser).callonglobalScopeItem329,
																					expr: &seqExpr{
																						pos: position{line: 2167, col: 15, offset: 73537},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2167, col: 15, offset: 73537},
																								label: "aliasI",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 2167, col: 22, offset: 73544},
																									expr: &choiceExpr{
																										pos: position{line: 2175, col: 16, offset: 73760},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 2175, col: 16, offset: 73760},
																												run: (*parser).callonglobalScopeItem334,
																												expr: &seqExpr{
																													pos: position{line: 2175, col: 16, offset: 73760},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 2175, col: 16, offset: 73760},
																															val:        ".",
																															ignoreCase: false,
																															want:       "\".\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2175, col: 20, offset: 73764},
																															expr: &charClassMatcher{
																																pos:        position{line: 2663, col: 37, offset: 90336},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2177, col: 5, offset: 73830},
																												run: (*parser).callonglobalScopeItem339,
																												expr: &seqExpr{
																													pos: position{line: 2177, col: 5, offset: 73830},
																													exprs: []any{
																														&labeledExpr{
																															pos:   position{line: 2177, col: 5, offset: 73830},
																															label: "identI",
																															expr: &actionExpr{
																																pos: position{line: 263, col: 10, offset: 7729},
																																run: (*parser).callonglobalScopeItem342,
																																expr: &labeledExpr{
																																	pos:   position{line: 263, col: 10, offset: 7729},
																																	label: "identI",
																																	expr: &seqExpr{
																																		pos: position{line: 1577, col: 17, offset: 52172},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 1560, col: 20, offset: 51927},
																																				val:        "[_\\pL]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1577, col: 26, offset: 52181},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1560, col: 20, offset: 51927},
																																					val:        "[_\\pL\\pNd]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2177, col: 18, offset: 73843},
																															expr: &charClassMatcher{
																																pos:        position{line: 2663, col: 37, offset: 90336},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2179, col: 5, offset: 73875},
																												run: (*parser).callonglobalScopeItem350,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2179, col: 5, offset: 73875},
																													expr: &seqExpr{
																														pos: position{line: 2179, col: 6, offset: 73876},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2179, col: 6, offset: 73876},
																																expr: &seqExpr{
																																	pos: position{line: 2179, col: 8, offset: 73878},
																																	exprs: []any{
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2179, col: 8, offset: 73878},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2663, col: 37, offset: 90336},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2179, col: 11, offset: 73881},
																																			val:        "[`\"]",
																																			chars:      []rune{'`', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&anyMatcher{
																																line: 2179, col: 17, offset: 73887,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2167, col: 35, offset: 73557},
																								label: "pathI",
																								expr: &choiceExpr{
																									pos: position{line: 283, col: 17, offset: 8355},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 289, col: 20, offset: 8440},
																											run: (*parser).callonglobalScopeItem361,
																											expr: &seqExpr{
																												pos: position{line: 289, col: 20, offset: 8440},
																												exprs: []any{
																													&actionExpr{
																														pos: position{line: 2654, col: 8, offset: 90032},
																														run: (*parser).callonglobalScopeItem363,
																														expr: &choiceExpr{
																															pos: position{line: 2654, col: 9, offset: 90033},
																															alternatives: []any{
																																&andExpr{
																																	pos: position{line: 2654, col: 9, offset: 90033},
																																	expr: &anyMatcher{
																																		line: 2654, col: 10, offset: 90034,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2654, col: 14, offset: 90038},
																																	expr: &anyMatcher{
																																		line: 2654, col: 15, offset: 90039,
																																	},
																																},
																															},
																														},
																													},
																													&stateCodeExpr{
																														pos: position{line: 2720, col: 18, offset: 92335},
																														run: (*parser).callonglobalScopeItem369,
																													},
																													&litMatcher{
																														pos:        position{line: 1439, col: 29, offset: 47484},
																														val:        "`",
																														ignoreCase: false,
																														want:       "\"`\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 289, col: 35, offset: 8455},
																														label: "contentsI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 289, col: 45, offset: 8465},
																															expr: &actionExpr{
																																pos: position{line: 1461, col: 18, offset: 48190},
																																run: (*parser).callonglobalScopeItem373,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 1461, col: 18, offset: 48190},
																																	expr: &choiceExpr{
																																		pos: position{line: 1461, col: 19, offset: 48191},
																																		alternatives: []any{
																																			&litMatcher{
																																				pos:        position{line: 1461, col: 19, offset: 48191},
																																				val:        "##",
																																				ignoreCase: false,
																																				want:       "\"##\"",
																																			},
																																			&seqExpr{
																																				pos: position{line: 1461, col: 26, offset: 48198},
																																				exprs: []any{
																																					&notExpr{
																																						pos: position{line: 1461, col: 26, offset: 48198},
																																						expr: &choiceExpr{
																																							pos: position{line: 1548, col: 37, offset: 51606},
																																							alternatives: []any{
																																								&litMatcher{
																																									pos:        position{line: 1548, col: 37, offset: 51606},
																																									val:        "#%",
																																									ignoreCase: false,
																																									want:       "\"#%\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 1548, col: 44, offset: 51613},
																																									val:        "#{",
																																									ignoreCase: false,
																																									want:       "\"#{\"",
																																								},
																																							},
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2800, col: 17, offset: 94525},
																																						alternatives: []any{
																																							&seqExpr{
																																								pos: position{line: 2800, col: 17, offset: 94525},
																																								exprs: []any{
																																									&andCodeExpr{
																																										pos: position{line: 2800, col: 17, offset: 94525},
																																										run: (*parser).callonglobalScopeItem384,
																																									},
																																									&notExpr{
																																										pos: position{line: 2800, col: 50, offset: 94558},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 2800, col: 51, offset: 94559},
																																											val:        "[\\r\\n]",
																																											chars:      []rune{'\r', '\n'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 2800, col: 60, offset: 94568},
																																								run: (*parser).callonglobalScopeItem387,
																																							},
																																						},
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 1914, col: 27, offset: 65192},
																																						val:        "[^`]",
																																						chars:      []rune{'`'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 289, col: 60, offset: 8480},
																														label: "endI",
																														expr: &choiceExpr{
																															pos: position{line: 1440, col: 17, offset: 47504},
																															alternatives: []any{
																																&actionExpr{
																																	pos: position{line: 1440, col: 17, offset: 47504},
																																	run: (*parser).callonglobalScopeItem391,
																																	expr: &seqExpr{
																																		pos: position{line: 1440, col: 17, offset: 47504},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1440, col: 17, offset: 47504},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&stateCodeExpr{
																																				pos: position{line: 2726, col: 13, offset: 92468},
																																				run: (*parser).callonglobalScopeItem394,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1442, col: 5, offset: 47546},
																																	run: (*parser).callonglobalScopeItem395,
																																	expr: &actionExpr{
																																		pos: position{line: 2654, col: 8, offset: 90032},
																																		run: (*parser).callonglobalScopeItem396,
																																		expr: &choiceExpr{
																																			pos: position{line: 2654, col: 9, offset: 90033},
																																			alternatives: []any{
																																				&andExpr{
																																					pos: position{line: 2654, col: 9, offset: 90033},
																																					expr: &anyMatcher{
																																						line: 2654, col: 10, offset: 90034,
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2654, col: 14, offset: 90038},
																																					expr: &anyMatcher{
																																						line: 2654, col: 15, offset: 90039,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 302, col: 28, offset: 8751},
																											run: (*parser).callonglobalScopeItem402,
																											expr: &seqExpr{
																												pos: position{line: 302, col: 28, offset: 8751},
																												exprs: []any{
																													&actionExpr{
																														pos: position{line: 2654, col: 8, offset: 90032},
																														run: (*parser).callonglobalScopeItem404,
																														expr: &choiceExpr{
																															pos: position{line: 2654, col: 9, offset: 90033},
																															alternatives: []any{
																																&andExpr{
																																	pos: position{line: 2654, col: 9, offset: 90033},
																																	expr: &anyMatcher{
																																		line: 2654, col: 10, offset: 90034,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2654, col: 14, offset: 90038},
																																	expr: &anyMatcher{
																																		line: 2654, col: 15, offset: 90039,
																																	},
																																},
																															},
																														},
																													},
																													&stateCodeExpr{
																														pos: position{line: 2720, col: 18, offset: 92335},
																														run: (*parser).callonglobalScopeItem410,
																													},
																													&litMatcher{
																														pos:        position{line: 1408, col: 37, offset: 46600},
																														val:        "\"",
																														ignoreCase: false,
																														want:       "\"\\\"\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 302, col: 51, offset: 8774},
																														label: "contentsI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 302, col: 61, offset: 8784},
																															expr: &actionExpr{
																																pos: position{line: 1455, col: 26, offset: 47943},
																																run: (*parser).callonglobalScopeItem414,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 1455, col: 26, offset: 47943},
																																	expr: &choiceExpr{
																																		pos: position{line: 1455, col: 27, offset: 47944},
																																		alternatives: []any{
																																			&litMatcher{
																																				pos:        position{line: 1455, col: 27, offset: 47944},
																																				val:        "##",
																																				ignoreCase: false,
																																				want:       "\"##\"",
																																			},
																																			&seqExpr{
																																				pos: position{line: 1455, col: 34, offset: 47951},
																																				exprs: []any{
																																					&notExpr{
																																						pos: position{line: 1455, col: 34, offset: 47951},
																																						expr: &choiceExpr{
																																							pos: position{line: 1548, col: 37, offset: 51606},
																																							alternatives: []any{
																																								&litMatcher{
																																									pos:        position{line: 1548, col: 37, offset: 51606},
																																									val:        "#%",
																																									ignoreCase: false,
																																									want:       "\"#%\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 1548, col: 44, offset: 51613},
																																									val:        "#{",
																																									ignoreCase: false,
																																									want:       "\"#{\"",
																																								},
																																							},
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 1455, col: 69, offset: 47986},
																																						alternatives: []any{
																																							&seqExpr{
																																								pos: position{line: 1672, col: 19, offset: 55641},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 1672, col: 19, offset: 55641},
																																										val:        "\\u",
																																										ignoreCase: false,
																																										want:       "\"\\\\u\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1673, col: 5, offset: 55700},
																																								run: (*parser).callonglobalScopeItem430,
																																								expr: &seqExpr{
																																									pos: position{line: 1673, col: 5, offset: 55700},
																																									exprs: []any{
																																										&litMatcher{
																																											pos:        position{line: 1673, col: 5, offset: 55700},
																																											val:        "\\u",
																																											ignoreCase: false,
																																											want:       "\"\\\\u\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1673, col: 14, offset: 55709},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1673, col: 26, offset: 55721},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1673, col: 38, offset: 55733},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1673, col: 50, offset: 55745},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 1702, col: 16, offset: 56877},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 1702, col: 16, offset: 56877},
																																										val:        "\\U",
																																										ignoreCase: false,
																																										want:       "\"\\\\U\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1703, col: 5, offset: 56980},
																																								run: (*parser).callonglobalScopeItem451,
																																								expr: &seqExpr{
																																									pos: position{line: 1703, col: 5, offset: 56980},
																																									exprs: []any{
																																										&litMatcher{
																																											pos:        position{line: 1703, col: 5, offset: 56980},
																																											val:        "\\U",
																																											ignoreCase: false,
																																											want:       "\"\\\\U\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 14, offset: 56989},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 26, offset: 57001},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 38, offset: 57013},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 50, offset: 57025},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 62, offset: 57037},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 74, offset: 57049},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 86, offset: 57061},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1703, col: 98, offset: 57073},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 1930, col: 36, offset: 65917},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 1930, col: 36, offset: 65917},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1930, col: 41, offset: 65922},
																																										val:        "[abfnrtv\\\\\"]",
																																										chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&charClassMatcher{
																																								pos:        position{line: 1928, col: 38, offset: 65809},
																																								val:        "[^\"\\\\\\n]",
																																								chars:      []rune{'"', '\\', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																							&seqExpr{
																																								pos: position{line: 1653, col: 24, offset: 54901},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 1653, col: 24, offset: 54901},
																																										val:        "\\",
																																										ignoreCase: false,
																																										want:       "\"\\\\\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1570, col: 19, offset: 52097},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1570, col: 19, offset: 52097},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1570, col: 19, offset: 52097},
																																										val:        "[0-7]",
																																										ranges:     []rune{'0', '7'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&seqExpr{
																																								pos: position{line: 1654, col: 24, offset: 54968},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 1654, col: 24, offset: 54968},
																																										val:        "\\x",
																																										ignoreCase: false,
																																										want:       "\"\\\\x\"",
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																									&charClassMatcher{
																																										pos:        position{line: 1571, col: 19, offset: 52121},
																																										val:        "[0-9A-Fa-f]",
																																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1655, col: 5, offset: 55005},
																																								run: (*parser).callonglobalScopeItem483,
																																								expr: &seqExpr{
																																									pos: position{line: 1655, col: 5, offset: 55005},
																																									exprs: []any{
																																										&litMatcher{
																																											pos:        position{line: 1655, col: 5, offset: 55005},
																																											val:        "\\x",
																																											ignoreCase: false,
																																											want:       "\"\\\\x\"",
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1655, col: 14, offset: 55014},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																										&zeroOrOneExpr{
																																											pos: position{line: 1655, col: 26, offset: 55026},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 1571, col: 19, offset: 52121},
																																												val:        "[0-9A-Fa-f]",
																																												ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1817, col: 37, offset: 61638},
																																								run: (*parser).callonglobalScopeItem490,
																																								expr: &seqExpr{
																																									pos: position{line: 1817, col: 37, offset: 61638},
																																									exprs: []any{
																																										&litMatcher{
																																											pos:        position{line: 1817, col: 37, offset: 61638},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1841, col: 5, offset: 62653},
																																								run: (*parser).callonglobalScopeItem501,
																																								expr: &seqExpr{
																																									pos: position{line: 1841, col: 5, offset: 62653},
																																									exprs: []any{
																																										&litMatcher{
																																											pos:        position{line: 1841, col: 5, offset: 62653},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1862, col: 5, offset: 63493},
																																								run: (*parser).callonglobalScopeItem508,
																																								expr: &seqExpr{
																																									pos: position{line: 1862, col: 5, offset: 63493},
																																									exprs: []any{
																																										&litMatcher{
																																											pos:        position{line: 1862, col: 5, offset: 63493},
																																											val:        "\\",
																																											ignoreCase: false,
																																											want:       "\"\\\\\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 1571, col: 19, offset: 52121},
																																											val:        "[0-9A-Fa-f]",
																																											ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 1880, col: 5, offset: 64177},
																																								run: (*parser).callonglobalScopeItem513,
																																								expr: &litMatcher{
																																									pos:        position{line: 1880, col: 5, offset: 64177},
																																									val:        "\\",
																																									ignoreCase: false,
																																									want:       "\"\\\\\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 302, col: 84, offset: 8807},
																														label: "endI",
																														expr: &choiceExpr{
																															pos: position{line: 1409, col: 25, offset: 46628},
																															alternatives: []any{
																																&actionExpr{
																																	pos: position{line: 1409, col: 25, offset: 46628},
																																	run: (*parser).callonglobalScopeItem517,
																																	expr: &seqExpr{
																																		pos: position{line: 1409, col: 25, offset: 46628},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1409, col: 25, offset: 46628},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&stateCodeExpr{
																																				pos: position{line: 2726, col: 13, offset: 92468},
																																				run: (*parser).callonglobalScopeItem520,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1411, col: 5, offset: 46670},
																																	run: (*parser).callonglobalScopeItem521,
																																	expr: &actionExpr{
																																		pos: position{line: 2654, col: 8, offset: 90032},
																																		run: (*parser).callonglobalScopeItem522,
																																		expr: &choiceExpr{
																																			pos: position{line: 2654, col: 9, offset: 90033},
																																			alternatives: []any{
																																				&andExpr{
																																					pos: position{line: 2654, col: 9, offset: 90033},
																																					expr: &anyMatcher{
																																						line: 2654, col: 10, offset: 90034,
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2654, col: 14, offset: 90038},
																																					expr: &anyMatcher{
																																						line: 2654, col: 15, offset: 90039,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2642, col: 26, offset: 89615},
																								run: (*parser).callonglobalScopeItem528,
																								expr: &choiceExpr{
																									pos: position{line: 2642, col: 27, offset: 89616},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2637, col: 23, offset: 89502},
																											run: (*parser).callonglobalScopeItem530,
																											expr: &seqExpr{
																												pos: position{line: 2637, col: 23, offset: 89502},
																												exprs: []any{
																													&zeroOrMoreExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														expr: &charClassMatcher{
																															pos:        position{line: 2663, col: 37, offset: 90336},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														alternatives: []any{
																															&seqExpr{
																																pos: position{line: 2637, col: 27, offset: 89506},
																																exprs: []any{
																																	&zeroOrOneExpr{
																																		pos: position{line: 2637, col: 27, offset: 89506},
																																		expr: &litMatcher{
																																			pos:        position{line: 2637, col: 27, offset: 89506},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2637, col: 33, offset: 89512},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2636, col: 23, offset: 89477},
																																expr: &anyMatcher{
																																	line: 2636, col: 24, offset: 89478,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2642, col: 33, offset: 89622},
																											val:        ";",
																											ignoreCase: false,
																											want:       "\";\"",
																										},
																										&andExpr{
																											pos: position{line: 2642, col: 39, offset: 89628},
																											expr: &seqExpr{
																												pos: position{line: 2642, col: 41, offset: 89630},
																												exprs: []any{
																													&zeroOrMoreExpr{
																														pos: position{line: 2642, col: 41, offset: 89630},
																														expr: &charClassMatcher{
																															pos:        position{line: 2663, col: 37, offset: 90336},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2642, col: 44, offset: 89633},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2183, col: 18, offset: 73980},
																					run: (*parser).callonglobalScopeItem547,
																					expr: &seqExpr{
																						pos: position{line: 2183, col: 18, offset: 73980},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2183, col: 18, offset: 73980},
																								label: "lineI",
																								expr: &actionExpr{
																									pos: position{line: 2647, col: 35, offset: 89777},
																									run: (*parser).callonglobalScopeItem550,
																									expr: &seqExpr{
																										pos: position{line: 2647, col: 35, offset: 89777},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2647, col: 35, offset: 89777},
																												expr: &charClassMatcher{
																													pos:        position{line: 2663, col: 37, offset: 90336},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 2647, col: 38, offset: 89780},
																												label: "unexpectedI",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2647, col: 50, offset: 89792},
																													expr: &seqExpr{
																														pos: position{line: 2647, col: 51, offset: 89793},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2647, col: 51, offset: 89793},
																																expr: &actionExpr{
																																	pos: position{line: 2642, col: 26, offset: 89615},
																																	run: (*parser).callonglobalScopeItem558,
																																	expr: &choiceExpr{
																																		pos: position{line: 2642, col: 27, offset: 89616},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 2637, col: 23, offset: 89502},
																																				run: (*parser).callonglobalScopeItem560,
																																				expr: &seqExpr{
																																					pos: position{line: 2637, col: 23, offset: 89502},
																																					exprs: []any{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 2637, col: 23, offset: 89502},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2663, col: 37, offset: 90336},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 2637, col: 27, offset: 89506},
																																							alternatives: []any{
																																								&seqExpr{
																																									pos: position{line: 2637, col: 27, offset: 89506},
																																									exprs: []any{
																																										&zeroOrOneExpr{
																																											pos: position{line: 2637, col: 27, offset: 89506},
																																											expr: &litMatcher{
																																												pos:        position{line: 2637, col: 27, offset: 89506},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2637, col: 33, offset: 89512},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2636, col: 23, offset: 89477},
																																									expr: &anyMatcher{
																																										line: 2636, col: 24, offset: 89478,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2642, col: 33, offset: 89622},
																																				val:        ";",
																																				ignoreCase: false,
																																				want:       "\";\"",
																																			},
																																			&andExpr{
																																				pos: position{line: 2642, col: 39, offset: 89628},
																																				expr: &seqExpr{
																																					pos: position{line: 2642, col: 41, offset: 89630},
																																					exprs: []any{
																																						&zeroOrMoreExpr{
																																							pos: position{line: 2642, col: 41, offset: 89630},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2663, col: 37, offset: 90336},
																																								val:        "[ \\t]",
																																								chars:      []rune{' ', '\t'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2642, col: 44, offset: 89633},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2647, col: 57, offset: 89799},
																																alternatives: []any{
																																	&oneOrMoreExpr{
																																		pos: position{line: 2647, col: 57, offset: 89799},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2647, col: 57, offset: 89799},
																																			val:        "[^\\r\\n;{}]",
																																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																	&seqExpr{
																																		pos: position{line: 2647, col: 71, offset: 89813},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 2647, col: 71, offset: 89813},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 2647, col: 75, offset: 89817},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2647, col: 75, offset: 89817},
																																					val:        "[^}]",
																																					chars:      []rune{'}'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2647, col: 81, offset: 89823},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2642, col: 26, offset: 89615},
																								run: (*parser).callonglobalScopeItem585,
																								expr: &choiceExpr{
																									pos: position{line: 2642, col: 27, offset: 89616},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2637, col: 23, offset: 89502},
																											run: (*parser).callonglobalScopeItem587,
																											expr: &seqExpr{
																												pos: position{line: 2637, col: 23, offset: 89502},
																												exprs: []any{
																													&zeroOrMoreExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														expr: &charClassMatcher{
																															pos:        position{line: 2663, col: 37, offset: 90336},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														alternatives: []any{
																															&seqExpr{
																																pos: position{line: 2637, col: 27, offset: 89506},
																																exprs: []any{
																																	&zeroOrOneExpr{
																																		pos: position{line: 2637, col: 27, offset: 89506},
																																		expr: &litMatcher{
																																			pos:        position{line: 2637, col: 27, offset: 89506},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2637, col: 33, offset: 89512},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2636, col: 23, offset: 89477},
																																expr: &anyMatcher{
																																	line: 2636, col: 24, offset: 89478,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2642, col: 33, offset: 89622},
																											val:        ";",
																											ignoreCase: false,
																											want:       "\";\"",
																										},
																										&andExpr{
																											pos: position{line: 2642, col: 39, offset: 89628},
																											expr: &seqExpr{
																												pos: position{line: 2642, col: 41, offset: 89630},
																												exprs: []any{
																													&zeroOrMoreExpr{
																														pos: position{line: 2642, col: 41, offset: 89630},
																														expr: &charClassMatcher{
																															pos:        position{line: 2663, col: 37, offset: 90336},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2642, col: 44, offset: 89633},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2121, col: 68, offset: 72185},
													label: "rParenI",
													expr: &choiceExpr{
														pos: position{line: 2130, col: 19, offset: 72443},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2130, col: 19, offset: 72443},
																run: (*parser).callonglobalScopeItem606,
																expr: &seqExpr{
																	pos: position{line: 2130, col: 19, offset: 72443},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2130, col: 19, offset: 72443},
																			expr: &choiceExpr{
																				pos: position{line: 2666, col: 20, offset: 90409},
																				alternatives: []any{
																					&charClassMatcher{
																						pos:        position{line: 2663, col: 37, offset: 90336},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&seqExpr{
																						pos: position{line: 2666, col: 31, offset: 90420},
																						exprs: []any{
																							&andCodeExpr{
																								pos: position{line: 2666, col: 31, offset: 90420},
																								run: (*parser).callonglobalScopeItem612,
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2664, col: 37, offset: 90378},
																								expr: &litMatcher{
																									pos:        position{line: 2664, col: 37, offset: 90378},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2664, col: 43, offset: 90384},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2130, col: 23, offset: 72447},
																			label: "rParenI",
																			expr: &actionExpr{
																				pos: position{line: 2673, col: 12, offset: 90711},
																				run: (*parser).callonglobalScopeItem617,
																				expr: &litMatcher{
																					pos:        position{line: 2673, col: 12, offset: 90711},
																					val:        ")",
																					ignoreCase: false,
																					want:       "\")\"",
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2132, col: 5, offset: 72493},
																run: (*parser).callonglobalScopeItem619,
																expr: &actionExpr{
																	pos: position{line: 2654, col: 8, offset: 90032},
																	run: (*parser).callonglobalScopeItem620,
																	expr: &choiceExpr{
																		pos: position{line: 2654, col: 9, offset: 90033},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				expr: &anyMatcher{
																					line: 2654, col: 10, offset: 90034,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2654, col: 14, offset: 90038},
																				expr: &anyMatcher{
																					line: 2654, col: 15, offset: 90039,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2142, col: 14, offset: 72742},
										run: (*parser).callonglobalScopeItem626,
										expr: &seqExpr{
											pos: position{line: 2142, col: 14, offset: 72742},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2142, col: 14, offset: 72742},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2142, col: 23, offset: 72751},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2142, col: 26, offset: 72754},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2654, col: 8, offset: 90032},
														run: (*parser).callonglobalScopeItem632,
														expr: &choiceExpr{
															pos: position{line: 2654, col: 9, offset: 90033},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2654, col: 9, offset: 90033},
																	expr: &anyMatcher{
																		line: 2654, col: 10, offset: 90034,
																	},
																},
																&notExpr{
																	pos: position{line: 2654, col: 14, offset: 90038},
																	expr: &anyMatcher{
																		line: 2654, col: 15, offset: 90039,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2142, col: 37, offset: 72765},
													label: "badI",
													expr: &actionExpr{
														pos: position{line: 2647, col: 35, offset: 89777},
														run: (*parser).callonglobalScopeItem639,
														expr: &seqExpr{
															pos: position{line: 2647, col: 35, offset: 89777},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2647, col: 35, offset: 89777},
																	expr: &charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2647, col: 38, offset: 89780},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2647, col: 50, offset: 89792},
																		expr: &seqExpr{
																			pos: position{line: 2647, col: 51, offset: 89793},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2647, col: 51, offset: 89793},
																					expr: &actionExpr{
																						pos: position{line: 2642, col: 26, offset: 89615},
																						run: (*parser).callonglobalScopeItem647,
																						expr: &choiceExpr{
																							pos: position{line: 2642, col: 27, offset: 89616},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									run: (*parser).callonglobalScopeItem649,
																									expr: &seqExpr{
																										pos: position{line: 2637, col: 23, offset: 89502},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2637, col: 23, offset: 89502},
																												expr: &charClassMatcher{
																													pos:        position{line: 2663, col: 37, offset: 90336},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														exprs: []any{
																															&zeroOrOneExpr{
																																pos: position{line: 2637, col: 27, offset: 89506},
																																expr: &litMatcher{
																																	pos:        position{line: 2637, col: 27, offset: 89506},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2637, col: 33, offset: 89512},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2636, col: 23, offset: 89477},
																														expr: &anyMatcher{
																															line: 2636, col: 24, offset: 89478,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2642, col: 33, offset: 89622},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2642, col: 39, offset: 89628},
																									expr: &seqExpr{
																										pos: position{line: 2642, col: 41, offset: 89630},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2642, col: 41, offset: 89630},
																												expr: &charClassMatcher{
																													pos:        position{line: 2663, col: 37, offset: 90336},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2642, col: 44, offset: 89633},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2647, col: 57, offset: 89799},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2647, col: 57, offset: 89799},
																							expr: &charClassMatcher{
																								pos:        position{line: 2647, col: 57, offset: 89799},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2647, col: 71, offset: 89813},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2647, col: 71, offset: 89813},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2647, col: 75, offset: 89817},
																									expr: &charClassMatcher{
																										pos:        position{line: 2647, col: 75, offset: 89817},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2647, col: 81, offset: 89823},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2142, col: 53, offset: 72781},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2642, col: 26, offset: 89615},
														run: (*parser).callonglobalScopeItem675,
														expr: &choiceExpr{
															pos: position{line: 2642, col: 27, offset: 89616},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callonglobalScopeItem677,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2642, col: 33, offset: 89622},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2642, col: 39, offset: 89628},
																	expr: &seqExpr{
																		pos: position{line: 2642, col: 41, offset: 89630},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2642, col: 41, offset: 89630},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 44, offset: 89633},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 353, col: 51, offset: 10735},
										name: "State",
									},
									&ruleRefExpr{
										pos:  position{line: 353, col: 59, offset: 10743},
										name: "Component",
									},
									&ruleRefExpr{
										pos:  position{line: 353, col: 71, offset: 10755},
										name: "GlobalCode",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 357, col: 1, offset: 10793},
			expr: &actionExpr{
				pos: position{line: 357, col: 10, offset: 10802},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 357, col: 10, offset: 10802},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2762, col: 15, offset: 93507},
							run: (*parser).callonScope3,
							expr: &seqExpr{
								pos: position{line: 2762, col: 15, offset: 93507},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonScope5,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2720, col: 18, offset: 92335},
										run: (*parser).callonScope11,
									},
									&actionExpr{
										pos: position{line: 2675, col: 12, offset: 90750},
										run: (*parser).callonScope12,
										expr: &litMatcher{
											pos:        position{line: 2675, col: 12, offset: 90750},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2762, col: 33, offset: 93525},
										expr: &choiceExpr{
											pos: position{line: 2666, col: 20, offset: 90409},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2666, col: 31, offset: 90420},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															run: (*parser).callonScope18,
														},
														&zeroOrOneExpr{
															pos: position{line: 2664, col: 37, offset: 90378},
															expr: &litMatcher{
																pos:        position{line: 2664, col: 37, offset: 90378},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2664, col: 43, offset: 90384},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 21, offset: 10813},
							label: "itemsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 28, offset: 10820},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 28, offset: 10820},
									name: "scopeItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 39, offset: 10831},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2766, col: 13, offset: 93569},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2766, col: 13, offset: 93569},
										run: (*parser).callonScope27,
										expr: &seqExpr{
											pos: position{line: 2766, col: 13, offset: 93569},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2766, col: 13, offset: 93569},
													expr: &choiceExpr{
														pos: position{line: 2666, col: 20, offset: 90409},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		run: (*parser).callonScope33,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2664, col: 37, offset: 90378},
																		expr: &litMatcher{
																			pos:        position{line: 2664, col: 37, offset: 90378},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2664, col: 43, offset: 90384},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2766, col: 17, offset: 93573},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2676, col: 12, offset: 90788},
														run: (*parser).callonScope38,
														expr: &litMatcher{
															pos:        position{line: 2676, col: 12, offset: 90788},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonScope40,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2768, col: 5, offset: 93622},
										run: (*parser).callonScope41,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonScope42,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "scopeItem",
			pos:  position{line: 365, col: 1, offset: 11001},
			expr: &actionExpr{
				pos: position{line: 365, col: 14, offset: 11014},
				run: (*parser).callonscopeItem1,
				expr: &seqExpr{
					pos: position{line: 365, col: 14, offset: 11014},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 365, col: 14, offset: 11014},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonscopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 365, col: 18, offset: 11018},
							expr: &litMatcher{
								pos:        position{line: 365, col: 19, offset: 11019},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 365, col: 23, offset: 11023},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 366, col: 5, offset: 11034},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 366, col: 5, offset: 11034},
										name: "And",
									},
									&actionExpr{
										pos: position{line: 477, col: 17, offset: 15436},
										run: (*parser).callonscopeItem16,
										expr: &seqExpr{
											pos: position{line: 477, col: 17, offset: 15436},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 477, col: 17, offset: 15436},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 477, col: 22, offset: 15441},
													expr: &litMatcher{
														pos:        position{line: 477, col: 23, offset: 15442},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 477, col: 27, offset: 15446},
													label: "textI",
													expr: &seqExpr{
														pos: position{line: 477, col: 34, offset: 15453},
														exprs: []any{
															&notExpr{
																pos: position{line: 477, col: 34, offset: 15453},
																expr: &actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callonscopeItem24,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&anyMatcher{
																line: 477, col: 39, offset: 15458,
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonscopeItem36,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 5, offset: 11163},
										name: "Code",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 12, offset: 11170},
										name: "Return",
									},
									&actionExpr{
										pos: position{line: 581, col: 13, offset: 18987},
										run: (*parser).callonscopeItem49,
										expr: &seqExpr{
											pos: position{line: 581, col: 13, offset: 18987},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 581, col: 13, offset: 18987},
													val:        "continue",
													ignoreCase: false,
													want:       "\"continue\"",
												},
												&labeledExpr{
													pos:   position{line: 581, col: 24, offset: 18998},
													label: "labelI",
													expr: &choiceExpr{
														pos: position{line: 595, col: 23, offset: 19302},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 595, col: 23, offset: 19302},
																run: (*parser).callonscopeItem54,
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonscopeItem55,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonscopeItem57,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 597, col: 4, offset: 19346},
																run: (*parser).callonscopeItem74,
																expr: &seqExpr{
																	pos: position{line: 597, col: 4, offset: 19346},
																	exprs: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 597, col: 4, offset: 19346},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 597, col: 7, offset: 19349},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 263, col: 10, offset: 7729},
																				run: (*parser).callonscopeItem79,
																				expr: &labeledExpr{
																					pos:   position{line: 263, col: 10, offset: 7729},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1577, col: 17, offset: 52172},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1560, col: 20, offset: 51927},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1577, col: 26, offset: 52181},
																								expr: &charClassMatcher{
																									pos:        position{line: 1560, col: 20, offset: 51927},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2642, col: 26, offset: 89615},
																			run: (*parser).callonscopeItem85,
																			expr: &choiceExpr{
																				pos: position{line: 2642, col: 27, offset: 89616},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						run: (*parser).callonscopeItem87,
																						expr: &seqExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									alternatives: []any{
																										&seqExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											exprs: []any{
																												&zeroOrOneExpr{
																													pos: position{line: 2637, col: 27, offset: 89506},
																													expr: &litMatcher{
																														pos:        position{line: 2637, col: 27, offset: 89506},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2637, col: 33, offset: 89512},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2636, col: 23, offset: 89477},
																											expr: &anyMatcher{
																												line: 2636, col: 24, offset: 89478,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2642, col: 33, offset: 89622},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																					&andExpr{
																						pos: position{line: 2642, col: 39, offset: 89628},
																						expr: &seqExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2642, col: 41, offset: 89630},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2642, col: 44, offset: 89633},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 599, col: 5, offset: 19395},
																run: (*parser).callonscopeItem104,
																expr: &seqExpr{
																	pos: position{line: 599, col: 5, offset: 19395},
																	exprs: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 599, col: 5, offset: 19395},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 599, col: 8, offset: 19398},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 263, col: 10, offset: 7729},
																				run: (*parser).callonscopeItem109,
																				expr: &labeledExpr{
																					pos:   position{line: 263, col: 10, offset: 7729},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1577, col: 17, offset: 52172},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1560, col: 20, offset: 51927},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1577, col: 26, offset: 52181},
																								expr: &charClassMatcher{
																									pos:        position{line: 1560, col: 20, offset: 51927},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 599, col: 21, offset: 19411},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonscopeItem116,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2647, col: 35, offset: 89777},
																			run: (*parser).callonscopeItem122,
																			expr: &seqExpr{
																				pos: position{line: 2647, col: 35, offset: 89777},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2647, col: 35, offset: 89777},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2647, col: 38, offset: 89780},
																						label: "unexpectedI",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2647, col: 50, offset: 89792},
																							expr: &seqExpr{
																								pos: position{line: 2647, col: 51, offset: 89793},
																								exprs: []any{
																									&notExpr{
																										pos: position{line: 2647, col: 51, offset: 89793},
																										expr: &actionExpr{
																											pos: position{line: 2642, col: 26, offset: 89615},
																											run: (*parser).callonscopeItem130,
																											expr: &choiceExpr{
																												pos: position{line: 2642, col: 27, offset: 89616},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														run: (*parser).callonscopeItem132,
																														expr: &seqExpr{
																															pos: position{line: 2637, col: 23, offset: 89502},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2637, col: 23, offset: 89502},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2637, col: 27, offset: 89506},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2637, col: 27, offset: 89506},
																																			exprs: []any{
																																				&zeroOrOneExpr{
																																					pos: position{line: 2637, col: 27, offset: 89506},
																																					expr: &litMatcher{
																																						pos:        position{line: 2637, col: 27, offset: 89506},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2637, col: 33, offset: 89512},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2636, col: 23, offset: 89477},
																																			expr: &anyMatcher{
																																				line: 2636, col: 24, offset: 89478,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2642, col: 33, offset: 89622},
																														val:        ";",
																														ignoreCase: false,
																														want:       "\";\"",
																													},
																													&andExpr{
																														pos: position{line: 2642, col: 39, offset: 89628},
																														expr: &seqExpr{
																															pos: position{line: 2642, col: 41, offset: 89630},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2642, col: 41, offset: 89630},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2642, col: 44, offset: 89633},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2647, col: 57, offset: 89799},
																										alternatives: []any{
																											&oneOrMoreExpr{
																												pos: position{line: 2647, col: 57, offset: 89799},
																												expr: &charClassMatcher{
																													pos:        position{line: 2647, col: 57, offset: 89799},
																													val:        "[^\\r\\n;{}]",
																													chars:      []rune{'\r', '\n', ';', '{', '}'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2647, col: 71, offset: 89813},
																												exprs: []any{
																													&litMatcher{
																														pos:        position{line: 2647, col: 71, offset: 89813},
																														val:        "{",
																														ignoreCase: false,
																														want:       "\"{\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2647, col: 75, offset: 89817},
																														expr: &charClassMatcher{
																															pos:        position{line: 2647, col: 75, offset: 89817},
																															val:        "[^}]",
																															chars:      []rune{'}'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2647, col: 81, offset: 89823},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 599, col: 43, offset: 19433},
																			label: "endI",
																			expr: &actionExpr{
																				pos: position{line: 2642, col: 26, offset: 89615},
																				run: (*parser).callonscopeItem158,
																				expr: &choiceExpr{
																					pos: position{line: 2642, col: 27, offset: 89616},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							run: (*parser).callonscopeItem160,
																							expr: &seqExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2637, col: 23, offset: 89502},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														expr: &litMatcher{
																															pos:        position{line: 2637, col: 27, offset: 89506},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2637, col: 33, offset: 89512},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2636, col: 23, offset: 89477},
																												expr: &anyMatcher{
																													line: 2636, col: 24, offset: 89478,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 33, offset: 89622},
																							val:        ";",
																							ignoreCase: false,
																							want:       "\";\"",
																						},
																						&andExpr{
																							pos: position{line: 2642, col: 39, offset: 89628},
																							expr: &seqExpr{
																								pos: position{line: 2642, col: 41, offset: 89630},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2642, col: 41, offset: 89630},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2642, col: 44, offset: 89633},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 601, col: 5, offset: 19587},
																run: (*parser).callonscopeItem177,
																expr: &seqExpr{
																	pos: position{line: 601, col: 5, offset: 19587},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 601, col: 5, offset: 19587},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 601, col: 8, offset: 19590},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonscopeItem182,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2647, col: 35, offset: 89777},
																			run: (*parser).callonscopeItem188,
																			expr: &seqExpr{
																				pos: position{line: 2647, col: 35, offset: 89777},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2647, col: 35, offset: 89777},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2647, col: 38, offset: 89780},
																						label: "unexpectedI",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2647, col: 50, offset: 89792},
																							expr: &seqExpr{
																								pos: position{line: 2647, col: 51, offset: 89793},
																								exprs: []any{
																									&notExpr{
																										pos: position{line: 2647, col: 51, offset: 89793},
																										expr: &actionExpr{
																											pos: position{line: 2642, col: 26, offset: 89615},
																											run: (*parser).callonscopeItem196,
																											expr: &choiceExpr{
																												pos: position{line: 2642, col: 27, offset: 89616},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														run: (*parser).callonscopeItem198,
																														expr: &seqExpr{
																															pos: position{line: 2637, col: 23, offset: 89502},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2637, col: 23, offset: 89502},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2637, col: 27, offset: 89506},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2637, col: 27, offset: 89506},
																																			exprs: []any{
																																				&zeroOrOneExpr{
																																					pos: position{line: 2637, col: 27, offset: 89506},
																																					expr: &litMatcher{
																																						pos:        position{line: 2637, col: 27, offset: 89506},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2637, col: 33, offset: 89512},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2636, col: 23, offset: 89477},
																																			expr: &anyMatcher{
																																				line: 2636, col: 24, offset: 89478,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2642, col: 33, offset: 89622},
																														val:        ";",
																														ignoreCase: false,
																														want:       "\";\"",
																													},
																													&andExpr{
																														pos: position{line: 2642, col: 39, offset: 89628},
																														expr: &seqExpr{
																															pos: position{line: 2642, col: 41, offset: 89630},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2642, col: 41, offset: 89630},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2642, col: 44, offset: 89633},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2647, col: 57, offset: 89799},
																										alternatives: []any{
																											&oneOrMoreExpr{
																												pos: position{line: 2647, col: 57, offset: 89799},
																												expr: &charClassMatcher{
																													pos:        position{line: 2647, col: 57, offset: 89799},
																													val:        "[^\\r\\n;{}]",
																													chars:      []rune{'\r', '\n', ';', '{', '}'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2647, col: 71, offset: 89813},
																												exprs: []any{
																													&litMatcher{
																														pos:        position{line: 2647, col: 71, offset: 89813},
																														val:        "{",
																														ignoreCase: false,
																														want:       "\"{\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2647, col: 75, offset: 89817},
																														expr: &charClassMatcher{
																															pos:        position{line: 2647, col: 75, offset: 89817},
																															val:        "[^}]",
																															chars:      []rune{'}'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2647, col: 81, offset: 89823},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 601, col: 30, offset: 19612},
																			label: "endI",
																			expr: &actionExpr{
																				pos: position{line: 2642, col: 26, offset: 89615},
																				run: (*parser).callonscopeItem224,
																				expr: &choiceExpr{
																					pos: position{line: 2642, col: 27, offset: 89616},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							run: (*parser).callonscopeItem226,
																							expr: &seqExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2637, col: 23, offset: 89502},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														expr: &litMatcher{
																															pos:        position{line: 2637, col: 27, offset: 89506},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2637, col: 33, offset: 89512},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2636, col: 23, offset: 89477},
																												expr: &anyMatcher{
																													line: 2636, col: 24, offset: 89478,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 33, offset: 89622},
																							val:        ";",
																							ignoreCase: false,
																							want:       "\";\"",
																						},
																						&andExpr{
																							pos: position{line: 2642, col: 39, offset: 89628},
																							expr: &seqExpr{
																								pos: position{line: 2642, col: 41, offset: 89630},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2642, col: 41, offset: 89630},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2642, col: 44, offset: 89633},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 588, col: 10, offset: 19141},
										run: (*parser).callonscopeItem243,
										expr: &seqExpr{
											pos: position{line: 588, col: 10, offset: 19141},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 588, col: 10, offset: 19141},
													val:        "break",
													ignoreCase: false,
													want:       "\"break\"",
												},
												&labeledExpr{
													pos:   position{line: 588, col: 18, offset: 19149},
													label: "labelI",
													expr: &choiceExpr{
														pos: position{line: 595, col: 23, offset: 19302},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 595, col: 23, offset: 19302},
																run: (*parser).callonscopeItem248,
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonscopeItem249,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonscopeItem251,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 597, col: 4, offset: 19346},
																run: (*parser).callonscopeItem268,
																expr: &seqExpr{
																	pos: position{line: 597, col: 4, offset: 19346},
																	exprs: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 597, col: 4, offset: 19346},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 597, col: 7, offset: 19349},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 263, col: 10, offset: 7729},
																				run: (*parser).callonscopeItem273,
																				expr: &labeledExpr{
																					pos:   position{line: 263, col: 10, offset: 7729},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1577, col: 17, offset: 52172},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1560, col: 20, offset: 51927},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1577, col: 26, offset: 52181},
																								expr: &charClassMatcher{
																									pos:        position{line: 1560, col: 20, offset: 51927},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2642, col: 26, offset: 89615},
																			run: (*parser).callonscopeItem279,
																			expr: &choiceExpr{
																				pos: position{line: 2642, col: 27, offset: 89616},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						run: (*parser).callonscopeItem281,
																						expr: &seqExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									alternatives: []any{
																										&seqExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											exprs: []any{
																												&zeroOrOneExpr{
																													pos: position{line: 2637, col: 27, offset: 89506},
																													expr: &litMatcher{
																														pos:        position{line: 2637, col: 27, offset: 89506},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2637, col: 33, offset: 89512},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2636, col: 23, offset: 89477},
																											expr: &anyMatcher{
																												line: 2636, col: 24, offset: 89478,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2642, col: 33, offset: 89622},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																					&andExpr{
																						pos: position{line: 2642, col: 39, offset: 89628},
																						expr: &seqExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2642, col: 41, offset: 89630},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2642, col: 44, offset: 89633},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 599, col: 5, offset: 19395},
																run: (*parser).callonscopeItem298,
																expr: &seqExpr{
																	pos: position{line: 599, col: 5, offset: 19395},
																	exprs: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 599, col: 5, offset: 19395},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 599, col: 8, offset: 19398},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 263, col: 10, offset: 7729},
																				run: (*parser).callonscopeItem303,
																				expr: &labeledExpr{
																					pos:   position{line: 263, col: 10, offset: 7729},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1577, col: 17, offset: 52172},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1560, col: 20, offset: 51927},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1577, col: 26, offset: 52181},
																								expr: &charClassMatcher{
																									pos:        position{line: 1560, col: 20, offset: 51927},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 599, col: 21, offset: 19411},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonscopeItem310,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2647, col: 35, offset: 89777},
																			run: (*parser).callonscopeItem316,
																			expr: &seqExpr{
																				pos: position{line: 2647, col: 35, offset: 89777},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2647, col: 35, offset: 89777},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2647, col: 38, offset: 89780},
																						label: "unexpectedI",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2647, col: 50, offset: 89792},
																							expr: &seqExpr{
																								pos: position{line: 2647, col: 51, offset: 89793},
																								exprs: []any{
																									&notExpr{
																										pos: position{line: 2647, col: 51, offset: 89793},
																										expr: &actionExpr{
																											pos: position{line: 2642, col: 26, offset: 89615},
																											run: (*parser).callonscopeItem324,
																											expr: &choiceExpr{
																												pos: position{line: 2642, col: 27, offset: 89616},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														run: (*parser).callonscopeItem326,
																														expr: &seqExpr{
																															pos: position{line: 2637, col: 23, offset: 89502},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2637, col: 23, offset: 89502},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2637, col: 27, offset: 89506},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2637, col: 27, offset: 89506},
																																			exprs: []any{
																																				&zeroOrOneExpr{
																																					pos: position{line: 2637, col: 27, offset: 89506},
																																					expr: &litMatcher{
																																						pos:        position{line: 2637, col: 27, offset: 89506},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2637, col: 33, offset: 89512},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2636, col: 23, offset: 89477},
																																			expr: &anyMatcher{
																																				line: 2636, col: 24, offset: 89478,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2642, col: 33, offset: 89622},
																														val:        ";",
																														ignoreCase: false,
																														want:       "\";\"",
																													},
																													&andExpr{
																														pos: position{line: 2642, col: 39, offset: 89628},
																														expr: &seqExpr{
																															pos: position{line: 2642, col: 41, offset: 89630},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2642, col: 41, offset: 89630},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2642, col: 44, offset: 89633},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2647, col: 57, offset: 89799},
																										alternatives: []any{
																											&oneOrMoreExpr{
																												pos: position{line: 2647, col: 57, offset: 89799},
																												expr: &charClassMatcher{
																													pos:        position{line: 2647, col: 57, offset: 89799},
																													val:        "[^\\r\\n;{}]",
																													chars:      []rune{'\r', '\n', ';', '{', '}'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2647, col: 71, offset: 89813},
																												exprs: []any{
																													&litMatcher{
																														pos:        position{line: 2647, col: 71, offset: 89813},
																														val:        "{",
																														ignoreCase: false,
																														want:       "\"{\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2647, col: 75, offset: 89817},
																														expr: &charClassMatcher{
																															pos:        position{line: 2647, col: 75, offset: 89817},
																															val:        "[^}]",
																															chars:      []rune{'}'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2647, col: 81, offset: 89823},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 599, col: 43, offset: 19433},
																			label: "endI",
																			expr: &actionExpr{
																				pos: position{line: 2642, col: 26, offset: 89615},
																				run: (*parser).callonscopeItem352,
																				expr: &choiceExpr{
																					pos: position{line: 2642, col: 27, offset: 89616},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							run: (*parser).callonscopeItem354,
																							expr: &seqExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2637, col: 23, offset: 89502},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														expr: &litMatcher{
																															pos:        position{line: 2637, col: 27, offset: 89506},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2637, col: 33, offset: 89512},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2636, col: 23, offset: 89477},
																												expr: &anyMatcher{
																													line: 2636, col: 24, offset: 89478,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 33, offset: 89622},
																							val:        ";",
																							ignoreCase: false,
																							want:       "\";\"",
																						},
																						&andExpr{
																							pos: position{line: 2642, col: 39, offset: 89628},
																							expr: &seqExpr{
																								pos: position{line: 2642, col: 41, offset: 89630},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2642, col: 41, offset: 89630},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2642, col: 44, offset: 89633},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 601, col: 5, offset: 19587},
																run: (*parser).callonscopeItem371,
																expr: &seqExpr{
																	pos: position{line: 601, col: 5, offset: 19587},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 601, col: 5, offset: 19587},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 601, col: 8, offset: 19590},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonscopeItem376,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2647, col: 35, offset: 89777},
																			run: (*parser).callonscopeItem382,
																			expr: &seqExpr{
																				pos: position{line: 2647, col: 35, offset: 89777},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2647, col: 35, offset: 89777},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2647, col: 38, offset: 89780},
																						label: "unexpectedI",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2647, col: 50, offset: 89792},
																							expr: &seqExpr{
																								pos: position{line: 2647, col: 51, offset: 89793},
																								exprs: []any{
																									&notExpr{
																										pos: position{line: 2647, col: 51, offset: 89793},
																										expr: &actionExpr{
																											pos: position{line: 2642, col: 26, offset: 89615},
																											run: (*parser).callonscopeItem390,
																											expr: &choiceExpr{
																												pos: position{line: 2642, col: 27, offset: 89616},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														run: (*parser).callonscopeItem392,
																														expr: &seqExpr{
																															pos: position{line: 2637, col: 23, offset: 89502},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2637, col: 23, offset: 89502},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2637, col: 27, offset: 89506},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2637, col: 27, offset: 89506},
																																			exprs: []any{
																																				&zeroOrOneExpr{
																																					pos: position{line: 2637, col: 27, offset: 89506},
																																					expr: &litMatcher{
																																						pos:        position{line: 2637, col: 27, offset: 89506},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2637, col: 33, offset: 89512},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2636, col: 23, offset: 89477},
																																			expr: &anyMatcher{
																																				line: 2636, col: 24, offset: 89478,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2642, col: 33, offset: 89622},
																														val:        ";",
																														ignoreCase: false,
																														want:       "\";\"",
																													},
																													&andExpr{
																														pos: position{line: 2642, col: 39, offset: 89628},
																														expr: &seqExpr{
																															pos: position{line: 2642, col: 41, offset: 89630},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2642, col: 41, offset: 89630},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2663, col: 37, offset: 90336},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2642, col: 44, offset: 89633},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2647, col: 57, offset: 89799},
																										alternatives: []any{
																											&oneOrMoreExpr{
																												pos: position{line: 2647, col: 57, offset: 89799},
																												expr: &charClassMatcher{
																													pos:        position{line: 2647, col: 57, offset: 89799},
																													val:        "[^\\r\\n;{}]",
																													chars:      []rune{'\r', '\n', ';', '{', '}'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																											&seqExpr{
																												pos: position{line: 2647, col: 71, offset: 89813},
																												exprs: []any{
																													&litMatcher{
																														pos:        position{line: 2647, col: 71, offset: 89813},
																														val:        "{",
																														ignoreCase: false,
																														want:       "\"{\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2647, col: 75, offset: 89817},
																														expr: &charClassMatcher{
																															pos:        position{line: 2647, col: 75, offset: 89817},
																															val:        "[^}]",
																															chars:      []rune{'}'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2647, col: 81, offset: 89823},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 601, col: 30, offset: 19612},
																			label: "endI",
																			expr: &actionExpr{
																				pos: position{line: 2642, col: 26, offset: 89615},
																				run: (*parser).callonscopeItem418,
																				expr: &choiceExpr{
																					pos: position{line: 2642, col: 27, offset: 89616},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							run: (*parser).callonscopeItem420,
																							expr: &seqExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2637, col: 23, offset: 89502},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														expr: &litMatcher{
																															pos:        position{line: 2637, col: 27, offset: 89506},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2637, col: 33, offset: 89512},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2636, col: 23, offset: 89477},
																												expr: &anyMatcher{
																													line: 2636, col: 24, offset: 89478,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 33, offset: 89622},
																							val:        ";",
																							ignoreCase: false,
																							want:       "\";\"",
																						},
																						&andExpr{
																							pos: position{line: 2642, col: 39, offset: 89628},
																							expr: &seqExpr{
																								pos: position{line: 2642, col: 41, offset: 89630},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2642, col: 41, offset: 89630},
																										expr: &charClassMatcher{
																											pos:        position{line: 2663, col: 37, offset: 90336},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2642, col: 44, offset: 89633},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 5, offset: 11225},
										name: "ComponentCall",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 21, offset: 11241},
										name: "Block",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 5, offset: 11292},
										name: "If",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 10, offset: 11297},
										name: "Switch",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 19, offset: 11306},
										name: "For",
									},
									&actionExpr{
										pos: position{line: 1047, col: 16, offset: 33510},
										run: (*parser).callonscopeItem442,
										expr: &seqExpr{
											pos: position{line: 1047, col: 16, offset: 33510},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1047, col: 16, offset: 33510},
													val:        "//-",
													ignoreCase: false,
													want:       "\"//-\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 1047, col: 22, offset: 33516},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 1047, col: 25, offset: 33519},
													label: "commentI",
													expr: &actionExpr{
														pos: position{line: 1054, col: 16, offset: 33667},
														run: (*parser).callonscopeItem448,
														expr: &zeroOrMoreExpr{
															pos: position{line: 1054, col: 16, offset: 33667},
															expr: &seqExpr{
																pos: position{line: 1054, col: 17, offset: 33668},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1054, col: 17, offset: 33668},
																		expr: &actionExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			run: (*parser).callonscopeItem452,
																			expr: &seqExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										expr: &litMatcher{
																											pos:        position{line: 2637, col: 27, offset: 89506},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2637, col: 33, offset: 89512},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2636, col: 23, offset: 89477},
																								expr: &anyMatcher{
																									line: 2636, col: 24, offset: 89478,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1054, col: 22, offset: 33673,
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonscopeItem464,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 19, offset: 11382},
										name: "And",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 25, offset: 11388},
										name: "RawElement",
									},
									&actionExpr{
										pos: position{line: 1026, col: 12, offset: 32763},
										run: (*parser).callonscopeItem477,
										expr: &seqExpr{
											pos: position{line: 1026, col: 12, offset: 32763},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1026, col: 12, offset: 32763},
													val:        "!doctype",
													ignoreCase: false,
													want:       "\"!doctype\"",
												},
												&choiceExpr{
													pos: position{line: 1030, col: 18, offset: 32857},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1030, col: 18, offset: 32857},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1030, col: 18, offset: 32857},
																	expr: &charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&actionExpr{
																	pos: position{line: 2746, col: 14, offset: 93228},
																	run: (*parser).callonscopeItem484,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 14, offset: 93228},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonscopeItem486,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2720, col: 18, offset: 92335},
																				run: (*parser).callonscopeItem492,
																			},
																			&actionExpr{
																				pos: position{line: 2672, col: 12, offset: 90673},
																				run: (*parser).callonscopeItem493,
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 12, offset: 90673},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2746, col: 32, offset: 93246},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonscopeItem499,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1030, col: 31, offset: 32870},
																	val:        "html",
																	ignoreCase: false,
																	want:       "\"html\"",
																},
																&choiceExpr{
																	pos: position{line: 134, col: 21, offset: 4062},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2750, col: 12, offset: 93289},
																			run: (*parser).callonscopeItem505,
																			expr: &seqExpr{
																				pos: position{line: 2750, col: 12, offset: 93289},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2750, col: 12, offset: 93289},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2750, col: 15, offset: 93292},
																						expr: &seqExpr{
																							pos: position{line: 2750, col: 16, offset: 93293},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2750, col: 16, offset: 93293},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2750, col: 20, offset: 93297},
																									expr: &choiceExpr{
																										pos: position{line: 2666, col: 20, offset: 90409},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2663, col: 37, offset: 90336},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2666, col: 31, offset: 90420},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2666, col: 31, offset: 90420},
																														run: (*parser).callonscopeItem516,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2664, col: 37, offset: 90378},
																														expr: &litMatcher{
																															pos:        position{line: 2664, col: 37, offset: 90378},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2664, col: 43, offset: 90384},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2750, col: 26, offset: 93303},
																						label: "endI",
																						expr: &actionExpr{
																							pos: position{line: 2673, col: 12, offset: 90711},
																							run: (*parser).callonscopeItem521,
																							expr: &litMatcher{
																								pos:        position{line: 2673, col: 12, offset: 90711},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2726, col: 13, offset: 92468},
																						run: (*parser).callonscopeItem523,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 134, col: 31, offset: 4072},
																			run: (*parser).callonscopeItem524,
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonscopeItem525,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonscopeItem531,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonscopeItem533,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1030, col: 61, offset: 32900},
															run: (*parser).callonscopeItem550,
															expr: &seqExpr{
																pos: position{line: 1030, col: 61, offset: 32900},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 1030, col: 61, offset: 32900},
																		label: "startI",
																		expr: &actionExpr{
																			pos: position{line: 2654, col: 8, offset: 90032},
																			run: (*parser).callonscopeItem553,
																			expr: &choiceExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2654, col: 9, offset: 90033},
																						expr: &anyMatcher{
																							line: 2654, col: 10, offset: 90034,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2654, col: 14, offset: 90038},
																						expr: &anyMatcher{
																							line: 2654, col: 15, offset: 90039,
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2647, col: 35, offset: 89777},
																		run: (*parser).callonscopeItem559,
																		expr: &seqExpr{
																			pos: position{line: 2647, col: 35, offset: 89777},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2647, col: 35, offset: 89777},
																					expr: &charClassMatcher{
																						pos:        position{line: 2663, col: 37, offset: 90336},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2647, col: 38, offset: 89780},
																					label: "unexpectedI",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2647, col: 50, offset: 89792},
																						expr: &seqExpr{
																							pos: position{line: 2647, col: 51, offset: 89793},
																							exprs: []any{
																								&notExpr{
																									pos: position{line: 2647, col: 51, offset: 89793},
																									expr: &actionExpr{
																										pos: position{line: 2642, col: 26, offset: 89615},
																										run: (*parser).callonscopeItem567,
																										expr: &choiceExpr{
																											pos: position{line: 2642, col: 27, offset: 89616},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2637, col: 23, offset: 89502},
																													run: (*parser).callonscopeItem569,
																													expr: &seqExpr{
																														pos: position{line: 2637, col: 23, offset: 89502},
																														exprs: []any{
																															&zeroOrMoreExpr{
																																pos: position{line: 2637, col: 23, offset: 89502},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2663, col: 37, offset: 90336},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2637, col: 27, offset: 89506},
																																alternatives: []any{
																																	&seqExpr{
																																		pos: position{line: 2637, col: 27, offset: 89506},
																																		exprs: []any{
																																			&zeroOrOneExpr{
																																				pos: position{line: 2637, col: 27, offset: 89506},
																																				expr: &litMatcher{
																																					pos:        position{line: 2637, col: 27, offset: 89506},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2637, col: 33, offset: 89512},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2636, col: 23, offset: 89477},
																																		expr: &anyMatcher{
																																			line: 2636, col: 24, offset: 89478,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2642, col: 33, offset: 89622},
																													val:        ";",
																													ignoreCase: false,
																													want:       "\";\"",
																												},
																												&andExpr{
																													pos: position{line: 2642, col: 39, offset: 89628},
																													expr: &seqExpr{
																														pos: position{line: 2642, col: 41, offset: 89630},
																														exprs: []any{
																															&zeroOrMoreExpr{
																																pos: position{line: 2642, col: 41, offset: 89630},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2663, col: 37, offset: 90336},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2642, col: 44, offset: 89633},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2647, col: 57, offset: 89799},
																									alternatives: []any{
																										&oneOrMoreExpr{
																											pos: position{line: 2647, col: 57, offset: 89799},
																											expr: &charClassMatcher{
																												pos:        position{line: 2647, col: 57, offset: 89799},
																												val:        "[^\\r\\n;{}]",
																												chars:      []rune{'\r', '\n', ';', '{', '}'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2647, col: 71, offset: 89813},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 2647, col: 71, offset: 89813},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2647, col: 75, offset: 89817},
																													expr: &charClassMatcher{
																														pos:        position{line: 2647, col: 75, offset: 89817},
																														val:        "[^}]",
																														chars:      []rune{'}'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2647, col: 81, offset: 89823},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1030, col: 83, offset: 32922},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2642, col: 26, offset: 89615},
																			run: (*parser).callonscopeItem595,
																			expr: &choiceExpr{
																				pos: position{line: 2642, col: 27, offset: 89616},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						run: (*parser).callonscopeItem597,
																						expr: &seqExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									alternatives: []any{
																										&seqExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											exprs: []any{
																												&zeroOrOneExpr{
																													pos: position{line: 2637, col: 27, offset: 89506},
																													expr: &litMatcher{
																														pos:        position{line: 2637, col: 27, offset: 89506},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2637, col: 33, offset: 89512},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2636, col: 23, offset: 89477},
																											expr: &anyMatcher{
																												line: 2636, col: 24, offset: 89478,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2642, col: 33, offset: 89622},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																					&andExpr{
																						pos: position{line: 2642, col: 39, offset: 89628},
																						expr: &seqExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2642, col: 41, offset: 89630},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2642, col: 44, offset: 89633},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 372, col: 5, offset: 11463},
										name: "ArrowBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 374, col: 5, offset: 11526},
										name: "Element",
									},
									&ruleRefExpr{
										pos:  position{line: 375, col: 5, offset: 11563},
										name: "BadItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BadItem",
			pos:  position{line: 402, col: 1, offset: 12304},
			expr: &choiceExpr{
				pos: position{line: 402, col: 12, offset: 12315},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 402, col: 12, offset: 12315},
						name: "reservedBadItem",
					},
					&actionExpr{
						pos: position{line: 402, col: 30, offset: 12333},
						run: (*parser).callonBadItem3,
						expr: &seqExpr{
							pos: position{line: 402, col: 30, offset: 12333},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 402, col: 30, offset: 12333},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 402, col: 36, offset: 12339},
										expr: &seqExpr{
											pos: position{line: 402, col: 37, offset: 12340},
											exprs: []any{
												&notExpr{
													pos: position{line: 402, col: 37, offset: 12340},
													expr: &seqExpr{
														pos: position{line: 402, col: 39, offset: 12342},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 402, col: 39, offset: 12342},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 402, col: 42, offset: 12345},
																val:        "[\\r\\n;{}]",
																chars:      []rune{'\r', '\n', ';', '{', '}'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 402, col: 53, offset: 12356},
													val:        "[^\\r\\n;{}]",
													chars:      []rune{'\r', '\n', ';', '{', '}'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 402, col: 66, offset: 12369},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 402, col: 72, offset: 12375},
										name: "OptionalBody",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 13541},
						run: (*parser).callonBadItem16,
						expr: &seqExpr{
							pos: position{line: 431, col: 5, offset: 13541},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 431, col: 5, offset: 13541},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 431, col: 8, offset: 13544},
									expr: &charClassMatcher{
										pos:        position{line: 431, col: 9, offset: 13545},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 431, col: 14, offset: 13550},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 431, col: 20, offset: 13556},
										name: "Body",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reservedBadItem",
			pos:  position{line: 453, col: 1, offset: 14408},
			expr: &actionExpr{
				pos: position{line: 453, col: 20, offset: 14427},
				run: (*parser).callonreservedBadItem1,
				expr: &seqExpr{
					pos: position{line: 453, col: 20, offset: 14427},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 2652, col: 14, offset: 89919},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2652, col: 14, offset: 89919},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 21, offset: 89926},
									val:        "else",
									ignoreCase: false,
									want:       "\"else\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 30, offset: 89935},
									val:        "switch",
									ignoreCase: false,
									want:       "\"switch\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 41, offset: 89946},
									val:        "case",
									ignoreCase: false,
									want:       "\"case\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 50, offset: 89955},
									val:        "default",
									ignoreCase: false,
									want:       "\"default\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 62, offset: 89967},
									val:        "for",
									ignoreCase: false,
									want:       "\"for\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 70, offset: 89975},
									val:        "return",
									ignoreCase: false,
									want:       "\"return\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 81, offset: 89986},
									val:        "break",
									ignoreCase: false,
									want:       "\"break\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 91, offset: 89996},
									val:        "continue",
									ignoreCase: false,
									want:       "\"continue\"",
								},
								&litMatcher{
									pos:        position{line: 2652, col: 104, offset: 90009},
									val:        "fallthrough",
									ignoreCase: false,
									want:       "\"fallthrough\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 29, offset: 14436},
							label: "reservedEndI",
							expr: &actionExpr{
								pos: position{line: 2654, col: 8, offset: 90032},
								run: (*parser).callonreservedBadItem15,
								expr: &choiceExpr{
									pos: position{line: 2654, col: 9, offset: 90033},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											expr: &anyMatcher{
												line: 2654, col: 10, offset: 90034,
											},
										},
										&notExpr{
											pos: position{line: 2654, col: 14, offset: 90038},
											expr: &anyMatcher{
												line: 2654, col: 15, offset: 90039,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 453, col: 46, offset: 14453},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 453, col: 49, offset: 14456},
							expr: &actionExpr{
								pos: position{line: 2647, col: 35, offset: 89777},
								run: (*parser).callonreservedBadItem24,
								expr: &seqExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2647, col: 35, offset: 89777},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 2647, col: 38, offset: 89780},
											label: "unexpectedI",
											expr: &oneOrMoreExpr{
												pos: position{line: 2647, col: 50, offset: 89792},
												expr: &seqExpr{
													pos: position{line: 2647, col: 51, offset: 89793},
													exprs: []any{
														&notExpr{
															pos: position{line: 2647, col: 51, offset: 89793},
															expr: &actionExpr{
																pos: position{line: 2642, col: 26, offset: 89615},
																run: (*parser).callonreservedBadItem32,
																expr: &choiceExpr{
																	pos: position{line: 2642, col: 27, offset: 89616},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			run: (*parser).callonreservedBadItem34,
																			expr: &seqExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										expr: &litMatcher{
																											pos:        position{line: 2637, col: 27, offset: 89506},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2637, col: 33, offset: 89512},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2636, col: 23, offset: 89477},
																								expr: &anyMatcher{
																									line: 2636, col: 24, offset: 89478,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2642, col: 33, offset: 89622},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2642, col: 39, offset: 89628},
																			expr: &seqExpr{
																				pos: position{line: 2642, col: 41, offset: 89630},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2642, col: 41, offset: 89630},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2642, col: 44, offset: 89633},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2647, col: 57, offset: 89799},
															alternatives: []any{
																&oneOrMoreExpr{
																	pos: position{line: 2647, col: 57, offset: 89799},
																	expr: &charClassMatcher{
																		pos:        position{line: 2647, col: 57, offset: 89799},
																		val:        "[^\\r\\n;{}]",
																		chars:      []rune{'\r', '\n', ';', '{', '}'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&seqExpr{
																	pos: position{line: 2647, col: 71, offset: 89813},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 2647, col: 71, offset: 89813},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2647, col: 75, offset: 89817},
																			expr: &charClassMatcher{
																				pos:        position{line: 2647, col: 75, offset: 89817},
																				val:        "[^}]",
																				chars:      []rune{'}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2647, col: 81, offset: 89823},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 61, offset: 14468},
							label: "endI",
							expr: &actionExpr{
								pos: position{line: 2654, col: 8, offset: 90032},
								run: (*parser).callonreservedBadItem60,
								expr: &choiceExpr{
									pos: position{line: 2654, col: 9, offset: 90033},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											expr: &anyMatcher{
												line: 2654, col: 10, offset: 90034,
											},
										},
										&notExpr{
											pos: position{line: 2654, col: 14, offset: 90038},
											expr: &anyMatcher{
												line: 2654, col: 15, offset: 90039,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 70, offset: 14477},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 76, offset: 14483},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobalCode",
			pos:  position{line: 488, col: 1, offset: 15756},
			expr: &actionExpr{
				pos: position{line: 488, col: 15, offset: 15770},
				run: (*parser).callonGlobalCode1,
				expr: &seqExpr{
					pos: position{line: 488, col: 15, offset: 15770},
					exprs: []any{
						&notExpr{
							pos: position{line: 488, col: 15, offset: 15770},
							expr: &choiceExpr{
								pos: position{line: 488, col: 17, offset: 15772},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 488, col: 17, offset: 15772},
										val:        "import",
										ignoreCase: false,
										want:       "\"import\"",
									},
									&litMatcher{
										pos:        position{line: 488, col: 28, offset: 15783},
										val:        "comp",
										ignoreCase: false,
										want:       "\"comp\"",
									},
									&litMatcher{
										pos:        position{line: 488, col: 37, offset: 15792},
										val:        "state",
										ignoreCase: false,
										want:       "\"state\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 488, col: 46, offset: 15801},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 52, offset: 15807},
								name: "GoStatement",
							},
						},
						&actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonGlobalCode10,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonGlobalCode12,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 496, col: 1, offset: 16099},
			expr: &choiceExpr{
				pos: position{line: 496, col: 9, offset: 16107},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 496, col: 9, offset: 16107},
						name: "implicitCode",
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 24, offset: 16122},
						name: "explicitCode",
					},
				},
			},
		},
		{
			name: "explicitCode",
			pos:  position{line: 498, col: 1, offset: 16136},
			expr: &actionExpr{
				pos: position{line: 498, col: 17, offset: 16152},
				run: (*parser).callonexplicitCode1,
				expr: &seqExpr{
					pos: position{line: 498, col: 17, offset: 16152},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonexplicitCode3,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2685, col: 24, offset: 91141},
							run: (*parser).callonexplicitCode9,
						},
						&litMatcher{
							pos:        position{line: 498, col: 33, offset: 16168},
							val:        "- ",
							ignoreCase: false,
							want:       "\"- \"",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 38, offset: 16173},
							label: "codeStatementsI",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 54, offset: 16189},
								name: "codeStatements",
							},
						},
					},
				},
			},
		},
		{
			name: "codeStatements",
			pos:  position{line: 505, col: 1, offset: 16323},
			expr: &choiceExpr{
				pos: position{line: 505, col: 19, offset: 16341},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 505, col: 19, offset: 16341},
						run: (*parser).calloncodeStatements2,
						expr: &seqExpr{
							pos: position{line: 505, col: 19, offset: 16341},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 505, col: 19, offset: 16341},
									label: "firstLineI",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 30, offset: 16352},
										name: "GoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 505, col: 43, offset: 16365},
									label: "restI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 505, col: 49, offset: 16371},
										expr: &ruleRefExpr{
											pos:  position{line: 505, col: 49, offset: 16371},
											name: "codeStatement",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 16580},
						run: (*parser).calloncodeStatements9,
						expr: &actionExpr{
							pos: position{line: 2637, col: 23, offset: 89502},
							run: (*parser).calloncodeStatements10,
							expr: &seqExpr{
								pos: position{line: 2637, col: 23, offset: 89502},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 2637, col: 27, offset: 89506},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2637, col: 27, offset: 89506},
												exprs: []any{
													&zeroOrOneExpr{
														pos: position{line: 2637, col: 27, offset: 89506},
														expr: &litMatcher{
															pos:        position{line: 2637, col: 27, offset: 89506},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2637, col: 33, offset: 89512},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&notExpr{
												pos: position{line: 2636, col: 23, offset: 89477},
												expr: &anyMatcher{
													line: 2636, col: 24, offset: 89478,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codeStatement",
			pos:  position{line: 524, col: 1, offset: 16938},
			expr: &choiceExpr{
				pos: position{line: 524, col: 18, offset: 16955},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 524, col: 18, offset: 16955},
						run: (*parser).calloncodeStatement2,
						expr: &seqExpr{
							pos: position{line: 524, col: 18, offset: 16955},
							exprs: []any{
								&notExpr{
									pos: position{line: 524, col: 18, offset: 16955},
									expr: &seqExpr{
										pos: position{line: 524, col: 20, offset: 16957},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 524, col: 20, offset: 16957},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 524, col: 23, offset: 16960},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).calloncodeStatement9,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).calloncodeStatement20,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).calloncodeStatement22,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 524, col: 36, offset: 16973},
									label: "stmtI",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 42, offset: 16979},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 526, col: 5, offset: 17020},
						run: (*parser).calloncodeStatement41,
						expr: &seqExpr{
							pos: position{line: 526, col: 5, offset: 17020},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).calloncodeStatement43,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).calloncodeStatement45,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 526, col: 9, offset: 17024},
									expr: &seqExpr{
										pos: position{line: 2640, col: 28, offset: 89578},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2640, col: 28, offset: 89578},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 526, col: 21, offset: 17036},
									name: "INDENTATION2",
								},
								&labeledExpr{
									pos:   position{line: 526, col: 34, offset: 17049},
									label: "stmtI",
									expr: &ruleRefExpr{
										pos:  position{line: 526, col: 40, offset: 17055},
										name: "GoExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "implicitCode",
			pos:  position{line: 530, col: 1, offset: 17095},
			expr: &actionExpr{
				pos: position{line: 530, col: 17, offset: 17111},
				run: (*parser).callonimplicitCode1,
				expr: &seqExpr{
					pos: position{line: 530, col: 17, offset: 17111},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 530, col: 17, offset: 17111},
							name: "implicitAhead",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 31, offset: 17125},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 37, offset: 17131},
								name: "GoStatement",
							},
						},
						&actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonimplicitCode6,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonimplicitCode8,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "implicitAhead",
			pos:  position{line: 537, col: 1, offset: 17267},
			expr: &andExpr{
				pos: position{line: 537, col: 18, offset: 17284},
				expr: &choiceExpr{
					pos: position{line: 537, col: 20, offset: 17286},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 537, col: 20, offset: 17286},
							name: "declaration",
						},
						&actionExpr{
							pos: position{line: 544, col: 15, offset: 17617},
							run: (*parser).callonimplicitAhead4,
							expr: &seqExpr{
								pos: position{line: 544, col: 15, offset: 17617},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1577, col: 26, offset: 52181},
										expr: &charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2012, col: 34, offset: 67998},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2012, col: 37, offset: 68001},
										expr: &seqExpr{
											pos: position{line: 2012, col: 38, offset: 68002},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2012, col: 38, offset: 68002},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2012, col: 42, offset: 68006},
													expr: &choiceExpr{
														pos: position{line: 2666, col: 20, offset: 90409},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		run: (*parser).callonimplicitAhead18,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2664, col: 37, offset: 90378},
																		expr: &litMatcher{
																			pos:        position{line: 2664, col: 37, offset: 90378},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2664, col: 43, offset: 90384},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 1560, col: 20, offset: 51927},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1577, col: 26, offset: 52181},
													expr: &charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 544, col: 32, offset: 17634},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 544, col: 35, offset: 17637},
										expr: &charClassMatcher{
											pos:        position{line: 544, col: 35, offset: 17637},
											val:        "[-+*/%|&^]",
											chars:      []rune{'-', '+', '*', '/', '%', '|', '&', '^'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 544, col: 47, offset: 17649},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 544, col: 51, offset: 17653},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 554, col: 20, offset: 17879},
										expr: &choiceExpr{
											pos: position{line: 554, col: 21, offset: 17880},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 554, col: 21, offset: 17880},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 554, col: 21, offset: 17880},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 554, col: 25, offset: 17884},
															expr: &charClassMatcher{
																pos:        position{line: 554, col: 25, offset: 17884},
																val:        "[^}]",
																chars:      []rune{'}'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 554, col: 31, offset: 17890},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 554, col: 37, offset: 17896},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 554, col: 37, offset: 17896},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 554, col: 41, offset: 17900},
															expr: &charClassMatcher{
																pos:        position{line: 554, col: 41, offset: 17900},
																val:        "[^]]",
																chars:      []rune{']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 554, col: 48, offset: 17907},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 554, col: 54, offset: 17913},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 554, col: 54, offset: 17913},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 554, col: 58, offset: 17917},
															expr: &charClassMatcher{
																pos:        position{line: 554, col: 58, offset: 17917},
																val:        "[^)]",
																chars:      []rune{')'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 554, col: 64, offset: 17923},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&seqExpr{
													pos: position{line: 554, col: 70, offset: 17929},
													exprs: []any{
														&notExpr{
															pos: position{line: 554, col: 70, offset: 17929},
															expr: &actionExpr{
																pos: position{line: 2642, col: 26, offset: 89615},
																run: (*parser).callonimplicitAhead51,
																expr: &choiceExpr{
																	pos: position{line: 2642, col: 27, offset: 89616},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			run: (*parser).callonimplicitAhead53,
																			expr: &seqExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										expr: &litMatcher{
																											pos:        position{line: 2637, col: 27, offset: 89506},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2637, col: 33, offset: 89512},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2636, col: 23, offset: 89477},
																								expr: &anyMatcher{
																									line: 2636, col: 24, offset: 89478,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2642, col: 33, offset: 89622},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2642, col: 39, offset: 89628},
																			expr: &seqExpr{
																				pos: position{line: 2642, col: 41, offset: 89630},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2642, col: 41, offset: 89630},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2642, col: 44, offset: 89633},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&anyMatcher{
															line: 554, col: 75, offset: 17934,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 547, col: 14, offset: 17720},
							run: (*parser).callonimplicitAhead71,
							expr: &seqExpr{
								pos: position{line: 547, col: 14, offset: 17720},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1577, col: 26, offset: 52181},
										expr: &charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 547, col: 27, offset: 17733},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 547, col: 31, offset: 17737},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 547, col: 31, offset: 17737},
												val:        "++",
												ignoreCase: false,
												want:       "\"++\"",
											},
											&litMatcher{
												pos:        position{line: 547, col: 38, offset: 17744},
												val:        "--",
												ignoreCase: false,
												want:       "\"--\"",
											},
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 551, col: 10, offset: 17795},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1560, col: 20, offset: 51927},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1577, col: 26, offset: 52181},
									expr: &charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 551, col: 23, offset: 17808},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 551, col: 26, offset: 17811},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).callonimplicitAhead88,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonimplicitAhead90,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 552, col: 23, offset: 17841},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 552, col: 23, offset: 17841},
									val:        "fallthrough",
									ignoreCase: false,
									want:       "\"fallthrough\"",
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).callonimplicitAhead109,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonimplicitAhead111,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "declaration",
			pos:  position{line: 539, col: 1, offset: 17354},
			expr: &choiceExpr{
				pos: position{line: 539, col: 16, offset: 17369},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 540, col: 16, offset: 17404},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 1560, col: 20, offset: 51927},
								val:        "[_\\pL]",
								chars:      []rune{'_'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1577, col: 26, offset: 52181},
								expr: &charClassMatcher{
									pos:        position{line: 1560, col: 20, offset: 51927},
									val:        "[_\\pL\\pNd]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2012, col: 34, offset: 67998},
								expr: &charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 2012, col: 37, offset: 68001},
								expr: &seqExpr{
									pos: position{line: 2012, col: 38, offset: 68002},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 2012, col: 38, offset: 68002},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2012, col: 42, offset: 68006},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).callondeclaration15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1577, col: 26, offset: 52181},
											expr: &charClassMatcher{
												pos:        position{line: 1560, col: 20, offset: 51927},
												val:        "[_\\pL\\pNd]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 540, col: 33, offset: 17421},
								expr: &charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 540, col: 36, offset: 17424},
								val:        ":=",
								ignoreCase: false,
								want:       "\":=\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 540, col: 41, offset: 17429},
								expr: &charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 554, col: 20, offset: 17879},
								expr: &choiceExpr{
									pos: position{line: 554, col: 21, offset: 17880},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 554, col: 21, offset: 17880},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 554, col: 21, offset: 17880},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 554, col: 25, offset: 17884},
													expr: &charClassMatcher{
														pos:        position{line: 554, col: 25, offset: 17884},
														val:        "[^}]",
														chars:      []rune{'}'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 554, col: 31, offset: 17890},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 554, col: 37, offset: 17896},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 554, col: 37, offset: 17896},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 554, col: 41, offset: 17900},
													expr: &charClassMatcher{
														pos:        position{line: 554, col: 41, offset: 17900},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 554, col: 48, offset: 17907},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 554, col: 54, offset: 17913},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 554, col: 54, offset: 17913},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 554, col: 58, offset: 17917},
													expr: &charClassMatcher{
														pos:        position{line: 554, col: 58, offset: 17917},
														val:        "[^)]",
														chars:      []rune{')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 554, col: 64, offset: 17923},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 554, col: 70, offset: 17929},
											exprs: []any{
												&notExpr{
													pos: position{line: 554, col: 70, offset: 17929},
													expr: &actionExpr{
														pos: position{line: 2642, col: 26, offset: 89615},
														run: (*parser).callondeclaration46,
														expr: &choiceExpr{
															pos: position{line: 2642, col: 27, offset: 89616},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callondeclaration48,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2642, col: 33, offset: 89622},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2642, col: 39, offset: 89628},
																	expr: &seqExpr{
																		pos: position{line: 2642, col: 41, offset: 89630},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2642, col: 41, offset: 89630},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 44, offset: 89633},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&anyMatcher{
													line: 554, col: 75, offset: 17934,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 539, col: 28, offset: 17381},
						name: "varDecl",
					},
				},
			},
		},
		{
			name: "varDecl",
			pos:  position{line: 541, col: 1, offset: 17448},
			expr: &seqExpr{
				pos: position{line: 541, col: 16, offset: 17463},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 541, col: 17, offset: 17464},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 541, col: 17, offset: 17464},
								val:        "var",
								ignoreCase: false,
								want:       "\"var\"",
							},
							&litMatcher{
								pos:        position{line: 541, col: 25, offset: 17472},
								val:        "const",
								ignoreCase: false,
								want:       "\"const\"",
							},
						},
					},
					&choiceExpr{
						pos: position{line: 541, col: 35, offset: 17482},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 541, col: 35, offset: 17482},
								exprs: []any{
									&oneOrMoreExpr{
										pos: position{line: 541, col: 35, offset: 17482},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 38, offset: 17485},
										name: "varDeclLine",
									},
								},
							},
							&seqExpr{
								pos: position{line: 541, col: 52, offset: 17499},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 541, col: 52, offset: 17499},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 541, col: 56, offset: 17503},
										expr: &seqExpr{
											pos: position{line: 541, col: 57, offset: 17504},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 541, col: 57, offset: 17504},
													expr: &choiceExpr{
														pos: position{line: 2666, col: 20, offset: 90409},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		run: (*parser).callonvarDecl18,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2664, col: 37, offset: 90378},
																		expr: &litMatcher{
																			pos:        position{line: 2664, col: 37, offset: 90378},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2664, col: 43, offset: 90384},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 541, col: 61, offset: 17508},
													name: "varDeclLine",
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 541, col: 75, offset: 17522},
										expr: &choiceExpr{
											pos: position{line: 2666, col: 20, offset: 90409},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2666, col: 31, offset: 90420},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															run: (*parser).callonvarDecl27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2664, col: 37, offset: 90378},
															expr: &litMatcher{
																pos:        position{line: 2664, col: 37, offset: 90378},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2664, col: 43, offset: 90384},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 541, col: 79, offset: 17526},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "varDeclLine",
			pos:  position{line: 542, col: 1, offset: 17531},
			expr: &seqExpr{
				pos: position{line: 542, col: 16, offset: 17546},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1560, col: 20, offset: 51927},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1577, col: 26, offset: 52181},
						expr: &charClassMatcher{
							pos:        position{line: 1560, col: 20, offset: 51927},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2012, col: 34, offset: 67998},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 2012, col: 37, offset: 68001},
						expr: &seqExpr{
							pos: position{line: 2012, col: 38, offset: 68002},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2012, col: 38, offset: 68002},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2012, col: 42, offset: 68006},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonvarDeclLine14,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&charClassMatcher{
									pos:        position{line: 1560, col: 20, offset: 51927},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1577, col: 26, offset: 52181},
									expr: &charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 542, col: 33, offset: 17563},
						expr: &seqExpr{
							pos: position{line: 542, col: 34, offset: 17564},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 542, col: 34, offset: 17564},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 542, col: 37, offset: 17567},
									name: "goType",
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 542, col: 46, offset: 17576},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 542, col: 49, offset: 17579},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 542, col: 53, offset: 17583},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 554, col: 20, offset: 17879},
						expr: &choiceExpr{
							pos: position{line: 554, col: 21, offset: 17880},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 554, col: 21, offset: 17880},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 554, col: 21, offset: 17880},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 554, col: 25, offset: 17884},
											expr: &charClassMatcher{
												pos:        position{line: 554, col: 25, offset: 17884},
												val:        "[^}]",
												chars:      []rune{'}'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 554, col: 31, offset: 17890},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 554, col: 37, offset: 17896},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 554, col: 37, offset: 17896},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 554, col: 41, offset: 17900},
											expr: &charClassMatcher{
												pos:        position{line: 554, col: 41, offset: 17900},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 554, col: 48, offset: 17907},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 554, col: 54, offset: 17913},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 554, col: 54, offset: 17913},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 554, col: 58, offset: 17917},
											expr: &charClassMatcher{
												pos:        position{line: 554, col: 58, offset: 17917},
												val:        "[^)]",
												chars:      []rune{')'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 554, col: 64, offset: 17923},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 554, col: 70, offset: 17929},
									exprs: []any{
										&notExpr{
											pos: position{line: 554, col: 70, offset: 17929},
											expr: &actionExpr{
												pos: position{line: 2642, col: 26, offset: 89615},
												run: (*parser).callonvarDeclLine50,
												expr: &choiceExpr{
													pos: position{line: 2642, col: 27, offset: 89616},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															run: (*parser).callonvarDeclLine52,
															expr: &seqExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						expr: &litMatcher{
																							pos:        position{line: 2637, col: 27, offset: 89506},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2637, col: 33, offset: 89512},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2636, col: 23, offset: 89477},
																				expr: &anyMatcher{
																					line: 2636, col: 24, offset: 89478,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 33, offset: 89622},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2642, col: 39, offset: 89628},
															expr: &seqExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2642, col: 41, offset: 89630},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2642, col: 44, offset: 89633},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
										&anyMatcher{
											line: 554, col: 75, offset: 17934,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 560, col: 1, offset: 18120},
			expr: &actionExpr{
				pos: position{line: 560, col: 11, offset: 18130},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 560, col: 11, offset: 18130},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 560, col: 11, offset: 18130},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 560, col: 20, offset: 18139},
							label: "errI",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 25, offset: 18144},
								name: "returnErr",
							},
						},
					},
				},
			},
		},
		{
			name: "returnErr",
			pos:  position{line: 567, col: 1, offset: 18259},
			expr: &choiceExpr{
				pos: position{line: 567, col: 14, offset: 18272},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 567, col: 14, offset: 18272},
						run: (*parser).callonreturnErr2,
						expr: &actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonreturnErr3,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonreturnErr5,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 569, col: 5, offset: 18318},
						run: (*parser).callonreturnErr22,
						expr: &seqExpr{
							pos: position{line: 569, col: 5, offset: 18318},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 569, col: 5, offset: 18318},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 569, col: 8, offset: 18321},
									label: "errI",
									expr: &ruleRefExpr{
										pos:  position{line: 569, col: 13, offset: 18326},
										name: "GoExpression",
									},
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).callonreturnErr28,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonreturnErr30,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 18389},
						run: (*parser).callonreturnErr47,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 18389},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 571, col: 5, offset: 18389},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 571, col: 8, offset: 18392},
									label: "errI",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 13, offset: 18397},
										name: "GoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 571, col: 26, offset: 18410},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonreturnErr54,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonreturnErr60,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonreturnErr68,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonreturnErr70,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 571, col: 48, offset: 18432},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonreturnErr96,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonreturnErr98,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 18595},
						run: (*parser).callonreturnErr115,
						expr: &seqExpr{
							pos: position{line: 573, col: 5, offset: 18595},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 573, col: 5, offset: 18595},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 573, col: 8, offset: 18598},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonreturnErr120,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonreturnErr126,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonreturnErr134,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonreturnErr136,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 573, col: 30, offset: 18620},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonreturnErr162,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonreturnErr164,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Component",
			pos:  position{line: 609, col: 1, offset: 19945},
			expr: &actionExpr{
				pos: position{line: 609, col: 14, offset: 19958},
				run: (*parser).callonComponent1,
				expr: &seqExpr{
					pos: position{line: 609, col: 14, offset: 19958},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 609, col: 14, offset: 19958},
							val:        "comp",
							ignoreCase: false,
							want:       "\"comp\"",
						},
						&labeledExpr{
							pos:   position{line: 609, col: 21, offset: 19965},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 621, col: 18, offset: 20341},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 621, col: 18, offset: 20341},
										run: (*parser).callonComponent6,
										expr: &seqExpr{
											pos: position{line: 621, col: 18, offset: 20341},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 621, col: 18, offset: 20341},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 621, col: 21, offset: 20344},
													label: "identI",
													expr: &actionExpr{
														pos: position{line: 263, col: 10, offset: 7729},
														run: (*parser).callonComponent11,
														expr: &labeledExpr{
															pos:   position{line: 263, col: 10, offset: 7729},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1577, col: 17, offset: 52172},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1560, col: 20, offset: 51927},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1577, col: 26, offset: 52181},
																		expr: &charClassMatcher{
																			pos:        position{line: 1560, col: 20, offset: 51927},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 623, col: 5, offset: 20386},
										run: (*parser).callonComponent17,
										expr: &seqExpr{
											pos: position{line: 623, col: 5, offset: 20386},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 623, col: 5, offset: 20386},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 623, col: 8, offset: 20389},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2654, col: 8, offset: 90032},
														run: (*parser).callonComponent22,
														expr: &choiceExpr{
															pos: position{line: 2654, col: 9, offset: 90033},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2654, col: 9, offset: 90033},
																	expr: &anyMatcher{
																		line: 2654, col: 10, offset: 90034,
																	},
																},
																&notExpr{
																	pos: position{line: 2654, col: 14, offset: 90038},
																	expr: &anyMatcher{
																		line: 2654, col: 15, offset: 90039,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 623, col: 19, offset: 20400},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 623, col: 26, offset: 20407},
														expr: &seqExpr{
															pos: position{line: 623, col: 27, offset: 20408},
															exprs: []any{
																&notExpr{
																	pos: position{line: 623, col: 27, offset: 20408},
																	expr: &seqExpr{
																		pos: position{line: 623, col: 29, offset: 20410},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 623, col: 29, offset: 20410},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 623, col: 32, offset: 20413},
																				val:        "[(};]",
																				chars:      []rune{'(', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 623, col: 39, offset: 20420},
																	val:        "[^\\r\\n(]",
																	chars:      []rune{'\r', '\n', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 623, col: 50, offset: 20431},
													expr: &litMatcher{
														pos:        position{line: 623, col: 51, offset: 20432},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 625, col: 5, offset: 20522},
										run: (*parser).callonComponent39,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonComponent40,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 609, col: 41, offset: 19985},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 44, offset: 19988},
							label: "paramsI",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 52, offset: 19996},
								name: "componentParamList",
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 71, offset: 20015},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 77, offset: 20021},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamList",
			pos:  position{line: 629, col: 1, offset: 20590},
			expr: &choiceExpr{
				pos: position{line: 629, col: 23, offset: 20612},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 629, col: 23, offset: 20612},
						run: (*parser).calloncomponentParamList2,
						expr: &seqExpr{
							pos: position{line: 629, col: 23, offset: 20612},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2746, col: 14, offset: 93228},
									run: (*parser).calloncomponentParamList4,
									expr: &seqExpr{
										pos: position{line: 2746, col: 14, offset: 93228},
										exprs: []any{
											&actionExpr{
												pos: position{line: 2654, col: 8, offset: 90032},
												run: (*parser).calloncomponentParamList6,
												expr: &choiceExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2654, col: 9, offset: 90033},
															expr: &anyMatcher{
																line: 2654, col: 10, offset: 90034,
															},
														},
														&notExpr{
															pos: position{line: 2654, col: 14, offset: 90038},
															expr: &anyMatcher{
																line: 2654, col: 15, offset: 90039,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 2720, col: 18, offset: 92335},
												run: (*parser).calloncomponentParamList12,
											},
											&actionExpr{
												pos: position{line: 2672, col: 12, offset: 90673},
												run: (*parser).calloncomponentParamList13,
												expr: &litMatcher{
													pos:        position{line: 2672, col: 12, offset: 90673},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2746, col: 32, offset: 93246},
												expr: &choiceExpr{
													pos: position{line: 2666, col: 20, offset: 90409},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2666, col: 31, offset: 90420},
																	run: (*parser).calloncomponentParamList19,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2664, col: 37, offset: 90378},
																	expr: &litMatcher{
																		pos:        position{line: 2664, col: 37, offset: 90378},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2664, col: 43, offset: 90384},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 629, col: 33, offset: 20622},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 629, col: 41, offset: 20630},
										expr: &ruleRefExpr{
											pos:  position{line: 629, col: 41, offset: 20630},
											name: "componentParams",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 629, col: 58, offset: 20647},
									label: "rParenI",
									expr: &choiceExpr{
										pos: position{line: 646, col: 26, offset: 21168},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2750, col: 12, offset: 93289},
												run: (*parser).calloncomponentParamList28,
												expr: &seqExpr{
													pos: position{line: 2750, col: 12, offset: 93289},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2750, col: 12, offset: 93289},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 2750, col: 15, offset: 93292},
															expr: &seqExpr{
																pos: position{line: 2750, col: 16, offset: 93293},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2750, col: 16, offset: 93293},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2750, col: 20, offset: 93297},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).calloncomponentParamList39,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2750, col: 26, offset: 93303},
															label: "endI",
															expr: &actionExpr{
																pos: position{line: 2673, col: 12, offset: 90711},
																run: (*parser).calloncomponentParamList44,
																expr: &litMatcher{
																	pos:        position{line: 2673, col: 12, offset: 90711},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).calloncomponentParamList46,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 646, col: 36, offset: 21178},
												run: (*parser).calloncomponentParamList47,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).calloncomponentParamList48,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 635, col: 5, offset: 20843},
						run: (*parser).calloncomponentParamList54,
						expr: &actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).calloncomponentParamList55,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParams",
			pos:  position{line: 650, col: 1, offset: 21238},
			expr: &actionExpr{
				pos: position{line: 650, col: 20, offset: 21257},
				run: (*parser).calloncomponentParams1,
				expr: &seqExpr{
					pos: position{line: 650, col: 20, offset: 21257},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 650, col: 20, offset: 21257},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 27, offset: 21264},
								name: "componentParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 42, offset: 21279},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 48, offset: 21285},
								expr: &seqExpr{
									pos: position{line: 650, col: 49, offset: 21286},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 650, col: 49, offset: 21286},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 650, col: 52, offset: 21289},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 650, col: 56, offset: 21293},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).calloncomponentParams15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 650, col: 60, offset: 21297},
											name: "componentParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParam",
			pos:  position{line: 654, col: 1, offset: 21387},
			expr: &actionExpr{
				pos: position{line: 654, col: 19, offset: 21405},
				run: (*parser).calloncomponentParam1,
				expr: &seqExpr{
					pos: position{line: 654, col: 19, offset: 21405},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 654, col: 19, offset: 21405},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 682, col: 23, offset: 22502},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 263, col: 10, offset: 7729},
										run: (*parser).calloncomponentParam5,
										expr: &labeledExpr{
											pos:   position{line: 263, col: 10, offset: 7729},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1577, col: 17, offset: 52172},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1577, col: 26, offset: 52181},
														expr: &charClassMatcher{
															pos:        position{line: 1560, col: 20, offset: 51927},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 682, col: 31, offset: 22510},
										run: (*parser).calloncomponentParam11,
										expr: &seqExpr{
											pos: position{line: 682, col: 31, offset: 22510},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 682, col: 31, offset: 22510},
													expr: &charClassMatcher{
														pos:        position{line: 682, col: 31, offset: 22510},
														val:        "[^\\r\\n :,)]",
														chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&andExpr{
													pos: position{line: 682, col: 44, offset: 22523},
													expr: &charClassMatcher{
														pos:        position{line: 682, col: 45, offset: 22524},
														val:        "[:,)]",
														chars:      []rune{':', ',', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 44, offset: 21430},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 2654, col: 8, offset: 90032},
								run: (*parser).calloncomponentParam18,
								expr: &choiceExpr{
									pos: position{line: 2654, col: 9, offset: 90033},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											expr: &anyMatcher{
												line: 2654, col: 10, offset: 90034,
											},
										},
										&notExpr{
											pos: position{line: 2654, col: 14, offset: 90038},
											expr: &anyMatcher{
												line: 2654, col: 15, offset: 90039,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 53, offset: 21439},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 654, col: 59, offset: 21445},
								expr: &ruleRefExpr{
									pos:  position{line: 654, col: 59, offset: 21445},
									name: "componentParamType",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 79, offset: 21465},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 654, col: 88, offset: 21474},
								expr: &ruleRefExpr{
									pos:  position{line: 654, col: 88, offset: 21474},
									name: "componentParamDefault",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamType",
			pos:  position{line: 686, col: 1, offset: 22609},
			expr: &actionExpr{
				pos: position{line: 686, col: 23, offset: 22631},
				run: (*parser).calloncomponentParamType1,
				expr: &seqExpr{
					pos: position{line: 686, col: 23, offset: 22631},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 686, col: 23, offset: 22631},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 686, col: 26, offset: 22634},
							label: "tI",
							expr: &ruleRefExpr{
								pos:  position{line: 686, col: 29, offset: 22637},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamDefault",
			pos:  position{line: 690, col: 1, offset: 22666},
			expr: &actionExpr{
				pos: position{line: 690, col: 26, offset: 22691},
				run: (*parser).calloncomponentParamDefault1,
				expr: &seqExpr{
					pos: position{line: 690, col: 26, offset: 22691},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 690, col: 26, offset: 22691},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 690, col: 29, offset: 22694},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 690, col: 33, offset: 22698},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 36, offset: 22701},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 42, offset: 22707},
								name: "componentParamDefaultValue",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamDefaultValue",
			pos:  position{line: 697, col: 1, offset: 22851},
			expr: &choiceExpr{
				pos: position{line: 697, col: 31, offset: 22881},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 697, col: 31, offset: 22881},
						run: (*parser).calloncomponentParamDefaultValue2,
						expr: &labeledExpr{
							pos:   position{line: 697, col: 31, offset: 22881},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 37, offset: 22887},
								name: "GoExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 22947},
						run: (*parser).calloncomponentParamDefaultValue5,
						expr: &actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).calloncomponentParamDefaultValue6,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCall",
			pos:  position{line: 722, col: 1, offset: 23713},
			expr: &actionExpr{
				pos: position{line: 722, col: 18, offset: 23730},
				run: (*parser).callonComponentCall1,
				expr: &seqExpr{
					pos: position{line: 722, col: 18, offset: 23730},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 722, col: 18, offset: 23730},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 722, col: 22, offset: 23734},
							label: "headerI",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 30, offset: 23742},
								name: "ComponentCallHeader",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 50, offset: 23762},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 56, offset: 23768},
								name: "componentCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCallHeader",
			pos:  position{line: 729, col: 1, offset: 23914},
			expr: &actionExpr{
				pos: position{line: 729, col: 24, offset: 23937},
				run: (*parser).callonComponentCallHeader1,
				expr: &seqExpr{
					pos: position{line: 729, col: 24, offset: 23937},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 729, col: 24, offset: 23937},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 729, col: 35, offset: 23948},
								expr: &actionExpr{
									pos: position{line: 267, col: 14, offset: 7835},
									run: (*parser).callonComponentCallHeader5,
									expr: &seqExpr{
										pos: position{line: 267, col: 14, offset: 7835},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 267, col: 14, offset: 7835},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 18, offset: 7839},
												label: "identI",
												expr: &actionExpr{
													pos: position{line: 263, col: 10, offset: 7729},
													run: (*parser).callonComponentCallHeader9,
													expr: &labeledExpr{
														pos:   position{line: 263, col: 10, offset: 7729},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 1577, col: 17, offset: 52172},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1560, col: 20, offset: 51927},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1577, col: 26, offset: 52181},
																	expr: &charClassMatcher{
																		pos:        position{line: 1560, col: 20, offset: 51927},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 46, offset: 23959},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 736, col: 22, offset: 24175},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 263, col: 10, offset: 7729},
										run: (*parser).callonComponentCallHeader17,
										expr: &labeledExpr{
											pos:   position{line: 263, col: 10, offset: 7729},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1577, col: 17, offset: 52172},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1577, col: 26, offset: 52181},
														expr: &charClassMatcher{
															pos:        position{line: 1560, col: 20, offset: 51927},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 736, col: 30, offset: 24183},
										run: (*parser).callonComponentCallHeader23,
										expr: &seqExpr{
											pos: position{line: 736, col: 30, offset: 24183},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 736, col: 30, offset: 24183},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 736, col: 37, offset: 24190},
														expr: &seqExpr{
															pos: position{line: 736, col: 38, offset: 24191},
															exprs: []any{
																&notExpr{
																	pos: position{line: 736, col: 38, offset: 24191},
																	expr: &seqExpr{
																		pos: position{line: 736, col: 40, offset: 24193},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 736, col: 40, offset: 24193},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 736, col: 43, offset: 24196},
																				val:        "[(};]",
																				chars:      []rune{'(', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 736, col: 50, offset: 24203},
																	val:        "[^\\r\\n(]",
																	chars:      []rune{'\r', '\n', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 736, col: 61, offset: 24214},
													expr: &litMatcher{
														pos:        position{line: 736, col: 62, offset: 24215},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 738, col: 5, offset: 24294},
										run: (*parser).callonComponentCallHeader36,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonComponentCallHeader37,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 70, offset: 23983},
							label: "argsI",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 76, offset: 23989},
								name: "componentArgList",
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgList",
			pos:  position{line: 742, col: 1, offset: 24363},
			expr: &choiceExpr{
				pos: position{line: 742, col: 21, offset: 24383},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 742, col: 21, offset: 24383},
						run: (*parser).calloncomponentArgList2,
						expr: &seqExpr{
							pos: position{line: 742, col: 21, offset: 24383},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2746, col: 14, offset: 93228},
									run: (*parser).calloncomponentArgList4,
									expr: &seqExpr{
										pos: position{line: 2746, col: 14, offset: 93228},
										exprs: []any{
											&actionExpr{
												pos: position{line: 2654, col: 8, offset: 90032},
												run: (*parser).calloncomponentArgList6,
												expr: &choiceExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2654, col: 9, offset: 90033},
															expr: &anyMatcher{
																line: 2654, col: 10, offset: 90034,
															},
														},
														&notExpr{
															pos: position{line: 2654, col: 14, offset: 90038},
															expr: &anyMatcher{
																line: 2654, col: 15, offset: 90039,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 2720, col: 18, offset: 92335},
												run: (*parser).calloncomponentArgList12,
											},
											&actionExpr{
												pos: position{line: 2672, col: 12, offset: 90673},
												run: (*parser).calloncomponentArgList13,
												expr: &litMatcher{
													pos:        position{line: 2672, col: 12, offset: 90673},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2746, col: 32, offset: 93246},
												expr: &choiceExpr{
													pos: position{line: 2666, col: 20, offset: 90409},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2666, col: 31, offset: 90420},
																	run: (*parser).calloncomponentArgList19,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2664, col: 37, offset: 90378},
																	expr: &litMatcher{
																		pos:        position{line: 2664, col: 37, offset: 90378},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2664, col: 43, offset: 90384},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 742, col: 31, offset: 24393},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 742, col: 37, offset: 24399},
										expr: &ruleRefExpr{
											pos:  position{line: 742, col: 37, offset: 24399},
											name: "componentArgs",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 742, col: 52, offset: 24414},
									label: "rParenI",
									expr: &choiceExpr{
										pos: position{line: 759, col: 24, offset: 24937},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2750, col: 12, offset: 93289},
												run: (*parser).calloncomponentArgList28,
												expr: &seqExpr{
													pos: position{line: 2750, col: 12, offset: 93289},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2750, col: 12, offset: 93289},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 2750, col: 15, offset: 93292},
															expr: &seqExpr{
																pos: position{line: 2750, col: 16, offset: 93293},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2750, col: 16, offset: 93293},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2750, col: 20, offset: 93297},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).calloncomponentArgList39,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2750, col: 26, offset: 93303},
															label: "endI",
															expr: &actionExpr{
																pos: position{line: 2673, col: 12, offset: 90711},
																run: (*parser).calloncomponentArgList44,
																expr: &litMatcher{
																	pos:        position{line: 2673, col: 12, offset: 90711},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).calloncomponentArgList46,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 759, col: 34, offset: 24947},
												run: (*parser).calloncomponentArgList47,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).calloncomponentArgList48,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 24608},
						run: (*parser).calloncomponentArgList54,
						expr: &actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).calloncomponentArgList55,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgs",
			pos:  position{line: 763, col: 1, offset: 25006},
			expr: &actionExpr{
				pos: position{line: 763, col: 18, offset: 25023},
				run: (*parser).calloncomponentArgs1,
				expr: &seqExpr{
					pos: position{line: 763, col: 18, offset: 25023},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 763, col: 18, offset: 25023},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 25, offset: 25030},
								name: "componentArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 38, offset: 25043},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 763, col: 44, offset: 25049},
								expr: &seqExpr{
									pos: position{line: 763, col: 45, offset: 25050},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 763, col: 45, offset: 25050},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 763, col: 48, offset: 25053},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 763, col: 52, offset: 25057},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).calloncomponentArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 763, col: 56, offset: 25061},
											name: "componentArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArg",
			pos:  position{line: 767, col: 1, offset: 25147},
			expr: &actionExpr{
				pos: position{line: 767, col: 17, offset: 25163},
				run: (*parser).calloncomponentArg1,
				expr: &seqExpr{
					pos: position{line: 767, col: 17, offset: 25163},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 767, col: 17, offset: 25163},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 774, col: 21, offset: 25359},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 263, col: 10, offset: 7729},
										run: (*parser).calloncomponentArg5,
										expr: &labeledExpr{
											pos:   position{line: 263, col: 10, offset: 7729},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1577, col: 17, offset: 52172},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1577, col: 26, offset: 52181},
														expr: &charClassMatcher{
															pos:        position{line: 1560, col: 20, offset: 51927},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 774, col: 29, offset: 25367},
										run: (*parser).calloncomponentArg11,
										expr: &seqExpr{
											pos: position{line: 774, col: 29, offset: 25367},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 774, col: 29, offset: 25367},
													expr: &charClassMatcher{
														pos:        position{line: 774, col: 29, offset: 25367},
														val:        "[^\\r\\n :,)]",
														chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&andExpr{
													pos: position{line: 774, col: 42, offset: 25380},
													expr: &charClassMatcher{
														pos:        position{line: 774, col: 43, offset: 25381},
														val:        "[:,)]",
														chars:      []rune{':', ',', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 767, col: 40, offset: 25186},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 43, offset: 25189},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 48, offset: 25194},
								name: "componentArgValue",
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgValue",
			pos:  position{line: 778, col: 1, offset: 25465},
			expr: &choiceExpr{
				pos: position{line: 778, col: 22, offset: 25486},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 778, col: 22, offset: 25486},
						run: (*parser).calloncomponentArgValue2,
						expr: &seqExpr{
							pos: position{line: 778, col: 22, offset: 25486},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 778, col: 22, offset: 25486},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 778, col: 26, offset: 25490},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).calloncomponentArgValue9,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 778, col: 30, offset: 25494},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 36, offset: 25500},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 25539},
						run: (*parser).calloncomponentArgValue15,
						expr: &seqExpr{
							pos: position{line: 780, col: 5, offset: 25539},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 780, col: 5, offset: 25539},
									expr: &litMatcher{
										pos:        position{line: 780, col: 5, offset: 25539},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 780, col: 10, offset: 25544},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 780, col: 13, offset: 25547},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).calloncomponentArgValue22,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentCallBody",
			pos:  position{line: 794, col: 1, offset: 25985},
			expr: &choiceExpr{
				pos: position{line: 794, col: 22, offset: 26006},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 794, col: 22, offset: 26006},
						name: "UnderscoreBlockShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 794, col: 49, offset: 26033},
						name: "Scope",
					},
					&actionExpr{
						pos: position{line: 794, col: 57, offset: 26041},
						run: (*parser).calloncomponentCallBody4,
						expr: &actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).calloncomponentCallBody5,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnderscoreBlockShorthand",
			pos:  position{line: 800, col: 1, offset: 26277},
			expr: &actionExpr{
				pos: position{line: 800, col: 29, offset: 26305},
				run: (*parser).callonUnderscoreBlockShorthand1,
				expr: &seqExpr{
					pos: position{line: 800, col: 29, offset: 26305},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 800, col: 29, offset: 26305},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 800, col: 33, offset: 26309},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 39, offset: 26315},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 811, col: 1, offset: 26629},
			expr: &actionExpr{
				pos: position{line: 811, col: 10, offset: 26638},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 811, col: 10, offset: 26638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 811, col: 10, offset: 26638},
							label: "blockI",
							expr: &actionExpr{
								pos: position{line: 817, col: 19, offset: 26785},
								run: (*parser).callonBlock4,
								expr: &seqExpr{
									pos: position{line: 817, col: 19, offset: 26785},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 817, col: 19, offset: 26785},
											val:        "block",
											ignoreCase: false,
											want:       "\"block\"",
										},
										&labeledExpr{
											pos:   position{line: 817, col: 27, offset: 26793},
											label: "nameI",
											expr: &choiceExpr{
												pos: position{line: 824, col: 14, offset: 26925},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 824, col: 14, offset: 26925},
														run: (*parser).callonBlock9,
														expr: &seqExpr{
															pos: position{line: 824, col: 14, offset: 26925},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 824, col: 14, offset: 26925},
																	expr: &charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 824, col: 17, offset: 26928},
																	label: "identI",
																	expr: &actionExpr{
																		pos: position{line: 263, col: 10, offset: 7729},
																		run: (*parser).callonBlock14,
																		expr: &labeledExpr{
																			pos:   position{line: 263, col: 10, offset: 7729},
																			label: "identI",
																			expr: &seqExpr{
																				pos: position{line: 1577, col: 17, offset: 52172},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 1560, col: 20, offset: 51927},
																						val:        "[_\\pL]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1577, col: 26, offset: 52181},
																						expr: &charClassMatcher{
																							pos:        position{line: 1560, col: 20, offset: 51927},
																							val:        "[_\\pL\\pNd]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 826, col: 5, offset: 26969},
														run: (*parser).callonBlock20,
														expr: &seqExpr{
															pos: position{line: 826, col: 5, offset: 26969},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 826, col: 5, offset: 26969},
																	expr: &charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 826, col: 8, offset: 26972},
																	label: "startI",
																	expr: &actionExpr{
																		pos: position{line: 2654, col: 8, offset: 90032},
																		run: (*parser).callonBlock25,
																		expr: &choiceExpr{
																			pos: position{line: 2654, col: 9, offset: 90033},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					expr: &anyMatcher{
																						line: 2654, col: 10, offset: 90034,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2654, col: 14, offset: 90038},
																					expr: &anyMatcher{
																						line: 2654, col: 15, offset: 90039,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 826, col: 19, offset: 26983},
																	label: "identI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 826, col: 26, offset: 26990},
																		expr: &seqExpr{
																			pos: position{line: 826, col: 27, offset: 26991},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 826, col: 27, offset: 26991},
																					expr: &seqExpr{
																						pos: position{line: 826, col: 29, offset: 26993},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 826, col: 29, offset: 26993},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&charClassMatcher{
																								pos:        position{line: 826, col: 32, offset: 26996},
																								val:        "[[{};]",
																								chars:      []rune{'[', '{', '}', ';'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 826, col: 40, offset: 27004},
																					val:        "[^\\r\\n[{};]",
																					chars:      []rune{'\r', '\n', '[', '{', '}', ';'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&andExpr{
																	pos: position{line: 826, col: 54, offset: 27018},
																	expr: &charClassMatcher{
																		pos:        position{line: 826, col: 55, offset: 27019},
																		val:        "[[{};]",
																		chars:      []rune{'[', '{', '}', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 828, col: 5, offset: 27108},
														run: (*parser).callonBlock42,
														expr: &actionExpr{
															pos: position{line: 2654, col: 8, offset: 90032},
															run: (*parser).callonBlock43,
															expr: &choiceExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2654, col: 9, offset: 90033},
																		expr: &anyMatcher{
																			line: 2654, col: 10, offset: 90034,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2654, col: 14, offset: 90038},
																		expr: &anyMatcher{
																			line: 2654, col: 15, offset: 90039,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 32, offset: 26660},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 38, offset: 26666},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 847, col: 1, offset: 27644},
			expr: &actionExpr{
				pos: position{line: 847, col: 7, offset: 27650},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 847, col: 7, offset: 27650},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 847, col: 7, offset: 27650},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&labeledExpr{
							pos:   position{line: 847, col: 12, offset: 27655},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 18, offset: 27661},
								name: "ifCondition",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 30, offset: 27673},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 36, offset: 27679},
								name: "Body",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 41, offset: 27684},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 847, col: 50, offset: 27693},
								expr: &ruleRefExpr{
									pos:  position{line: 847, col: 50, offset: 27693},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 58, offset: 27701},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 847, col: 64, offset: 27707},
								expr: &ruleRefExpr{
									pos:  position{line: 847, col: 64, offset: 27707},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 857, col: 1, offset: 27968},
			expr: &actionExpr{
				pos: position{line: 857, col: 11, offset: 27978},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 857, col: 11, offset: 27978},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 857, col: 11, offset: 27978},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonElseIf7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 857, col: 15, offset: 27982},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 857, col: 22, offset: 27989},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 857, col: 25, offset: 27992},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 30, offset: 27997},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 36, offset: 28003},
								name: "ifCondition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 857, col: 48, offset: 28015},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 857, col: 51, offset: 28018},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 57, offset: 28024},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 865, col: 1, offset: 28188},
			expr: &actionExpr{
				pos: position{line: 865, col: 9, offset: 28196},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 865, col: 9, offset: 28196},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 865, col: 9, offset: 28196},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonElse7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 865, col: 13, offset: 28200},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 865, col: 20, offset: 28207},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 23, offset: 28210},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 29, offset: 28216},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "ifCondition",
			pos:  position{line: 872, col: 1, offset: 28330},
			expr: &choiceExpr{
				pos: position{line: 872, col: 16, offset: 28345},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 872, col: 16, offset: 28345},
						run: (*parser).callonifCondition2,
						expr: &seqExpr{
							pos: position{line: 872, col: 16, offset: 28345},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 872, col: 16, offset: 28345},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 872, col: 19, offset: 28348},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 25, offset: 28354},
										name: "IfExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 28395},
						run: (*parser).callonifCondition8,
						expr: &actionExpr{
							pos: position{line: 832, col: 21, offset: 27201},
							run: (*parser).callonifCondition9,
							expr: &labeledExpr{
								pos:   position{line: 832, col: 21, offset: 27201},
								label: "posI",
								expr: &actionExpr{
									pos: position{line: 2654, col: 8, offset: 90032},
									run: (*parser).callonifCondition11,
									expr: &choiceExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												expr: &anyMatcher{
													line: 2654, col: 10, offset: 90034,
												},
											},
											&notExpr{
												pos: position{line: 2654, col: 14, offset: 90038},
												expr: &anyMatcher{
													line: 2654, col: 15, offset: 90039,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 882, col: 1, offset: 28634},
			expr: &actionExpr{
				pos: position{line: 882, col: 11, offset: 28644},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 882, col: 11, offset: 28644},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 882, col: 11, offset: 28644},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 20, offset: 28653},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 32, offset: 28665},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 49, offset: 28682},
							label: "endI",
							expr: &actionExpr{
								pos: position{line: 2654, col: 8, offset: 90032},
								run: (*parser).callonSwitch7,
								expr: &choiceExpr{
									pos: position{line: 2654, col: 9, offset: 90033},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											expr: &anyMatcher{
												line: 2654, col: 10, offset: 90034,
											},
										},
										&notExpr{
											pos: position{line: 2654, col: 14, offset: 90038},
											expr: &anyMatcher{
												line: 2654, col: 15, offset: 90039,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 58, offset: 28691},
							label: "casesI",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 65, offset: 28698},
								name: "switchCases",
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 906, col: 1, offset: 29306},
			expr: &choiceExpr{
				pos: position{line: 906, col: 21, offset: 29326},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 906, col: 21, offset: 29326},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 906, col: 21, offset: 29326},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 906, col: 21, offset: 29326},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 906, col: 24, offset: 29329},
									expr: &litMatcher{
										pos:        position{line: 906, col: 25, offset: 29330},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 29376},
						run: (*parser).callonswitchComparator8,
						expr: &seqExpr{
							pos: position{line: 908, col: 5, offset: 29376},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 908, col: 5, offset: 29376},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 908, col: 8, offset: 29379},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 14, offset: 29385},
										name: "ConditionalGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 908, col: 38, offset: 29409},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 908, col: 41, offset: 29412},
									expr: &litMatcher{
										pos:        position{line: 908, col: 42, offset: 29413},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 910, col: 5, offset: 29464},
						run: (*parser).callonswitchComparator18,
						expr: &seqExpr{
							pos: position{line: 910, col: 5, offset: 29464},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 910, col: 5, offset: 29464},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 910, col: 8, offset: 29467},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 910, col: 14, offset: 29473},
										name: "ConditionalGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 910, col: 38, offset: 29497},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonswitchComparator25,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 910, col: 49, offset: 29508},
									expr: &charClassMatcher{
										pos:        position{line: 910, col: 49, offset: 29508},
										val:        "[^\\r\\n{]",
										chars:      []rune{'\r', '\n', '{'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 910, col: 59, offset: 29518},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonswitchComparator34,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchCases",
			pos:  position{line: 915, col: 1, offset: 29687},
			expr: &actionExpr{
				pos: position{line: 915, col: 16, offset: 29702},
				run: (*parser).callonswitchCases1,
				expr: &seqExpr{
					pos: position{line: 915, col: 16, offset: 29702},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2762, col: 15, offset: 93507},
							run: (*parser).callonswitchCases3,
							expr: &seqExpr{
								pos: position{line: 2762, col: 15, offset: 93507},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonswitchCases5,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2720, col: 18, offset: 92335},
										run: (*parser).callonswitchCases11,
									},
									&actionExpr{
										pos: position{line: 2675, col: 12, offset: 90750},
										run: (*parser).callonswitchCases12,
										expr: &litMatcher{
											pos:        position{line: 2675, col: 12, offset: 90750},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2762, col: 33, offset: 93525},
										expr: &choiceExpr{
											pos: position{line: 2666, col: 20, offset: 90409},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2666, col: 31, offset: 90420},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															run: (*parser).callonswitchCases18,
														},
														&zeroOrOneExpr{
															pos: position{line: 2664, col: 37, offset: 90378},
															expr: &litMatcher{
																pos:        position{line: 2664, col: 37, offset: 90378},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2664, col: 43, offset: 90384},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 915, col: 27, offset: 29713},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonswitchCases26,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 915, col: 31, offset: 29717},
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 31, offset: 29717},
								name: "preFirstCase",
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 45, offset: 29731},
							label: "itms",
							expr: &zeroOrMoreExpr{
								pos: position{line: 915, col: 50, offset: 29736},
								expr: &ruleRefExpr{
									pos:  position{line: 915, col: 50, offset: 29736},
									name: "switchCase",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 915, col: 62, offset: 29748},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonswitchCases39,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 66, offset: 29752},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 2766, col: 13, offset: 93569},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2766, col: 13, offset: 93569},
										run: (*parser).callonswitchCases45,
										expr: &seqExpr{
											pos: position{line: 2766, col: 13, offset: 93569},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2766, col: 13, offset: 93569},
													expr: &choiceExpr{
														pos: position{line: 2666, col: 20, offset: 90409},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		run: (*parser).callonswitchCases51,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2664, col: 37, offset: 90378},
																		expr: &litMatcher{
																			pos:        position{line: 2664, col: 37, offset: 90378},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2664, col: 43, offset: 90384},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2766, col: 17, offset: 93573},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2676, col: 12, offset: 90788},
														run: (*parser).callonswitchCases56,
														expr: &litMatcher{
															pos:        position{line: 2676, col: 12, offset: 90788},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonswitchCases58,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2768, col: 5, offset: 93622},
										run: (*parser).callonswitchCases59,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonswitchCases60,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "preFirstCase",
			pos:  position{line: 948, col: 1, offset: 30648},
			expr: &actionExpr{
				pos: position{line: 948, col: 17, offset: 30664},
				run: (*parser).callonpreFirstCase1,
				expr: &oneOrMoreExpr{
					pos: position{line: 948, col: 17, offset: 30664},
					expr: &choiceExpr{
						pos: position{line: 948, col: 18, offset: 30665},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 948, col: 18, offset: 30665},
								exprs: []any{
									&notExpr{
										pos: position{line: 948, col: 18, offset: 30665},
										expr: &choiceExpr{
											pos: position{line: 948, col: 20, offset: 30667},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 948, col: 20, offset: 30667},
													val:        "case",
													ignoreCase: false,
													want:       "\"case\"",
												},
												&litMatcher{
													pos:        position{line: 948, col: 29, offset: 30676},
													val:        "default",
													ignoreCase: false,
													want:       "\"default\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 948, col: 40, offset: 30687},
										val:        "[^{}]",
										chars:      []rune{'{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&seqExpr{
								pos: position{line: 948, col: 48, offset: 30695},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 948, col: 48, offset: 30695},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
									&ruleRefExpr{
										pos:  position{line: 948, col: 52, offset: 30699},
										name: "preFirstCase",
									},
									&zeroOrOneExpr{
										pos: position{line: 948, col: 65, offset: 30712},
										expr: &litMatcher{
											pos:        position{line: 948, col: 65, offset: 30712},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchCase",
			pos:  position{line: 958, col: 1, offset: 30955},
			expr: &actionExpr{
				pos: position{line: 958, col: 15, offset: 30969},
				run: (*parser).callonswitchCase1,
				expr: &seqExpr{
					pos: position{line: 958, col: 15, offset: 30969},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 958, col: 15, offset: 30969},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonswitchCase7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 19, offset: 30973},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 958, col: 26, offset: 30980},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 958, col: 26, offset: 30980},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 958, col: 33, offset: 30987},
										name: "Default",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 962, col: 1, offset: 31023},
			expr: &actionExpr{
				pos: position{line: 962, col: 9, offset: 31031},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 962, col: 9, offset: 31031},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 962, col: 9, offset: 31031},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 962, col: 16, offset: 31038},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 962, col: 19, offset: 31041},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 962, col: 25, offset: 31047},
								name: "caseCondition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 962, col: 39, offset: 31061},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 962, col: 42, offset: 31064},
							label: "colonI",
							expr: &choiceExpr{
								pos: position{line: 979, col: 16, offset: 31532},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 979, col: 16, offset: 31532},
										run: (*parser).callonCase12,
										expr: &litMatcher{
											pos:        position{line: 979, col: 16, offset: 31532},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
									&actionExpr{
										pos: position{line: 981, col: 5, offset: 31565},
										run: (*parser).callonCase14,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonCase15,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 962, col: 61, offset: 31083},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 962, col: 67, offset: 31089},
								expr: &ruleRefExpr{
									pos:  position{line: 962, col: 67, offset: 31089},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 971, col: 1, offset: 31304},
			expr: &actionExpr{
				pos: position{line: 971, col: 12, offset: 31315},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 971, col: 12, offset: 31315},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 971, col: 12, offset: 31315},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 971, col: 22, offset: 31325},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 971, col: 25, offset: 31328},
							label: "colonI",
							expr: &choiceExpr{
								pos: position{line: 979, col: 16, offset: 31532},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 979, col: 16, offset: 31532},
										run: (*parser).callonDefault8,
										expr: &litMatcher{
											pos:        position{line: 979, col: 16, offset: 31532},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
									&actionExpr{
										pos: position{line: 981, col: 5, offset: 31565},
										run: (*parser).callonDefault10,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonDefault11,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 971, col: 44, offset: 31347},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 971, col: 50, offset: 31353},
								expr: &ruleRefExpr{
									pos:  position{line: 971, col: 50, offset: 31353},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "caseCondition",
			pos:  position{line: 991, col: 1, offset: 31795},
			expr: &choiceExpr{
				pos: position{line: 991, col: 18, offset: 31812},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 991, col: 18, offset: 31812},
						run: (*parser).calloncaseCondition2,
						expr: &seqExpr{
							pos: position{line: 991, col: 18, offset: 31812},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 991, col: 18, offset: 31812},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 991, col: 21, offset: 31815},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 27, offset: 31821},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 31860},
						run: (*parser).calloncaseCondition8,
						expr: &actionExpr{
							pos: position{line: 832, col: 21, offset: 27201},
							run: (*parser).calloncaseCondition9,
							expr: &labeledExpr{
								pos:   position{line: 832, col: 21, offset: 27201},
								label: "posI",
								expr: &actionExpr{
									pos: position{line: 2654, col: 8, offset: 90032},
									run: (*parser).calloncaseCondition11,
									expr: &choiceExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												expr: &anyMatcher{
													line: 2654, col: 10, offset: 90034,
												},
											},
											&notExpr{
												pos: position{line: 2654, col: 14, offset: 90038},
												expr: &anyMatcher{
													line: 2654, col: 15, offset: 90039,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchThen",
			pos:  position{line: 997, col: 1, offset: 31902},
			expr: &actionExpr{
				pos: position{line: 997, col: 15, offset: 31916},
				run: (*parser).callonswitchThen1,
				expr: &labeledExpr{
					pos:   position{line: 997, col: 15, offset: 31916},
					label: "itmsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 997, col: 21, offset: 31922},
						expr: &ruleRefExpr{
							pos:  position{line: 997, col: 21, offset: 31922},
							name: "switchScopeItem",
						},
					},
				},
			},
		},
		{
			name: "switchScopeItem",
			pos:  position{line: 1001, col: 1, offset: 32010},
			expr: &actionExpr{
				pos: position{line: 1001, col: 20, offset: 32029},
				run: (*parser).callonswitchScopeItem1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 20, offset: 32029},
					exprs: []any{
						&notExpr{
							pos: position{line: 1001, col: 20, offset: 32029},
							expr: &choiceExpr{
								pos: position{line: 1001, col: 22, offset: 32031},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1001, col: 22, offset: 32031},
										val:        "}",
										ignoreCase: false,
										want:       "\"}\"",
									},
									&seqExpr{
										pos: position{line: 1001, col: 28, offset: 32037},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1001, col: 28, offset: 32037},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 1001, col: 35, offset: 32044},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1001, col: 40, offset: 32049},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1001, col: 40, offset: 32049},
												val:        "default",
												ignoreCase: false,
												want:       "\"default\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1001, col: 50, offset: 32059},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1001, col: 53, offset: 32062},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1001, col: 58, offset: 32067},
							label: "itmI",
							expr: &ruleRefExpr{
								pos:  position{line: 1001, col: 63, offset: 32072},
								name: "scopeItem",
							},
						},
					},
				},
			},
		},
		{
			name: "For",
			pos:  position{line: 1009, col: 1, offset: 32286},
			expr: &actionExpr{
				pos: position{line: 1009, col: 8, offset: 32293},
				run: (*parser).callonFor1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 8, offset: 32293},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1009, col: 8, offset: 32293},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 14, offset: 32299},
							label: "exprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1009, col: 20, offset: 32305},
								expr: &ruleRefExpr{
									pos:  position{line: 1009, col: 20, offset: 32305},
									name: "forExpression",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1009, col: 35, offset: 32320},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 38, offset: 32323},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 44, offset: 32329},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "forExpression",
			pos:  position{line: 1017, col: 1, offset: 32502},
			expr: &actionExpr{
				pos: position{line: 1017, col: 18, offset: 32519},
				run: (*parser).callonforExpression1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 18, offset: 32519},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1017, col: 18, offset: 32519},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 21, offset: 32522},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 1017, col: 27, offset: 32528},
								name: "ForExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 1062, col: 1, offset: 33895},
			expr: &actionExpr{
				pos: position{line: 1062, col: 12, offset: 33906},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 12, offset: 33906},
					exprs: []any{
						&notExpr{
							pos: position{line: 1062, col: 12, offset: 33906},
							expr: &choiceExpr{
								pos: position{line: 2652, col: 14, offset: 89919},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2652, col: 14, offset: 89919},
										val:        "if",
										ignoreCase: false,
										want:       "\"if\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 21, offset: 89926},
										val:        "else",
										ignoreCase: false,
										want:       "\"else\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 30, offset: 89935},
										val:        "switch",
										ignoreCase: false,
										want:       "\"switch\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 41, offset: 89946},
										val:        "case",
										ignoreCase: false,
										want:       "\"case\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 50, offset: 89955},
										val:        "default",
										ignoreCase: false,
										want:       "\"default\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 62, offset: 89967},
										val:        "for",
										ignoreCase: false,
										want:       "\"for\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 70, offset: 89975},
										val:        "return",
										ignoreCase: false,
										want:       "\"return\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 81, offset: 89986},
										val:        "break",
										ignoreCase: false,
										want:       "\"break\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 91, offset: 89996},
										val:        "continue",
										ignoreCase: false,
										want:       "\"continue\"",
									},
									&litMatcher{
										pos:        position{line: 2652, col: 104, offset: 90009},
										val:        "fallthrough",
										ignoreCase: false,
										want:       "\"fallthrough\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 22, offset: 33916},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2046, col: 16, offset: 69684},
								expr: &charClassMatcher{
									pos:        position{line: 2032, col: 27, offset: 69023},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 40, offset: 33934},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1062, col: 46, offset: 33940},
								expr: &litMatcher{
									pos:        position{line: 1062, col: 46, offset: 33940},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1062, col: 51, offset: 33945},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 54, offset: 33948},
							label: "attrsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1062, col: 61, offset: 33955},
								expr: &ruleRefExpr{
									pos:  position{line: 1062, col: 61, offset: 33955},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 82, offset: 33976},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 88, offset: 33982},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "RawElement",
			pos:  position{line: 1076, col: 1, offset: 34431},
			expr: &actionExpr{
				pos: position{line: 1076, col: 15, offset: 34445},
				run: (*parser).callonRawElement1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 15, offset: 34445},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1076, col: 15, offset: 34445},
							val:        "!raw",
							ignoreCase: false,
							want:       "\"!raw\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1076, col: 22, offset: 34452},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 25, offset: 34455},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 30, offset: 34460},
								name: "rawElementBody",
							},
						},
					},
				},
			},
		},
		{
			name: "rawElementBody",
			pos:  position{line: 1083, col: 1, offset: 34588},
			expr: &choiceExpr{
				pos: position{line: 1083, col: 19, offset: 34606},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1083, col: 19, offset: 34606},
						run: (*parser).callonrawElementBody2,
						expr: &seqExpr{
							pos: position{line: 1083, col: 19, offset: 34606},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1083, col: 19, offset: 34606},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 22, offset: 34609},
									label: "btI",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 26, offset: 34613},
										name: "BracketText",
									},
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).callonrawElementBody8,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonrawElementBody10,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 34655},
						run: (*parser).callonrawElementBody27,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 34655},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1085, col: 5, offset: 34655},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 8, offset: 34658},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonrawElementBody32,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1085, col: 17, offset: 34667},
									name: "Scope",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 34988},
						run: (*parser).callonrawElementBody39,
						expr: &actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonrawElementBody40,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonrawElementBody42,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 35290},
						run: (*parser).callonrawElementBody59,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 35290},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1104, col: 5, offset: 35290},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 8, offset: 35293},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonrawElementBody64,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonrawElementBody70,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonrawElementBody78,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonrawElementBody80,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 30, offset: 35315},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonrawElementBody106,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonrawElementBody108,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1109, col: 1, offset: 35483},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 18, offset: 35500},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1109, col: 18, offset: 35500},
						name: "ChainExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 36, offset: 35518},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "ForExpression",
			pos:  position{line: 1110, col: 1, offset: 35531},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 18, offset: 35548},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1110, col: 18, offset: 35548},
						name: "RangeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 36, offset: 35566},
						name: "ChainExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 54, offset: 35584},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "IfExpression",
			pos:  position{line: 1112, col: 1, offset: 35598},
			expr: &actionExpr{
				pos: position{line: 1112, col: 17, offset: 35614},
				run: (*parser).callonIfExpression1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 17, offset: 35614},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1112, col: 17, offset: 35614},
							label: "stmtI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1112, col: 23, offset: 35620},
								expr: &ruleRefExpr{
									pos:  position{line: 1112, col: 23, offset: 35620},
									name: "goIfConditionStatement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 47, offset: 35644},
							label: "condI",
							expr: &choiceExpr{
								pos: position{line: 1112, col: 54, offset: 35651},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1112, col: 54, offset: 35651},
										name: "ChainExpression",
									},
									&ruleRefExpr{
										pos:  position{line: 1112, col: 72, offset: 35669},
										name: "ConditionalGoExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goIfConditionStatement",
			pos:  position{line: 1118, col: 1, offset: 35842},
			expr: &actionExpr{
				pos: position{line: 1118, col: 27, offset: 35868},
				run: (*parser).callongoIfConditionStatement1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 27, offset: 35868},
					exprs: []any{
						&notExpr{
							pos: position{line: 1118, col: 27, offset: 35868},
							expr: &seqExpr{
								pos: position{line: 1118, col: 29, offset: 35870},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 1118, col: 29, offset: 35870},
										expr: &charClassMatcher{
											pos:        position{line: 1118, col: 29, offset: 35870},
											val:        "[^;\\r\\n{[]",
											chars:      []rune{';', '\r', '\n', '{', '['},
											ignoreCase: false,
											inverted:   true,
										},
									},
									&charClassMatcher{
										pos:        position{line: 1118, col: 41, offset: 35882},
										val:        "[{[]",
										chars:      []rune{'{', '['},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 47, offset: 35888},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 53, offset: 35894},
								name: "GoStatement",
							},
						},
						&actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callongoIfConditionStatement10,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callongoIfConditionStatement12,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1118, col: 69, offset: 35910},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callongoIfConditionStatement33,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RangeExpression",
			pos:  position{line: 1126, col: 1, offset: 36132},
			expr: &actionExpr{
				pos: position{line: 1126, col: 20, offset: 36151},
				run: (*parser).callonRangeExpression1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 20, offset: 36151},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1126, col: 20, offset: 36151},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1126, col: 26, offset: 36157},
								expr: &actionExpr{
									pos: position{line: 1134, col: 24, offset: 36435},
									run: (*parser).callonRangeExpression5,
									expr: &seqExpr{
										pos: position{line: 1134, col: 24, offset: 36435},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1134, col: 24, offset: 36435},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 263, col: 10, offset: 7729},
													run: (*parser).callonRangeExpression8,
													expr: &labeledExpr{
														pos:   position{line: 263, col: 10, offset: 7729},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 1577, col: 17, offset: 52172},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1560, col: 20, offset: 51927},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1577, col: 26, offset: 52181},
																	expr: &charClassMatcher{
																		pos:        position{line: 1560, col: 20, offset: 51927},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1134, col: 36, offset: 36447},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1134, col: 42, offset: 36453},
													expr: &seqExpr{
														pos: position{line: 1134, col: 43, offset: 36454},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 1134, col: 43, offset: 36454},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1134, col: 46, offset: 36457},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1134, col: 50, offset: 36461},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&actionExpr{
																pos: position{line: 263, col: 10, offset: 7729},
																run: (*parser).callonRangeExpression22,
																expr: &labeledExpr{
																	pos:   position{line: 263, col: 10, offset: 7729},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1577, col: 17, offset: 52172},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1560, col: 20, offset: 51927},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1577, col: 26, offset: 52181},
																				expr: &charClassMatcher{
																					pos:        position{line: 1560, col: 20, offset: 51927},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1134, col: 61, offset: 36472},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1134, col: 64, offset: 36475},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonRangeExpression31,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1134, col: 75, offset: 36486},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1134, col: 85, offset: 36496},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 85, offset: 36496},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1134, col: 90, offset: 36501},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1134, col: 94, offset: 36505},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 47, offset: 36178},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1126, col: 56, offset: 36187},
								expr: &seqExpr{
									pos: position{line: 1126, col: 57, offset: 36188},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1126, col: 57, offset: 36188},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1126, col: 67, offset: 36198},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1126, col: 72, offset: 36203},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1126, col: 80, offset: 36211},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 83, offset: 36214},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 89, offset: 36220},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 1147, col: 1, offset: 36930},
			expr: &actionExpr{
				pos: position{line: 1147, col: 20, offset: 36949},
				run: (*parser).callonChainExpression1,
				expr: &seqExpr{
					pos: position{line: 1147, col: 20, offset: 36949},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1147, col: 20, offset: 36949},
							label: "derefsI",
							expr: &actionExpr{
								pos: position{line: 1187, col: 26, offset: 38621},
								run: (*parser).callonChainExpression4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1187, col: 26, offset: 38621},
									expr: &litMatcher{
										pos:        position{line: 1187, col: 26, offset: 38621},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 50, offset: 36979},
							label: "rootI",
							expr: &ruleRefExpr{
								pos:  position{line: 1147, col: 56, offset: 36985},
								name: "chainExpressionRoot",
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 76, offset: 37005},
							label: "checkRootI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1147, col: 87, offset: 37016},
								expr: &litMatcher{
									pos:        position{line: 1147, col: 87, offset: 37016},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 92, offset: 37021},
							label: "chainI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1147, col: 99, offset: 37028},
								expr: &ruleRefExpr{
									pos:  position{line: 1147, col: 99, offset: 37028},
									name: "ChainExpressionItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 20, offset: 37068},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1148, col: 29, offset: 37077},
								expr: &ruleRefExpr{
									pos:  position{line: 1148, col: 29, offset: 37077},
									name: "chainExpressionDefault",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 53, offset: 37101},
							label: "endPosI",
							expr: &actionExpr{
								pos: position{line: 2654, col: 8, offset: 90032},
								run: (*parser).callonChainExpression19,
								expr: &choiceExpr{
									pos: position{line: 2654, col: 9, offset: 90033},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											expr: &anyMatcher{
												line: 2654, col: 10, offset: 90034,
											},
										},
										&notExpr{
											pos: position{line: 2654, col: 14, offset: 90038},
											expr: &anyMatcher{
												line: 2654, col: 15, offset: 90039,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1148, col: 65, offset: 37113},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1148, col: 68, offset: 37116},
							run: (*parser).callonChainExpression27,
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 3, offset: 37239},
							name: "chainExpressionTrail",
						},
					},
				},
			},
		},
		{
			name: "chainExpressionTrail",
			pos:  position{line: 1159, col: 1, offset: 37537},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 25, offset: 37561},
				alternatives: []any{
					&notExpr{
						pos: position{line: 1159, col: 25, offset: 37561},
						expr: &ruleRefExpr{
							pos:  position{line: 1159, col: 26, offset: 37562},
							name: "GoExpression",
						},
					},
					&actionExpr{
						pos: position{line: 1159, col: 41, offset: 37577},
						run: (*parser).callonchainExpressionTrail4,
						expr: &seqExpr{
							pos: position{line: 1159, col: 41, offset: 37577},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1159, col: 41, offset: 37577},
									name: "GoExpression",
								},
								&labeledExpr{
									pos:   position{line: 1159, col: 54, offset: 37590},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonchainExpressionTrail8,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 1191, col: 1, offset: 38659},
			expr: &actionExpr{
				pos: position{line: 1191, col: 24, offset: 38682},
				run: (*parser).callonchainExpressionRoot1,
				expr: &choiceExpr{
					pos: position{line: 1191, col: 25, offset: 38683},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 1577, col: 17, offset: 52172},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1560, col: 20, offset: 51927},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1577, col: 26, offset: 52181},
									expr: &charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 1191, col: 40, offset: 38698},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1191, col: 40, offset: 38698},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 1191, col: 44, offset: 38702},
									expr: &ruleRefExpr{
										pos:  position{line: 1191, col: 44, offset: 38702},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1191, col: 77, offset: 38735},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 1198, col: 1, offset: 38843},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 36, offset: 38878},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1198, col: 36, offset: 38878},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1198, col: 36, offset: 38878},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1198, col: 40, offset: 38882},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1198, col: 72, offset: 38914},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1199, col: 36, offset: 38955},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1199, col: 36, offset: 38955},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1199, col: 40, offset: 38959},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1199, col: 72, offset: 38991},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1200, col: 36, offset: 39032},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1200, col: 36, offset: 39032},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1200, col: 40, offset: 39036},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1200, col: 72, offset: 39068},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1201, col: 36, offset: 39109},
						expr: &charClassMatcher{
							pos:        position{line: 1201, col: 36, offset: 39109},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "chainExpressionDefault",
			pos:  position{line: 1203, col: 1, offset: 39122},
			expr: &actionExpr{
				pos: position{line: 1203, col: 27, offset: 39148},
				run: (*parser).callonchainExpressionDefault1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 27, offset: 39148},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1203, col: 27, offset: 39148},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1203, col: 31, offset: 39152},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonchainExpressionDefault8,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 35, offset: 39156},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 41, offset: 39162},
								name: "GoExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionItem",
			pos:  position{line: 1214, col: 1, offset: 39345},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 24, offset: 39368},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 24, offset: 39368},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 1229, col: 23, offset: 39907},
						run: (*parser).callonChainExpressionItem3,
						expr: &seqExpr{
							pos: position{line: 1229, col: 23, offset: 39907},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1229, col: 23, offset: 39907},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1229, col: 27, offset: 39911},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonChainExpressionItem10,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 31, offset: 39915},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 263, col: 10, offset: 7729},
										run: (*parser).callonChainExpressionItem15,
										expr: &labeledExpr{
											pos:   position{line: 263, col: 10, offset: 7729},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1577, col: 17, offset: 52172},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1577, col: 26, offset: 52181},
														expr: &charClassMatcher{
															pos:        position{line: 1560, col: 20, offset: 51927},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 44, offset: 39928},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1229, col: 51, offset: 39935},
										expr: &litMatcher{
											pos:        position{line: 1229, col: 51, offset: 39935},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 63, offset: 39407},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 1252, col: 28, offset: 40624},
						run: (*parser).callonChainExpressionItem25,
						expr: &seqExpr{
							pos: position{line: 1252, col: 28, offset: 40624},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1252, col: 28, offset: 40624},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 32, offset: 40628},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2672, col: 12, offset: 90673},
										run: (*parser).callonChainExpressionItem29,
										expr: &litMatcher{
											pos:        position{line: 2672, col: 12, offset: 90673},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1252, col: 48, offset: 40644},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 51, offset: 40647},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1252, col: 57, offset: 40653},
										expr: &litMatcher{
											pos:        position{line: 1252, col: 57, offset: 40653},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1252, col: 62, offset: 40658},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 65, offset: 40661},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1252, col: 74, offset: 40670},
										expr: &actionExpr{
											pos: position{line: 267, col: 14, offset: 7835},
											run: (*parser).callonChainExpressionItem40,
											expr: &seqExpr{
												pos: position{line: 267, col: 14, offset: 7835},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 267, col: 14, offset: 7835},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&labeledExpr{
														pos:   position{line: 267, col: 18, offset: 7839},
														label: "identI",
														expr: &actionExpr{
															pos: position{line: 263, col: 10, offset: 7729},
															run: (*parser).callonChainExpressionItem44,
															expr: &labeledExpr{
																pos:   position{line: 263, col: 10, offset: 7729},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 1577, col: 17, offset: 52172},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 1560, col: 20, offset: 51927},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1577, col: 26, offset: 52181},
																			expr: &charClassMatcher{
																				pos:        position{line: 1560, col: 20, offset: 51927},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 85, offset: 40681},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 263, col: 10, offset: 7729},
										run: (*parser).callonChainExpressionItem51,
										expr: &labeledExpr{
											pos:   position{line: 263, col: 10, offset: 7729},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1577, col: 17, offset: 52172},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1577, col: 26, offset: 52181},
														expr: &charClassMatcher{
															pos:        position{line: 1560, col: 20, offset: 51927},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1252, col: 97, offset: 40693},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 100, offset: 40696},
									label: "rParenI",
									expr: &actionExpr{
										pos: position{line: 2673, col: 12, offset: 90711},
										run: (*parser).callonChainExpressionItem60,
										expr: &litMatcher{
											pos:        position{line: 2673, col: 12, offset: 90711},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 116, offset: 40712},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1252, col: 123, offset: 40719},
										expr: &litMatcher{
											pos:        position{line: 1252, col: 123, offset: 40719},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 1216, col: 1, offset: 39450},
			expr: &actionExpr{
				pos: position{line: 1216, col: 20, offset: 39469},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 20, offset: 39469},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2754, col: 15, offset: 93365},
							run: (*parser).callonIndexExpression3,
							expr: &seqExpr{
								pos: position{line: 2754, col: 15, offset: 93365},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonIndexExpression5,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2720, col: 18, offset: 92335},
										run: (*parser).callonIndexExpression11,
									},
									&actionExpr{
										pos: position{line: 2678, col: 14, offset: 90829},
										run: (*parser).callonIndexExpression12,
										expr: &litMatcher{
											pos:        position{line: 2678, col: 14, offset: 90829},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2754, col: 35, offset: 93385},
										expr: &choiceExpr{
											pos: position{line: 2666, col: 20, offset: 90409},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2666, col: 31, offset: 90420},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															run: (*parser).callonIndexExpression18,
														},
														&zeroOrOneExpr{
															pos: position{line: 2664, col: 37, offset: 90378},
															expr: &litMatcher{
																pos:        position{line: 2664, col: 37, offset: 90378},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2664, col: 43, offset: 90384},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 31, offset: 39480},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 37, offset: 39486},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 50, offset: 39499},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1216, col: 62, offset: 39511},
								expr: &litMatcher{
									pos:        position{line: 1216, col: 62, offset: 39511},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 67, offset: 39516},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 1225, col: 23, offset: 39828},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2758, col: 13, offset: 93429},
										run: (*parser).callonIndexExpression29,
										expr: &seqExpr{
											pos: position{line: 2758, col: 13, offset: 93429},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2758, col: 13, offset: 93429},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2758, col: 16, offset: 93432},
													expr: &seqExpr{
														pos: position{line: 2758, col: 17, offset: 93433},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2758, col: 17, offset: 93433},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2758, col: 21, offset: 93437},
																expr: &choiceExpr{
																	pos: position{line: 2666, col: 20, offset: 90409},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2666, col: 31, offset: 90420},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					run: (*parser).callonIndexExpression40,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2664, col: 37, offset: 90378},
																					expr: &litMatcher{
																						pos:        position{line: 2664, col: 37, offset: 90378},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2664, col: 43, offset: 90384},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2758, col: 27, offset: 93443},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2679, col: 14, offset: 90869},
														run: (*parser).callonIndexExpression45,
														expr: &litMatcher{
															pos:        position{line: 2679, col: 14, offset: 90869},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonIndexExpression47,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1225, col: 34, offset: 39839},
										run: (*parser).callonIndexExpression48,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonIndexExpression49,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 96, offset: 39545},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1216, col: 108, offset: 39557},
								expr: &litMatcher{
									pos:        position{line: 1216, col: 108, offset: 39557},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 1237, col: 1, offset: 40090},
			expr: &actionExpr{
				pos: position{line: 1237, col: 20, offset: 40109},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 20, offset: 40109},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2746, col: 14, offset: 93228},
							run: (*parser).callonParenExpression3,
							expr: &seqExpr{
								pos: position{line: 2746, col: 14, offset: 93228},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonParenExpression5,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2720, col: 18, offset: 92335},
										run: (*parser).callonParenExpression11,
									},
									&actionExpr{
										pos: position{line: 2672, col: 12, offset: 90673},
										run: (*parser).callonParenExpression12,
										expr: &litMatcher{
											pos:        position{line: 2672, col: 12, offset: 90673},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2746, col: 32, offset: 93246},
										expr: &choiceExpr{
											pos: position{line: 2666, col: 20, offset: 90409},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2666, col: 31, offset: 90420},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															run: (*parser).callonParenExpression18,
														},
														&zeroOrOneExpr{
															pos: position{line: 2664, col: 37, offset: 90378},
															expr: &litMatcher{
																pos:        position{line: 2664, col: 37, offset: 90378},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2664, col: 43, offset: 90384},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 30, offset: 40119},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1237, col: 36, offset: 40125},
								expr: &ruleRefExpr{
									pos:  position{line: 1237, col: 36, offset: 40125},
									name: "parenExpressionArgs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 57, offset: 40146},
							label: "rParen",
							expr: &choiceExpr{
								pos: position{line: 1245, col: 23, offset: 40396},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2750, col: 12, offset: 93289},
										run: (*parser).callonParenExpression27,
										expr: &seqExpr{
											pos: position{line: 2750, col: 12, offset: 93289},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2750, col: 12, offset: 93289},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2750, col: 15, offset: 93292},
													expr: &seqExpr{
														pos: position{line: 2750, col: 16, offset: 93293},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2750, col: 16, offset: 93293},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2750, col: 20, offset: 93297},
																expr: &choiceExpr{
																	pos: position{line: 2666, col: 20, offset: 90409},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2666, col: 31, offset: 90420},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					run: (*parser).callonParenExpression38,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2664, col: 37, offset: 90378},
																					expr: &litMatcher{
																						pos:        position{line: 2664, col: 37, offset: 90378},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2664, col: 43, offset: 90384},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2750, col: 26, offset: 93303},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2673, col: 12, offset: 90711},
														run: (*parser).callonParenExpression43,
														expr: &litMatcher{
															pos:        position{line: 2673, col: 12, offset: 90711},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonParenExpression45,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1245, col: 33, offset: 40406},
										run: (*parser).callonParenExpression46,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonParenExpression47,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 83, offset: 40172},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1237, col: 90, offset: 40179},
								expr: &litMatcher{
									pos:        position{line: 1237, col: 90, offset: 40179},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 1248, col: 1, offset: 40456},
			expr: &actionExpr{
				pos: position{line: 1248, col: 24, offset: 40479},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 24, offset: 40479},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1248, col: 24, offset: 40479},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 31, offset: 40486},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 44, offset: 40499},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1248, col: 50, offset: 40505},
								expr: &seqExpr{
									pos: position{line: 1248, col: 51, offset: 40506},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 1248, col: 51, offset: 40506},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 1248, col: 54, offset: 40509},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1248, col: 58, offset: 40513},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).callonparenExpressionArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1248, col: 62, offset: 40517},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1268, col: 1, offset: 41320},
			expr: &actionExpr{
				pos: position{line: 1268, col: 17, offset: 41336},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1268, col: 17, offset: 41336},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1268, col: 24, offset: 41343},
						expr: &choiceExpr{
							pos: position{line: 1268, col: 25, offset: 41344},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1268, col: 25, offset: 41344},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1268, col: 39, offset: 41358},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1364, col: 28, offset: 45242},
									run: (*parser).callonGoExpression7,
									expr: &seqExpr{
										pos: position{line: 1364, col: 28, offset: 45242},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1364, col: 28, offset: 45242},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1364, col: 36, offset: 45250},
													expr: &choiceExpr{
														pos: position{line: 1364, col: 37, offset: 45251},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1364, col: 37, offset: 45251},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1349, col: 34, offset: 44425},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1349, col: 34, offset: 44425},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1349, col: 49, offset: 44440},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).callonGoExpression20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1364, col: 74, offset: 45288},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1380, col: 18, offset: 45701},
													run: (*parser).callonGoExpression25,
													expr: &seqExpr{
														pos: position{line: 1380, col: 18, offset: 45701},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1380, col: 18, offset: 45701},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1380, col: 26, offset: 45709},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 29, offset: 45712},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2746, col: 14, offset: 93228},
																	run: (*parser).callonGoExpression31,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 14, offset: 93228},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonGoExpression33,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2720, col: 18, offset: 92335},
																				run: (*parser).callonGoExpression39,
																			},
																			&actionExpr{
																				pos: position{line: 2672, col: 12, offset: 90673},
																				run: (*parser).callonGoExpression40,
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 12, offset: 90673},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2746, col: 32, offset: 93246},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonGoExpression46,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 47, offset: 45730},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 263, col: 10, offset: 7729},
																	run: (*parser).callonGoExpression51,
																	expr: &labeledExpr{
																		pos:   position{line: 263, col: 10, offset: 7729},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1577, col: 17, offset: 52172},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1560, col: 20, offset: 51927},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1577, col: 26, offset: 52181},
																					expr: &charClassMatcher{
																						pos:        position{line: 1560, col: 20, offset: 51927},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 60, offset: 45743},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1389, col: 21, offset: 45979},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2750, col: 12, offset: 93289},
																			run: (*parser).callonGoExpression59,
																			expr: &seqExpr{
																				pos: position{line: 2750, col: 12, offset: 93289},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2750, col: 12, offset: 93289},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2750, col: 15, offset: 93292},
																						expr: &seqExpr{
																							pos: position{line: 2750, col: 16, offset: 93293},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2750, col: 16, offset: 93293},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2750, col: 20, offset: 93297},
																									expr: &choiceExpr{
																										pos: position{line: 2666, col: 20, offset: 90409},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2663, col: 37, offset: 90336},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2666, col: 31, offset: 90420},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2666, col: 31, offset: 90420},
																														run: (*parser).callonGoExpression70,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2664, col: 37, offset: 90378},
																														expr: &litMatcher{
																															pos:        position{line: 2664, col: 37, offset: 90378},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2664, col: 43, offset: 90384},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2750, col: 26, offset: 93303},
																						label: "endI",
																						expr: &actionExpr{
																							pos: position{line: 2673, col: 12, offset: 90711},
																							run: (*parser).callonGoExpression75,
																							expr: &litMatcher{
																								pos:        position{line: 2673, col: 12, offset: 90711},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2726, col: 13, offset: 92468},
																						run: (*parser).callonGoExpression77,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1389, col: 31, offset: 45989},
																			run: (*parser).callonGoExpression78,
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonGoExpression79,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1338, col: 20, offset: 44066},
									run: (*parser).callonGoExpression85,
									expr: &oneOrMoreExpr{
										pos: position{line: 1338, col: 20, offset: 44066},
										expr: &seqExpr{
											pos: position{line: 1352, col: 24, offset: 44521},
											exprs: []any{
												&notExpr{
													pos: position{line: 1352, col: 24, offset: 44521},
													expr: &seqExpr{
														pos: position{line: 1357, col: 35, offset: 44888},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1357, col: 36, offset: 44889},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1357, col: 36, offset: 44889},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1349, col: 34, offset: 44425},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1349, col: 34, offset: 44425},
																				val:        "[=&|^+/*%<>!-]",
																				chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1349, col: 49, offset: 44440},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonGoExpression99,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1357, col: 72, offset: 44925},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1357, col: 80, offset: 44933},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1357, col: 83, offset: 44936},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1352, col: 57, offset: 44554},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1624, col: 14, offset: 53495},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1624, col: 14, offset: 53495},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1624, col: 20, offset: 53501},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1672, col: 19, offset: 55641},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1672, col: 19, offset: 55641},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1673, col: 5, offset: 55700},
																			run: (*parser).callonGoExpression117,
																			expr: &seqExpr{
																				pos: position{line: 1673, col: 5, offset: 55700},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1673, col: 5, offset: 55700},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 14, offset: 55709},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 26, offset: 55721},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 38, offset: 55733},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 50, offset: 55745},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1702, col: 16, offset: 56877},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1702, col: 16, offset: 56877},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1703, col: 5, offset: 56980},
																			run: (*parser).callonGoExpression138,
																			expr: &seqExpr{
																				pos: position{line: 1703, col: 5, offset: 56980},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1703, col: 5, offset: 56980},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 14, offset: 56989},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 26, offset: 57001},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 38, offset: 57013},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 50, offset: 57025},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 62, offset: 57037},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 74, offset: 57049},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 86, offset: 57061},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 98, offset: 57073},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1737, col: 24, offset: 58453},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1737, col: 24, offset: 58453},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1737, col: 29, offset: 58458},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1651, col: 75, offset: 54755},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1653, col: 24, offset: 54901},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1653, col: 24, offset: 54901},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1654, col: 24, offset: 54968},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1654, col: 24, offset: 54968},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1655, col: 5, offset: 55005},
																			run: (*parser).callonGoExpression170,
																			expr: &seqExpr{
																				pos: position{line: 1655, col: 5, offset: 55005},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1655, col: 5, offset: 55005},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 14, offset: 55014},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 26, offset: 55026},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1738, col: 24, offset: 58536},
																			run: (*parser).callonGoExpression177,
																			expr: &seqExpr{
																				pos: position{line: 1738, col: 24, offset: 58536},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1738, col: 24, offset: 58536},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1762, col: 5, offset: 59550},
																			run: (*parser).callonGoExpression188,
																			expr: &seqExpr{
																				pos: position{line: 1762, col: 5, offset: 59550},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1762, col: 5, offset: 59550},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1783, col: 5, offset: 60389},
																			run: (*parser).callonGoExpression195,
																			expr: &seqExpr{
																				pos: position{line: 1783, col: 5, offset: 60389},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1783, col: 5, offset: 60389},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1801, col: 5, offset: 61072},
																			run: (*parser).callonGoExpression200,
																			expr: &litMatcher{
																				pos:        position{line: 1801, col: 5, offset: 61072},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1624, col: 76, offset: 53557},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1625, col: 5, offset: 53568},
															run: (*parser).callonGoExpression203,
															expr: &seqExpr{
																pos: position{line: 1625, col: 5, offset: 53568},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1625, col: 5, offset: 53568},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 10, offset: 53573},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1625, col: 16, offset: 53579},
																			expr: &choiceExpr{
																				pos: position{line: 1625, col: 17, offset: 53580},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1672, col: 19, offset: 55641},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1672, col: 19, offset: 55641},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1673, col: 5, offset: 55700},
																						run: (*parser).callonGoExpression215,
																						expr: &seqExpr{
																							pos: position{line: 1673, col: 5, offset: 55700},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1673, col: 5, offset: 55700},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 14, offset: 55709},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 26, offset: 55721},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 38, offset: 55733},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 50, offset: 55745},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1702, col: 16, offset: 56877},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1702, col: 16, offset: 56877},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1703, col: 5, offset: 56980},
																						run: (*parser).callonGoExpression236,
																						expr: &seqExpr{
																							pos: position{line: 1703, col: 5, offset: 56980},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1703, col: 5, offset: 56980},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 14, offset: 56989},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 26, offset: 57001},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 38, offset: 57013},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 50, offset: 57025},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 62, offset: 57037},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 74, offset: 57049},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 86, offset: 57061},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 98, offset: 57073},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1737, col: 24, offset: 58453},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1737, col: 24, offset: 58453},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1737, col: 29, offset: 58458},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1651, col: 75, offset: 54755},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1653, col: 24, offset: 54901},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1653, col: 24, offset: 54901},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1654, col: 24, offset: 54968},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1654, col: 24, offset: 54968},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1655, col: 5, offset: 55005},
																						run: (*parser).callonGoExpression268,
																						expr: &seqExpr{
																							pos: position{line: 1655, col: 5, offset: 55005},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1655, col: 5, offset: 55005},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 14, offset: 55014},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 26, offset: 55026},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1738, col: 24, offset: 58536},
																						run: (*parser).callonGoExpression275,
																						expr: &seqExpr{
																							pos: position{line: 1738, col: 24, offset: 58536},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1738, col: 24, offset: 58536},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1762, col: 5, offset: 59550},
																						run: (*parser).callonGoExpression286,
																						expr: &seqExpr{
																							pos: position{line: 1762, col: 5, offset: 59550},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1762, col: 5, offset: 59550},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1783, col: 5, offset: 60389},
																						run: (*parser).callonGoExpression293,
																						expr: &seqExpr{
																							pos: position{line: 1783, col: 5, offset: 60389},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1783, col: 5, offset: 60389},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1801, col: 5, offset: 61072},
																						run: (*parser).callonGoExpression298,
																						expr: &litMatcher{
																							pos:        position{line: 1801, col: 5, offset: 61072},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1625, col: 74, offset: 53637},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 79, offset: 53642},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 2654, col: 8, offset: 90032},
																			run: (*parser).callonGoExpression302,
																			expr: &choiceExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2654, col: 9, offset: 90033},
																						expr: &anyMatcher{
																							line: 2654, col: 10, offset: 90034,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2654, col: 14, offset: 90038},
																						expr: &anyMatcher{
																							line: 2654, col: 15, offset: 90039,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1349, col: 34, offset: 44425},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1349, col: 34, offset: 44425},
																	val:        "[=&|^+/*%<>!-]",
																	chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1349, col: 49, offset: 44440},
																	expr: &choiceExpr{
																		pos: position{line: 2666, col: 20, offset: 90409},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2666, col: 31, offset: 90420},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2666, col: 31, offset: 90420},
																						run: (*parser).callonGoExpression314,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2664, col: 37, offset: 90378},
																						expr: &litMatcher{
																							pos:        position{line: 2664, col: 37, offset: 90378},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2664, col: 43, offset: 90384},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1352, col: 101, offset: 44598},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1352, col: 101, offset: 44598},
																	expr: &seqExpr{
																		pos: position{line: 1352, col: 103, offset: 44600},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1352, col: 103, offset: 44600},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1352, col: 106, offset: 44603},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1352, col: 112, offset: 44609},
																	val:        "[^\\r\\n({[]}),;:\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ',', ';', ':', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nestedGoCode",
			pos:  position{line: 1272, col: 1, offset: 41454},
			expr: &actionExpr{
				pos: position{line: 1272, col: 17, offset: 41470},
				run: (*parser).callonnestedGoCode1,
				expr: &labeledExpr{
					pos:   position{line: 1272, col: 17, offset: 41470},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1272, col: 24, offset: 41477},
						expr: &choiceExpr{
							pos: position{line: 1272, col: 25, offset: 41478},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1272, col: 25, offset: 41478},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1272, col: 39, offset: 41492},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1372, col: 27, offset: 45476},
									run: (*parser).callonnestedGoCode7,
									expr: &seqExpr{
										pos: position{line: 1372, col: 27, offset: 45476},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1372, col: 27, offset: 45476},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1372, col: 35, offset: 45484},
													expr: &choiceExpr{
														pos: position{line: 1372, col: 36, offset: 45485},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1372, col: 36, offset: 45485},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1349, col: 34, offset: 44425},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1349, col: 34, offset: 44425},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1349, col: 49, offset: 44440},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).callonnestedGoCode20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1372, col: 73, offset: 45522},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1380, col: 18, offset: 45701},
													run: (*parser).callonnestedGoCode25,
													expr: &seqExpr{
														pos: position{line: 1380, col: 18, offset: 45701},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1380, col: 18, offset: 45701},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1380, col: 26, offset: 45709},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 29, offset: 45712},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2746, col: 14, offset: 93228},
																	run: (*parser).callonnestedGoCode31,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 14, offset: 93228},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonnestedGoCode33,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2720, col: 18, offset: 92335},
																				run: (*parser).callonnestedGoCode39,
																			},
																			&actionExpr{
																				pos: position{line: 2672, col: 12, offset: 90673},
																				run: (*parser).callonnestedGoCode40,
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 12, offset: 90673},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2746, col: 32, offset: 93246},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonnestedGoCode46,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 47, offset: 45730},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 263, col: 10, offset: 7729},
																	run: (*parser).callonnestedGoCode51,
																	expr: &labeledExpr{
																		pos:   position{line: 263, col: 10, offset: 7729},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1577, col: 17, offset: 52172},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1560, col: 20, offset: 51927},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1577, col: 26, offset: 52181},
																					expr: &charClassMatcher{
																						pos:        position{line: 1560, col: 20, offset: 51927},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 60, offset: 45743},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1389, col: 21, offset: 45979},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2750, col: 12, offset: 93289},
																			run: (*parser).callonnestedGoCode59,
																			expr: &seqExpr{
																				pos: position{line: 2750, col: 12, offset: 93289},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2750, col: 12, offset: 93289},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2750, col: 15, offset: 93292},
																						expr: &seqExpr{
																							pos: position{line: 2750, col: 16, offset: 93293},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2750, col: 16, offset: 93293},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2750, col: 20, offset: 93297},
																									expr: &choiceExpr{
																										pos: position{line: 2666, col: 20, offset: 90409},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2663, col: 37, offset: 90336},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2666, col: 31, offset: 90420},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2666, col: 31, offset: 90420},
																														run: (*parser).callonnestedGoCode70,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2664, col: 37, offset: 90378},
																														expr: &litMatcher{
																															pos:        position{line: 2664, col: 37, offset: 90378},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2664, col: 43, offset: 90384},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2750, col: 26, offset: 93303},
																						label: "endI",
																						expr: &actionExpr{
																							pos: position{line: 2673, col: 12, offset: 90711},
																							run: (*parser).callonnestedGoCode75,
																							expr: &litMatcher{
																								pos:        position{line: 2673, col: 12, offset: 90711},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2726, col: 13, offset: 92468},
																						run: (*parser).callonnestedGoCode77,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1389, col: 31, offset: 45989},
																			run: (*parser).callonnestedGoCode78,
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonnestedGoCode79,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1345, col: 20, offset: 44295},
									run: (*parser).callonnestedGoCode85,
									expr: &oneOrMoreExpr{
										pos: position{line: 1345, col: 20, offset: 44295},
										expr: &seqExpr{
											pos: position{line: 1355, col: 24, offset: 44784},
											exprs: []any{
												&notExpr{
													pos: position{line: 1355, col: 24, offset: 44784},
													expr: &seqExpr{
														pos: position{line: 1358, col: 35, offset: 44974},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1358, col: 36, offset: 44975},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1358, col: 36, offset: 44975},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1350, col: 34, offset: 44477},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1350, col: 34, offset: 44477},
																				val:        "[=,&|^+/*%<>!-]",
																				chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1350, col: 50, offset: 44493},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonnestedGoCode99,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1358, col: 71, offset: 45010},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1358, col: 79, offset: 45018},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1358, col: 82, offset: 45021},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1355, col: 56, offset: 44816},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1624, col: 14, offset: 53495},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1624, col: 14, offset: 53495},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1624, col: 20, offset: 53501},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1672, col: 19, offset: 55641},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1672, col: 19, offset: 55641},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1673, col: 5, offset: 55700},
																			run: (*parser).callonnestedGoCode117,
																			expr: &seqExpr{
																				pos: position{line: 1673, col: 5, offset: 55700},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1673, col: 5, offset: 55700},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 14, offset: 55709},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 26, offset: 55721},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 38, offset: 55733},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 50, offset: 55745},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1702, col: 16, offset: 56877},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1702, col: 16, offset: 56877},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1703, col: 5, offset: 56980},
																			run: (*parser).callonnestedGoCode138,
																			expr: &seqExpr{
																				pos: position{line: 1703, col: 5, offset: 56980},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1703, col: 5, offset: 56980},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 14, offset: 56989},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 26, offset: 57001},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 38, offset: 57013},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 50, offset: 57025},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 62, offset: 57037},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 74, offset: 57049},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 86, offset: 57061},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 98, offset: 57073},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1737, col: 24, offset: 58453},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1737, col: 24, offset: 58453},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1737, col: 29, offset: 58458},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1651, col: 75, offset: 54755},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1653, col: 24, offset: 54901},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1653, col: 24, offset: 54901},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1654, col: 24, offset: 54968},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1654, col: 24, offset: 54968},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1655, col: 5, offset: 55005},
																			run: (*parser).callonnestedGoCode170,
																			expr: &seqExpr{
																				pos: position{line: 1655, col: 5, offset: 55005},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1655, col: 5, offset: 55005},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 14, offset: 55014},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 26, offset: 55026},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1738, col: 24, offset: 58536},
																			run: (*parser).callonnestedGoCode177,
																			expr: &seqExpr{
																				pos: position{line: 1738, col: 24, offset: 58536},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1738, col: 24, offset: 58536},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1762, col: 5, offset: 59550},
																			run: (*parser).callonnestedGoCode188,
																			expr: &seqExpr{
																				pos: position{line: 1762, col: 5, offset: 59550},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1762, col: 5, offset: 59550},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1783, col: 5, offset: 60389},
																			run: (*parser).callonnestedGoCode195,
																			expr: &seqExpr{
																				pos: position{line: 1783, col: 5, offset: 60389},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1783, col: 5, offset: 60389},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1801, col: 5, offset: 61072},
																			run: (*parser).callonnestedGoCode200,
																			expr: &litMatcher{
																				pos:        position{line: 1801, col: 5, offset: 61072},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1624, col: 76, offset: 53557},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1625, col: 5, offset: 53568},
															run: (*parser).callonnestedGoCode203,
															expr: &seqExpr{
																pos: position{line: 1625, col: 5, offset: 53568},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1625, col: 5, offset: 53568},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 10, offset: 53573},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1625, col: 16, offset: 53579},
																			expr: &choiceExpr{
																				pos: position{line: 1625, col: 17, offset: 53580},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1672, col: 19, offset: 55641},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1672, col: 19, offset: 55641},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1673, col: 5, offset: 55700},
																						run: (*parser).callonnestedGoCode215,
																						expr: &seqExpr{
																							pos: position{line: 1673, col: 5, offset: 55700},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1673, col: 5, offset: 55700},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 14, offset: 55709},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 26, offset: 55721},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 38, offset: 55733},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 50, offset: 55745},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1702, col: 16, offset: 56877},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1702, col: 16, offset: 56877},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1703, col: 5, offset: 56980},
																						run: (*parser).callonnestedGoCode236,
																						expr: &seqExpr{
																							pos: position{line: 1703, col: 5, offset: 56980},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1703, col: 5, offset: 56980},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 14, offset: 56989},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 26, offset: 57001},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 38, offset: 57013},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 50, offset: 57025},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 62, offset: 57037},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 74, offset: 57049},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 86, offset: 57061},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 98, offset: 57073},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1737, col: 24, offset: 58453},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1737, col: 24, offset: 58453},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1737, col: 29, offset: 58458},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1651, col: 75, offset: 54755},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1653, col: 24, offset: 54901},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1653, col: 24, offset: 54901},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1654, col: 24, offset: 54968},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1654, col: 24, offset: 54968},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1655, col: 5, offset: 55005},
																						run: (*parser).callonnestedGoCode268,
																						expr: &seqExpr{
																							pos: position{line: 1655, col: 5, offset: 55005},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1655, col: 5, offset: 55005},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 14, offset: 55014},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 26, offset: 55026},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1738, col: 24, offset: 58536},
																						run: (*parser).callonnestedGoCode275,
																						expr: &seqExpr{
																							pos: position{line: 1738, col: 24, offset: 58536},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1738, col: 24, offset: 58536},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1762, col: 5, offset: 59550},
																						run: (*parser).callonnestedGoCode286,
																						expr: &seqExpr{
																							pos: position{line: 1762, col: 5, offset: 59550},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1762, col: 5, offset: 59550},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1783, col: 5, offset: 60389},
																						run: (*parser).callonnestedGoCode293,
																						expr: &seqExpr{
																							pos: position{line: 1783, col: 5, offset: 60389},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1783, col: 5, offset: 60389},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1801, col: 5, offset: 61072},
																						run: (*parser).callonnestedGoCode298,
																						expr: &litMatcher{
																							pos:        position{line: 1801, col: 5, offset: 61072},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1625, col: 74, offset: 53637},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 79, offset: 53642},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 2654, col: 8, offset: 90032},
																			run: (*parser).callonnestedGoCode302,
																			expr: &choiceExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2654, col: 9, offset: 90033},
																						expr: &anyMatcher{
																							line: 2654, col: 10, offset: 90034,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2654, col: 14, offset: 90038},
																						expr: &anyMatcher{
																							line: 2654, col: 15, offset: 90039,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 1355, col: 68, offset: 44828},
															expr: &choiceExpr{
																pos: position{line: 2666, col: 20, offset: 90409},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2666, col: 31, offset: 90420},
																				run: (*parser).callonnestedGoCode312,
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2664, col: 37, offset: 90378},
																				expr: &litMatcher{
																					pos:        position{line: 2664, col: 37, offset: 90378},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2664, col: 43, offset: 90384},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1355, col: 74, offset: 44834},
															val:        "[^\\r\\n({[]})\\\"`]",
															chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', '\'', '"', '`'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParenExpr",
			pos:  position{line: 1276, col: 1, offset: 41572},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 16, offset: 41587},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1276, col: 16, offset: 41587},
						run: (*parser).callongoParenExpr2,
						expr: &seqExpr{
							pos: position{line: 1276, col: 16, offset: 41587},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1276, col: 16, offset: 41587},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1284, col: 21, offset: 41955},
										run: (*parser).callongoParenExpr5,
										expr: &seqExpr{
											pos: position{line: 1284, col: 21, offset: 41955},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1284, col: 21, offset: 41955},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1284, col: 24, offset: 41958},
													expr: &litMatcher{
														pos:        position{line: 1284, col: 25, offset: 41959},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
												&actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callongoParenExpr11,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2720, col: 18, offset: 92335},
													run: (*parser).callongoParenExpr17,
												},
												&litMatcher{
													pos:        position{line: 1284, col: 39, offset: 41973},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 39, offset: 41610},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1276, col: 45, offset: 41616},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 45, offset: 41616},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 59, offset: 41630},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1293, col: 19, offset: 42274},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1293, col: 19, offset: 42274},
												run: (*parser).callongoParenExpr24,
												expr: &seqExpr{
													pos: position{line: 1293, col: 19, offset: 42274},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1293, col: 19, offset: 42274},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callongoParenExpr27,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1295, col: 5, offset: 42353},
												run: (*parser).callongoParenExpr28,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callongoParenExpr29,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 41702},
						run: (*parser).callongoParenExpr35,
						expr: &seqExpr{
							pos: position{line: 1278, col: 5, offset: 41702},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1278, col: 5, offset: 41702},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1287, col: 21, offset: 42061},
										run: (*parser).callongoParenExpr38,
										expr: &seqExpr{
											pos: position{line: 1287, col: 21, offset: 42061},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1287, col: 21, offset: 42061},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1287, col: 24, offset: 42064},
													expr: &litMatcher{
														pos:        position{line: 1287, col: 25, offset: 42065},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
												&actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callongoParenExpr44,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2720, col: 18, offset: 92335},
													run: (*parser).callongoParenExpr50,
												},
												&litMatcher{
													pos:        position{line: 1287, col: 39, offset: 42079},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 28, offset: 41725},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1278, col: 34, offset: 41731},
										expr: &ruleRefExpr{
											pos:  position{line: 1278, col: 34, offset: 41731},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 48, offset: 41745},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1298, col: 19, offset: 42417},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1298, col: 19, offset: 42417},
												run: (*parser).callongoParenExpr57,
												expr: &seqExpr{
													pos: position{line: 1298, col: 19, offset: 42417},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1298, col: 19, offset: 42417},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callongoParenExpr60,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1300, col: 5, offset: 42496},
												run: (*parser).callongoParenExpr61,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callongoParenExpr62,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1280, col: 5, offset: 41817},
						run: (*parser).callongoParenExpr68,
						expr: &seqExpr{
							pos: position{line: 1280, col: 5, offset: 41817},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1280, col: 5, offset: 41817},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1290, col: 23, offset: 42170},
										run: (*parser).callongoParenExpr71,
										expr: &seqExpr{
											pos: position{line: 1290, col: 23, offset: 42170},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1290, col: 23, offset: 42170},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1290, col: 26, offset: 42173},
													expr: &litMatcher{
														pos:        position{line: 1290, col: 27, offset: 42174},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callongoParenExpr77,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2720, col: 18, offset: 92335},
													run: (*parser).callongoParenExpr83,
												},
												&litMatcher{
													pos:        position{line: 1290, col: 41, offset: 42188},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 30, offset: 41842},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1280, col: 36, offset: 41848},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 36, offset: 41848},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 50, offset: 41862},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1303, col: 21, offset: 42562},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1303, col: 21, offset: 42562},
												run: (*parser).callongoParenExpr90,
												expr: &seqExpr{
													pos: position{line: 1303, col: 21, offset: 42562},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1303, col: 21, offset: 42562},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callongoParenExpr93,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1305, col: 5, offset: 42641},
												run: (*parser).callongoParenExpr94,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callongoParenExpr95,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalGoExpression",
			pos:  position{line: 1314, col: 1, offset: 42977},
			expr: &actionExpr{
				pos: position{line: 1314, col: 28, offset: 43004},
				run: (*parser).callonConditionalGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1314, col: 28, offset: 43004},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1314, col: 35, offset: 43011},
						expr: &choiceExpr{
							pos: position{line: 1314, col: 36, offset: 43012},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1314, col: 36, offset: 43012},
									name: "conditionalGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1314, col: 61, offset: 43037},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1364, col: 28, offset: 45242},
									run: (*parser).callonConditionalGoExpression7,
									expr: &seqExpr{
										pos: position{line: 1364, col: 28, offset: 45242},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1364, col: 28, offset: 45242},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1364, col: 36, offset: 45250},
													expr: &choiceExpr{
														pos: position{line: 1364, col: 37, offset: 45251},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1364, col: 37, offset: 45251},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1349, col: 34, offset: 44425},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1349, col: 34, offset: 44425},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1349, col: 49, offset: 44440},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).callonConditionalGoExpression20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1364, col: 74, offset: 45288},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1380, col: 18, offset: 45701},
													run: (*parser).callonConditionalGoExpression25,
													expr: &seqExpr{
														pos: position{line: 1380, col: 18, offset: 45701},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1380, col: 18, offset: 45701},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1380, col: 26, offset: 45709},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 29, offset: 45712},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2746, col: 14, offset: 93228},
																	run: (*parser).callonConditionalGoExpression31,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 14, offset: 93228},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonConditionalGoExpression33,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2720, col: 18, offset: 92335},
																				run: (*parser).callonConditionalGoExpression39,
																			},
																			&actionExpr{
																				pos: position{line: 2672, col: 12, offset: 90673},
																				run: (*parser).callonConditionalGoExpression40,
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 12, offset: 90673},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2746, col: 32, offset: 93246},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonConditionalGoExpression46,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 47, offset: 45730},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 263, col: 10, offset: 7729},
																	run: (*parser).callonConditionalGoExpression51,
																	expr: &labeledExpr{
																		pos:   position{line: 263, col: 10, offset: 7729},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1577, col: 17, offset: 52172},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1560, col: 20, offset: 51927},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1577, col: 26, offset: 52181},
																					expr: &charClassMatcher{
																						pos:        position{line: 1560, col: 20, offset: 51927},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 60, offset: 45743},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1389, col: 21, offset: 45979},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2750, col: 12, offset: 93289},
																			run: (*parser).callonConditionalGoExpression59,
																			expr: &seqExpr{
																				pos: position{line: 2750, col: 12, offset: 93289},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2750, col: 12, offset: 93289},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2750, col: 15, offset: 93292},
																						expr: &seqExpr{
																							pos: position{line: 2750, col: 16, offset: 93293},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2750, col: 16, offset: 93293},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2750, col: 20, offset: 93297},
																									expr: &choiceExpr{
																										pos: position{line: 2666, col: 20, offset: 90409},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2663, col: 37, offset: 90336},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2666, col: 31, offset: 90420},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2666, col: 31, offset: 90420},
																														run: (*parser).callonConditionalGoExpression70,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2664, col: 37, offset: 90378},
																														expr: &litMatcher{
																															pos:        position{line: 2664, col: 37, offset: 90378},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2664, col: 43, offset: 90384},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2750, col: 26, offset: 93303},
																						label: "endI",
																						expr: &actionExpr{
																							pos: position{line: 2673, col: 12, offset: 90711},
																							run: (*parser).callonConditionalGoExpression75,
																							expr: &litMatcher{
																								pos:        position{line: 2673, col: 12, offset: 90711},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2726, col: 13, offset: 92468},
																						run: (*parser).callonConditionalGoExpression77,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1389, col: 31, offset: 45989},
																			run: (*parser).callonConditionalGoExpression78,
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonConditionalGoExpression79,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1338, col: 20, offset: 44066},
									run: (*parser).callonConditionalGoExpression85,
									expr: &oneOrMoreExpr{
										pos: position{line: 1338, col: 20, offset: 44066},
										expr: &seqExpr{
											pos: position{line: 1352, col: 24, offset: 44521},
											exprs: []any{
												&notExpr{
													pos: position{line: 1352, col: 24, offset: 44521},
													expr: &seqExpr{
														pos: position{line: 1357, col: 35, offset: 44888},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1357, col: 36, offset: 44889},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1357, col: 36, offset: 44889},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1349, col: 34, offset: 44425},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1349, col: 34, offset: 44425},
																				val:        "[=&|^+/*%<>!-]",
																				chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1349, col: 49, offset: 44440},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonConditionalGoExpression99,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1357, col: 72, offset: 44925},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1357, col: 80, offset: 44933},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1357, col: 83, offset: 44936},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1352, col: 57, offset: 44554},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1624, col: 14, offset: 53495},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1624, col: 14, offset: 53495},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1624, col: 20, offset: 53501},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1672, col: 19, offset: 55641},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1672, col: 19, offset: 55641},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1673, col: 5, offset: 55700},
																			run: (*parser).callonConditionalGoExpression117,
																			expr: &seqExpr{
																				pos: position{line: 1673, col: 5, offset: 55700},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1673, col: 5, offset: 55700},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 14, offset: 55709},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 26, offset: 55721},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 38, offset: 55733},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 50, offset: 55745},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1702, col: 16, offset: 56877},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1702, col: 16, offset: 56877},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1703, col: 5, offset: 56980},
																			run: (*parser).callonConditionalGoExpression138,
																			expr: &seqExpr{
																				pos: position{line: 1703, col: 5, offset: 56980},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1703, col: 5, offset: 56980},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 14, offset: 56989},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 26, offset: 57001},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 38, offset: 57013},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 50, offset: 57025},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 62, offset: 57037},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 74, offset: 57049},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 86, offset: 57061},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 98, offset: 57073},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1737, col: 24, offset: 58453},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1737, col: 24, offset: 58453},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1737, col: 29, offset: 58458},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1651, col: 75, offset: 54755},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1653, col: 24, offset: 54901},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1653, col: 24, offset: 54901},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1654, col: 24, offset: 54968},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1654, col: 24, offset: 54968},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1655, col: 5, offset: 55005},
																			run: (*parser).callonConditionalGoExpression170,
																			expr: &seqExpr{
																				pos: position{line: 1655, col: 5, offset: 55005},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1655, col: 5, offset: 55005},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 14, offset: 55014},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 26, offset: 55026},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1738, col: 24, offset: 58536},
																			run: (*parser).callonConditionalGoExpression177,
																			expr: &seqExpr{
																				pos: position{line: 1738, col: 24, offset: 58536},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1738, col: 24, offset: 58536},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1762, col: 5, offset: 59550},
																			run: (*parser).callonConditionalGoExpression188,
																			expr: &seqExpr{
																				pos: position{line: 1762, col: 5, offset: 59550},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1762, col: 5, offset: 59550},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1783, col: 5, offset: 60389},
																			run: (*parser).callonConditionalGoExpression195,
																			expr: &seqExpr{
																				pos: position{line: 1783, col: 5, offset: 60389},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1783, col: 5, offset: 60389},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1801, col: 5, offset: 61072},
																			run: (*parser).callonConditionalGoExpression200,
																			expr: &litMatcher{
																				pos:        position{line: 1801, col: 5, offset: 61072},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1624, col: 76, offset: 53557},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1625, col: 5, offset: 53568},
															run: (*parser).callonConditionalGoExpression203,
															expr: &seqExpr{
																pos: position{line: 1625, col: 5, offset: 53568},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1625, col: 5, offset: 53568},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 10, offset: 53573},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1625, col: 16, offset: 53579},
																			expr: &choiceExpr{
																				pos: position{line: 1625, col: 17, offset: 53580},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1672, col: 19, offset: 55641},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1672, col: 19, offset: 55641},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1673, col: 5, offset: 55700},
																						run: (*parser).callonConditionalGoExpression215,
																						expr: &seqExpr{
																							pos: position{line: 1673, col: 5, offset: 55700},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1673, col: 5, offset: 55700},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 14, offset: 55709},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 26, offset: 55721},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 38, offset: 55733},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 50, offset: 55745},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1702, col: 16, offset: 56877},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1702, col: 16, offset: 56877},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1703, col: 5, offset: 56980},
																						run: (*parser).callonConditionalGoExpression236,
																						expr: &seqExpr{
																							pos: position{line: 1703, col: 5, offset: 56980},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1703, col: 5, offset: 56980},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 14, offset: 56989},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 26, offset: 57001},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 38, offset: 57013},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 50, offset: 57025},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 62, offset: 57037},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 74, offset: 57049},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 86, offset: 57061},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 98, offset: 57073},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1737, col: 24, offset: 58453},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1737, col: 24, offset: 58453},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1737, col: 29, offset: 58458},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1651, col: 75, offset: 54755},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1653, col: 24, offset: 54901},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1653, col: 24, offset: 54901},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1654, col: 24, offset: 54968},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1654, col: 24, offset: 54968},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1655, col: 5, offset: 55005},
																						run: (*parser).callonConditionalGoExpression268,
																						expr: &seqExpr{
																							pos: position{line: 1655, col: 5, offset: 55005},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1655, col: 5, offset: 55005},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 14, offset: 55014},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 26, offset: 55026},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1738, col: 24, offset: 58536},
																						run: (*parser).callonConditionalGoExpression275,
																						expr: &seqExpr{
																							pos: position{line: 1738, col: 24, offset: 58536},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1738, col: 24, offset: 58536},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1762, col: 5, offset: 59550},
																						run: (*parser).callonConditionalGoExpression286,
																						expr: &seqExpr{
																							pos: position{line: 1762, col: 5, offset: 59550},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1762, col: 5, offset: 59550},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1783, col: 5, offset: 60389},
																						run: (*parser).callonConditionalGoExpression293,
																						expr: &seqExpr{
																							pos: position{line: 1783, col: 5, offset: 60389},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1783, col: 5, offset: 60389},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1801, col: 5, offset: 61072},
																						run: (*parser).callonConditionalGoExpression298,
																						expr: &litMatcher{
																							pos:        position{line: 1801, col: 5, offset: 61072},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1625, col: 74, offset: 53637},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 79, offset: 53642},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 2654, col: 8, offset: 90032},
																			run: (*parser).callonConditionalGoExpression302,
																			expr: &choiceExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2654, col: 9, offset: 90033},
																						expr: &anyMatcher{
																							line: 2654, col: 10, offset: 90034,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2654, col: 14, offset: 90038},
																						expr: &anyMatcher{
																							line: 2654, col: 15, offset: 90039,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1349, col: 34, offset: 44425},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1349, col: 34, offset: 44425},
																	val:        "[=&|^+/*%<>!-]",
																	chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1349, col: 49, offset: 44440},
																	expr: &choiceExpr{
																		pos: position{line: 2666, col: 20, offset: 90409},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2666, col: 31, offset: 90420},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2666, col: 31, offset: 90420},
																						run: (*parser).callonConditionalGoExpression314,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2664, col: 37, offset: 90378},
																						expr: &litMatcher{
																							pos:        position{line: 2664, col: 37, offset: 90378},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2664, col: 43, offset: 90384},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1352, col: 101, offset: 44598},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1352, col: 101, offset: 44598},
																	expr: &seqExpr{
																		pos: position{line: 1352, col: 103, offset: 44600},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1352, col: 103, offset: 44600},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1352, col: 106, offset: 44603},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1352, col: 112, offset: 44609},
																	val:        "[^\\r\\n({[]}),;:\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ',', ';', ':', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "conditionalGoParenExpr",
			pos:  position{line: 1318, col: 1, offset: 43133},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 27, offset: 43159},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1318, col: 27, offset: 43159},
						run: (*parser).callonconditionalGoParenExpr2,
						expr: &seqExpr{
							pos: position{line: 1318, col: 27, offset: 43159},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1318, col: 27, offset: 43159},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1284, col: 21, offset: 41955},
										run: (*parser).callonconditionalGoParenExpr5,
										expr: &seqExpr{
											pos: position{line: 1284, col: 21, offset: 41955},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1284, col: 21, offset: 41955},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1284, col: 24, offset: 41958},
													expr: &litMatcher{
														pos:        position{line: 1284, col: 25, offset: 41959},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
												&actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonconditionalGoParenExpr11,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2720, col: 18, offset: 92335},
													run: (*parser).callonconditionalGoParenExpr17,
												},
												&litMatcher{
													pos:        position{line: 1284, col: 39, offset: 41973},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 50, offset: 43182},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1318, col: 56, offset: 43188},
										expr: &ruleRefExpr{
											pos:  position{line: 1318, col: 56, offset: 43188},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 70, offset: 43202},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1293, col: 19, offset: 42274},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1293, col: 19, offset: 42274},
												run: (*parser).callonconditionalGoParenExpr24,
												expr: &seqExpr{
													pos: position{line: 1293, col: 19, offset: 42274},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1293, col: 19, offset: 42274},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callonconditionalGoParenExpr27,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1295, col: 5, offset: 42353},
												run: (*parser).callonconditionalGoParenExpr28,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonconditionalGoParenExpr29,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 43274},
						run: (*parser).callonconditionalGoParenExpr35,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 43274},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1320, col: 5, offset: 43274},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1287, col: 21, offset: 42061},
										run: (*parser).callonconditionalGoParenExpr38,
										expr: &seqExpr{
											pos: position{line: 1287, col: 21, offset: 42061},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1287, col: 21, offset: 42061},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1287, col: 24, offset: 42064},
													expr: &litMatcher{
														pos:        position{line: 1287, col: 25, offset: 42065},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
												&actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonconditionalGoParenExpr44,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2720, col: 18, offset: 92335},
													run: (*parser).callonconditionalGoParenExpr50,
												},
												&litMatcher{
													pos:        position{line: 1287, col: 39, offset: 42079},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 28, offset: 43297},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1320, col: 34, offset: 43303},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 34, offset: 43303},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 48, offset: 43317},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1298, col: 19, offset: 42417},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1298, col: 19, offset: 42417},
												run: (*parser).callonconditionalGoParenExpr57,
												expr: &seqExpr{
													pos: position{line: 1298, col: 19, offset: 42417},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1298, col: 19, offset: 42417},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callonconditionalGoParenExpr60,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1300, col: 5, offset: 42496},
												run: (*parser).callonconditionalGoParenExpr61,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonconditionalGoParenExpr62,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1320, col: 70, offset: 43339},
									expr: &choiceExpr{
										pos: position{line: 1320, col: 72, offset: 43341},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2642, col: 26, offset: 89615},
												run: (*parser).callonconditionalGoParenExpr70,
												expr: &choiceExpr{
													pos: position{line: 2642, col: 27, offset: 89616},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															run: (*parser).callonconditionalGoParenExpr72,
															expr: &seqExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						expr: &litMatcher{
																							pos:        position{line: 2637, col: 27, offset: 89506},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2637, col: 33, offset: 89512},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2636, col: 23, offset: 89477},
																				expr: &anyMatcher{
																					line: 2636, col: 24, offset: 89478,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 33, offset: 89622},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2642, col: 39, offset: 89628},
															expr: &seqExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2642, col: 41, offset: 89630},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2642, col: 44, offset: 89633},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1320, col: 78, offset: 43347},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1320, col: 78, offset: 43347},
														expr: &choiceExpr{
															pos: position{line: 2666, col: 20, offset: 90409},
															alternatives: []any{
																&charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 2666, col: 31, offset: 90420},
																	exprs: []any{
																		&andCodeExpr{
																			pos: position{line: 2666, col: 31, offset: 90420},
																			run: (*parser).callonconditionalGoParenExpr94,
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 2664, col: 37, offset: 90378},
																			expr: &litMatcher{
																				pos:        position{line: 2664, col: 37, offset: 90378},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2664, col: 43, offset: 90384},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1320, col: 82, offset: 43351},
														val:        "else",
														ignoreCase: false,
														want:       "\"else\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 43409},
						run: (*parser).callonconditionalGoParenExpr99,
						expr: &seqExpr{
							pos: position{line: 1322, col: 5, offset: 43409},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1322, col: 5, offset: 43409},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1290, col: 23, offset: 42170},
										run: (*parser).callonconditionalGoParenExpr102,
										expr: &seqExpr{
											pos: position{line: 1290, col: 23, offset: 42170},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1290, col: 23, offset: 42170},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1290, col: 26, offset: 42173},
													expr: &litMatcher{
														pos:        position{line: 1290, col: 27, offset: 42174},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonconditionalGoParenExpr108,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2720, col: 18, offset: 92335},
													run: (*parser).callonconditionalGoParenExpr114,
												},
												&litMatcher{
													pos:        position{line: 1290, col: 41, offset: 42188},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 30, offset: 43434},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1322, col: 36, offset: 43440},
										expr: &ruleRefExpr{
											pos:  position{line: 1322, col: 36, offset: 43440},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 50, offset: 43454},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1303, col: 21, offset: 42562},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1303, col: 21, offset: 42562},
												run: (*parser).callonconditionalGoParenExpr121,
												expr: &seqExpr{
													pos: position{line: 1303, col: 21, offset: 42562},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1303, col: 21, offset: 42562},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callonconditionalGoParenExpr124,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1305, col: 5, offset: 42641},
												run: (*parser).callonconditionalGoParenExpr125,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonconditionalGoParenExpr126,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1322, col: 74, offset: 43478},
									expr: &choiceExpr{
										pos: position{line: 1322, col: 76, offset: 43480},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2642, col: 26, offset: 89615},
												run: (*parser).callonconditionalGoParenExpr134,
												expr: &choiceExpr{
													pos: position{line: 2642, col: 27, offset: 89616},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															run: (*parser).callonconditionalGoParenExpr136,
															expr: &seqExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						expr: &litMatcher{
																							pos:        position{line: 2637, col: 27, offset: 89506},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2637, col: 33, offset: 89512},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2636, col: 23, offset: 89477},
																				expr: &anyMatcher{
																					line: 2636, col: 24, offset: 89478,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 33, offset: 89622},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2642, col: 39, offset: 89628},
															expr: &seqExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2642, col: 41, offset: 89630},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2642, col: 44, offset: 89633},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1322, col: 82, offset: 43486},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1322, col: 82, offset: 43486},
														expr: &choiceExpr{
															pos: position{line: 2666, col: 20, offset: 90409},
															alternatives: []any{
																&charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 2666, col: 31, offset: 90420},
																	exprs: []any{
																		&andCodeExpr{
																			pos: position{line: 2666, col: 31, offset: 90420},
																			run: (*parser).callonconditionalGoParenExpr158,
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 2664, col: 37, offset: 90378},
																			expr: &litMatcher{
																				pos:        position{line: 2664, col: 37, offset: 90378},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2664, col: 43, offset: 90384},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1322, col: 86, offset: 43490},
														val:        "else",
														ignoreCase: false,
														want:       "\"else\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoStatement",
			pos:  position{line: 1330, col: 1, offset: 43734},
			expr: &actionExpr{
				pos: position{line: 1330, col: 16, offset: 43749},
				run: (*parser).callonGoStatement1,
				expr: &labeledExpr{
					pos:   position{line: 1330, col: 16, offset: 43749},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1330, col: 23, offset: 43756},
						expr: &choiceExpr{
							pos: position{line: 1330, col: 24, offset: 43757},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1330, col: 24, offset: 43757},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1330, col: 38, offset: 43771},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1372, col: 27, offset: 45476},
									run: (*parser).callonGoStatement7,
									expr: &seqExpr{
										pos: position{line: 1372, col: 27, offset: 45476},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1372, col: 27, offset: 45476},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1372, col: 35, offset: 45484},
													expr: &choiceExpr{
														pos: position{line: 1372, col: 36, offset: 45485},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1372, col: 36, offset: 45485},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1349, col: 34, offset: 44425},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1349, col: 34, offset: 44425},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1349, col: 49, offset: 44440},
																		expr: &choiceExpr{
																			pos: position{line: 2666, col: 20, offset: 90409},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2666, col: 31, offset: 90420},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							run: (*parser).callonGoStatement20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2664, col: 37, offset: 90378},
																							expr: &litMatcher{
																								pos:        position{line: 2664, col: 37, offset: 90378},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2664, col: 43, offset: 90384},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1372, col: 73, offset: 45522},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1380, col: 18, offset: 45701},
													run: (*parser).callonGoStatement25,
													expr: &seqExpr{
														pos: position{line: 1380, col: 18, offset: 45701},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1380, col: 18, offset: 45701},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1380, col: 26, offset: 45709},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 29, offset: 45712},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2746, col: 14, offset: 93228},
																	run: (*parser).callonGoStatement31,
																	expr: &seqExpr{
																		pos: position{line: 2746, col: 14, offset: 93228},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonGoStatement33,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2720, col: 18, offset: 92335},
																				run: (*parser).callonGoStatement39,
																			},
																			&actionExpr{
																				pos: position{line: 2672, col: 12, offset: 90673},
																				run: (*parser).callonGoStatement40,
																				expr: &litMatcher{
																					pos:        position{line: 2672, col: 12, offset: 90673},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2746, col: 32, offset: 93246},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonGoStatement46,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 47, offset: 45730},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 263, col: 10, offset: 7729},
																	run: (*parser).callonGoStatement51,
																	expr: &labeledExpr{
																		pos:   position{line: 263, col: 10, offset: 7729},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1577, col: 17, offset: 52172},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1560, col: 20, offset: 51927},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1577, col: 26, offset: 52181},
																					expr: &charClassMatcher{
																						pos:        position{line: 1560, col: 20, offset: 51927},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1380, col: 60, offset: 45743},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1389, col: 21, offset: 45979},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2750, col: 12, offset: 93289},
																			run: (*parser).callonGoStatement59,
																			expr: &seqExpr{
																				pos: position{line: 2750, col: 12, offset: 93289},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2750, col: 12, offset: 93289},
																						expr: &charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2750, col: 15, offset: 93292},
																						expr: &seqExpr{
																							pos: position{line: 2750, col: 16, offset: 93293},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2750, col: 16, offset: 93293},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2750, col: 20, offset: 93297},
																									expr: &choiceExpr{
																										pos: position{line: 2666, col: 20, offset: 90409},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2663, col: 37, offset: 90336},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2666, col: 31, offset: 90420},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2666, col: 31, offset: 90420},
																														run: (*parser).callonGoStatement70,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2664, col: 37, offset: 90378},
																														expr: &litMatcher{
																															pos:        position{line: 2664, col: 37, offset: 90378},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2664, col: 43, offset: 90384},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2750, col: 26, offset: 93303},
																						label: "endI",
																						expr: &actionExpr{
																							pos: position{line: 2673, col: 12, offset: 90711},
																							run: (*parser).callonGoStatement75,
																							expr: &litMatcher{
																								pos:        position{line: 2673, col: 12, offset: 90711},
																								val:        ")",
																								ignoreCase: false,
																								want:       "\")\"",
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2726, col: 13, offset: 92468},
																						run: (*parser).callonGoStatement77,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1389, col: 31, offset: 45989},
																			run: (*parser).callonGoStatement78,
																			expr: &actionExpr{
																				pos: position{line: 2654, col: 8, offset: 90032},
																				run: (*parser).callonGoStatement79,
																				expr: &choiceExpr{
																					pos: position{line: 2654, col: 9, offset: 90033},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2654, col: 9, offset: 90033},
																							expr: &anyMatcher{
																								line: 2654, col: 10, offset: 90034,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2654, col: 14, offset: 90038},
																							expr: &anyMatcher{
																								line: 2654, col: 15, offset: 90039,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1341, col: 19, offset: 44180},
									run: (*parser).callonGoStatement85,
									expr: &oneOrMoreExpr{
										pos: position{line: 1341, col: 19, offset: 44180},
										expr: &seqExpr{
											pos: position{line: 1353, col: 24, offset: 44654},
											exprs: []any{
												&notExpr{
													pos: position{line: 1353, col: 24, offset: 44654},
													expr: &seqExpr{
														pos: position{line: 1358, col: 35, offset: 44974},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1358, col: 36, offset: 44975},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1358, col: 36, offset: 44975},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1350, col: 34, offset: 44477},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1350, col: 34, offset: 44477},
																				val:        "[=,&|^+/*%<>!-]",
																				chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1350, col: 50, offset: 44493},
																				expr: &choiceExpr{
																					pos: position{line: 2666, col: 20, offset: 90409},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2663, col: 37, offset: 90336},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2666, col: 31, offset: 90420},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2666, col: 31, offset: 90420},
																									run: (*parser).callonGoStatement99,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2664, col: 37, offset: 90378},
																									expr: &litMatcher{
																										pos:        position{line: 2664, col: 37, offset: 90378},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2664, col: 43, offset: 90384},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1358, col: 71, offset: 45010},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1358, col: 79, offset: 45018},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1358, col: 82, offset: 45021},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1353, col: 56, offset: 44686},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1624, col: 14, offset: 53495},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1624, col: 14, offset: 53495},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1624, col: 20, offset: 53501},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1672, col: 19, offset: 55641},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1672, col: 19, offset: 55641},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1673, col: 5, offset: 55700},
																			run: (*parser).callonGoStatement117,
																			expr: &seqExpr{
																				pos: position{line: 1673, col: 5, offset: 55700},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1673, col: 5, offset: 55700},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 14, offset: 55709},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 26, offset: 55721},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 38, offset: 55733},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1673, col: 50, offset: 55745},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1702, col: 16, offset: 56877},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1702, col: 16, offset: 56877},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1703, col: 5, offset: 56980},
																			run: (*parser).callonGoStatement138,
																			expr: &seqExpr{
																				pos: position{line: 1703, col: 5, offset: 56980},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1703, col: 5, offset: 56980},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 14, offset: 56989},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 26, offset: 57001},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 38, offset: 57013},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 50, offset: 57025},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 62, offset: 57037},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 74, offset: 57049},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 86, offset: 57061},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1703, col: 98, offset: 57073},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1737, col: 24, offset: 58453},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1737, col: 24, offset: 58453},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1737, col: 29, offset: 58458},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1651, col: 75, offset: 54755},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1653, col: 24, offset: 54901},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1653, col: 24, offset: 54901},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1570, col: 19, offset: 52097},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1654, col: 24, offset: 54968},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1654, col: 24, offset: 54968},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1571, col: 19, offset: 52121},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1655, col: 5, offset: 55005},
																			run: (*parser).callonGoStatement170,
																			expr: &seqExpr{
																				pos: position{line: 1655, col: 5, offset: 55005},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1655, col: 5, offset: 55005},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 14, offset: 55014},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1655, col: 26, offset: 55026},
																						expr: &charClassMatcher{
																							pos:        position{line: 1571, col: 19, offset: 52121},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1738, col: 24, offset: 58536},
																			run: (*parser).callonGoStatement177,
																			expr: &seqExpr{
																				pos: position{line: 1738, col: 24, offset: 58536},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1738, col: 24, offset: 58536},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1762, col: 5, offset: 59550},
																			run: (*parser).callonGoStatement188,
																			expr: &seqExpr{
																				pos: position{line: 1762, col: 5, offset: 59550},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1762, col: 5, offset: 59550},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1783, col: 5, offset: 60389},
																			run: (*parser).callonGoStatement195,
																			expr: &seqExpr{
																				pos: position{line: 1783, col: 5, offset: 60389},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1783, col: 5, offset: 60389},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1571, col: 19, offset: 52121},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1801, col: 5, offset: 61072},
																			run: (*parser).callonGoStatement200,
																			expr: &litMatcher{
																				pos:        position{line: 1801, col: 5, offset: 61072},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1624, col: 76, offset: 53557},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1625, col: 5, offset: 53568},
															run: (*parser).callonGoStatement203,
															expr: &seqExpr{
																pos: position{line: 1625, col: 5, offset: 53568},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1625, col: 5, offset: 53568},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 10, offset: 53573},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1625, col: 16, offset: 53579},
																			expr: &choiceExpr{
																				pos: position{line: 1625, col: 17, offset: 53580},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1672, col: 19, offset: 55641},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1672, col: 19, offset: 55641},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1673, col: 5, offset: 55700},
																						run: (*parser).callonGoStatement215,
																						expr: &seqExpr{
																							pos: position{line: 1673, col: 5, offset: 55700},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1673, col: 5, offset: 55700},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 14, offset: 55709},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 26, offset: 55721},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 38, offset: 55733},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1673, col: 50, offset: 55745},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1702, col: 16, offset: 56877},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1702, col: 16, offset: 56877},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1703, col: 5, offset: 56980},
																						run: (*parser).callonGoStatement236,
																						expr: &seqExpr{
																							pos: position{line: 1703, col: 5, offset: 56980},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1703, col: 5, offset: 56980},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 14, offset: 56989},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 26, offset: 57001},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 38, offset: 57013},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 50, offset: 57025},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 62, offset: 57037},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 74, offset: 57049},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 86, offset: 57061},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1703, col: 98, offset: 57073},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1737, col: 24, offset: 58453},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1737, col: 24, offset: 58453},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1737, col: 29, offset: 58458},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1651, col: 75, offset: 54755},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1653, col: 24, offset: 54901},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1653, col: 24, offset: 54901},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1570, col: 19, offset: 52097},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1654, col: 24, offset: 54968},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1654, col: 24, offset: 54968},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1571, col: 19, offset: 52121},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1655, col: 5, offset: 55005},
																						run: (*parser).callonGoStatement268,
																						expr: &seqExpr{
																							pos: position{line: 1655, col: 5, offset: 55005},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1655, col: 5, offset: 55005},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 14, offset: 55014},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1655, col: 26, offset: 55026},
																									expr: &charClassMatcher{
																										pos:        position{line: 1571, col: 19, offset: 52121},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1738, col: 24, offset: 58536},
																						run: (*parser).callonGoStatement275,
																						expr: &seqExpr{
																							pos: position{line: 1738, col: 24, offset: 58536},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1738, col: 24, offset: 58536},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1762, col: 5, offset: 59550},
																						run: (*parser).callonGoStatement286,
																						expr: &seqExpr{
																							pos: position{line: 1762, col: 5, offset: 59550},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1762, col: 5, offset: 59550},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1783, col: 5, offset: 60389},
																						run: (*parser).callonGoStatement293,
																						expr: &seqExpr{
																							pos: position{line: 1783, col: 5, offset: 60389},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1783, col: 5, offset: 60389},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1571, col: 19, offset: 52121},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1801, col: 5, offset: 61072},
																						run: (*parser).callonGoStatement298,
																						expr: &litMatcher{
																							pos:        position{line: 1801, col: 5, offset: 61072},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1625, col: 74, offset: 53637},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1625, col: 79, offset: 53642},
																		label: "endPosI",
																		expr: &actionExpr{
																			pos: position{line: 2654, col: 8, offset: 90032},
																			run: (*parser).callonGoStatement302,
																			expr: &choiceExpr{
																				pos: position{line: 2654, col: 9, offset: 90033},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2654, col: 9, offset: 90033},
																						expr: &anyMatcher{
																							line: 2654, col: 10, offset: 90034,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2654, col: 14, offset: 90038},
																						expr: &anyMatcher{
																							line: 2654, col: 15, offset: 90039,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1350, col: 34, offset: 44477},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1350, col: 34, offset: 44477},
																	val:        "[=,&|^+/*%<>!-]",
																	chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1350, col: 50, offset: 44493},
																	expr: &choiceExpr{
																		pos: position{line: 2666, col: 20, offset: 90409},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2666, col: 31, offset: 90420},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2666, col: 31, offset: 90420},
																						run: (*parser).callonGoStatement314,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2664, col: 37, offset: 90378},
																						expr: &litMatcher{
																							pos:        position{line: 2664, col: 37, offset: 90378},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2664, col: 43, offset: 90384},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1353, col: 99, offset: 44729},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1353, col: 99, offset: 44729},
																	expr: &seqExpr{
																		pos: position{line: 1353, col: 101, offset: 44731},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1353, col: 101, offset: 44731},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1353, col: 104, offset: 44734},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1353, col: 110, offset: 44740},
																	val:        "[^\\r\\n({[]});\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ';', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 1397, col: 1, offset: 46236},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 11, offset: 46246},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 46246},
						name: "InterpretedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 31, offset: 46266},
						name: "RawString",
					},
				},
			},
		},
		{
			name: "InterpretedString",
			pos:  position{line: 1399, col: 1, offset: 46277},
			expr: &actionExpr{
				pos: position{line: 1399, col: 22, offset: 46298},
				run: (*parser).callonInterpretedString1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 22, offset: 46298},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonInterpretedString3,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2720, col: 18, offset: 92335},
							run: (*parser).callonInterpretedString9,
						},
						&litMatcher{
							pos:        position{line: 1408, col: 37, offset: 46600},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 1399, col: 45, offset: 46321},
							label: "contentsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1399, col: 55, offset: 46331},
								expr: &ruleRefExpr{
									pos:  position{line: 1399, col: 55, offset: 46331},
									name: "InterpretedStringItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1399, col: 78, offset: 46354},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 1409, col: 25, offset: 46628},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1409, col: 25, offset: 46628},
										run: (*parser).callonInterpretedString16,
										expr: &seqExpr{
											pos: position{line: 1409, col: 25, offset: 46628},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1409, col: 25, offset: 46628},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonInterpretedString19,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1411, col: 5, offset: 46670},
										run: (*parser).callonInterpretedString20,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonInterpretedString21,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawString",
			pos:  position{line: 1430, col: 1, offset: 47201},
			expr: &actionExpr{
				pos: position{line: 1430, col: 14, offset: 47214},
				run: (*parser).callonRawString1,
				expr: &seqExpr{
					pos: position{line: 1430, col: 14, offset: 47214},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonRawString3,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2720, col: 18, offset: 92335},
							run: (*parser).callonRawString9,
						},
						&litMatcher{
							pos:        position{line: 1439, col: 29, offset: 47484},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 1430, col: 29, offset: 47229},
							label: "contentsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1430, col: 39, offset: 47239},
								expr: &ruleRefExpr{
									pos:  position{line: 1430, col: 39, offset: 47239},
									name: "RawStringItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1430, col: 54, offset: 47254},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 1440, col: 17, offset: 47504},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1440, col: 17, offset: 47504},
										run: (*parser).callonRawString16,
										expr: &seqExpr{
											pos: position{line: 1440, col: 17, offset: 47504},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1440, col: 17, offset: 47504},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonRawString19,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1442, col: 5, offset: 47546},
										run: (*parser).callonRawString20,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonRawString21,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringItem",
			pos:  position{line: 1452, col: 1, offset: 47787},
			expr: &choiceExpr{
				pos: position{line: 1452, col: 26, offset: 47812},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1455, col: 26, offset: 47943},
						run: (*parser).callonInterpretedStringItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1455, col: 26, offset: 47943},
							expr: &choiceExpr{
								pos: position{line: 1455, col: 27, offset: 47944},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1455, col: 27, offset: 47944},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1455, col: 34, offset: 47951},
										exprs: []any{
											&notExpr{
												pos: position{line: 1455, col: 34, offset: 47951},
												expr: &choiceExpr{
													pos: position{line: 1548, col: 37, offset: 51606},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1548, col: 37, offset: 51606},
															val:        "#%",
															ignoreCase: false,
															want:       "\"#%\"",
														},
														&litMatcher{
															pos:        position{line: 1548, col: 44, offset: 51613},
															val:        "#{",
															ignoreCase: false,
															want:       "\"#{\"",
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 1455, col: 69, offset: 47986},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 1672, col: 19, offset: 55641},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1672, col: 19, offset: 55641},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1673, col: 5, offset: 55700},
														run: (*parser).callonInterpretedStringItem18,
														expr: &seqExpr{
															pos: position{line: 1673, col: 5, offset: 55700},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1673, col: 5, offset: 55700},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 14, offset: 55709},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 26, offset: 55721},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 38, offset: 55733},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 50, offset: 55745},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1702, col: 16, offset: 56877},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1702, col: 16, offset: 56877},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1703, col: 5, offset: 56980},
														run: (*parser).callonInterpretedStringItem39,
														expr: &seqExpr{
															pos: position{line: 1703, col: 5, offset: 56980},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1703, col: 5, offset: 56980},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 14, offset: 56989},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 26, offset: 57001},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 38, offset: 57013},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 50, offset: 57025},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 62, offset: 57037},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 74, offset: 57049},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 86, offset: 57061},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 98, offset: 57073},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1930, col: 36, offset: 65917},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1930, col: 36, offset: 65917},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1930, col: 41, offset: 65922},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1928, col: 38, offset: 65809},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 1653, col: 24, offset: 54901},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1653, col: 24, offset: 54901},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1570, col: 19, offset: 52097},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1570, col: 19, offset: 52097},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1570, col: 19, offset: 52097},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 1654, col: 24, offset: 54968},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1654, col: 24, offset: 54968},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1655, col: 5, offset: 55005},
														run: (*parser).callonInterpretedStringItem71,
														expr: &seqExpr{
															pos: position{line: 1655, col: 5, offset: 55005},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1655, col: 5, offset: 55005},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1655, col: 14, offset: 55014},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1655, col: 26, offset: 55026},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1817, col: 37, offset: 61638},
														run: (*parser).callonInterpretedStringItem78,
														expr: &seqExpr{
															pos: position{line: 1817, col: 37, offset: 61638},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1817, col: 37, offset: 61638},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1841, col: 5, offset: 62653},
														run: (*parser).callonInterpretedStringItem89,
														expr: &seqExpr{
															pos: position{line: 1841, col: 5, offset: 62653},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1841, col: 5, offset: 62653},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1862, col: 5, offset: 63493},
														run: (*parser).callonInterpretedStringItem96,
														expr: &seqExpr{
															pos: position{line: 1862, col: 5, offset: 63493},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1862, col: 5, offset: 63493},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1880, col: 5, offset: 64177},
														run: (*parser).callonInterpretedStringItem101,
														expr: &litMatcher{
															pos:        position{line: 1880, col: 5, offset: 64177},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 50, offset: 47836},
						name: "StringInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringItem",
			pos:  position{line: 1453, col: 1, offset: 47856},
			expr: &choiceExpr{
				pos: position{line: 1453, col: 26, offset: 47881},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1461, col: 18, offset: 48190},
						run: (*parser).callonRawStringItem2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1461, col: 18, offset: 48190},
							expr: &choiceExpr{
								pos: position{line: 1461, col: 19, offset: 48191},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1461, col: 19, offset: 48191},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
									&seqExpr{
										pos: position{line: 1461, col: 26, offset: 48198},
										exprs: []any{
											&notExpr{
												pos: position{line: 1461, col: 26, offset: 48198},
												expr: &choiceExpr{
													pos: position{line: 1548, col: 37, offset: 51606},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 1548, col: 37, offset: 51606},
															val:        "#%",
															ignoreCase: false,
															want:       "\"#%\"",
														},
														&litMatcher{
															pos:        position{line: 1548, col: 44, offset: 51613},
															val:        "#{",
															ignoreCase: false,
															want:       "\"#{\"",
														},
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2800, col: 17, offset: 94525},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2800, col: 17, offset: 94525},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2800, col: 17, offset: 94525},
																run: (*parser).callonRawStringItem13,
															},
															&notExpr{
																pos: position{line: 2800, col: 50, offset: 94558},
																expr: &charClassMatcher{
																	pos:        position{line: 2800, col: 51, offset: 94559},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2800, col: 60, offset: 94568},
														run: (*parser).callonRawStringItem16,
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1914, col: 27, offset: 65192},
												val:        "[^`]",
												chars:      []rune{'`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 42, offset: 47897},
						name: "StringInterpolation",
					},
				},
			},
		},
		{
			name: "StringInterpolation",
			pos:  position{line: 1468, col: 1, offset: 48374},
			expr: &actionExpr{
				pos: position{line: 1468, col: 24, offset: 48397},
				run: (*parser).callonStringInterpolation1,
				expr: &seqExpr{
					pos: position{line: 1468, col: 24, offset: 48397},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonStringInterpolation3,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2720, col: 18, offset: 92335},
							run: (*parser).callonStringInterpolation9,
						},
						&litMatcher{
							pos:        position{line: 2464, col: 33, offset: 83021},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 43, offset: 48416},
							label: "fmtDirectiveI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1468, col: 57, offset: 48430},
								expr: &choiceExpr{
									pos: position{line: 1505, col: 17, offset: 49786},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1505, col: 17, offset: 49786},
											run: (*parser).callonStringInterpolation14,
											expr: &seqExpr{
												pos: position{line: 1505, col: 17, offset: 49786},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1505, col: 17, offset: 49786},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1505, col: 21, offset: 49790},
														expr: &charClassMatcher{
															pos:        position{line: 1521, col: 12, offset: 50471},
															val:        "[-+# 0]",
															chars:      []rune{'-', '+', '#', ' ', '0'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1505, col: 30, offset: 49799},
														expr: &seqExpr{
															pos: position{line: 1505, col: 31, offset: 49800},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1505, col: 31, offset: 49800},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1505, col: 36, offset: 49805},
																	expr: &charClassMatcher{
																		pos:        position{line: 1505, col: 36, offset: 49805},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1505, col: 45, offset: 49814},
														expr: &seqExpr{
															pos: position{line: 1505, col: 46, offset: 49815},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1505, col: 46, offset: 49815},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1505, col: 50, offset: 49819},
																	expr: &charClassMatcher{
																		pos:        position{line: 1505, col: 50, offset: 49819},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 1522, col: 12, offset: 50490},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 1522, col: 12, offset: 50490},
																val:        "[bcdeEfFgGoOpqstTUvX]",
																chars:      []rune{'b', 'c', 'd', 'e', 'E', 'f', 'F', 'g', 'G', 'o', 'O', 'p', 'q', 's', 't', 'T', 'U', 'v', 'X'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 1522, col: 36, offset: 50514},
																run: (*parser).callonStringInterpolation31,
																expr: &andExpr{
																	pos: position{line: 1522, col: 36, offset: 50514},
																	expr: &charClassMatcher{
																		pos:        position{line: 1522, col: 38, offset: 50516},
																		val:        "[{\"`]",
																		chars:      []rune{'{', '"', '`'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1534, col: 5, offset: 51051},
																run: (*parser).callonStringInterpolation34,
																expr: &anyMatcher{
																	line: 1534, col: 5, offset: 51051,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1507, col: 5, offset: 49877},
											run: (*parser).callonStringInterpolation36,
											expr: &seqExpr{
												pos: position{line: 1507, col: 5, offset: 49877},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1507, col: 5, offset: 49877},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1507, col: 9, offset: 49881},
														expr: &charClassMatcher{
															pos:        position{line: 1507, col: 9, offset: 49881},
															val:        "[^`\"{]",
															chars:      []rune{'`', '"', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&labeledExpr{
														pos:   position{line: 1507, col: 17, offset: 49889},
														label: "endI",
														expr: &actionExpr{
															pos: position{line: 2654, col: 8, offset: 90032},
															run: (*parser).callonStringInterpolation42,
															expr: &choiceExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2654, col: 9, offset: 90033},
																		expr: &anyMatcher{
																			line: 2654, col: 10, offset: 90034,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2654, col: 14, offset: 90038},
																		expr: &anyMatcher{
																			line: 2654, col: 15, offset: 90039,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 71, offset: 48444},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 77, offset: 48450},
								name: "stringInterpolationExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "stringInterpolationExpression",
			pos:  position{line: 1475, col: 1, offset: 48644},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 34, offset: 48677},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1475, col: 34, offset: 48677},
						run: (*parser).callonstringInterpolationExpression2,
						expr: &seqExpr{
							pos: position{line: 1475, col: 34, offset: 48677},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2466, col: 33, offset: 83058},
									run: (*parser).callonstringInterpolationExpression4,
									expr: &seqExpr{
										pos: position{line: 2466, col: 33, offset: 83058},
										exprs: []any{
											&actionExpr{
												pos: position{line: 2654, col: 8, offset: 90032},
												run: (*parser).callonstringInterpolationExpression6,
												expr: &choiceExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2654, col: 9, offset: 90033},
															expr: &anyMatcher{
																line: 2654, col: 10, offset: 90034,
															},
														},
														&notExpr{
															pos: position{line: 2654, col: 14, offset: 90038},
															expr: &anyMatcher{
																line: 2654, col: 15, offset: 90039,
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 2720, col: 18, offset: 92335},
												run: (*parser).callonstringInterpolationExpression12,
											},
											&actionExpr{
												pos: position{line: 2675, col: 12, offset: 90750},
												run: (*parser).callonstringInterpolationExpression13,
												expr: &litMatcher{
													pos:        position{line: 2675, col: 12, offset: 90750},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 2786, col: 16, offset: 94324},
									run: (*parser).callonstringInterpolationExpression15,
								},
								&labeledExpr{
									pos:   position{line: 1475, col: 75, offset: 48718},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 1475, col: 81, offset: 48724},
										name: "Expression",
									},
								},
								&stateCodeExpr{
									pos: position{line: 2793, col: 14, offset: 94423},
									run: (*parser).callonstringInterpolationExpression18,
								},
								&labeledExpr{
									pos:   position{line: 1475, col: 102, offset: 48745},
									label: "rBraceI",
									expr: &choiceExpr{
										pos: position{line: 2467, col: 31, offset: 83129},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2467, col: 31, offset: 83129},
												run: (*parser).callonstringInterpolationExpression21,
												expr: &seqExpr{
													pos: position{line: 2467, col: 31, offset: 83129},
													exprs: []any{
														&actionExpr{
															pos: position{line: 2676, col: 12, offset: 90788},
															run: (*parser).callonstringInterpolationExpression23,
															expr: &litMatcher{
																pos:        position{line: 2676, col: 12, offset: 90788},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callonstringInterpolationExpression25,
														},
														&stateCodeExpr{
															pos: position{line: 2726, col: 13, offset: 92468},
															run: (*parser).callonstringInterpolationExpression26,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2469, col: 5, offset: 83184},
												run: (*parser).callonstringInterpolationExpression27,
												expr: &actionExpr{
													pos: position{line: 2654, col: 8, offset: 90032},
													run: (*parser).callonstringInterpolationExpression28,
													expr: &choiceExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																expr: &anyMatcher{
																	line: 2654, col: 10, offset: 90034,
																},
															},
															&notExpr{
																pos: position{line: 2654, col: 14, offset: 90038},
																expr: &anyMatcher{
																	line: 2654, col: 15, offset: 90039,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1481, col: 5, offset: 48960},
						run: (*parser).callonstringInterpolationExpression34,
						expr: &actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonstringInterpolationExpression35,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 1936, col: 1, offset: 65994},
			expr: &choiceExpr{
				pos: position{line: 1936, col: 15, offset: 66008},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1936, col: 16, offset: 66009},
						exprs: []any{
							&choiceExpr{
								pos: position{line: 1937, col: 15, offset: 66087},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 1594, col: 21, offset: 52724},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 1560, col: 20, offset: 51927},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1577, col: 26, offset: 52181},
												expr: &charClassMatcher{
													pos:        position{line: 1560, col: 20, offset: 51927},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1594, col: 35, offset: 52738},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1594, col: 38, offset: 52741},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1594, col: 42, offset: 52745},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&charClassMatcher{
												pos:        position{line: 1560, col: 20, offset: 51927},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1577, col: 26, offset: 52181},
												expr: &charClassMatcher{
													pos:        position{line: 1560, col: 20, offset: 51927},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1577, col: 17, offset: 52172},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 1560, col: 20, offset: 51927},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1577, col: 26, offset: 52181},
												expr: &charClassMatcher{
													pos:        position{line: 1560, col: 20, offset: 51927},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1936, col: 27, offset: 66020},
								expr: &seqExpr{
									pos: position{line: 1936, col: 28, offset: 66021},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 1936, col: 28, offset: 66021},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1936, col: 31, offset: 66024},
											name: "goTypeArgs",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1936, col: 47, offset: 66040},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 1936, col: 59, offset: 66052},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1936, col: 59, offset: 66052},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1936, col: 63, offset: 66056},
								expr: &charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1936, col: 66, offset: 66059},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1936, col: 73, offset: 66066},
								expr: &charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 1936, col: 76, offset: 66069},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 1938, col: 1, offset: 66119},
			expr: &seqExpr{
				pos: position{line: 1938, col: 15, offset: 66133},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1938, col: 15, offset: 66133},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1938, col: 19, offset: 66137},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1938, col: 22, offset: 66140},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1938, col: 33, offset: 66151},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1938, col: 36, offset: 66154},
						expr: &seqExpr{
							pos: position{line: 1938, col: 37, offset: 66155},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1938, col: 37, offset: 66155},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1938, col: 41, offset: 66159},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1938, col: 46, offset: 66164},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 1939, col: 1, offset: 66168},
			expr: &seqExpr{
				pos: position{line: 1939, col: 15, offset: 66182},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1939, col: 15, offset: 66182},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1939, col: 22, offset: 66189},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1939, col: 25, offset: 66192},
						expr: &seqExpr{
							pos: position{line: 1939, col: 26, offset: 66193},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1939, col: 26, offset: 66193},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1939, col: 30, offset: 66197},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1939, col: 33, offset: 66200},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 1940, col: 1, offset: 66209},
			expr: &choiceExpr{
				pos: position{line: 1940, col: 16, offset: 66224},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1940, col: 16, offset: 66224},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 30, offset: 66238},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 45, offset: 66253},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 61, offset: 66269},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 78, offset: 66286},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 96, offset: 66304},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 110, offset: 66318},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 122, offset: 66330},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 1946, col: 1, offset: 66368},
			expr: &seqExpr{
				pos: position{line: 1946, col: 18, offset: 66385},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1946, col: 18, offset: 66385},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1946, col: 22, offset: 66389},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 25, offset: 66392},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1946, col: 39, offset: 66406},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1946, col: 42, offset: 66409},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1946, col: 46, offset: 66413},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 49, offset: 66416},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 1947, col: 1, offset: 66430},
			expr: &seqExpr{
				pos: position{line: 1947, col: 18, offset: 66447},
				exprs: []any{
					&oneOrMoreExpr{
						pos: position{line: 1947, col: 18, offset: 66447},
						expr: &charClassMatcher{
							pos:        position{line: 1947, col: 18, offset: 66447},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1947, col: 25, offset: 66454},
						expr: &seqExpr{
							pos: position{line: 1947, col: 26, offset: 66455},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1947, col: 26, offset: 66455},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 1947, col: 30, offset: 66459},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1947, col: 30, offset: 66459},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 1947, col: 37, offset: 66466},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 1947, col: 44, offset: 66473},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1947, col: 67, offset: 66496},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1947, col: 70, offset: 66499},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 1948, col: 1, offset: 66596},
			expr: &ruleRefExpr{
				pos:  position{line: 1948, col: 18, offset: 66613},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 1954, col: 1, offset: 66643},
			expr: &seqExpr{
				pos: position{line: 1954, col: 16, offset: 66658},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1954, col: 16, offset: 66658},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1954, col: 21, offset: 66663},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1954, col: 24, offset: 66666},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 1960, col: 1, offset: 66704},
			expr: &seqExpr{
				pos: position{line: 1960, col: 20, offset: 66723},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1960, col: 20, offset: 66723},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1960, col: 29, offset: 66732},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1960, col: 32, offset: 66735},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1960, col: 36, offset: 66739},
						expr: &seqExpr{
							pos: position{line: 1960, col: 37, offset: 66740},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1960, col: 37, offset: 66740},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callongoStructType12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1960, col: 41, offset: 66744},
									expr: &ruleRefExpr{
										pos:  position{line: 1960, col: 41, offset: 66744},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 1960, col: 55, offset: 66758},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1960, col: 55, offset: 66758},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 2664, col: 37, offset: 90378},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2664, col: 37, offset: 90378},
													expr: &litMatcher{
														pos:        position{line: 2664, col: 37, offset: 90378},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2664, col: 43, offset: 90384},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1960, col: 72, offset: 66775},
						expr: &choiceExpr{
							pos: position{line: 2666, col: 20, offset: 90409},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2666, col: 31, offset: 90420},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2666, col: 31, offset: 90420},
											run: (*parser).callongoStructType28,
										},
										&zeroOrOneExpr{
											pos: position{line: 2664, col: 37, offset: 90378},
											expr: &litMatcher{
												pos:        position{line: 2664, col: 37, offset: 90378},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2664, col: 43, offset: 90384},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1960, col: 76, offset: 66779},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 1961, col: 1, offset: 66783},
			expr: &seqExpr{
				pos: position{line: 1961, col: 20, offset: 66802},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 1961, col: 21, offset: 66803},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 1961, col: 21, offset: 66803},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1577, col: 26, offset: 52181},
										expr: &charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2012, col: 34, offset: 67998},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2012, col: 37, offset: 68001},
										expr: &seqExpr{
											pos: position{line: 2012, col: 38, offset: 68002},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2012, col: 38, offset: 68002},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2012, col: 42, offset: 68006},
													expr: &choiceExpr{
														pos: position{line: 2666, col: 20, offset: 90409},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		run: (*parser).callongoFieldDecl16,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2664, col: 37, offset: 90378},
																		expr: &litMatcher{
																			pos:        position{line: 2664, col: 37, offset: 90378},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2664, col: 43, offset: 90384},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 1560, col: 20, offset: 51927},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1577, col: 26, offset: 52181},
													expr: &charClassMatcher{
														pos:        position{line: 1560, col: 20, offset: 51927},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1961, col: 38, offset: 66820},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1961, col: 41, offset: 66823},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1961, col: 50, offset: 66832},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1961, col: 67, offset: 66849},
						expr: &choiceExpr{
							pos: position{line: 1901, col: 16, offset: 64750},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 1903, col: 19, offset: 64809},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1903, col: 19, offset: 64809},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1903, col: 23, offset: 64813},
											expr: &charClassMatcher{
												pos:        position{line: 1914, col: 27, offset: 65192},
												val:        "[^`]",
												chars:      []rune{'`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 1903, col: 47, offset: 64837},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 1904, col: 5, offset: 64847},
									run: (*parser).callongoFieldDecl34,
									expr: &seqExpr{
										pos: position{line: 1904, col: 5, offset: 64847},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1904, col: 5, offset: 64847},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1904, col: 9, offset: 64851},
												expr: &charClassMatcher{
													pos:        position{line: 1914, col: 27, offset: 65192},
													val:        "[^`]",
													chars:      []rune{'`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callongoFieldDecl39,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1916, col: 27, offset: 65224},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1916, col: 27, offset: 65224},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1916, col: 31, offset: 65228},
											expr: &choiceExpr{
												pos: position{line: 1916, col: 32, offset: 65229},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 1672, col: 19, offset: 55641},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1672, col: 19, offset: 55641},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1673, col: 5, offset: 55700},
														run: (*parser).callongoFieldDecl60,
														expr: &seqExpr{
															pos: position{line: 1673, col: 5, offset: 55700},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1673, col: 5, offset: 55700},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 14, offset: 55709},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 26, offset: 55721},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 38, offset: 55733},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1673, col: 50, offset: 55745},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1702, col: 16, offset: 56877},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1702, col: 16, offset: 56877},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1703, col: 5, offset: 56980},
														run: (*parser).callongoFieldDecl81,
														expr: &seqExpr{
															pos: position{line: 1703, col: 5, offset: 56980},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1703, col: 5, offset: 56980},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 14, offset: 56989},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 26, offset: 57001},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 38, offset: 57013},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 50, offset: 57025},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 62, offset: 57037},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 74, offset: 57049},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 86, offset: 57061},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1703, col: 98, offset: 57073},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1930, col: 36, offset: 65917},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1930, col: 36, offset: 65917},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1930, col: 41, offset: 65922},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1928, col: 38, offset: 65809},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 1653, col: 24, offset: 54901},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1653, col: 24, offset: 54901},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1570, col: 19, offset: 52097},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1570, col: 19, offset: 52097},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1570, col: 19, offset: 52097},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 1654, col: 24, offset: 54968},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1654, col: 24, offset: 54968},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1571, col: 19, offset: 52121},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1655, col: 5, offset: 55005},
														run: (*parser).callongoFieldDecl113,
														expr: &seqExpr{
															pos: position{line: 1655, col: 5, offset: 55005},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1655, col: 5, offset: 55005},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1655, col: 14, offset: 55014},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1655, col: 26, offset: 55026},
																	expr: &charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1817, col: 37, offset: 61638},
														run: (*parser).callongoFieldDecl120,
														expr: &seqExpr{
															pos: position{line: 1817, col: 37, offset: 61638},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1817, col: 37, offset: 61638},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1841, col: 5, offset: 62653},
														run: (*parser).callongoFieldDecl131,
														expr: &seqExpr{
															pos: position{line: 1841, col: 5, offset: 62653},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1841, col: 5, offset: 62653},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1862, col: 5, offset: 63493},
														run: (*parser).callongoFieldDecl138,
														expr: &seqExpr{
															pos: position{line: 1862, col: 5, offset: 63493},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1862, col: 5, offset: 63493},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1880, col: 5, offset: 64177},
														run: (*parser).callongoFieldDecl143,
														expr: &litMatcher{
															pos:        position{line: 1880, col: 5, offset: 64177},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1916, col: 115, offset: 65312},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 1917, col: 5, offset: 65322},
									run: (*parser).callongoFieldDecl146,
									expr: &seqExpr{
										pos: position{line: 1917, col: 5, offset: 65322},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1917, col: 5, offset: 65322},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1917, col: 9, offset: 65326},
												expr: &choiceExpr{
													pos: position{line: 1917, col: 10, offset: 65327},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1672, col: 19, offset: 55641},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1672, col: 19, offset: 55641},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1673, col: 5, offset: 55700},
															run: (*parser).callongoFieldDecl157,
															expr: &seqExpr{
																pos: position{line: 1673, col: 5, offset: 55700},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1673, col: 5, offset: 55700},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1673, col: 14, offset: 55709},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1673, col: 26, offset: 55721},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1673, col: 38, offset: 55733},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1673, col: 50, offset: 55745},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1702, col: 16, offset: 56877},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1702, col: 16, offset: 56877},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1703, col: 5, offset: 56980},
															run: (*parser).callongoFieldDecl178,
															expr: &seqExpr{
																pos: position{line: 1703, col: 5, offset: 56980},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1703, col: 5, offset: 56980},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 14, offset: 56989},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 26, offset: 57001},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 38, offset: 57013},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 50, offset: 57025},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 62, offset: 57037},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 74, offset: 57049},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 86, offset: 57061},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1703, col: 98, offset: 57073},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1930, col: 36, offset: 65917},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1930, col: 36, offset: 65917},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1930, col: 41, offset: 65922},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1928, col: 38, offset: 65809},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 1653, col: 24, offset: 54901},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1653, col: 24, offset: 54901},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1570, col: 19, offset: 52097},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1570, col: 19, offset: 52097},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1570, col: 19, offset: 52097},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 1654, col: 24, offset: 54968},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1654, col: 24, offset: 54968},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1571, col: 19, offset: 52121},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1655, col: 5, offset: 55005},
															run: (*parser).callongoFieldDecl210,
															expr: &seqExpr{
																pos: position{line: 1655, col: 5, offset: 55005},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1655, col: 5, offset: 55005},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1655, col: 14, offset: 55014},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1655, col: 26, offset: 55026},
																		expr: &charClassMatcher{
																			pos:        position{line: 1571, col: 19, offset: 52121},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1817, col: 37, offset: 61638},
															run: (*parser).callongoFieldDecl217,
															expr: &seqExpr{
																pos: position{line: 1817, col: 37, offset: 61638},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1817, col: 37, offset: 61638},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1841, col: 5, offset: 62653},
															run: (*parser).callongoFieldDecl228,
															expr: &seqExpr{
																pos: position{line: 1841, col: 5, offset: 62653},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1841, col: 5, offset: 62653},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1862, col: 5, offset: 63493},
															run: (*parser).callongoFieldDecl235,
															expr: &seqExpr{
																pos: position{line: 1862, col: 5, offset: 63493},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1862, col: 5, offset: 63493},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1571, col: 19, offset: 52121},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1880, col: 5, offset: 64177},
															run: (*parser).callongoFieldDecl240,
															expr: &litMatcher{
																pos:        position{line: 1880, col: 5, offset: 64177},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2636, col: 23, offset: 89477},
												expr: &anyMatcher{
													line: 2636, col: 24, offset: 89478,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 1962, col: 1, offset: 66856},
			expr: &seqExpr{
				pos: position{line: 1962, col: 20, offset: 66875},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1962, col: 20, offset: 66875},
						expr: &litMatcher{
							pos:        position{line: 1962, col: 20, offset: 66875},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1962, col: 25, offset: 66880},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&choiceExpr{
						pos: position{line: 1937, col: 15, offset: 66087},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 1594, col: 21, offset: 52724},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1577, col: 26, offset: 52181},
										expr: &charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1594, col: 35, offset: 52738},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 1594, col: 38, offset: 52741},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1594, col: 42, offset: 52745},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1577, col: 26, offset: 52181},
										expr: &charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1577, col: 17, offset: 52172},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1577, col: 26, offset: 52181},
										expr: &charClassMatcher{
											pos:        position{line: 1560, col: 20, offset: 51927},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1962, col: 39, offset: 66894},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1962, col: 42, offset: 66897},
						expr: &ruleRefExpr{
							pos:  position{line: 1962, col: 42, offset: 66897},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 1969, col: 1, offset: 66965},
			expr: &seqExpr{
				pos: position{line: 1969, col: 18, offset: 66982},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1969, col: 18, offset: 66982},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1969, col: 22, offset: 66986},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1969, col: 25, offset: 66989},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 1970, col: 1, offset: 67000},
			expr: &ruleRefExpr{
				pos:  position{line: 1970, col: 18, offset: 67017},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 1976, col: 1, offset: 67050},
			expr: &seqExpr{
				pos: position{line: 1976, col: 20, offset: 67069},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1976, col: 20, offset: 67069},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1976, col: 27, offset: 67076},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1976, col: 30, offset: 67079},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 1977, col: 1, offset: 67091},
			expr: &seqExpr{
				pos: position{line: 1977, col: 20, offset: 67110},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1977, col: 20, offset: 67110},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1977, col: 33, offset: 67123},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1977, col: 36, offset: 67126},
						expr: &ruleRefExpr{
							pos:  position{line: 1977, col: 36, offset: 67126},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 1978, col: 1, offset: 67136},
			expr: &choiceExpr{
				pos: position{line: 1978, col: 20, offset: 67155},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1978, col: 20, offset: 67155},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 1978, col: 35, offset: 67170},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 1979, col: 1, offset: 67177},
			expr: &seqExpr{
				pos: position{line: 1979, col: 20, offset: 67196},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1979, col: 20, offset: 67196},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1979, col: 24, offset: 67200},
						expr: &choiceExpr{
							pos: position{line: 2666, col: 20, offset: 90409},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2666, col: 31, offset: 90420},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2666, col: 31, offset: 90420},
											run: (*parser).callongoParameters7,
										},
										&zeroOrOneExpr{
											pos: position{line: 2664, col: 37, offset: 90378},
											expr: &litMatcher{
												pos:        position{line: 2664, col: 37, offset: 90378},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2664, col: 43, offset: 90384},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1979, col: 28, offset: 67204},
						expr: &seqExpr{
							pos: position{line: 1979, col: 29, offset: 67205},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1979, col: 29, offset: 67205},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1979, col: 45, offset: 67221},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1979, col: 48, offset: 67224},
									expr: &seqExpr{
										pos: position{line: 1979, col: 49, offset: 67225},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1979, col: 49, offset: 67225},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1979, col: 53, offset: 67229},
												expr: &choiceExpr{
													pos: position{line: 2666, col: 20, offset: 90409},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2666, col: 31, offset: 90420},
																	run: (*parser).callongoParameters23,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2664, col: 37, offset: 90378},
																	expr: &litMatcher{
																		pos:        position{line: 2664, col: 37, offset: 90378},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2664, col: 43, offset: 90384},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1979, col: 61, offset: 67237},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 1980, col: 1, offset: 67241},
			expr: &seqExpr{
				pos: position{line: 1980, col: 20, offset: 67260},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1980, col: 20, offset: 67260},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1980, col: 36, offset: 67276},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1980, col: 39, offset: 67279},
						expr: &seqExpr{
							pos: position{line: 1980, col: 40, offset: 67280},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1980, col: 40, offset: 67280},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1980, col: 44, offset: 67284},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callongoParameterList12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 48, offset: 67288},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 1981, col: 1, offset: 67306},
			expr: &seqExpr{
				pos: position{line: 1981, col: 20, offset: 67325},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1981, col: 20, offset: 67325},
						expr: &seqExpr{
							pos: position{line: 2012, col: 21, offset: 67985},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1560, col: 20, offset: 51927},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1577, col: 26, offset: 52181},
									expr: &charClassMatcher{
										pos:        position{line: 1560, col: 20, offset: 51927},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2012, col: 34, offset: 67998},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2012, col: 37, offset: 68001},
									expr: &seqExpr{
										pos: position{line: 2012, col: 38, offset: 68002},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2012, col: 38, offset: 68002},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2012, col: 42, offset: 68006},
												expr: &choiceExpr{
													pos: position{line: 2666, col: 20, offset: 90409},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2666, col: 31, offset: 90420},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2666, col: 31, offset: 90420},
																	run: (*parser).callongoParameterDecl16,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2664, col: 37, offset: 90378},
																	expr: &litMatcher{
																		pos:        position{line: 2664, col: 37, offset: 90378},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2664, col: 43, offset: 90384},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1560, col: 20, offset: 51927},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1577, col: 26, offset: 52181},
												expr: &charClassMatcher{
													pos:        position{line: 1560, col: 20, offset: 51927},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1981, col: 38, offset: 67343},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1981, col: 41, offset: 67346},
						expr: &litMatcher{
							pos:        position{line: 1981, col: 41, offset: 67346},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1981, col: 48, offset: 67353},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1981, col: 51, offset: 67356},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 1987, col: 1, offset: 67390},
			expr: &seqExpr{
				pos: position{line: 1987, col: 21, offset: 67410},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1987, col: 21, offset: 67410},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1987, col: 33, offset: 67422},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1987, col: 36, offset: 67425},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1987, col: 40, offset: 67429},
						expr: &seqExpr{
							pos: position{line: 1987, col: 41, offset: 67430},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1987, col: 41, offset: 67430},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callongoInterfaceType12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1987, col: 45, offset: 67434},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1987, col: 61, offset: 67450},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 1987, col: 65, offset: 67454},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1987, col: 65, offset: 67454},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1987, col: 71, offset: 67460},
											expr: &seqExpr{
												pos: position{line: 2640, col: 28, offset: 89578},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2640, col: 28, offset: 89578},
														expr: &charClassMatcher{
															pos:        position{line: 2663, col: 37, offset: 90336},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1987, col: 86, offset: 67475},
						expr: &choiceExpr{
							pos: position{line: 2666, col: 20, offset: 90409},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2663, col: 37, offset: 90336},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2666, col: 31, offset: 90420},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2666, col: 31, offset: 90420},
											run: (*parser).callongoInterfaceType32,
										},
										&zeroOrOneExpr{
											pos: position{line: 2664, col: 37, offset: 90378},
											expr: &litMatcher{
												pos:        position{line: 2664, col: 37, offset: 90378},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2664, col: 43, offset: 90384},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1987, col: 90, offset: 67479},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 1988, col: 1, offset: 67483},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 21, offset: 67503},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1988, col: 21, offset: 67503},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 36, offset: 67518},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 1989, col: 1, offset: 67529},
			expr: &seqExpr{
				pos: position{line: 1989, col: 21, offset: 67549},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1560, col: 20, offset: 51927},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1577, col: 26, offset: 52181},
						expr: &charClassMatcher{
							pos:        position{line: 1560, col: 20, offset: 51927},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1989, col: 34, offset: 67562},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 1991, col: 1, offset: 67607},
			expr: &seqExpr{
				pos: position{line: 1991, col: 21, offset: 67627},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1991, col: 21, offset: 67627},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1991, col: 32, offset: 67638},
						expr: &seqExpr{
							pos: position{line: 1991, col: 33, offset: 67639},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1991, col: 33, offset: 67639},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1991, col: 36, offset: 67642},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1991, col: 40, offset: 67646},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callongoTypeElem12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1991, col: 44, offset: 67650},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 1992, col: 1, offset: 67663},
			expr: &choiceExpr{
				pos: position{line: 1992, col: 21, offset: 67683},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1992, col: 21, offset: 67683},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 1992, col: 30, offset: 67692},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 1993, col: 1, offset: 67709},
			expr: &seqExpr{
				pos: position{line: 1993, col: 21, offset: 67729},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1993, col: 21, offset: 67729},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1993, col: 25, offset: 67733},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 1999, col: 1, offset: 67761},
			expr: &seqExpr{
				pos: position{line: 1999, col: 14, offset: 67774},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1999, col: 14, offset: 67774},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 20, offset: 67780},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1999, col: 23, offset: 67783},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 27, offset: 67787},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 30, offset: 67790},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 40, offset: 67800},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1999, col: 43, offset: 67803},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 47, offset: 67807},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 50, offset: 67810},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 2000, col: 1, offset: 67824},
			expr: &ruleRefExpr{
				pos:  position{line: 2000, col: 14, offset: 67837},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 2006, col: 1, offset: 67869},
			expr: &seqExpr{
				pos: position{line: 2006, col: 18, offset: 67886},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 2006, col: 18, offset: 67886},
						expr: &seqExpr{
							pos: position{line: 2006, col: 19, offset: 67887},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2006, col: 19, offset: 67887},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2006, col: 24, offset: 67892},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 2006, col: 29, offset: 67897},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2006, col: 36, offset: 67904},
						expr: &charClassMatcher{
							pos:        position{line: 2663, col: 37, offset: 90336},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 2006, col: 39, offset: 67907},
						expr: &seqExpr{
							pos: position{line: 2006, col: 40, offset: 67908},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2006, col: 40, offset: 67908},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2006, col: 45, offset: 67913},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2006, col: 50, offset: 67918},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "State",
			pos:  position{line: 2202, col: 1, offset: 74581},
			expr: &choiceExpr{
				pos: position{line: 2202, col: 10, offset: 74590},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2202, col: 10, offset: 74590},
						name: "SingleState",
					},
					&ruleRefExpr{
						pos:  position{line: 2202, col: 24, offset: 74604},
						name: "GroupState",
					},
					&actionExpr{
						pos: position{line: 2232, col: 13, offset: 75414},
						run: (*parser).callonState4,
						expr: &seqExpr{
							pos: position{line: 2232, col: 13, offset: 75414},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2232, col: 13, offset: 75414},
									val:        "state",
									ignoreCase: false,
									want:       "\"state\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2232, col: 21, offset: 75422},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2232, col: 24, offset: 75425},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonState10,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2232, col: 35, offset: 75436},
									label: "badI",
									expr: &actionExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										run: (*parser).callonState17,
										expr: &seqExpr{
											pos: position{line: 2647, col: 35, offset: 89777},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2647, col: 35, offset: 89777},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2647, col: 38, offset: 89780},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2647, col: 50, offset: 89792},
														expr: &seqExpr{
															pos: position{line: 2647, col: 51, offset: 89793},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2647, col: 51, offset: 89793},
																	expr: &actionExpr{
																		pos: position{line: 2642, col: 26, offset: 89615},
																		run: (*parser).callonState25,
																		expr: &choiceExpr{
																			pos: position{line: 2642, col: 27, offset: 89616},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					run: (*parser).callonState27,
																					expr: &seqExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										exprs: []any{
																											&zeroOrOneExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												expr: &litMatcher{
																													pos:        position{line: 2637, col: 27, offset: 89506},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2637, col: 33, offset: 89512},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2636, col: 23, offset: 89477},
																										expr: &anyMatcher{
																											line: 2636, col: 24, offset: 89478,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2642, col: 33, offset: 89622},
																					val:        ";",
																					ignoreCase: false,
																					want:       "\";\"",
																				},
																				&andExpr{
																					pos: position{line: 2642, col: 39, offset: 89628},
																					expr: &seqExpr{
																						pos: position{line: 2642, col: 41, offset: 89630},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2642, col: 41, offset: 89630},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2642, col: 44, offset: 89633},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2647, col: 57, offset: 89799},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2647, col: 57, offset: 89799},
																			expr: &charClassMatcher{
																				pos:        position{line: 2647, col: 57, offset: 89799},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2647, col: 71, offset: 89813},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2647, col: 71, offset: 89813},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2647, col: 75, offset: 89817},
																					expr: &charClassMatcher{
																						pos:        position{line: 2647, col: 75, offset: 89817},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2647, col: 81, offset: 89823},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2232, col: 51, offset: 75452},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonState53,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonState55,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleState",
			pos:  position{line: 2204, col: 1, offset: 74627},
			expr: &actionExpr{
				pos: position{line: 2204, col: 16, offset: 74642},
				run: (*parser).callonSingleState1,
				expr: &seqExpr{
					pos: position{line: 2204, col: 16, offset: 74642},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2204, col: 16, offset: 74642},
							val:        "state",
							ignoreCase: false,
							want:       "\"state\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 2204, col: 24, offset: 74650},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2204, col: 27, offset: 74653},
							label: "varI",
							expr: &ruleRefExpr{
								pos:  position{line: 2204, col: 32, offset: 74658},
								name: "StateVar",
							},
						},
						&actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonSingleState8,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonSingleState10,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupState",
			pos:  position{line: 2211, col: 1, offset: 74799},
			expr: &actionExpr{
				pos: position{line: 2211, col: 15, offset: 74813},
				run: (*parser).callonGroupState1,
				expr: &seqExpr{
					pos: position{line: 2211, col: 15, offset: 74813},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2211, col: 15, offset: 74813},
							val:        "state",
							ignoreCase: false,
							want:       "\"state\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2211, col: 23, offset: 74821},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2211, col: 26, offset: 74824},
							label: "startI",
							expr: &actionExpr{
								pos: position{line: 2746, col: 14, offset: 93228},
								run: (*parser).callonGroupState7,
								expr: &seqExpr{
									pos: position{line: 2746, col: 14, offset: 93228},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonGroupState9,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2720, col: 18, offset: 92335},
											run: (*parser).callonGroupState15,
										},
										&actionExpr{
											pos: position{line: 2672, col: 12, offset: 90673},
											run: (*parser).callonGroupState16,
											expr: &litMatcher{
												pos:        position{line: 2672, col: 12, offset: 90673},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2746, col: 32, offset: 93246},
											expr: &choiceExpr{
												pos: position{line: 2666, col: 20, offset: 90409},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																run: (*parser).callonGroupState22,
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2211, col: 43, offset: 74841},
							label: "itmsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2211, col: 49, offset: 74847},
								expr: &ruleRefExpr{
									pos:  position{line: 2211, col: 49, offset: 74847},
									name: "stateScopeItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2211, col: 65, offset: 74863},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 2220, col: 18, offset: 75117},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2220, col: 18, offset: 75117},
										run: (*parser).callonGroupState31,
										expr: &seqExpr{
											pos: position{line: 2220, col: 18, offset: 75117},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2220, col: 18, offset: 75117},
													expr: &choiceExpr{
														pos: position{line: 2666, col: 20, offset: 90409},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2666, col: 31, offset: 90420},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2666, col: 31, offset: 90420},
																		run: (*parser).callonGroupState37,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2664, col: 37, offset: 90378},
																		expr: &litMatcher{
																			pos:        position{line: 2664, col: 37, offset: 90378},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2664, col: 43, offset: 90384},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2220, col: 22, offset: 75121},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2673, col: 12, offset: 90711},
														run: (*parser).callonGroupState42,
														expr: &litMatcher{
															pos:        position{line: 2673, col: 12, offset: 90711},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2222, col: 5, offset: 75167},
										run: (*parser).callonGroupState44,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonGroupState45,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateScopeItem",
			pos:  position{line: 2252, col: 1, offset: 76052},
			expr: &actionExpr{
				pos: position{line: 2252, col: 19, offset: 76070},
				run: (*parser).callonstateScopeItem1,
				expr: &seqExpr{
					pos: position{line: 2252, col: 19, offset: 76070},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 2252, col: 19, offset: 76070},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonstateScopeItem7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2252, col: 23, offset: 76074},
							label: "itmI",
							expr: &choiceExpr{
								pos: position{line: 2252, col: 29, offset: 76080},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 477, col: 17, offset: 15436},
										run: (*parser).callonstateScopeItem13,
										expr: &seqExpr{
											pos: position{line: 477, col: 17, offset: 15436},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 477, col: 17, offset: 15436},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 477, col: 22, offset: 15441},
													expr: &litMatcher{
														pos:        position{line: 477, col: 23, offset: 15442},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 477, col: 27, offset: 15446},
													label: "textI",
													expr: &seqExpr{
														pos: position{line: 477, col: 34, offset: 15453},
														exprs: []any{
															&notExpr{
																pos: position{line: 477, col: 34, offset: 15453},
																expr: &actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callonstateScopeItem21,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&anyMatcher{
																line: 477, col: 39, offset: 15458,
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonstateScopeItem33,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2252, col: 44, offset: 76095},
										name: "StateVar",
									},
									&actionExpr{
										pos: position{line: 2342, col: 16, offset: 79057},
										run: (*parser).callonstateScopeItem45,
										expr: &seqExpr{
											pos: position{line: 2342, col: 16, offset: 79057},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2342, col: 16, offset: 79057},
													label: "lineI",
													expr: &actionExpr{
														pos: position{line: 2647, col: 35, offset: 89777},
														run: (*parser).callonstateScopeItem48,
														expr: &seqExpr{
															pos: position{line: 2647, col: 35, offset: 89777},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2647, col: 35, offset: 89777},
																	expr: &charClassMatcher{
																		pos:        position{line: 2663, col: 37, offset: 90336},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2647, col: 38, offset: 89780},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2647, col: 50, offset: 89792},
																		expr: &seqExpr{
																			pos: position{line: 2647, col: 51, offset: 89793},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2647, col: 51, offset: 89793},
																					expr: &actionExpr{
																						pos: position{line: 2642, col: 26, offset: 89615},
																						run: (*parser).callonstateScopeItem56,
																						expr: &choiceExpr{
																							pos: position{line: 2642, col: 27, offset: 89616},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									run: (*parser).callonstateScopeItem58,
																									expr: &seqExpr{
																										pos: position{line: 2637, col: 23, offset: 89502},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2637, col: 23, offset: 89502},
																												expr: &charClassMatcher{
																													pos:        position{line: 2663, col: 37, offset: 90336},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2637, col: 27, offset: 89506},
																														exprs: []any{
																															&zeroOrOneExpr{
																																pos: position{line: 2637, col: 27, offset: 89506},
																																expr: &litMatcher{
																																	pos:        position{line: 2637, col: 27, offset: 89506},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2637, col: 33, offset: 89512},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2636, col: 23, offset: 89477},
																														expr: &anyMatcher{
																															line: 2636, col: 24, offset: 89478,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2642, col: 33, offset: 89622},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2642, col: 39, offset: 89628},
																									expr: &seqExpr{
																										pos: position{line: 2642, col: 41, offset: 89630},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2642, col: 41, offset: 89630},
																												expr: &charClassMatcher{
																													pos:        position{line: 2663, col: 37, offset: 90336},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2642, col: 44, offset: 89633},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2647, col: 57, offset: 89799},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2647, col: 57, offset: 89799},
																							expr: &charClassMatcher{
																								pos:        position{line: 2647, col: 57, offset: 89799},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2647, col: 71, offset: 89813},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2647, col: 71, offset: 89813},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2647, col: 75, offset: 89817},
																									expr: &charClassMatcher{
																										pos:        position{line: 2647, col: 75, offset: 89817},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2647, col: 81, offset: 89823},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 2642, col: 26, offset: 89615},
													run: (*parser).callonstateScopeItem83,
													expr: &choiceExpr{
														pos: position{line: 2642, col: 27, offset: 89616},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																run: (*parser).callonstateScopeItem85,
																expr: &seqExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2637, col: 23, offset: 89502},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2637, col: 27, offset: 89506},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							expr: &litMatcher{
																								pos:        position{line: 2637, col: 27, offset: 89506},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2637, col: 33, offset: 89512},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2636, col: 23, offset: 89477},
																					expr: &anyMatcher{
																						line: 2636, col: 24, offset: 89478,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 33, offset: 89622},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2642, col: 39, offset: 89628},
																expr: &seqExpr{
																	pos: position{line: 2642, col: 41, offset: 89630},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2642, col: 41, offset: 89630},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2642, col: 44, offset: 89633},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StateVar",
			pos:  position{line: 2256, col: 1, offset: 76145},
			expr: &actionExpr{
				pos: position{line: 2256, col: 13, offset: 76157},
				run: (*parser).callonStateVar1,
				expr: &seqExpr{
					pos: position{line: 2256, col: 13, offset: 76157},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2256, col: 13, offset: 76157},
							label: "namesI",
							expr: &actionExpr{
								pos: position{line: 2287, col: 18, offset: 77244},
								run: (*parser).callonStateVar4,
								expr: &seqExpr{
									pos: position{line: 2287, col: 18, offset: 77244},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 2287, col: 18, offset: 77244},
											label: "firstI",
											expr: &choiceExpr{
												pos: position{line: 2295, col: 18, offset: 77505},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 263, col: 10, offset: 7729},
														run: (*parser).callonStateVar8,
														expr: &labeledExpr{
															pos:   position{line: 263, col: 10, offset: 7729},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1577, col: 17, offset: 52172},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1560, col: 20, offset: 51927},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1577, col: 26, offset: 52181},
																		expr: &charClassMatcher{
																			pos:        position{line: 1560, col: 20, offset: 51927},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2295, col: 26, offset: 77513},
														run: (*parser).callonStateVar14,
														expr: &oneOrMoreExpr{
															pos: position{line: 2295, col: 26, offset: 77513},
															expr: &charClassMatcher{
																pos:        position{line: 2295, col: 26, offset: 77513},
																val:        "[^\\r\\n\\t ,=]",
																chars:      []rune{'\r', '\n', '\t', ' ', ',', '='},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2287, col: 39, offset: 77265},
											label: "restI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 2287, col: 45, offset: 77271},
												expr: &seqExpr{
													pos: position{line: 2287, col: 46, offset: 77272},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2287, col: 46, offset: 77272},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2287, col: 49, offset: 77275},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 2287, col: 53, offset: 77279},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2295, col: 18, offset: 77505},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 263, col: 10, offset: 7729},
																	run: (*parser).callonStateVar26,
																	expr: &labeledExpr{
																		pos:   position{line: 263, col: 10, offset: 7729},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1577, col: 17, offset: 52172},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1560, col: 20, offset: 51927},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1577, col: 26, offset: 52181},
																					expr: &charClassMatcher{
																						pos:        position{line: 1560, col: 20, offset: 51927},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2295, col: 26, offset: 77513},
																	run: (*parser).callonStateVar32,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2295, col: 26, offset: 77513},
																		expr: &charClassMatcher{
																			pos:        position{line: 2295, col: 26, offset: 77513},
																			val:        "[^\\r\\n\\t ,=]",
																			chars:      []rune{'\r', '\n', '\t', ' ', ',', '='},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2256, col: 34, offset: 76178},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2256, col: 37, offset: 76181},
							label: "typI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2256, col: 42, offset: 76186},
								expr: &ruleRefExpr{
									pos:  position{line: 2256, col: 42, offset: 76186},
									name: "stateVarType",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2256, col: 56, offset: 76200},
							expr: &charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2256, col: 59, offset: 76203},
							label: "assignI",
							expr: &actionExpr{
								pos: position{line: 2654, col: 8, offset: 90032},
								run: (*parser).callonStateVar43,
								expr: &choiceExpr{
									pos: position{line: 2654, col: 9, offset: 90033},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											expr: &anyMatcher{
												line: 2654, col: 10, offset: 90034,
											},
										},
										&notExpr{
											pos: position{line: 2654, col: 14, offset: 90038},
											expr: &anyMatcher{
												line: 2654, col: 15, offset: 90039,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2256, col: 71, offset: 76215},
							label: "valsI",
							expr: &ruleRefExpr{
								pos:  position{line: 2256, col: 77, offset: 76221},
								name: "stateVarValues",
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarType",
			pos:  position{line: 2299, col: 1, offset: 77601},
			expr: &choiceExpr{
				pos: position{line: 2299, col: 17, offset: 77617},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2299, col: 17, offset: 77617},
						run: (*parser).callonstateVarType2,
						expr: &seqExpr{
							pos: position{line: 2299, col: 17, offset: 77617},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2299, col: 17, offset: 77617},
									label: "typI",
									expr: &ruleRefExpr{
										pos:  position{line: 2299, col: 22, offset: 77622},
										name: "Type",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2299, col: 27, offset: 77627},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2301, col: 5, offset: 77657},
						run: (*parser).callonstateVarType8,
						expr: &seqExpr{
							pos: position{line: 2301, col: 5, offset: 77657},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 2301, col: 5, offset: 77657},
									expr: &seqExpr{
										pos: position{line: 2301, col: 6, offset: 77658},
										exprs: []any{
											&notExpr{
												pos: position{line: 2301, col: 6, offset: 77658},
												expr: &seqExpr{
													pos: position{line: 2301, col: 8, offset: 77660},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2301, col: 8, offset: 77660},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2301, col: 11, offset: 77663},
															val:        "=",
															ignoreCase: false,
															want:       "\"=\"",
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 2301, col: 16, offset: 77668},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2301, col: 26, offset: 77678},
									expr: &charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarValues",
			pos:  position{line: 2315, col: 1, offset: 78014},
			expr: &choiceExpr{
				pos: position{line: 2315, col: 19, offset: 78032},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2315, col: 19, offset: 78032},
						run: (*parser).callonstateVarValues2,
						expr: &seqExpr{
							pos: position{line: 2315, col: 19, offset: 78032},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2315, col: 19, offset: 78032},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2315, col: 23, offset: 78036},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonstateVarValues9,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2315, col: 27, offset: 78040},
									label: "valsI",
									expr: &ruleRefExpr{
										pos:  position{line: 2315, col: 33, offset: 78046},
										name: "stateVarValueList",
									},
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).callonstateVarValues15,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonstateVarValues17,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2317, col: 5, offset: 78096},
						run: (*parser).callonstateVarValues34,
						expr: &seqExpr{
							pos: position{line: 2317, col: 5, offset: 78096},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2317, col: 5, offset: 78096},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2317, col: 9, offset: 78100},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonstateVarValues41,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2317, col: 13, offset: 78104},
									label: "valsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2317, col: 19, offset: 78110},
										expr: &ruleRefExpr{
											pos:  position{line: 2317, col: 19, offset: 78110},
											name: "stateVarValueList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2317, col: 38, offset: 78129},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonstateVarValues49,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2317, col: 49, offset: 78140},
									label: "badI",
									expr: &actionExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										run: (*parser).callonstateVarValues56,
										expr: &seqExpr{
											pos: position{line: 2647, col: 35, offset: 89777},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2647, col: 35, offset: 89777},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2647, col: 38, offset: 89780},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2647, col: 50, offset: 89792},
														expr: &seqExpr{
															pos: position{line: 2647, col: 51, offset: 89793},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2647, col: 51, offset: 89793},
																	expr: &actionExpr{
																		pos: position{line: 2642, col: 26, offset: 89615},
																		run: (*parser).callonstateVarValues64,
																		expr: &choiceExpr{
																			pos: position{line: 2642, col: 27, offset: 89616},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					run: (*parser).callonstateVarValues66,
																					expr: &seqExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2637, col: 23, offset: 89502},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2637, col: 27, offset: 89506},
																										exprs: []any{
																											&zeroOrOneExpr{
																												pos: position{line: 2637, col: 27, offset: 89506},
																												expr: &litMatcher{
																													pos:        position{line: 2637, col: 27, offset: 89506},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2637, col: 33, offset: 89512},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2636, col: 23, offset: 89477},
																										expr: &anyMatcher{
																											line: 2636, col: 24, offset: 89478,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2642, col: 33, offset: 89622},
																					val:        ";",
																					ignoreCase: false,
																					want:       "\";\"",
																				},
																				&andExpr{
																					pos: position{line: 2642, col: 39, offset: 89628},
																					expr: &seqExpr{
																						pos: position{line: 2642, col: 41, offset: 89630},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2642, col: 41, offset: 89630},
																								expr: &charClassMatcher{
																									pos:        position{line: 2663, col: 37, offset: 90336},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2642, col: 44, offset: 89633},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2647, col: 57, offset: 89799},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2647, col: 57, offset: 89799},
																			expr: &charClassMatcher{
																				pos:        position{line: 2647, col: 57, offset: 89799},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2647, col: 71, offset: 89813},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2647, col: 71, offset: 89813},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2647, col: 75, offset: 89817},
																					expr: &charClassMatcher{
																						pos:        position{line: 2647, col: 75, offset: 89817},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2647, col: 81, offset: 89823},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2317, col: 65, offset: 78156},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonstateVarValues92,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonstateVarValues94,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2320, col: 5, offset: 78314},
						run: (*parser).callonstateVarValues111,
						expr: &seqExpr{
							pos: position{line: 2320, col: 5, offset: 78314},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2320, col: 5, offset: 78314},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2320, col: 9, offset: 78318},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonstateVarValues118,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2320, col: 13, offset: 78322},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonstateVarValues123,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2647, col: 35, offset: 89777},
									run: (*parser).callonstateVarValues129,
									expr: &seqExpr{
										pos: position{line: 2647, col: 35, offset: 89777},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2647, col: 35, offset: 89777},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2647, col: 38, offset: 89780},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2647, col: 50, offset: 89792},
													expr: &seqExpr{
														pos: position{line: 2647, col: 51, offset: 89793},
														exprs: []any{
															&notExpr{
																pos: position{line: 2647, col: 51, offset: 89793},
																expr: &actionExpr{
																	pos: position{line: 2642, col: 26, offset: 89615},
																	run: (*parser).callonstateVarValues137,
																	expr: &choiceExpr{
																		pos: position{line: 2642, col: 27, offset: 89616},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				run: (*parser).callonstateVarValues139,
																				expr: &seqExpr{
																					pos: position{line: 2637, col: 23, offset: 89502},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2637, col: 27, offset: 89506},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											expr: &litMatcher{
																												pos:        position{line: 2637, col: 27, offset: 89506},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2637, col: 33, offset: 89512},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2636, col: 23, offset: 89477},
																									expr: &anyMatcher{
																										line: 2636, col: 24, offset: 89478,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 33, offset: 89622},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2642, col: 39, offset: 89628},
																				expr: &seqExpr{
																					pos: position{line: 2642, col: 41, offset: 89630},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							expr: &charClassMatcher{
																								pos:        position{line: 2663, col: 37, offset: 90336},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2642, col: 44, offset: 89633},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2647, col: 57, offset: 89799},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2647, col: 57, offset: 89799},
																		expr: &charClassMatcher{
																			pos:        position{line: 2647, col: 57, offset: 89799},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2647, col: 71, offset: 89813},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2647, col: 71, offset: 89813},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2647, col: 75, offset: 89817},
																				expr: &charClassMatcher{
																					pos:        position{line: 2647, col: 75, offset: 89817},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2647, col: 81, offset: 89823},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2320, col: 35, offset: 78344},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2642, col: 26, offset: 89615},
										run: (*parser).callonstateVarValues165,
										expr: &choiceExpr{
											pos: position{line: 2642, col: 27, offset: 89616},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													run: (*parser).callonstateVarValues167,
													expr: &seqExpr{
														pos: position{line: 2637, col: 23, offset: 89502},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				expr: &litMatcher{
																					pos:        position{line: 2637, col: 27, offset: 89506},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2637, col: 33, offset: 89512},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2636, col: 23, offset: 89477},
																		expr: &anyMatcher{
																			line: 2636, col: 24, offset: 89478,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 33, offset: 89622},
													val:        ";",
													ignoreCase: false,
													want:       "\";\"",
												},
												&andExpr{
													pos: position{line: 2642, col: 39, offset: 89628},
													expr: &seqExpr{
														pos: position{line: 2642, col: 41, offset: 89630},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2642, col: 41, offset: 89630},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2642, col: 44, offset: 89633},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2330, col: 5, offset: 78725},
						run: (*parser).callonstateVarValues184,
						expr: &actionExpr{
							pos: position{line: 2642, col: 26, offset: 89615},
							run: (*parser).callonstateVarValues185,
							expr: &choiceExpr{
								pos: position{line: 2642, col: 27, offset: 89616},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										run: (*parser).callonstateVarValues187,
										expr: &seqExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	expr: &litMatcher{
																		pos:        position{line: 2637, col: 27, offset: 89506},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2637, col: 33, offset: 89512},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2636, col: 23, offset: 89477},
															expr: &anyMatcher{
																line: 2636, col: 24, offset: 89478,
															},
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2642, col: 33, offset: 89622},
										val:        ";",
										ignoreCase: false,
										want:       "\";\"",
									},
									&andExpr{
										pos: position{line: 2642, col: 39, offset: 89628},
										expr: &seqExpr{
											pos: position{line: 2642, col: 41, offset: 89630},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													expr: &charClassMatcher{
														pos:        position{line: 2663, col: 37, offset: 90336},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 2642, col: 44, offset: 89633},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarValueList",
			pos:  position{line: 2334, col: 1, offset: 78771},
			expr: &actionExpr{
				pos: position{line: 2334, col: 22, offset: 78792},
				run: (*parser).callonstateVarValueList1,
				expr: &seqExpr{
					pos: position{line: 2334, col: 22, offset: 78792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2334, col: 22, offset: 78792},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2334, col: 29, offset: 78799},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2334, col: 42, offset: 78812},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2334, col: 48, offset: 78818},
								expr: &seqExpr{
									pos: position{line: 2334, col: 49, offset: 78819},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2334, col: 49, offset: 78819},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2334, col: 52, offset: 78822},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2334, col: 56, offset: 78826},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2334, col: 59, offset: 78829},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 2361, col: 1, offset: 79639},
			expr: &choiceExpr{
				pos: position{line: 2361, col: 15, offset: 79653},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2361, col: 15, offset: 79653},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 2361, col: 15, offset: 79653},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2654, col: 8, offset: 90032},
									run: (*parser).callonArrowBlock4,
									expr: &choiceExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												expr: &anyMatcher{
													line: 2654, col: 10, offset: 90034,
												},
											},
											&notExpr{
												pos: position{line: 2654, col: 14, offset: 90038},
												expr: &anyMatcher{
													line: 2654, col: 15, offset: 90039,
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 2685, col: 24, offset: 91141},
									run: (*parser).callonArrowBlock10,
								},
								&litMatcher{
									pos:        position{line: 2361, col: 31, offset: 79669},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 2361, col: 36, offset: 79674},
									label: "firstI",
									expr: &choiceExpr{
										pos: position{line: 2361, col: 44, offset: 79682},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2361, col: 44, offset: 79682},
												name: "ArrowBlockLine",
											},
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonArrowBlock15,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2361, col: 66, offset: 79704},
									label: "restI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2361, col: 72, offset: 79710},
										expr: &seqExpr{
											pos: position{line: 2361, col: 73, offset: 79711},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2361, col: 73, offset: 79711},
													expr: &seqExpr{
														pos: position{line: 2640, col: 28, offset: 89578},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2640, col: 28, offset: 89578},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 37, offset: 90336},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 2664, col: 37, offset: 90378},
																expr: &litMatcher{
																	pos:        position{line: 2664, col: 37, offset: 90378},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2664, col: 43, offset: 90384},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2361, col: 85, offset: 79723},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 2361, col: 98, offset: 79736},
													name: "ArrowBlockLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2382, col: 5, offset: 80194},
						run: (*parser).callonArrowBlock38,
						expr: &seqExpr{
							pos: position{line: 2382, col: 5, offset: 80194},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2382, col: 5, offset: 80194},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&actionExpr{
									pos: position{line: 2637, col: 23, offset: 89502},
									run: (*parser).callonArrowBlock41,
									expr: &seqExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												expr: &charClassMatcher{
													pos:        position{line: 2663, col: 37, offset: 90336},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2637, col: 27, offset: 89506},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2637, col: 27, offset: 89506},
														exprs: []any{
															&zeroOrOneExpr{
																pos: position{line: 2637, col: 27, offset: 89506},
																expr: &litMatcher{
																	pos:        position{line: 2637, col: 27, offset: 89506},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2637, col: 33, offset: 89512},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 2636, col: 23, offset: 89477},
														expr: &anyMatcher{
															line: 2636, col: 24, offset: 89478,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BracketText",
			pos:  position{line: 2390, col: 1, offset: 80444},
			expr: &choiceExpr{
				pos: position{line: 2390, col: 16, offset: 80459},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2390, col: 16, offset: 80459},
						run: (*parser).callonBracketText2,
						expr: &seqExpr{
							pos: position{line: 2390, col: 16, offset: 80459},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2678, col: 14, offset: 90829},
									run: (*parser).callonBracketText4,
									expr: &litMatcher{
										pos:        position{line: 2678, col: 14, offset: 90829},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2390, col: 26, offset: 80469},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonBracketText10,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 30, offset: 80473},
									label: "btI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2390, col: 34, offset: 80477},
										expr: &ruleRefExpr{
											pos:  position{line: 2390, col: 34, offset: 80477},
											name: "BracketTextLine",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2390, col: 51, offset: 80494},
									expr: &choiceExpr{
										pos: position{line: 2666, col: 20, offset: 90409},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2666, col: 31, offset: 90420},
														run: (*parser).callonBracketText21,
													},
													&zeroOrOneExpr{
														pos: position{line: 2664, col: 37, offset: 90378},
														expr: &litMatcher{
															pos:        position{line: 2664, col: 37, offset: 90378},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2664, col: 43, offset: 90384},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2390, col: 55, offset: 80498},
									label: "rBracketI",
									expr: &actionExpr{
										pos: position{line: 2679, col: 14, offset: 90869},
										run: (*parser).callonBracketText26,
										expr: &litMatcher{
											pos:        position{line: 2679, col: 14, offset: 90869},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 2642, col: 26, offset: 89615},
									run: (*parser).callonBracketText28,
									expr: &choiceExpr{
										pos: position{line: 2642, col: 27, offset: 89616},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2637, col: 23, offset: 89502},
												run: (*parser).callonBracketText30,
												expr: &seqExpr{
													pos: position{line: 2637, col: 23, offset: 89502},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2637, col: 27, offset: 89506},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2637, col: 27, offset: 89506},
																			expr: &litMatcher{
																				pos:        position{line: 2637, col: 27, offset: 89506},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2637, col: 33, offset: 89512},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2636, col: 23, offset: 89477},
																	expr: &anyMatcher{
																		line: 2636, col: 24, offset: 89478,
																	},
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2642, col: 33, offset: 89622},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2642, col: 39, offset: 89628},
												expr: &seqExpr{
													pos: position{line: 2642, col: 41, offset: 89630},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2642, col: 41, offset: 89630},
															expr: &charClassMatcher{
																pos:        position{line: 2663, col: 37, offset: 90336},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2642, col: 44, offset: 89633},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2396, col: 5, offset: 80686},
						run: (*parser).callonBracketText47,
						expr: &seqExpr{
							pos: position{line: 2396, col: 5, offset: 80686},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2678, col: 14, offset: 90829},
									run: (*parser).callonBracketText49,
									expr: &litMatcher{
										pos:        position{line: 2678, col: 14, offset: 90829},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2396, col: 15, offset: 80696},
									label: "btI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2396, col: 19, offset: 80700},
										expr: &ruleRefExpr{
											pos:  position{line: 2396, col: 19, offset: 80700},
											name: "BracketTextLine",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2396, col: 36, offset: 80717},
									expr: &anyMatcher{
										line: 2396, col: 36, offset: 80717,
									},
								},
								&notExpr{
									pos: position{line: 2636, col: 23, offset: 89477},
									expr: &anyMatcher{
										line: 2636, col: 24, offset: 89478,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlockLine",
			pos:  position{line: 2413, col: 1, offset: 81225},
			expr: &actionExpr{
				pos: position{line: 2413, col: 19, offset: 81243},
				run: (*parser).callonArrowBlockLine1,
				expr: &seqExpr{
					pos: position{line: 2413, col: 19, offset: 81243},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2413, col: 19, offset: 81243},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2413, col: 26, offset: 81250},
								expr: &ruleRefExpr{
									pos:  position{line: 2413, col: 26, offset: 81250},
									name: "ArrowBlockTextItem",
								},
							},
						},
						&actionExpr{
							pos: position{line: 2637, col: 23, offset: 89502},
							run: (*parser).callonArrowBlockLine6,
							expr: &seqExpr{
								pos: position{line: 2637, col: 23, offset: 89502},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2637, col: 23, offset: 89502},
										expr: &charClassMatcher{
											pos:        position{line: 2663, col: 37, offset: 90336},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 2637, col: 27, offset: 89506},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2637, col: 27, offset: 89506},
												exprs: []any{
													&zeroOrOneExpr{
														pos: position{line: 2637, col: 27, offset: 89506},
														expr: &litMatcher{
															pos:        position{line: 2637, col: 27, offset: 89506},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2637, col: 33, offset: 89512},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&notExpr{
												pos: position{line: 2636, col: 23, offset: 89477},
												expr: &anyMatcher{
													line: 2636, col: 24, offset: 89478,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BracketTextLine",
			pos:  position{line: 2416, col: 1, offset: 81340},
			expr: &actionExpr{
				pos: position{line: 2416, col: 20, offset: 81359},
				run: (*parser).callonBracketTextLine1,
				expr: &seqExpr{
					pos: position{line: 2416, col: 20, offset: 81359},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 2416, col: 20, offset: 81359},
							expr: &choiceExpr{
								pos: position{line: 2666, col: 20, offset: 90409},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2663, col: 37, offset: 90336},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2666, col: 31, offset: 90420},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2666, col: 31, offset: 90420},
												run: (*parser).callonBracketTextLine7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2664, col: 37, offset: 90378},
												expr: &litMatcher{
													pos:        position{line: 2664, col: 37, offset: 90378},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2664, col: 43, offset: 90384},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2416, col: 24, offset: 81363},
							label: "itemsI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2416, col: 31, offset: 81370},
								expr: &ruleRefExpr{
									pos:  position{line: 2416, col: 31, offset: 81370},
									name: "BracketTextTextItem",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2416, col: 52, offset: 81391},
							expr: &actionExpr{
								pos: position{line: 2637, col: 23, offset: 89502},
								run: (*parser).callonBracketTextLine15,
								expr: &seqExpr{
									pos: position{line: 2637, col: 23, offset: 89502},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2637, col: 23, offset: 89502},
											expr: &charClassMatcher{
												pos:        position{line: 2663, col: 37, offset: 90336},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2637, col: 27, offset: 89506},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2637, col: 27, offset: 89506},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2637, col: 27, offset: 89506},
															expr: &litMatcher{
																pos:        position{line: 2637, col: 27, offset: 89506},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2637, col: 33, offset: 89512},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2636, col: 23, offset: 89477},
													expr: &anyMatcher{
														line: 2636, col: 24, offset: 89478,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpolationValueLine",
			pos:  position{line: 2419, col: 1, offset: 81462},
			expr: &actionExpr{
				pos: position{line: 2419, col: 27, offset: 81488},
				run: (*parser).callonInterpolationValueLine1,
				expr: &labeledExpr{
					pos:   position{line: 2419, col: 27, offset: 81488},
					label: "itemsI",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2419, col: 34, offset: 81495},
						expr: &ruleRefExpr{
							pos:  position{line: 2419, col: 34, offset: 81495},
							name: "InterpolationValueTextItem",
						},
					},
				},
			},
		},
		{
			name: "ArrowBlockTextItem",
			pos:  position{line: 2427, col: 1, offset: 81773},
			expr: &choiceExpr{
				pos: position{line: 2427, col: 31, offset: 81803},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2435, col: 19, offset: 82163},
						run: (*parser).callonArrowBlockTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 2435, col: 19, offset: 82163},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2435, col: 25, offset: 82169},
								expr: &choiceExpr{
									pos: position{line: 2435, col: 26, offset: 82170},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2435, col: 26, offset: 82170},
											expr: &seqExpr{
												pos: position{line: 2435, col: 27, offset: 82171},
												exprs: []any{
													&notExpr{
														pos: position{line: 2435, col: 27, offset: 82171},
														expr: &actionExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															run: (*parser).callonArrowBlockTextItem9,
															expr: &seqExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						expr: &litMatcher{
																							pos:        position{line: 2637, col: 27, offset: 89506},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2637, col: 33, offset: 89512},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2636, col: 23, offset: 89477},
																				expr: &anyMatcher{
																					line: 2636, col: 24, offset: 89478,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2435, col: 32, offset: 82176},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2435, col: 41, offset: 82185},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2427, col: 48, offset: 81820},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "BracketTextTextItem",
			pos:  position{line: 2428, col: 1, offset: 81834},
			expr: &choiceExpr{
				pos: position{line: 2428, col: 31, offset: 81864},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2442, col: 20, offset: 82309},
						run: (*parser).callonBracketTextTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 2442, col: 20, offset: 82309},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2442, col: 26, offset: 82315},
								expr: &choiceExpr{
									pos: position{line: 2442, col: 27, offset: 82316},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2442, col: 27, offset: 82316},
											expr: &seqExpr{
												pos: position{line: 2442, col: 28, offset: 82317},
												exprs: []any{
													&notExpr{
														pos: position{line: 2442, col: 28, offset: 82317},
														expr: &choiceExpr{
															pos: position{line: 2442, col: 30, offset: 82319},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callonBracketTextTextItem10,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2442, col: 36, offset: 82325},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2442, col: 36, offset: 82325},
																			expr: &charClassMatcher{
																				pos:        position{line: 2663, col: 37, offset: 90336},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2679, col: 14, offset: 90869},
																			run: (*parser).callonBracketTextTextItem24,
																			expr: &litMatcher{
																				pos:        position{line: 2679, col: 14, offset: 90869},
																				val:        "]",
																				ignoreCase: false,
																				want:       "\"]\"",
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2642, col: 26, offset: 89615},
																			run: (*parser).callonBracketTextTextItem26,
																			expr: &choiceExpr{
																				pos: position{line: 2642, col: 27, offset: 89616},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2637, col: 23, offset: 89502},
																						run: (*parser).callonBracketTextTextItem28,
																						expr: &seqExpr{
																							pos: position{line: 2637, col: 23, offset: 89502},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2637, col: 23, offset: 89502},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2637, col: 27, offset: 89506},
																									alternatives: []any{
																										&seqExpr{
																											pos: position{line: 2637, col: 27, offset: 89506},
																											exprs: []any{
																												&zeroOrOneExpr{
																													pos: position{line: 2637, col: 27, offset: 89506},
																													expr: &litMatcher{
																														pos:        position{line: 2637, col: 27, offset: 89506},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2637, col: 33, offset: 89512},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2636, col: 23, offset: 89477},
																											expr: &anyMatcher{
																												line: 2636, col: 24, offset: 89478,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2642, col: 33, offset: 89622},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																					&andExpr{
																						pos: position{line: 2642, col: 39, offset: 89628},
																						expr: &seqExpr{
																							pos: position{line: 2642, col: 41, offset: 89630},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 2642, col: 41, offset: 89630},
																									expr: &charClassMatcher{
																										pos:        position{line: 2663, col: 37, offset: 90336},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2642, col: 44, offset: 89633},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2442, col: 54, offset: 82343},
														val:        "[^#]]",
														chars:      []rune{'#', ']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2442, col: 65, offset: 82354},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
										&seqExpr{
											pos: position{line: 2442, col: 72, offset: 82361},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2679, col: 14, offset: 90869},
													run: (*parser).callonBracketTextTextItem48,
													expr: &litMatcher{
														pos:        position{line: 2679, col: 14, offset: 90869},
														val:        "]",
														ignoreCase: false,
														want:       "\"]\"",
													},
												},
												&notExpr{
													pos: position{line: 2442, col: 82, offset: 82371},
													expr: &actionExpr{
														pos: position{line: 2642, col: 26, offset: 89615},
														run: (*parser).callonBracketTextTextItem51,
														expr: &choiceExpr{
															pos: position{line: 2642, col: 27, offset: 89616},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 2637, col: 23, offset: 89502},
																	run: (*parser).callonBracketTextTextItem53,
																	expr: &seqExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2637, col: 23, offset: 89502},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2637, col: 27, offset: 89506},
																								expr: &litMatcher{
																									pos:        position{line: 2637, col: 27, offset: 89506},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2637, col: 33, offset: 89512},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2636, col: 23, offset: 89477},
																						expr: &anyMatcher{
																							line: 2636, col: 24, offset: 89478,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2642, col: 33, offset: 89622},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2642, col: 39, offset: 89628},
																	expr: &seqExpr{
																		pos: position{line: 2642, col: 41, offset: 89630},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2642, col: 41, offset: 89630},
																				expr: &charClassMatcher{
																					pos:        position{line: 2663, col: 37, offset: 90336},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2642, col: 44, offset: 89633},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2428, col: 49, offset: 81882},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "InterpolationValueTextItem",
			pos:  position{line: 2429, col: 1, offset: 81896},
			expr: &choiceExpr{
				pos: position{line: 2429, col: 31, offset: 81926},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2449, col: 27, offset: 82502},
						run: (*parser).callonInterpolationValueTextItem2,
						expr: &labeledExpr{
							pos:   position{line: 2449, col: 27, offset: 82502},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2449, col: 33, offset: 82508},
								expr: &choiceExpr{
									pos: position{line: 2449, col: 34, offset: 82509},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2449, col: 34, offset: 82509},
											expr: &seqExpr{
												pos: position{line: 2449, col: 35, offset: 82510},
												exprs: []any{
													&notExpr{
														pos: position{line: 2449, col: 35, offset: 82510},
														expr: &actionExpr{
															pos: position{line: 2637, col: 23, offset: 89502},
															run: (*parser).callonInterpolationValueTextItem9,
															expr: &seqExpr{
																pos: position{line: 2637, col: 23, offset: 89502},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2637, col: 23, offset: 89502},
																		expr: &charClassMatcher{
																			pos:        position{line: 2663, col: 37, offset: 90336},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2637, col: 27, offset: 89506},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2637, col: 27, offset: 89506},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2637, col: 27, offset: 89506},
																						expr: &litMatcher{
																							pos:        position{line: 2637, col: 27, offset: 89506},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2637, col: 33, offset: 89512},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2636, col: 23, offset: 89477},
																				expr: &anyMatcher{
																					line: 2636, col: 24, offset: 89478,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2449, col: 40, offset: 82515},
														val:        "[^#]]",
														chars:      []rune{'#', ']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2449, col: 51, offset: 82526},
											val:        "##",
											ignoreCase: false,
											want:       "\"##\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2429, col: 56, offset: 81951},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 2460, col: 1, offset: 82819},
			expr: &actionExpr{
				pos: position{line: 2460, col: 18, offset: 82836},
				run: (*parser).callonInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2460, col: 18, offset: 82836},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2654, col: 8, offset: 90032},
							run: (*parser).callonInterpolation3,
							expr: &choiceExpr{
								pos: position{line: 2654, col: 9, offset: 90033},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2654, col: 9, offset: 90033},
										expr: &anyMatcher{
											line: 2654, col: 10, offset: 90034,
										},
									},
									&notExpr{
										pos: position{line: 2654, col: 14, offset: 90038},
										expr: &anyMatcher{
											line: 2654, col: 15, offset: 90039,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2720, col: 18, offset: 92335},
							run: (*parser).callonInterpolation9,
						},
						&litMatcher{
							pos:        position{line: 2464, col: 33, offset: 83021},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2460, col: 37, offset: 82855},
							label: "interpI",
							expr: &choiceExpr{
								pos: position{line: 2460, col: 46, offset: 82864},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2460, col: 46, offset: 82864},
										name: "ExpressionInterpolation",
									},
									&ruleRefExpr{
										pos:  position{line: 2460, col: 72, offset: 82890},
										name: "ElementInterpolation",
									},
									&ruleRefExpr{
										pos:  position{line: 2460, col: 95, offset: 82913},
										name: "ComponentCallInterpolation",
									},
									&actionExpr{
										pos: position{line: 2611, col: 21, offset: 88518},
										run: (*parser).callonInterpolation16,
										expr: &litMatcher{
											pos:        position{line: 2611, col: 21, offset: 88518},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionInterpolation",
			pos:  position{line: 2528, col: 1, offset: 85241},
			expr: &actionExpr{
				pos: position{line: 2528, col: 28, offset: 85268},
				run: (*parser).callonExpressionInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2528, col: 28, offset: 85268},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2528, col: 28, offset: 85268},
							label: "fmtDirectiveI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2528, col: 42, offset: 85282},
								expr: &choiceExpr{
									pos: position{line: 1505, col: 17, offset: 49786},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1505, col: 17, offset: 49786},
											run: (*parser).callonExpressionInterpolation6,
											expr: &seqExpr{
												pos: position{line: 1505, col: 17, offset: 49786},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1505, col: 17, offset: 49786},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1505, col: 21, offset: 49790},
														expr: &charClassMatcher{
															pos:        position{line: 1521, col: 12, offset: 50471},
															val:        "[-+# 0]",
															chars:      []rune{'-', '+', '#', ' ', '0'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1505, col: 30, offset: 49799},
														expr: &seqExpr{
															pos: position{line: 1505, col: 31, offset: 49800},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1505, col: 31, offset: 49800},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1505, col: 36, offset: 49805},
																	expr: &charClassMatcher{
																		pos:        position{line: 1505, col: 36, offset: 49805},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 1505, col: 45, offset: 49814},
														expr: &seqExpr{
															pos: position{line: 1505, col: 46, offset: 49815},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1505, col: 46, offset: 49815},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1505, col: 50, offset: 49819},
																	expr: &charClassMatcher{
																		pos:        position{line: 1505, col: 50, offset: 49819},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 1522, col: 12, offset: 50490},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 1522, col: 12, offset: 50490},
																val:        "[bcdeEfFgGoOpqstTUvX]",
																chars:      []rune{'b', 'c', 'd', 'e', 'E', 'f', 'F', 'g', 'G', 'o', 'O', 'p', 'q', 's', 't', 'T', 'U', 'v', 'X'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 1522, col: 36, offset: 50514},
																run: (*parser).callonExpressionInterpolation23,
																expr: &andExpr{
																	pos: position{line: 1522, col: 36, offset: 50514},
																	expr: &charClassMatcher{
																		pos:        position{line: 1522, col: 38, offset: 50516},
																		val:        "[{\"`]",
																		chars:      []rune{'{', '"', '`'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1534, col: 5, offset: 51051},
																run: (*parser).callonExpressionInterpolation26,
																expr: &anyMatcher{
																	line: 1534, col: 5, offset: 51051,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1507, col: 5, offset: 49877},
											run: (*parser).callonExpressionInterpolation28,
											expr: &seqExpr{
												pos: position{line: 1507, col: 5, offset: 49877},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1507, col: 5, offset: 49877},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 1507, col: 9, offset: 49881},
														expr: &charClassMatcher{
															pos:        position{line: 1507, col: 9, offset: 49881},
															val:        "[^`\"{]",
															chars:      []rune{'`', '"', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&labeledExpr{
														pos:   position{line: 1507, col: 17, offset: 49889},
														label: "endI",
														expr: &actionExpr{
															pos: position{line: 2654, col: 8, offset: 90032},
															run: (*parser).callonExpressionInterpolation34,
															expr: &choiceExpr{
																pos: position{line: 2654, col: 9, offset: 90033},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2654, col: 9, offset: 90033},
																		expr: &anyMatcher{
																			line: 2654, col: 10, offset: 90034,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2654, col: 14, offset: 90038},
																		expr: &anyMatcher{
																			line: 2654, col: 15, offset: 90039,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2528, col: 56, offset: 85296},
							label: "lBraceI",
							expr: &actionExpr{
								pos: position{line: 2466, col: 33, offset: 83058},
								run: (*parser).callonExpressionInterpolation41,
								expr: &seqExpr{
									pos: position{line: 2466, col: 33, offset: 83058},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonExpressionInterpolation43,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2720, col: 18, offset: 92335},
											run: (*parser).callonExpressionInterpolation49,
										},
										&actionExpr{
											pos: position{line: 2675, col: 12, offset: 90750},
											run: (*parser).callonExpressionInterpolation50,
											expr: &litMatcher{
												pos:        position{line: 2675, col: 12, offset: 90750},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2786, col: 16, offset: 94324},
							run: (*parser).callonExpressionInterpolation52,
						},
						&labeledExpr{
							pos:   position{line: 2528, col: 105, offset: 85345},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2528, col: 111, offset: 85351},
								name: "Expression",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2793, col: 14, offset: 94423},
							run: (*parser).callonExpressionInterpolation55,
						},
						&labeledExpr{
							pos:   position{line: 2528, col: 132, offset: 85372},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2467, col: 31, offset: 83129},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2467, col: 31, offset: 83129},
										run: (*parser).callonExpressionInterpolation58,
										expr: &seqExpr{
											pos: position{line: 2467, col: 31, offset: 83129},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2676, col: 12, offset: 90788},
													run: (*parser).callonExpressionInterpolation60,
													expr: &litMatcher{
														pos:        position{line: 2676, col: 12, offset: 90788},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonExpressionInterpolation62,
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonExpressionInterpolation63,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2469, col: 5, offset: 83184},
										run: (*parser).callonExpressionInterpolation64,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonExpressionInterpolation65,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 2554, col: 1, offset: 86339},
			expr: &choiceExpr{
				pos: position{line: 2554, col: 25, offset: 86363},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2554, col: 25, offset: 86363},
						name: "elementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 2554, col: 48, offset: 86386},
						name: "voidElementInterpolation",
					},
				},
			},
		},
		{
			name: "elementInterpolation",
			pos:  position{line: 2556, col: 1, offset: 86412},
			expr: &actionExpr{
				pos: position{line: 2556, col: 25, offset: 86436},
				run: (*parser).callonelementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2556, col: 25, offset: 86436},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2556, col: 25, offset: 86436},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2046, col: 16, offset: 69684},
								expr: &charClassMatcher{
									pos:        position{line: 2032, col: 27, offset: 69023},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2786, col: 16, offset: 94324},
							run: (*parser).callonelementInterpolation6,
						},
						&labeledExpr{
							pos:   position{line: 2556, col: 55, offset: 86466},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2556, col: 62, offset: 86473},
								expr: &ruleRefExpr{
									pos:  position{line: 2556, col: 62, offset: 86473},
									name: "AttributeCollection",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2793, col: 14, offset: 94423},
							run: (*parser).callonelementInterpolation10,
						},
						&labeledExpr{
							pos:   position{line: 2556, col: 93, offset: 86504},
							label: "valI",
							expr: &choiceExpr{
								pos: position{line: 2556, col: 99, offset: 86510},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2556, col: 99, offset: 86510},
										name: "InterpolationValue",
									},
									&stateCodeExpr{
										pos: position{line: 2726, col: 13, offset: 92468},
										run: (*parser).callonelementInterpolation14,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "voidElementInterpolation",
			pos:  position{line: 2568, col: 1, offset: 86868},
			expr: &actionExpr{
				pos: position{line: 2568, col: 29, offset: 86896},
				run: (*parser).callonvoidElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2568, col: 29, offset: 86896},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2568, col: 29, offset: 86896},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2046, col: 16, offset: 69684},
								expr: &charClassMatcher{
									pos:        position{line: 2032, col: 27, offset: 69023},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2568, col: 47, offset: 86914},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&stateCodeExpr{
							pos: position{line: 2786, col: 16, offset: 94324},
							run: (*parser).callonvoidElementInterpolation7,
						},
						&labeledExpr{
							pos:   position{line: 2568, col: 63, offset: 86930},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2568, col: 70, offset: 86937},
								expr: &ruleRefExpr{
									pos:  position{line: 2568, col: 70, offset: 86937},
									name: "AttributeCollection",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2793, col: 14, offset: 94423},
							run: (*parser).callonvoidElementInterpolation11,
						},
						&stateCodeExpr{
							pos: position{line: 2726, col: 13, offset: 92468},
							run: (*parser).callonvoidElementInterpolation12,
						},
					},
				},
			},
		},
		{
			name: "ComponentCallInterpolation",
			pos:  position{line: 2584, col: 1, offset: 87477},
			expr: &actionExpr{
				pos: position{line: 2584, col: 31, offset: 87507},
				run: (*parser).callonComponentCallInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2584, col: 31, offset: 87507},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2584, col: 31, offset: 87507},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&stateCodeExpr{
							pos: position{line: 2786, col: 16, offset: 94324},
							run: (*parser).callonComponentCallInterpolation4,
						},
						&labeledExpr{
							pos:   position{line: 2584, col: 47, offset: 87523},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 2584, col: 53, offset: 87529},
								name: "ComponentCallHeader",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2793, col: 14, offset: 94423},
							run: (*parser).callonComponentCallInterpolation7,
						},
						&labeledExpr{
							pos:   position{line: 2584, col: 83, offset: 87559},
							label: "valI",
							expr: &choiceExpr{
								pos: position{line: 2584, col: 89, offset: 87565},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2584, col: 89, offset: 87565},
										name: "InterpolationValue",
									},
									&stateCodeExpr{
										pos: position{line: 2726, col: 13, offset: 92468},
										run: (*parser).callonComponentCallInterpolation11,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpolationValue",
			pos:  position{line: 2599, col: 1, offset: 88039},
			expr: &actionExpr{
				pos: position{line: 2599, col: 23, offset: 88061},
				run: (*parser).callonInterpolationValue1,
				expr: &seqExpr{
					pos: position{line: 2599, col: 23, offset: 88061},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2495, col: 27, offset: 84061},
							run: (*parser).callonInterpolationValue3,
							expr: &seqExpr{
								pos: position{line: 2495, col: 27, offset: 84061},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2654, col: 8, offset: 90032},
										run: (*parser).callonInterpolationValue5,
										expr: &choiceExpr{
											pos: position{line: 2654, col: 9, offset: 90033},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2654, col: 9, offset: 90033},
													expr: &anyMatcher{
														line: 2654, col: 10, offset: 90034,
													},
												},
												&notExpr{
													pos: position{line: 2654, col: 14, offset: 90038},
													expr: &anyMatcher{
														line: 2654, col: 15, offset: 90039,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2720, col: 18, offset: 92335},
										run: (*parser).callonInterpolationValue11,
									},
									&actionExpr{
										pos: position{line: 2678, col: 14, offset: 90829},
										run: (*parser).callonInterpolationValue12,
										expr: &litMatcher{
											pos:        position{line: 2678, col: 14, offset: 90829},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2599, col: 46, offset: 88084},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 2599, col: 51, offset: 88089},
								name: "InterpolationValueLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2599, col: 74, offset: 88112},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 2496, col: 25, offset: 84128},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2496, col: 25, offset: 84128},
										run: (*parser).callonInterpolationValue18,
										expr: &seqExpr{
											pos: position{line: 2496, col: 25, offset: 84128},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2679, col: 14, offset: 90869},
													run: (*parser).callonInterpolationValue20,
													expr: &litMatcher{
														pos:        position{line: 2679, col: 14, offset: 90869},
														val:        "]",
														ignoreCase: false,
														want:       "\"]\"",
													},
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonInterpolationValue22,
												},
												&stateCodeExpr{
													pos: position{line: 2726, col: 13, offset: 92468},
													run: (*parser).callonInterpolationValue23,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2498, col: 5, offset: 84185},
										run: (*parser).callonInterpolationValue24,
										expr: &actionExpr{
											pos: position{line: 2654, col: 8, offset: 90032},
											run: (*parser).callonInterpolationValue25,
											expr: &choiceExpr{
												pos: position{line: 2654, col: 9, offset: 90033},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2654, col: 9, offset: 90033},
														expr: &anyMatcher{
															line: 2654, col: 10, offset: 90034,
														},
													},
													&notExpr{
														pos: position{line: 2654, col: 14, offset: 90038},
														expr: &anyMatcher{
															line: 2654, col: 15, offset: 90039,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 2697, col: 1, offset: 91560},
			expr: &choiceExpr{
				pos: position{line: 2697, col: 17, offset: 91576},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2697, col: 17, offset: 91576},
						exprs: []any{
							&andCodeExpr{
								pos: position{line: 2697, col: 17, offset: 91576},
								run: (*parser).callonINDENTATION23,
							},
							&charClassMatcher{
								pos:        position{line: 2663, col: 37, offset: 90336},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
							&stateCodeExpr{
								pos: position{line: 2699, col: 5, offset: 91658},
								run: (*parser).callonINDENTATION25,
							},
							&ruleRefExpr{
								pos:  position{line: 2704, col: 3, offset: 91751},
								name: "INDENTATION2",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2704, col: 18, offset: 91766},
						exprs: []any{
							&andCodeExpr{
								pos: position{line: 2704, col: 18, offset: 91766},
								run: (*parser).callonINDENTATION28,
							},
							&litMatcher{
								pos:        position{line: 2706, col: 3, offset: 91847},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
							&stateCodeExpr{
								pos: position{line: 2706, col: 8, offset: 91852},
								run: (*parser).callonINDENTATION210,
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onFile3() error {
	newState(c)
	return nil
}

func (p *parser) callonFile3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile3()
}

func (c *current) onFile24() (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile24()
}

func (c *current) onFile36(textI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile36(stack["textI"])
}

func (c *current) onFile16(textI any) (any, error) {
	return file.CorgiComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonFile16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile16(stack["textI"])
}

func (c *current) onFile5(commentsI any) (any, error) {
	commentIs := slice(commentsI)
	comments := make([]file.CorgiComment, 0, len(commentIs))
	for _, cI := range commentIs {
		if c, ok := cI.(file.CorgiComment); ok {
			comments = append(comments, c)
		}
	}
	comments = comments[:len(comments):len(comments)]
	return comments, nil
}

func (p *parser) callonFile5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile5(stack["commentsI"])
}

func (c *current) onFile66(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonFile66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile66(stack["identI"])
}

func (c *current) onFile72(identI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile72(stack["identI"])
}

func (c *current) onFile63(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonFile63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile63(stack["identI"])
}

func (c *current) onFile84() (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile84()
}

func (c *current) onFile83() (any, error) {
	return file.Ident{}, &fileerr.Error{
		Message: "missing package name",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a package name",
		}),
		Example: "`package woof`",
	}
}

func (p *parser) callonFile83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile83()
}

func (c *current) onFile98() (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile98()
}

func (c *current) onFile115() (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile115()
}

func (c *current) onFile113() (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile113() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile113()
}

func (c *current) onFile105(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonFile105() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile105(stack["unexpectedI"])
}

func (c *current) onFile140(startI, identI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile140(stack["startI"], stack["identI"])
}

func (c *current) onFile95(startI, identI any) (any, error) {
	return invalidIdent(c, "package", startI.(file.Position), identI.(string))
}

func (p *parser) callonFile95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile95(stack["startI"], stack["identI"])
}

func (c *current) onFile56(nameI any) (any, error) {
	return file.PackageDirective{
		Name:     nameI.(file.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonFile56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile56(stack["nameI"])
}

func (c *current) onFile152() (any, error) {
	return pos(c), nil
}

func (p *parser) callonFile152() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile152()
}

func (c *current) onFile151() (any, error) {
	return file.PackageDirective{}, &fileerr.Error{
		Message: "missing package directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			ToEOL:      true,
			Annotation: "expected `package` directive as first non-comment, found this instead",
		}),
		Example: "`package woof`",
	}
}

func (p *parser) callonFile151() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile151()
}

func (c *current) onFile1(docI, pkgI, scopeI any) (any, error) {
	return &file.File{
		PackageDoc:       docI.([]file.CorgiComment),
		PackageDirective: pkgI.(file.PackageDirective),
		Scope:            scopeI.(file.Scope),
	}, nil
}

func (p *parser) callonFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["docI"], stack["pkgI"], stack["scopeI"])
}

func (c *current) onAnd8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAnd8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd8()
}

func (c *current) onAnd6(collsI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonAnd6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd6(stack["collsI"])
}

func (c *current) onAnd1(collsI any) (any, error) {
	return file.And{
		Attributes: optCast[[]file.AttributeCollection](collsI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd1(stack["collsI"])
}

func (c *current) onandAttributes7() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes7()
}

func (c *current) onandAttributes5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes5()
}

func (c *current) onandAttributes3() (any, error) {
	return ([]file.AttributeCollection)(nil), &fileerr.Error{
		Message: "`&` with no attributes",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected attributes",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "write a class shorthand", Example: "`&.woof`"},
			{Suggestion: "write an id shorthand", Example: "`&#bark`"},
			{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
		},
	}
}

func (p *parser) callonandAttributes3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes3()
}

func (c *current) onandAttributes29() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes29()
}

func (c *current) onandAttributes45() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes45()
}

func (c *current) onandAttributes43() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes43()
}

func (c *current) onandAttributes35(attrsI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonandAttributes35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes35(stack["attrsI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onandAttributes73() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes73()
}

func (c *current) onandAttributes71() (any, error) {
	return pos(c), nil
}

func (p *parser) callonandAttributes71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes71()
}

func (c *current) onandAttributes24(attrsI, startI, unexpectedI, endI any) (any, error) {
	return attrsI, &fileerr.Error{
		Message: "bad attribute syntax",
		ErrorAnnotation: anno(c, annotation{
			Start:      startI.(file.Position),
			End:        endI.(file.Position),
			Annotation: "this is not a valid attribute list",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
				Example:    "`&#bark .woof (title=\"howl\")`",
				ShouldBe:   "`&#bark.woof(title=\"howl\")`",
			},
			{Suggestion: "write a class shorthand", Example: "`&.woof`"},
			{Suggestion: "write an id shorthand", Example: "`&#bark`"},
			{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
		},
	}
}

func (p *parser) callonandAttributes24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes24(stack["attrsI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onAttributeCollection9() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection9()
}

func (c *current) onAttributeCollection4(endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, pos(c), endI.(file.Position), "can't place spaces here")
}

func (p *parser) callonAttributeCollection4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection4(stack["endI"])
}

func (c *current) onAttributeCollection23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeCollection23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection23()
}

func (c *current) onAttributeCollection27() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection27()
}

func (c *current) onAttributeCollection26() (any, error) {
	return "", &fileerr.Error{
		Message: "id shorthand: missing id",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an id",
		}),
	}
}

func (p *parser) callonAttributeCollection26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection26()
}

func (c *current) onAttributeCollection18(idI any) (any, error) {
	return file.IDShorthand{
		ID:       idI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection18(stack["idI"])
}

func (c *current) onAttributeCollection38() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeCollection38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection38()
}

func (c *current) onAttributeCollection42() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeCollection42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection42()
}

func (c *current) onAttributeCollection41() (any, error) {
	return "", &fileerr.Error{
		Message: "class shorthand: missing class name",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a class name",
		}),
	}
}

func (p *parser) callonAttributeCollection41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection41()
}

func (c *current) onAttributeCollection33(nameI any) (any, error) {
	return file.ClassShorthand{
		Name:     nameI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAttributeCollection33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection33(stack["nameI"])
}

func (c *current) onAttributeCollection1(attrsI any) (any, error) {
	return sliceOf[file.AttributeCollection](attrsI), nil
}

func (p *parser) callonAttributeCollection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection1(stack["attrsI"])
}

func (c *current) onAttributeList5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList5()
}

func (c *current) onAttributeList11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonAttributeList11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList11()
}

func (c *current) onAttributeList12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList12()
}

func (c *current) onAttributeList18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonAttributeList18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList18()
}

func (c *current) onAttributeList3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList3()
}

func (c *current) onAttributeList38() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonAttributeList38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList38()
}

func (c *current) onAttributeList43() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList43()
}

func (c *current) onAttributeList45(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonAttributeList45() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList45(stack["endI"])
}

func (c *current) onAttributeList27(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonAttributeList27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList27(stack["endI"])
}

func (c *current) onAttributeList47() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeList47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList47()
}

func (c *current) onAttributeList46() (any, error) {
	return unclosedList(c, "attribute list")
}

func (p *parser) callonAttributeList46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList46()
}

func (c *current) onAttributeList1(attributesI, rParenI any) (any, error) {
	return file.AttributeList{
		LParen:     pos(c),
		Attributes: optCast[[]file.Attribute](attributesI),
		RParen:     rParenI.(file.Position),
	}, nil
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["attributesI"], stack["rParenI"])
}

func (c *current) onattributes15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonattributes15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes15()
}

func (c *current) onattributes1(firstI, restI any) (any, error) {
	return collectList[file.Attribute](firstI, restI, -1), nil
}

func (p *parser) callonattributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute2() (any, error) {
	return file.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute2()
}

func (c *current) onSimpleAttribute5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSimpleAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute5()
}

func (c *current) onSimpleAttribute19() (any, error) {
	return string(c.text), &fileerr.Error{
		Message: "attribute: invalid name",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        len(c.text),
			Annotation: "contains characters not allowed by the HTML5 spec",
		}),
	}
}

func (p *parser) callonSimpleAttribute19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute19()
}

func (c *current) onSimpleAttribute1(nameI, valI any) (any, error) {
	a := valI.(file.SimpleAttribute)
	a.Name = nameI.(string)
	a.Position = pos(c)
	return a, nil
}

func (p *parser) callonSimpleAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute1(stack["nameI"], stack["valI"])
}

func (c *current) onsimpleAttributeValue2() (any, error) {
	return file.SimpleAttribute{}, nil
}

func (p *parser) callonsimpleAttributeValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue2()
}

func (c *current) onsimpleAttributeValue8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonsimpleAttributeValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue8()
}

func (c *current) onsimpleAttributeValue19() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonsimpleAttributeValue19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue19()
}

func (c *current) onsimpleAttributeValue5(assignI, valI any) (any, error) {
	return file.SimpleAttribute{
		Assign: ptr(assignI.(file.Position)),
		Value:  optCast[file.AttributeValue](valI),
	}, nil
}

func (p *parser) callonsimpleAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue5(stack["assignI"], stack["valI"])
}

func (c *current) onAttributeValue6() (any, error) {
	return pos(c), nil
}

func (p *parser) callonAttributeValue6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue6()
}

func (c *current) onAttributeValue5() (any, error) {
	return nil, &fileerr.Error{
		Message: "attribute: missing value",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an expression or component call",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you want to write a static boolean attribute, remove the equal sign",
				Example:    "`input(disabled)`",
			},
		},
	}
}

func (p *parser) callonAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue5()
}

func (c *current) onTypedAttributeValue5() (any, error) {
	return attrtype.Plain, nil
}

func (p *parser) callonTypedAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue5()
}

func (c *current) onTypedAttributeValue7() (any, error) {
	return attrtype.CSS, nil
}

func (p *parser) callonTypedAttributeValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue7()
}

func (c *current) onTypedAttributeValue9() (any, error) {
	return attrtype.JS, nil
}

func (p *parser) callonTypedAttributeValue9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue9()
}

func (c *current) onTypedAttributeValue11() (any, error) {
	return attrtype.URL, nil
}

func (p *parser) callonTypedAttributeValue11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue11()
}

func (c *current) onTypedAttributeValue13() (any, error) {
	return attrtype.URLList, nil
}

func (p *parser) callonTypedAttributeValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue13()
}

func (c *current) onTypedAttributeValue15() (any, error) {
	return attrtype.ResourceURL, nil
}

func (p *parser) callonTypedAttributeValue15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue15()
}

func (c *current) onTypedAttributeValue17() (any, error) {
	return attrtype.Srcset, nil
}

func (p *parser) callonTypedAttributeValue17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue17()
}

func (c *current) onTypedAttributeValue19() (any, error) {
	return attrtype.Unsafe, nil
}

func (p *parser) callonTypedAttributeValue19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue19()
}

func (c *current) onTypedAttributeValue26() (any, error) {
	return pos(c), nil
}

func (p *parser) callonTypedAttributeValue26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue26()
}

func (c *current) onTypedAttributeValue32() error {
	pushStart(c)
	return nil
}

func (p *parser) callonTypedAttributeValue32() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue32()
}

func (c *current) onTypedAttributeValue33() (any, error) {
	return pos(c), nil
}

func (p *parser) callonTypedAttributeValue33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue33()
}

func (c *current) onTypedAttributeValue39() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonTypedAttributeValue39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue39()
}

func (c *current) onTypedAttributeValue24() (any, error) {
	return pos(c), nil
}

func (p *parser) callonTypedAttributeValue24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue24()
}

func (c *current) onTypedAttributeValue58() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonTypedAttributeValue58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue58()
}

func (c *current) onTypedAttributeValue63() (any, error) {
	return pos(c), nil
}

func (p *parser) callonTypedAttributeValue63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue63()
}

func (c *current) onTypedAttributeValue65(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonTypedAttributeValue65() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue65(stack["endI"])
}

func (c *current) onTypedAttributeValue47(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonTypedAttributeValue47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue47(stack["endI"])
}

func (c *current) onTypedAttributeValue67() (any, error) {
	return pos(c), nil
}

func (p *parser) callonTypedAttributeValue67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue67()
}

func (c *current) onTypedAttributeValue66() (any, error) {
	return unclosedList(c, "attribute value")
}

func (p *parser) callonTypedAttributeValue66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue66()
}

func (c *current) onTypedAttributeValue1(typeI, lParenI, valI, rParenI any) (any, error) {
	return file.TypedAttributeValue{
		Type:     typeI.(attrtype.Type),
		LParen:   lParenI.(file.Position),
		Value:    valI.(file.Expression),
		RParen:   rParenI.(file.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTypedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue1(stack["typeI"], stack["lParenI"], stack["valI"], stack["rParenI"])
}

func (c *current) onComponentCallAttributeValue4() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallAttributeValue4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue4()
}

func (c *current) onComponentCallAttributeValue7(headerI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallAttributeValue7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue7(stack["headerI"])
}

func (c *current) onComponentCallAttributeValue1(headerI, valueI any) (any, error) {
	return file.ComponentCallAttribute{
		ComponentCall: headerI.(file.ComponentCall),
		Value:         optCast[file.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonComponentCallAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue1(stack["headerI"], stack["valueI"])
}

func (c *current) onType1(typeI any) (any, error) {
	return file.Type{Type: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType1(stack["typeI"])
}

func (c *current) onBody2(bodyI any) (any, error) {
	return bodyI, nil
}

func (p *parser) callonBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody2(stack["bodyI"])
}

func (c *current) onBody11() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody11()
}

func (c *current) onBody9() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody9()
}

func (c *current) onBody8() (any, error) {
	return nil, &fileerr.Error{
		Message: "missing body",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a body",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "start a scope", Example: "`{ ... }`"},
			{Suggestion: "write bracketed text", Example: "`[ woof woof ]`"},
		},
	}
}

func (p *parser) callonBody8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody8()
}

func (c *current) onBody33() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody33()
}

func (c *current) onBody42() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody42()
}

func (c *current) onBody28(startI, endI, bodyI any) (any, error) {
	return bodyI, newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "unexpected tokens")
}

func (p *parser) callonBody28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody28(stack["startI"], stack["endI"], stack["bodyI"])
}

func (c *current) onBody57() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody57()
}

func (c *current) onBody73() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody73()
}

func (c *current) onBody71() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody71()
}

func (c *current) onBody63(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonBody63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody63(stack["startI"], stack["unexpectedI"])
}

func (c *current) onBody101() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody101()
}

func (c *current) onBody99() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBody99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody99()
}

func (c *current) onBody52(startI, unexpectedI, endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected a body")
}

func (p *parser) callonBody52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody52(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onOptionalBody9() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody9()
}

func (c *current) onOptionalBody7() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody7()
}

func (c *current) onOptionalBody6() (any, error) {
	return nil, nil
}

func (p *parser) callonOptionalBody6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody6()
}

func (c *current) onOptionalBody31() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody31()
}

func (c *current) onOptionalBody40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody40()
}

func (c *current) onOptionalBody26(startI, endI, bodyI any) (any, error) {
	return bodyI, newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "unexpected tokens")
}

func (p *parser) callonOptionalBody26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody26(stack["startI"], stack["endI"], stack["bodyI"])
}

func (c *current) onOptionalBody55() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody55()
}

func (c *current) onOptionalBody71() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody71()
}

func (c *current) onOptionalBody69() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody69()
}

func (c *current) onOptionalBody61(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonOptionalBody61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody61(stack["startI"], stack["unexpectedI"])
}

func (c *current) onOptionalBody99() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody99()
}

func (c *current) onOptionalBody97() (any, error) {
	return pos(c), nil
}

func (p *parser) callonOptionalBody97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody97()
}

func (c *current) onOptionalBody50(startI, unexpectedI, endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected a body, or nothing")
}

func (p *parser) callonOptionalBody50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody50(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onGlobalScope1(itmsI any) (any, error) {
	return file.Scope{Items: sliceOf[file.ScopeItem](itmsI)}, nil
}

func (p *parser) callonGlobalScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope1(stack["itmsI"])
}

func (c *current) onglobalScopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem7()
}

func (c *current) onglobalScopeItem14() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem14()
}

func (c *current) onglobalScopeItem13() (any, error) {
	return file.BadItem{
			Line:     "}",
			Position: pos(c),
		}, &fileerr.Error{
			Message: "lone brace",
			ErrorAnnotation: anno(c, annotation{
				ContextStartDelta: -2,
				Start:             pos(c),
				Annotation:        "does not belong to a scope",
			}),
		}
}

func (p *parser) callonglobalScopeItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem13()
}

func (c *current) onglobalScopeItem27() (any, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem27()
}

func (c *current) onglobalScopeItem35(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem35(stack["identI"])
}

func (c *current) onglobalScopeItem32(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonglobalScopeItem32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem32(stack["identI"])
}

func (c *current) onglobalScopeItem43() (any, error) {
	return invalidIdent(c, "import alias", pos(c), string(c.text))
}

func (p *parser) callonglobalScopeItem43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem43()
}

func (c *current) onglobalScopeItem56() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem56()
}

func (c *current) onglobalScopeItem62() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem62()
}

func (c *current) onglobalScopeItem77() (bool, error) {
	return state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem77()
}

func (c *current) onglobalScopeItem80() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem80()
}

func (c *current) onglobalScopeItem66() (any, error) {
	return file.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem66()
}

func (c *current) onglobalScopeItem87() error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem87() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem87()
}

func (c *current) onglobalScopeItem84() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem84()
}

func (c *current) onglobalScopeItem89() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem89()
}

func (c *current) onglobalScopeItem88() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "you never closed this ```",
		}),
	}
}

func (p *parser) callonglobalScopeItem88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem88()
}

func (c *current) onglobalScopeItem54(contentsI, endI any) (any, error) {
	return file.StaticString{
		Start:    pos(c),
		Quote:    '`',
		Contents: optCast[file.StringText](contentsI).Text,
		End:      endI.(file.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem54(stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem97() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem97()
}

func (c *current) onglobalScopeItem103() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem103() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem103()
}

func (c *current) onglobalScopeItem123() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonglobalScopeItem123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem123()
}

func (c *current) onglobalScopeItem144() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonglobalScopeItem144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem144()
}

func (c *current) onglobalScopeItem176() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonglobalScopeItem176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem176()
}

func (c *current) onglobalScopeItem183() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem183() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem183()
}

func (c *current) onglobalScopeItem194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem194()
}

func (c *current) onglobalScopeItem201() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem201() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem201()
}

func (c *current) onglobalScopeItem206() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem206() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem206()
}

func (c *current) onglobalScopeItem107() (any, error) {
	return file.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem107()
}

func (c *current) onglobalScopeItem213() error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem213() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem213()
}

func (c *current) onglobalScopeItem210() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem210()
}

func (c *current) onglobalScopeItem215() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem215()
}

func (c *current) onglobalScopeItem214() (any, error) {
	start := popStart(c)
	return pos(c), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:       start,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the string literal started here",
			}),
		},
	}
}

func (p *parser) callonglobalScopeItem214() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem214()
}

func (c *current) onglobalScopeItem95(contentsI, endI any) (any, error) {
	return file.StaticString{
		Start:    pos(c),
		Quote:    '"',
		Contents: optCast[file.StringText](contentsI).Text,
		End:      endI.(file.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem95(stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem223() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem223() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem223()
}

func (c *current) onglobalScopeItem221(aliasI, pathI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem221() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem221(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeItem22(aliasI, pathI any) (any, error) {
	return file.ImportSpec{
		Alias:    optCastPtr[file.Ident](aliasI),
		Path:     pathI.(file.StaticString),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem22(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeItem242() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem242() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem242()
}

func (c *current) onglobalScopeItem240(specI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem240() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem240(stack["specI"])
}

func (c *current) onglobalScopeItem16(specI any) (any, error) {
	return file.Import{
		Imports:  []file.ImportScopeItem{specI.(file.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem16(stack["specI"])
}

func (c *current) onglobalScopeItem267() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem267() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem267()
}

func (c *current) onglobalScopeItem273() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem273() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem273()
}

func (c *current) onglobalScopeItem274() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem274() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem274()
}

func (c *current) onglobalScopeItem280() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem280() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem280()
}

func (c *current) onglobalScopeItem265() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem265() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem265()
}

func (c *current) onglobalScopeItem292() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem292() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem292()
}

func (c *current) onglobalScopeItem306() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem306() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem306()
}

func (c *current) onglobalScopeItem318(textI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem318() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem318(stack["textI"])
}

func (c *current) onglobalScopeItem298(textI any) (any, error) {
	return file.CorgiComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem298(stack["textI"])
}

func (c *current) onglobalScopeItem334() (any, error) {
	return file.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem334() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem334()
}

func (c *current) onglobalScopeItem342(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeItem342() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem342(stack["identI"])
}

func (c *current) onglobalScopeItem339(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonglobalScopeItem339() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem339(stack["identI"])
}

func (c *current) onglobalScopeItem350() (any, error) {
	return invalidIdent(c, "import alias", pos(c), string(c.text))
}

func (p *parser) callonglobalScopeItem350() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem350()
}

func (c *current) onglobalScopeItem363() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem363() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem363()
}

func (c *current) onglobalScopeItem369() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem369() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem369()
}

func (c *current) onglobalScopeItem384() (bool, error) {
	return state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem384() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem384()
}

func (c *current) onglobalScopeItem387() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem387() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem387()
}

func (c *current) onglobalScopeItem373() (any, error) {
	return file.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem373() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem373()
}

func (c *current) onglobalScopeItem394() error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem394() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem394()
}

func (c *current) onglobalScopeItem391() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem391() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem391()
}

func (c *current) onglobalScopeItem396() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem396() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem396()
}

func (c *current) onglobalScopeItem395() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "you never closed this ```",
		}),
	}
}

func (p *parser) callonglobalScopeItem395() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem395()
}

func (c *current) onglobalScopeItem361(contentsI, endI any) (any, error) {
	return file.StaticString{
		Start:    pos(c),
		Quote:    '`',
		Contents: optCast[file.StringText](contentsI).Text,
		End:      endI.(file.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem361() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem361(stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem404() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem404() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem404()
}

func (c *current) onglobalScopeItem410() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem410() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem410()
}

func (c *current) onglobalScopeItem430() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonglobalScopeItem430() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem430()
}

func (c *current) onglobalScopeItem451() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonglobalScopeItem451() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem451()
}

func (c *current) onglobalScopeItem483() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonglobalScopeItem483() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem483()
}

func (c *current) onglobalScopeItem490() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem490() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem490()
}

func (c *current) onglobalScopeItem501() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem501() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem501()
}

func (c *current) onglobalScopeItem508() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem508() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem508()
}

func (c *current) onglobalScopeItem513() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonglobalScopeItem513() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem513()
}

func (c *current) onglobalScopeItem414() (any, error) {
	return file.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem414() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem414()
}

func (c *current) onglobalScopeItem520() error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeItem520() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem520()
}

func (c *current) onglobalScopeItem517() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem517() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem517()
}

func (c *current) onglobalScopeItem522() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem522() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem522()
}

func (c *current) onglobalScopeItem521() (any, error) {
	start := popStart(c)
	return pos(c), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:       start,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the string literal started here",
			}),
		},
	}
}

func (p *parser) callonglobalScopeItem521() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem521()
}

func (c *current) onglobalScopeItem402(contentsI, endI any) (any, error) {
	return file.StaticString{
		Start:    pos(c),
		Quote:    '"',
		Contents: optCast[file.StringText](contentsI).Text,
		End:      endI.(file.Position),
	}, nil
}

func (p *parser) callonglobalScopeItem402() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem402(stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeItem530() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem530() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem530()
}

func (c *current) onglobalScopeItem528(aliasI, pathI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem528() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem528(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeItem329(aliasI, pathI any) (any, error) {
	return file.ImportSpec{
		Alias:    optCastPtr[file.Ident](aliasI),
		Path:     pathI.(file.StaticString),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem329() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem329(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeItem560() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem560() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem560()
}

func (c *current) onglobalScopeItem558() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem558() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem558()
}

func (c *current) onglobalScopeItem550(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonglobalScopeItem550() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem550(stack["unexpectedI"])
}

func (c *current) onglobalScopeItem587() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem587() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem587()
}

func (c *current) onglobalScopeItem585(lineI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem585() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem585(stack["lineI"])
}

func (c *current) onglobalScopeItem547(lineI any) (any, error) {
	line := lineI.(string)
	return file.BadImportSpec{
			Line:     line,
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid import spec",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        len(line),
				Annotation: "expected an import path, optionally preceded by an import alias",
			}),
		}
}

func (p *parser) callonglobalScopeItem547() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem547(stack["lineI"])
}

func (c *current) onglobalScopeItem286(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonglobalScopeItem286() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem286(stack["itmI"])
}

func (c *current) onglobalScopeItem612() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeItem612() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem612()
}

func (c *current) onglobalScopeItem617() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem617() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem617()
}

func (c *current) onglobalScopeItem606(rParenI any) (any, error) {
	return rParenI, nil
}

func (p *parser) callonglobalScopeItem606() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem606(stack["rParenI"])
}

func (c *current) onglobalScopeItem620() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem620() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem620()
}

func (c *current) onglobalScopeItem619() (any, error) {
	return nil, &fileerr.Error{
		Message: "missing `)`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected `)` to close the import group",
		}),
	}
}

func (p *parser) callonglobalScopeItem619() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem619()
}

func (c *current) onglobalScopeItem259(startI, itmsI, rParenI any) (any, error) {
	return file.Import{
		LParen:   ptr(startI.(file.Position)),
		Imports:  sliceOf[file.ImportScopeItem](itmsI),
		RParen:   ptr(rParenI.(file.Position)),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeItem259() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem259(stack["startI"], stack["itmsI"], stack["rParenI"])
}

func (c *current) onglobalScopeItem632() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem632() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem632()
}

func (c *current) onglobalScopeItem649() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem649() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem649()
}

func (c *current) onglobalScopeItem647() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem647() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem647()
}

func (c *current) onglobalScopeItem639(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonglobalScopeItem639() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem639(stack["unexpectedI"])
}

func (c *current) onglobalScopeItem677() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem677() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem677()
}

func (c *current) onglobalScopeItem675() (any, error) {
	return pos(c), nil
}

func (p *parser) callonglobalScopeItem675() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem675()
}

func (c *current) onglobalScopeItem626(startI, badI, endI any) (any, error) {
	return file.Import{
			Imports: []file.ImportScopeItem{
				file.BadImportSpec{
					Line:     badI.(string),
					Position: startI.(file.Position),
				},
			},
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid import",
			ErrorAnnotation: anno(c, annotation{
				Start: startI.(file.Position),
				End:   endI.(file.Position),
				Annotation: "expected an import path, optionally preceded by an import alias\n" +
					"or a group of imports",
			}),
			Example: "`import \"fmt\"`",
		}
}

func (p *parser) callonglobalScopeItem626() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem626(stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onglobalScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonglobalScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeItem1(stack["itmI"])
}

func (c *current) onScope5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonScope5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope5()
}

func (c *current) onScope11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonScope11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope11()
}

func (c *current) onScope12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonScope12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope12()
}

func (c *current) onScope18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScope18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope18()
}

func (c *current) onScope3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonScope3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope3()
}

func (c *current) onScope33() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScope33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope33()
}

func (c *current) onScope38() (any, error) {
	return pos(c), nil
}

func (p *parser) callonScope38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope38()
}

func (c *current) onScope40(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonScope40() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope40(stack["endI"])
}

func (c *current) onScope27(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonScope27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27(stack["endI"])
}

func (c *current) onScope42() (any, error) {
	return pos(c), nil
}

func (p *parser) callonScope42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope42()
}

func (c *current) onScope41() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "unclosed `{`",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "expected a closing `}` for this `{`",
		}),
	}
}

func (p *parser) callonScope41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope41()
}

func (c *current) onScope1(itemsI, rBraceI any) (any, error) {
	return file.Scope{
		LBrace: pos(c),
		Items:  sliceOf[file.ScopeItem](itemsI),
		RBrace: rBraceI.(file.Position),
	}, nil
}

func (p *parser) callonScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["itemsI"], stack["rBraceI"])
}

func (c *current) onscopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonscopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem7()
}

func (c *current) onscopeItem24() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem24()
}

func (c *current) onscopeItem36(textI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem36(stack["textI"])
}

func (c *current) onscopeItem16(textI any) (any, error) {
	return file.CorgiComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem16(stack["textI"])
}

func (c *current) onscopeItem57() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem57()
}

func (c *current) onscopeItem55() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem55()
}

func (c *current) onscopeItem54() (any, error) {
	return (*file.Ident)(nil), nil
}

func (p *parser) callonscopeItem54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem54()
}

func (c *current) onscopeItem79(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem79(stack["identI"])
}

func (c *current) onscopeItem87() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem87()
}

func (c *current) onscopeItem85(identI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem85(stack["identI"])
}

func (c *current) onscopeItem74(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonscopeItem74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem74(stack["identI"])
}

func (c *current) onscopeItem109(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem109(stack["identI"])
}

func (c *current) onscopeItem116() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem116()
}

func (c *current) onscopeItem132() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem132() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem132()
}

func (c *current) onscopeItem130() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem130() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem130()
}

func (c *current) onscopeItem122(identI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonscopeItem122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem122(stack["identI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onscopeItem160() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem160()
}

func (c *current) onscopeItem158() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem158() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem158()
}

func (c *current) onscopeItem104(identI, startI, unexpectedI, endI any) (any, error) {
	return identI, newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "unexpected tokens after break/continue label")
}

func (p *parser) callonscopeItem104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem104(stack["identI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onscopeItem182() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem182() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem182()
}

func (c *current) onscopeItem198() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem198()
}

func (c *current) onscopeItem196() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem196() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem196()
}

func (c *current) onscopeItem188(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonscopeItem188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem188(stack["startI"], stack["unexpectedI"])
}

func (c *current) onscopeItem226() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem226()
}

func (c *current) onscopeItem224() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem224() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem224()
}

func (c *current) onscopeItem177(startI, unexpectedI, endI any) (any, error) {
	return (*file.Ident)(nil), newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected nothing, or a label")
}

func (p *parser) callonscopeItem177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem177(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onscopeItem49(labelI any) (any, error) {
	return file.Continue{
		Label:    labelI.(*file.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem49(stack["labelI"])
}

func (c *current) onscopeItem251() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem251() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem251()
}

func (c *current) onscopeItem249() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem249() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem249()
}

func (c *current) onscopeItem248() (any, error) {
	return (*file.Ident)(nil), nil
}

func (p *parser) callonscopeItem248() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem248()
}

func (c *current) onscopeItem273(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem273() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem273(stack["identI"])
}

func (c *current) onscopeItem281() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem281() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem281()
}

func (c *current) onscopeItem279(identI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem279() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem279(stack["identI"])
}

func (c *current) onscopeItem268(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonscopeItem268() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem268(stack["identI"])
}

func (c *current) onscopeItem303(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonscopeItem303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem303(stack["identI"])
}

func (c *current) onscopeItem310() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem310()
}

func (c *current) onscopeItem326() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem326() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem326()
}

func (c *current) onscopeItem324() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem324() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem324()
}

func (c *current) onscopeItem316(identI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonscopeItem316() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem316(stack["identI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onscopeItem354() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem354() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem354()
}

func (c *current) onscopeItem352() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem352() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem352()
}

func (c *current) onscopeItem298(identI, startI, unexpectedI, endI any) (any, error) {
	return identI, newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "unexpected tokens after break/continue label")
}

func (p *parser) callonscopeItem298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem298(stack["identI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onscopeItem376() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem376() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem376()
}

func (c *current) onscopeItem392() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem392() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem392()
}

func (c *current) onscopeItem390() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem390() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem390()
}

func (c *current) onscopeItem382(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonscopeItem382() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem382(stack["startI"], stack["unexpectedI"])
}

func (c *current) onscopeItem420() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem420() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem420()
}

func (c *current) onscopeItem418() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem418() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem418()
}

func (c *current) onscopeItem371(startI, unexpectedI, endI any) (any, error) {
	return (*file.Ident)(nil), newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected nothing, or a label")
}

func (p *parser) callonscopeItem371() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem371(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onscopeItem243(labelI any) (any, error) {
	return file.Break{
		Label:    labelI.(*file.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem243() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem243(stack["labelI"])
}

func (c *current) onscopeItem452() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem452() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem452()
}

func (c *current) onscopeItem448() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonscopeItem448() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem448()
}

func (c *current) onscopeItem464(commentI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem464() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem464(stack["commentI"])
}

func (c *current) onscopeItem442(commentI any) (any, error) {
	return file.HTMLComment{
		Comment:  commentI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonscopeItem442() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem442(stack["commentI"])
}

func (c *current) onscopeItem486() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem486() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem486()
}

func (c *current) onscopeItem492() error {
	pushStart(c)
	return nil
}

func (p *parser) callonscopeItem492() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem492()
}

func (c *current) onscopeItem493() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem493() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem493()
}

func (c *current) onscopeItem499() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonscopeItem499() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem499()
}

func (c *current) onscopeItem484() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem484() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem484()
}

func (c *current) onscopeItem516() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonscopeItem516() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem516()
}

func (c *current) onscopeItem521() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem521() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem521()
}

func (c *current) onscopeItem523(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonscopeItem523() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem523(stack["endI"])
}

func (c *current) onscopeItem505(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonscopeItem505() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem505(stack["endI"])
}

func (c *current) onscopeItem525() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem525() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem525()
}

func (c *current) onscopeItem524() (any, error) {
	return unclosedList(c, "attribute list")
}

func (p *parser) callonscopeItem524() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem524()
}

func (c *current) onscopeItem533() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem533() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem533()
}

func (c *current) onscopeItem531() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem531() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem531()
}

func (c *current) onscopeItem553() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem553() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem553()
}

func (c *current) onscopeItem569() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem569() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem569()
}

func (c *current) onscopeItem567() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem567() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem567()
}

func (c *current) onscopeItem559(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonscopeItem559() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem559(stack["startI"], stack["unexpectedI"])
}

func (c *current) onscopeItem597() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem597() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem597()
}

func (c *current) onscopeItem595() (any, error) {
	return pos(c), nil
}

func (p *parser) callonscopeItem595() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem595()
}

func (c *current) onscopeItem550(startI, unexpectedI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "corgi only permits the HTML5 doctype",
		ErrorAnnotation: anno(c, annotation{
			Start:      startI.(file.Position),
			End:        endI.(file.Position),
			EndOffset:  -1,
			Annotation: "this is not part of the HTML5 doctype",
		}),
		ShouldBe: "`!doctype(html)`",
	}
}

func (p *parser) callonscopeItem550() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem550(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onscopeItem477() (any, error) {
	return file.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonscopeItem477() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem477()
}

func (c *current) onscopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonscopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onscopeItem1(stack["itmI"])
}

func (c *current) onBadItem3(lineI, bodyI any) (any, error) {
	line := concat(lineI)

	firstWordLen := strings.IndexByte(line, ' ')
	if firstWordLen <= 0 {
		firstWordLen = len([]rune(line))
	}

	return file.BadItem{
			Line:     line,
			Body:     optCast[file.Scope](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "unrecognized directive or invalid element name",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        firstWordLen,
				Annotation: "expected a valid corgi directive or an element name",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
				{
					Suggestion: "use a valid corgi directive",
					ShouldBe: "a block (`block`), code (`-`), a conditional (`if`, `else if`, `else`, `switch`),\n" +
						"a loop (`for`), & attributes (`&`), a component call (`+`), an arrow block (`>`)",
				},
			},
		}
}

func (p *parser) callonBadItem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem3(stack["lineI"], stack["bodyI"])
}

func (c *current) onBadItem16(bodyI any) (any, error) {
	return file.BadItem{
			Body:     optCast[file.Scope](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "lone body",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "this body is not attached to a directive or element",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this belongs to a directive, make sure it starts on the same line"},
				{Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
				{
					Suggestion: "place a corgi directive requiring a body in front",
					ShouldBe: "a block (`block`), a conditional (`if`, `else if`, `else`),\n" +
						"a loop (`for`), a component call (`+`)",
				},
			},
		}
}

func (p *parser) callonBadItem16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadItem16(stack["bodyI"])
}

func (c *current) onreservedBadItem15() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreservedBadItem15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadItem15()
}

func (c *current) onreservedBadItem34() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreservedBadItem34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadItem34()
}

func (c *current) onreservedBadItem32() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreservedBadItem32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadItem32()
}

func (c *current) onreservedBadItem24(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreservedBadItem24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadItem24(stack["unexpectedI"])
}

func (c *current) onreservedBadItem60() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreservedBadItem60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadItem60()
}

func (c *current) onreservedBadItem1(reservedEndI, endI, bodyI any) (any, error) {
	return file.BadItem{
			Line:     string(c.globalStore["lines"].([]string)[pos(c).Line-1]),
			Body:     optCast[file.Scope](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "potential use of reserved word",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				End:        reservedEndI.(file.Position),
				EndOffset:  -1,
				Annotation: "cannot use reserved word",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this is supposed to be an element, you need to use a different name"},
				{Suggestion: "if this is Go code, you are seeing this error because you have a syntax error"},
			},
		}
}

func (p *parser) callonreservedBadItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadItem1(stack["reservedEndI"], stack["endI"], stack["bodyI"])
}

func (c *current) onGlobalCode12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGlobalCode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalCode12()
}

func (c *current) onGlobalCode10(stmtI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonGlobalCode10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalCode10(stack["stmtI"])
}

func (c *current) onGlobalCode1(stmtI any) (any, error) {
	return file.Code{Statements: []file.GoCode{stmtI.(file.GoCode)}, Position: pos(c)}, nil
}

func (p *parser) callonGlobalCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalCode1(stack["stmtI"])
}

func (c *current) onexplicitCode3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonexplicitCode3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode3()
}

func (c *current) onexplicitCode9() error {
	editState(c, func(s *State) {
		s.Indentation.Target = c.pos.col - 1 // col is 1-indexed
	})
	return nil
}

func (p *parser) callonexplicitCode9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode9()
}

func (c *current) onexplicitCode1(codeStatementsI any) (any, error) {
	return file.Code{
		Statements: codeStatementsI.([]file.GoCode),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonexplicitCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode1(stack["codeStatementsI"])
}

func (c *current) oncodeStatements2(firstLineI, restI any) (any, error) {
	rest := optCast[[]file.GoCode](restI)
	stmts := make([]file.GoCode, 1, 1+len(rest))
	stmts[0] = firstLineI.(file.GoCode)
	stmts = append(stmts, rest...)
	return stmts, nil
}

func (p *parser) calloncodeStatements2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements2(stack["firstLineI"], stack["restI"])
}

func (c *current) oncodeStatements10() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncodeStatements10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements10()
}

func (c *current) oncodeStatements9() (any, error) {
	return ([]file.GoCode)(nil), &fileerr.Error{
		Message: "empty code block",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected code",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) calloncodeStatements9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements9()
}

func (c *current) oncodeStatement9() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncodeStatement9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement9()
}

func (c *current) oncodeStatement22() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncodeStatement22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement22()
}

func (c *current) oncodeStatement20() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncodeStatement20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement20()
}

func (c *current) oncodeStatement2(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) calloncodeStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement2(stack["stmtI"])
}

func (c *current) oncodeStatement45() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncodeStatement45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement45()
}

func (c *current) oncodeStatement43() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncodeStatement43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement43()
}

func (c *current) oncodeStatement41(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) calloncodeStatement41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement41(stack["stmtI"])
}

func (c *current) onimplicitCode8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitCode8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitCode8()
}

func (c *current) onimplicitCode6(stmtI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitCode6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitCode6(stack["stmtI"])
}

func (c *current) onimplicitCode1(stmtI any) (any, error) {
	return file.Code{
		Statements: []file.GoCode{stmtI.(file.GoCode)},
		Position:   pos(c),
	}, nil
}

func (p *parser) callonimplicitCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitCode1(stack["stmtI"])
}

func (c *current) onimplicitAhead18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonimplicitAhead18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead18()
}

func (c *current) onimplicitAhead53() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitAhead53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead53()
}

func (c *current) onimplicitAhead51() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitAhead51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead51()
}

func (c *current) onimplicitAhead4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonimplicitAhead4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead4()
}

func (c *current) onimplicitAhead71() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonimplicitAhead71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead71()
}

func (c *current) onimplicitAhead90() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitAhead90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead90()
}

func (c *current) onimplicitAhead88() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitAhead88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead88()
}

func (c *current) onimplicitAhead111() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitAhead111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead111()
}

func (c *current) onimplicitAhead109() (any, error) {
	return pos(c), nil
}

func (p *parser) callonimplicitAhead109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead109()
}

func (c *current) ondeclaration15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callondeclaration15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondeclaration15()
}

func (c *current) ondeclaration48() (any, error) {
	return pos(c), nil
}

func (p *parser) callondeclaration48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondeclaration48()
}

func (c *current) ondeclaration46() (any, error) {
	return pos(c), nil
}

func (p *parser) callondeclaration46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondeclaration46()
}

func (c *current) onvarDecl18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDecl18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDecl18()
}

func (c *current) onvarDecl27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDecl27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDecl27()
}

func (c *current) onvarDeclLine14() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDeclLine14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDeclLine14()
}

func (c *current) onvarDeclLine52() (any, error) {
	return pos(c), nil
}

func (p *parser) callonvarDeclLine52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDeclLine52()
}

func (c *current) onvarDeclLine50() (any, error) {
	return pos(c), nil
}

func (p *parser) callonvarDeclLine50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDeclLine50()
}

func (c *current) onReturn1(errI any) (any, error) {
	return file.Return{
		Err:      errI.(*file.GoCode),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errI"])
}

func (c *current) onreturnErr5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr5()
}

func (c *current) onreturnErr3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr3()
}

func (c *current) onreturnErr2() (any, error) {
	return (*file.GoCode)(nil), nil
}

func (p *parser) callonreturnErr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr2()
}

func (c *current) onreturnErr30() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr30()
}

func (c *current) onreturnErr28(errI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr28(stack["errI"])
}

func (c *current) onreturnErr22(errI any) (any, error) {
	return ptr(errI.(file.GoCode)), nil
}

func (p *parser) callonreturnErr22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr22(stack["errI"])
}

func (c *current) onreturnErr54() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr54()
}

func (c *current) onreturnErr70() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr70()
}

func (c *current) onreturnErr68() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr68()
}

func (c *current) onreturnErr60(errI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreturnErr60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr60(stack["errI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onreturnErr98() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr98()
}

func (c *current) onreturnErr96() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr96()
}

func (c *current) onreturnErr47(errI, startI, unexpectedI, endI any) (any, error) {
	return ptr(errI.(file.GoCode)), newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "unexpected tokens after return value")
}

func (p *parser) callonreturnErr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr47(stack["errI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onreturnErr120() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr120()
}

func (c *current) onreturnErr136() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr136()
}

func (c *current) onreturnErr134() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr134()
}

func (c *current) onreturnErr126(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreturnErr126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr126(stack["startI"], stack["unexpectedI"])
}

func (c *current) onreturnErr164() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr164()
}

func (c *current) onreturnErr162() (any, error) {
	return pos(c), nil
}

func (p *parser) callonreturnErr162() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr162()
}

func (c *current) onreturnErr115(startI, unexpectedI, endI any) (any, error) {
	return (*file.GoCode)(nil), newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected nothing, or an error to be returned")
}

func (p *parser) callonreturnErr115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr115(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onComponent11(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponent11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent11(stack["identI"])
}

func (c *current) onComponent6(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonComponent6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent6(stack["identI"])
}

func (c *current) onComponent22() (any, error) {
	return pos(c), nil
}

func (p *parser) callonComponent22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent22()
}

func (c *current) onComponent17(startI, identI any) (any, error) {
	return invalidIdent(c, "component", startI.(file.Position), concat(identI))
}

func (p *parser) callonComponent17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent17(stack["startI"], stack["identI"])
}

func (c *current) onComponent40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonComponent40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent40()
}

func (c *current) onComponent39() (any, error) {
	return missingIdent(c, "component", "`comp foo()`", 1)
}

func (p *parser) callonComponent39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent39()
}

func (c *current) onComponent1(nameI, paramsI, bodyI any) (any, error) {
	params := optCast[file.Component](paramsI)
	return file.Component{
		Name:     nameI.(file.Ident),
		LParen:   params.LParen,
		Params:   params.Params,
		RParen:   params.RParen,
		Body:     optCast[file.Body](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonComponent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent1(stack["nameI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) oncomponentParamList6() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamList6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList6()
}

func (c *current) oncomponentParamList12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentParamList12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList12()
}

func (c *current) oncomponentParamList13() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamList13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList13()
}

func (c *current) oncomponentParamList19() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParamList19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList19()
}

func (c *current) oncomponentParamList4() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamList4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList4()
}

func (c *current) oncomponentParamList39() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParamList39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList39()
}

func (c *current) oncomponentParamList44() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamList44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList44()
}

func (c *current) oncomponentParamList46(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentParamList46() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList46(stack["endI"])
}

func (c *current) oncomponentParamList28(endI any) (any, error) {
	return endI, nil
}

func (p *parser) calloncomponentParamList28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList28(stack["endI"])
}

func (c *current) oncomponentParamList48() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamList48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList48()
}

func (c *current) oncomponentParamList47() (any, error) {
	return unclosedList(c, "component parameters")
}

func (p *parser) calloncomponentParamList47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList47()
}

func (c *current) oncomponentParamList2(paramsI, rParenI any) (any, error) {
	return file.Component{
		LParen: pos(c),
		Params: optCast[[]file.ComponentParam](paramsI),
		RParen: rParenI.(file.Position),
	}, nil
}

func (p *parser) calloncomponentParamList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList2(stack["paramsI"], stack["rParenI"])
}

func (c *current) oncomponentParamList55() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamList55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList55()
}

func (c *current) oncomponentParamList54() (any, error) {
	return file.Component{}, &fileerr.Error{
		Message: "component: missing parameters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a parameter list",
		}),
		Example: "`comp foo(bar string, baz: 123)`",
	}
}

func (p *parser) calloncomponentParamList54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList54()
}

func (c *current) oncomponentParams15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParams15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParams15()
}

func (c *current) oncomponentParams1(firstI, restI any) (any, error) {
	return collectList[file.ComponentParam](firstI, restI, -1), nil
}

func (p *parser) calloncomponentParams1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParams1(stack["firstI"], stack["restI"])
}

func (c *current) oncomponentParam5(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) calloncomponentParam5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam5(stack["identI"])
}

func (c *current) oncomponentParam11() (any, error) {
	return invalidIdent(c, "component parameter", pos(c), string(c.text))
}

func (p *parser) calloncomponentParam11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam11()
}

func (c *current) oncomponentParam18() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParam18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam18()
}

func (c *current) oncomponentParam1(nameI, posI, typeI, defaultI any) (any, error) {
	paramDefault := optCast[file.ComponentParam](defaultI)

	p := file.ComponentParam{
		Name:     nameI.(file.Ident),
		Type:     optCastPtr[file.Type](typeI),
		Colon:    paramDefault.Colon,
		Default:  paramDefault.Default,
		Position: pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &fileerr.Error{
			Message: "component parameter: need either a type or a default",
			ErrorAnnotation: anno(c, annotation{
				Start:       posI.(file.Position),
				StartOffset: 1,
				Annotation:  "expected either a type or a default",
			}),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "give this parameter a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this parameter a default with an inferrable type", Code: "`" + p.Name.Ident + ": \"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) calloncomponentParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam1(stack["nameI"], stack["posI"], stack["typeI"], stack["defaultI"])
}

func (c *current) oncomponentParamType1(tI any) (any, error) {
	return tI, nil
}

func (p *parser) calloncomponentParamType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamType1(stack["tI"])
}

func (c *current) oncomponentParamDefault1(exprI any) (any, error) {
	return file.ComponentParam{
		Colon:   ptr(pos(c)),
		Default: exprI.(*file.GoCode),
	}, nil
}

func (p *parser) calloncomponentParamDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefault1(stack["exprI"])
}

func (c *current) oncomponentParamDefaultValue2(exprI any) (any, error) {
	return ptr(exprI.(file.GoCode)), nil
}

func (p *parser) calloncomponentParamDefaultValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue2(stack["exprI"])
}

func (c *current) oncomponentParamDefaultValue6() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentParamDefaultValue6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue6()
}

func (c *current) oncomponentParamDefaultValue5() (any, error) {
	return (*file.GoCode)(nil), &fileerr.Error{
		Message: "component param: missing default",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				Annotation: "expected a default because of this `:`",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "remove the `:`, if you didn't mean to define a default"},
		},
	}
}

func (p *parser) calloncomponentParamDefaultValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue5()
}

func (c *current) onComponentCall1(headerI, bodyI any) (any, error) {
	cc := headerI.(file.ComponentCall)
	cc.Body = optCast[file.Body](bodyI)
	cc.Position = pos(c)
	return cc, nil
}

func (p *parser) callonComponentCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCall1(stack["headerI"], stack["bodyI"])
}

func (c *current) onComponentCallHeader9(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponentCallHeader9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader9(stack["identI"])
}

func (c *current) onComponentCallHeader5(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonComponentCallHeader5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader5(stack["identI"])
}

func (c *current) onComponentCallHeader17(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponentCallHeader17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader17(stack["identI"])
}

func (c *current) onComponentCallHeader23(identI any) (any, error) {
	return invalidIdent(c, "component call", pos(c), concat(identI))
}

func (p *parser) callonComponentCallHeader23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader23(stack["identI"])
}

func (c *current) onComponentCallHeader37() (any, error) {
	return pos(c), nil
}

func (p *parser) callonComponentCallHeader37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader37()
}

func (c *current) onComponentCallHeader36() (any, error) {
	return missingIdent(c, "component call", "`+foo()`", 1)
}

func (p *parser) callonComponentCallHeader36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader36()
}

func (c *current) onComponentCallHeader1(namespaceI, nameI, argsI any) (any, error) {
	cc := argsI.(file.ComponentCall)
	cc.Namespace = optCastPtr[file.Ident](namespaceI)
	cc.Name = nameI.(file.Ident)
	return cc, nil
}

func (p *parser) callonComponentCallHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader1(stack["namespaceI"], stack["nameI"], stack["argsI"])
}

func (c *current) oncomponentArgList6() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgList6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList6()
}

func (c *current) oncomponentArgList12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentArgList12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList12()
}

func (c *current) oncomponentArgList13() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgList13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList13()
}

func (c *current) oncomponentArgList19() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgList19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList19()
}

func (c *current) oncomponentArgList4() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgList4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList4()
}

func (c *current) oncomponentArgList39() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgList39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList39()
}

func (c *current) oncomponentArgList44() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgList44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList44()
}

func (c *current) oncomponentArgList46(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentArgList46() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList46(stack["endI"])
}

func (c *current) oncomponentArgList28(endI any) (any, error) {
	return endI, nil
}

func (p *parser) calloncomponentArgList28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList28(stack["endI"])
}

func (c *current) oncomponentArgList48() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgList48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList48()
}

func (c *current) oncomponentArgList47() (any, error) {
	return unclosedList(c, "component arguments")
}

func (p *parser) calloncomponentArgList47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList47()
}

func (c *current) oncomponentArgList2(argsI, rParenI any) (any, error) {
	return file.ComponentCall{
		LParen: pos(c),
		Args:   optCast[[]file.ComponentArg](argsI),
		RParen: rParenI.(file.Position),
	}, nil
}

func (p *parser) calloncomponentArgList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList2(stack["argsI"], stack["rParenI"])
}

func (c *current) oncomponentArgList55() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgList55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList55()
}

func (c *current) oncomponentArgList54() (any, error) {
	return file.ComponentCall{}, &fileerr.Error{
		Message: "component call: missing arguments",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected an argument list",
		}),
		Example: "`+foo(bar: \"foo\", baz: 123)`",
	}
}

func (p *parser) calloncomponentArgList54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList54()
}

func (c *current) oncomponentArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgs15()
}

func (c *current) oncomponentArgs1(firstI, restI any) (any, error) {
	return collectList[file.ComponentArg](firstI, restI, -1), nil
}

func (p *parser) calloncomponentArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgs1(stack["firstI"], stack["restI"])
}

func (c *current) oncomponentArg5(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) calloncomponentArg5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg5(stack["identI"])
}

func (c *current) oncomponentArg11() (any, error) {
	return invalidIdent(c, "component argument", pos(c), string(c.text))
}

func (p *parser) calloncomponentArg11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg11()
}

func (c *current) oncomponentArg1(nameI, valI any) (any, error) {
	return file.ComponentArg{
		Name:  nameI.(file.Ident),
		Value: optCast[file.Expression](valI),
	}, nil
}

func (p *parser) calloncomponentArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg1(stack["nameI"], stack["valI"])
}

func (c *current) oncomponentArgValue9() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgValue9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue9()
}

func (c *current) oncomponentArgValue2(exprI any) (any, error) {
	return exprI, nil
}

func (p *parser) calloncomponentArgValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue2(stack["exprI"])
}

func (c *current) oncomponentArgValue22() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentArgValue22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue22()
}

func (c *current) oncomponentArgValue15(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "missing component argument value",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "expected a value",
		}),
		Example: "`argName: 123`",
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "remember to always write the name of the argument before it's value"},
		},
	}
}

func (p *parser) calloncomponentArgValue15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue15(stack["posI"])
}

func (c *current) oncomponentCallBody5() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncomponentCallBody5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody5()
}

func (c *current) oncomponentCallBody4() (any, error) {
	return nil, nil
}

func (p *parser) calloncomponentCallBody4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody4()
}

func (c *current) onUnderscoreBlockShorthand1(bodyI any) (any, error) {
	return file.UnderscoreBlockShorthand{
		Body:     optCast[file.Body](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonUnderscoreBlockShorthand1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnderscoreBlockShorthand1(stack["bodyI"])
}

func (c *current) onBlock14(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock14(stack["identI"])
}

func (c *current) onBlock9(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonBlock9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock9(stack["identI"])
}

func (c *current) onBlock25() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBlock25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock25()
}

func (c *current) onBlock20(startI, identI any) (any, error) {
	return invalidIdent(c, "block", startI.(file.Position), concat(identI))
}

func (p *parser) callonBlock20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock20(stack["startI"], stack["identI"])
}

func (c *current) onBlock43() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBlock43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock43()
}

func (c *current) onBlock42() (any, error) {
	return missingIdent(c, "block", "`block bark [ woof ]`", 1)
}

func (p *parser) callonBlock42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock42()
}

func (c *current) onBlock4(nameI any) (any, error) {
	return file.Block{
		Name:     nameI.(file.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock4(stack["nameI"])
}

func (c *current) onBlock1(blockI, bodyI any) (any, error) {
	block := blockI.(file.Block)
	block.Body = bodyI.(file.Scope)
	return block, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["blockI"], stack["bodyI"])
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI any) (any, error) {
	return file.If{
		Condition: condI.(file.IfExpression),
		Then:      optCast[file.Body](thenI),
		ElseIfs:   sliceOf[file.ElseIf](elseIfsI),
		Else:      optCastPtr[file.Else](elseI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonIf1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIf7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonElseIf7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf7()
}

func (c *current) onElseIf1(condI, thenI any) (any, error) {
	return file.ElseIf{
		Condition: condI.(file.IfExpression),
		Then:      optCast[file.Body](thenI),
		Position:  pos(c),
	}, nil
}

func (p *parser) callonElseIf1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["condI"], stack["thenI"])
}

func (c *current) onElse7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonElse7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse7()
}

func (c *current) onElse1(thenI any) (any, error) {
	return file.Else{
		Then:     optCast[file.Body](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onifCondition2(condI any) (any, error) {
	return condI, nil
}

func (p *parser) callonifCondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition2(stack["condI"])
}

func (c *current) onifCondition11() (any, error) {
	return pos(c), nil
}

func (p *parser) callonifCondition11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition11()
}

func (c *current) onifCondition9(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an expression",
		}),
	}
}

func (p *parser) callonifCondition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition9(stack["posI"])
}

func (c *current) onifCondition8(posI any) (any, error) {
	return file.IfExpression{}, nil
}

func (p *parser) callonifCondition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCondition8(stack["posI"])
}

func (c *current) onSwitch7() (any, error) {
	return pos(c), nil
}

func (p *parser) callonSwitch7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch7()
}

func (c *current) onSwitch1(comparatorI, endI, casesI any) (any, error) {
	s := file.Switch{
		Comparator: comparatorI.(*file.GoCode),
		Cases:      casesI.([]file.Case),
		Position:   pos(c),
	}

	for _, c := range s.Cases {
		if c.Expression != nil {
			return s, nil
		}
	}

	return s, &fileerr.Error{
		Message: "switch: no cases",
		ErrorAnnotation: anno(c, annotation{
			ContextEndDelta: 1,
			Start:           pos(c),
			End:             endI.(file.Position),
			Annotation:      "expected switch to have at least one non-default case",
		}),
	}
}

func (p *parser) callonSwitch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["endI"], stack["casesI"])
}

func (c *current) onswitchComparator2() (any, error) {
	return (*file.GoCode)(nil), nil
}

func (p *parser) callonswitchComparator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator8(compI any) (any, error) {
	return ptr(compI.(file.GoCode)), nil
}

func (p *parser) callonswitchComparator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator8(stack["compI"])
}

func (c *current) onswitchComparator25() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchComparator25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator25()
}

func (c *current) onswitchComparator34() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchComparator34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator34()
}

func (c *current) onswitchComparator18(compI, startI, endI any) (any, error) {
	return ptr(compI.(file.GoCode)),
		newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "switch comparator terminated early")
}

func (p *parser) callonswitchComparator18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator18(stack["compI"], stack["startI"], stack["endI"])
}

func (c *current) onswitchCases5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchCases5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases5()
}

func (c *current) onswitchCases11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonswitchCases11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases11()
}

func (c *current) onswitchCases12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchCases12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases12()
}

func (c *current) onswitchCases18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases18()
}

func (c *current) onswitchCases3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchCases3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases3()
}

func (c *current) onswitchCases26() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases26()
}

func (c *current) onswitchCases39() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases39()
}

func (c *current) onswitchCases51() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCases51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases51()
}

func (c *current) onswitchCases56() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchCases56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases56()
}

func (c *current) onswitchCases58(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonswitchCases58() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases58(stack["endI"])
}

func (c *current) onswitchCases45(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonswitchCases45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases45(stack["endI"])
}

func (c *current) onswitchCases60() (any, error) {
	return pos(c), nil
}

func (p *parser) callonswitchCases60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases60()
}

func (c *current) onswitchCases59() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "unclosed `{`",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "expected a closing `}` for this `{`",
		}),
	}
}

func (p *parser) callonswitchCases59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases59()
}

func (c *current) onswitchCases1(itms, endI any) (any, error) {
	cases := sliceOf[file.Case](itms)

	var firstDefault *file.Case
	for _, ca := range cases {
		if ca.Expression != nil {
			continue
		}
		if firstDefault == nil {
			firstDefault = &ca
			continue
		}

		return cases, &fileerr.Error{
			Message: "multiple default cases in switch",
			ErrorAnnotation: anno(c, annotation{
				Start:      ca.Position,
				Len:        len("default"),
				Annotation: "second default case",
			}),
			HintAnnotations: []fileerr.Annotation{
				anno(c, annotation{
					Start:      firstDefault.Position,
					Len:        len("default"),
					Annotation: "first default case",
				}),
			},
		}
	}

	return cases, nil
}

func (p *parser) callonswitchCases1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases1(stack["itms"], stack["endI"])
}

func (c *current) onpreFirstCase1() (any, error) {
	return nil, &fileerr.Error{
		Message: "switch: unexpected tokens",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a `case` or `default`",
		}),
	}
}

func (p *parser) callonpreFirstCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreFirstCase1()
}

func (c *current) onswitchCase7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCase7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCase7()
}

func (c *current) onswitchCase1(caseI any) (any, error) {
	return caseI, nil
}

func (p *parser) callonswitchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCase1(stack["caseI"])
}

func (c *current) onCase12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonCase12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase12()
}

func (c *current) onCase15() (any, error) {
	return pos(c), nil
}

func (p *parser) callonCase15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase15()
}

func (c *current) onCase14() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "switch case: missing colon",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a colon",
		}),
	}
}

func (p *parser) callonCase14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase14()
}

func (c *current) onCase1(condI, colonI, thenI any) (any, error) {
	return file.Case{
		Expression: condI.(file.Expression),
		Colon:      colonI.(file.Position),
		Then:       optCast[file.Scope](thenI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["colonI"], stack["thenI"])
}

func (c *current) onDefault8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonDefault8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault8()
}

func (c *current) onDefault11() (any, error) {
	return pos(c), nil
}

func (p *parser) callonDefault11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault11()
}

func (c *current) onDefault10() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "switch case: missing colon",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a colon",
		}),
	}
}

func (p *parser) callonDefault10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault10()
}

func (c *current) onDefault1(colonI, thenI any) (any, error) {
	return file.Case{
		Colon:    colonI.(file.Position),
		Then:     optCast[file.Scope](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["colonI"], stack["thenI"])
}

func (c *current) oncaseCondition2(condI any) (any, error) {
	return condI, nil
}

func (p *parser) calloncaseCondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition2(stack["condI"])
}

func (c *current) oncaseCondition11() (any, error) {
	return pos(c), nil
}

func (p *parser) calloncaseCondition11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition11()
}

func (c *current) oncaseCondition9(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "missing condition",
		ErrorAnnotation: anno(c, annotation{
			Start:       posI.(file.Position),
			StartOffset: 1,
			Annotation:  "expected an expression",
		}),
	}
}

func (p *parser) calloncaseCondition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition9(stack["posI"])
}

func (c *current) oncaseCondition8(posI any) (any, error) {
	return nil, nil
}

func (p *parser) calloncaseCondition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition8(stack["posI"])
}

func (c *current) onswitchThen1(itmsI any) (any, error) {
	return file.Scope{Items: sliceOf[file.ScopeItem](itmsI)}, nil
}

func (p *parser) callonswitchThen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen1(stack["itmsI"])
}

func (c *current) onswitchScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonswitchScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchScopeItem1(stack["itmI"])
}

func (c *current) onFor1(exprI, bodyI any) (any, error) {
	return file.For{
		Expression: optCast[file.ForExpression](exprI),
		Body:       optCast[file.Body](bodyI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonFor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onforExpression1(condI any) (any, error) {
	return condI, nil
}

func (p *parser) callonforExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onforExpression1(stack["condI"])
}

func (c *current) onElement1(nameI, voidI, attrsI, bodyI any) (any, error) {
	return file.Element{
		Name:       concat(nameI),
		Attributes: optCast[[]file.AttributeCollection](attrsI),
		Body:       optCast[file.Body](bodyI),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["voidI"], stack["attrsI"], stack["bodyI"])
}

func (c *current) onRawElement1(body any) (any, error) {
	return file.RawElement{
		Body:     body.(file.BracketText),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawElement1(stack["body"])
}

func (c *current) onrawElementBody10() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody10()
}

func (c *current) onrawElementBody8(btI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody8(stack["btI"])
}

func (c *current) onrawElementBody2(btI any) (any, error) {
	return btI, nil
}

func (p *parser) callonrawElementBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody2(stack["btI"])
}

func (c *current) onrawElementBody32() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody32()
}

func (c *current) onrawElementBody27(posI any) (any, error) {
	return file.BracketText{}, &fileerr.Error{
		Message: "`!raw` with scope",
		ErrorAnnotation: anno(c, annotation{
			Start:      posI.(file.Position),
			Annotation: "the `!raw` element must have bracketed text as body",
		}),
		ShouldBe: "`!raw [ ... ]`",
	}
}

func (p *parser) callonrawElementBody27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody27(stack["posI"])
}

func (c *current) onrawElementBody42() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody42()
}

func (c *current) onrawElementBody40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody40()
}

func (c *current) onrawElementBody39() (any, error) {
	return file.BracketText{}, &fileerr.Error{
		Message: "empty `!raw` element",
		ErrorAnnotation: anno(c, annotation{
			Start:       pos(c),
			StartOffset: 1,
			Annotation:  "expected a body",
		}),
		ShouldBe: "`!raw [ ... ]`",
	}
}

func (p *parser) callonrawElementBody39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody39()
}

func (c *current) onrawElementBody64() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody64()
}

func (c *current) onrawElementBody80() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody80()
}

func (c *current) onrawElementBody78() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody78()
}

func (c *current) onrawElementBody70(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonrawElementBody70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody70(stack["startI"], stack["unexpectedI"])
}

func (c *current) onrawElementBody108() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody108()
}

func (c *current) onrawElementBody106() (any, error) {
	return pos(c), nil
}

func (p *parser) callonrawElementBody106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody106()
}

func (c *current) onrawElementBody59(startI, unexpectedI, endI any) (any, error) {
	return file.BracketText{},
		newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected the body of the `!raw` element")
}

func (p *parser) callonrawElementBody59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody59(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onIfExpression1(stmtI, condI any) (any, error) {
	return file.IfExpression{
		Statement: optCastPtr[file.GoCode](stmtI),
		Condition: optCast[file.Expression](condI),
	}, nil
}

func (p *parser) callonIfExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfExpression1(stack["stmtI"], stack["condI"])
}

func (c *current) ongoIfConditionStatement12() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoIfConditionStatement12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfConditionStatement12()
}

func (c *current) ongoIfConditionStatement10(stmtI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callongoIfConditionStatement10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfConditionStatement10(stack["stmtI"])
}

func (c *current) ongoIfConditionStatement33() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoIfConditionStatement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfConditionStatement33()
}

func (c *current) ongoIfConditionStatement1(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) callongoIfConditionStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfConditionStatement1(stack["stmtI"])
}

func (c *current) onRangeExpression8(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression8(stack["identI"])
}

func (c *current) onRangeExpression22(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonRangeExpression22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression22(stack["identI"])
}

func (c *current) onRangeExpression31() (any, error) {
	return pos(c), nil
}

func (p *parser) callonRangeExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression31()
}

func (c *current) onRangeExpression5(var1I, var2I, eqPosI, declaresI any) (any, error) {
	return file.RangeExpression{
		Var1:      ptr(var1I.(file.Ident)),
		Var2:      optGetTuplePtr[file.Ident](var2I, -1),
		EqualSign: eqPosI.(file.Position),
		Declares:  declaresI != nil,
	}, nil
}

func (p *parser) callonRangeExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onRangeExpression1(varsI, orderedI, exprI any) (any, error) {
	e := optCast[file.RangeExpression](varsI)
	e.Ordered = orderedI != nil
	e.RangeExpression = optCast[file.Expression](exprI)
	e.Position = pos(c)
	return e, nil
}

func (p *parser) callonRangeExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRangeExpression1(stack["varsI"], stack["orderedI"], stack["exprI"])
}

func (c *current) onChainExpression4() (any, error) {
	return len(c.text), nil
}

func (p *parser) callonChainExpression4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression4()
}

func (c *current) onChainExpression19() (any, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpression19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression19()
}

func (c *current) onChainExpression27(derefsI, rootI, checkRootI, chainI, defaultI, endPosI any) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(sliceOf[file.ChainExpressionItem](chainI)) || defaultI != nil, nil
}

func (p *parser) callonChainExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression27(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression1(derefsI, rootI, checkRootI, chainI, defaultI, endPosI any) (any, error) {
	expr := optCast[file.ChainExpression](defaultI)
	expr.Root = rootI.(file.RawGoCode)
	expr.CheckRoot = checkRootI != nil
	expr.Chain = sliceOf[file.ChainExpressionItem](chainI)
	expr.DerefCount = derefsI.(int)
	expr.Position = pos(c)
	return expr, nil
}

func (p *parser) callonChainExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression1(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onchainExpressionTrail8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonchainExpressionTrail8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionTrail8()
}

func (c *current) onchainExpressionTrail4(endI any) (any, error) {
	return nil, &fileerr.Error{
		Message: "malformed chain expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endI.(file.Position),
			Annotation: "unable to parse this line or the lines below",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      pos(c),
				End:        endI.(file.Position),
				Annotation: "this is valid",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "did you mean to put a default? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonchainExpressionTrail4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionTrail4(stack["endI"])
}

func (c *current) onchainExpressionRoot1() (any, error) {
	return file.RawGoCode{
		Code:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot1()
}

func (c *current) onchainExpressionDefault8() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonchainExpressionDefault8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault8()
}

func (c *current) onchainExpressionDefault1(exprI any) (any, error) {
	return file.ChainExpression{
		DefaultOperator: ptr(pos(c)),
		Default:         ptr(exprI.(file.GoCode)),
	}, nil
}

func (p *parser) callonchainExpressionDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault1(stack["exprI"])
}

func (c *current) onChainExpressionItem10() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonChainExpressionItem10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem10()
}

func (c *current) onChainExpressionItem15(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem15(stack["identI"])
}

func (c *current) onChainExpressionItem3(identI, checkI any) (any, error) {
	return file.DotIdentExpression{
		Ident:    identI.(file.Ident),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionItem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionItem29() (any, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem29()
}

func (c *current) onChainExpressionItem44(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem44(stack["identI"])
}

func (c *current) onChainExpressionItem40(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonChainExpressionItem40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem40(stack["identI"])
}

func (c *current) onChainExpressionItem51(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionItem51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem51(stack["identI"])
}

func (c *current) onChainExpressionItem60() (any, error) {
	return pos(c), nil
}

func (p *parser) callonChainExpressionItem60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem60()
}

func (c *current) onChainExpressionItem25(lParenI, ptrsI, packageI, typeI, rParenI, checkI any) (any, error) {
	return file.TypeAssertionExpression{
		LParen:       lParenI.(file.Position),
		PointerCount: len(slice(ptrsI)),
		Package:      optCastPtr[file.Ident](packageI),
		Type:         typeI.(file.Ident),
		RParen:       rParenI.(file.Position),
		Check:        checkI != nil,
	}, nil
}

func (p *parser) callonChainExpressionItem25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionItem25(stack["lParenI"], stack["ptrsI"], stack["packageI"], stack["typeI"], stack["rParenI"], stack["checkI"])
}

func (c *current) onIndexExpression5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression5()
}

func (c *current) onIndexExpression11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonIndexExpression11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression11()
}

func (c *current) onIndexExpression12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression12()
}

func (c *current) onIndexExpression18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonIndexExpression18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression18()
}

func (c *current) onIndexExpression3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3()
}

func (c *current) onIndexExpression40() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonIndexExpression40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression40()
}

func (c *current) onIndexExpression45() (any, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression45()
}

func (c *current) onIndexExpression47(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonIndexExpression47() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression47(stack["endI"])
}

func (c *current) onIndexExpression29(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonIndexExpression29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression29(stack["endI"])
}

func (c *current) onIndexExpression49() (any, error) {
	return pos(c), nil
}

func (p *parser) callonIndexExpression49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression49()
}

func (c *current) onIndexExpression48() (any, error) {
	return unclosedIndex(c, "index")
}

func (p *parser) callonIndexExpression48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression48()
}

func (c *current) onIndexExpression1(exprI, checkIndexI, rBracketI, checkValueI any) (any, error) {
	return file.IndexExpression{
		LBracket:   pos(c),
		Index:      exprI.(file.GoCode),
		RBracket:   rBracketI.(file.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["exprI"], stack["checkIndexI"], stack["rBracketI"], stack["checkValueI"])
}

func (c *current) onParenExpression5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression5()
}

func (c *current) onParenExpression11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonParenExpression11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression11()
}

func (c *current) onParenExpression12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression12()
}

func (c *current) onParenExpression18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonParenExpression18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression18()
}

func (c *current) onParenExpression3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3()
}

func (c *current) onParenExpression38() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonParenExpression38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression38()
}

func (c *current) onParenExpression43() (any, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression43()
}

func (c *current) onParenExpression45(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonParenExpression45() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression45(stack["endI"])
}

func (c *current) onParenExpression27(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonParenExpression27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression27(stack["endI"])
}

func (c *current) onParenExpression47() (any, error) {
	return pos(c), nil
}

func (p *parser) callonParenExpression47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression47()
}

func (c *current) onParenExpression46() (any, error) {
	return unclosedList(c, "parentheses")
}

func (p *parser) callonParenExpression46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression46()
}

func (c *current) onParenExpression1(argsI, rParen, checkI any) (any, error) {
	return file.ParenExpression{
		LParen: pos(c),
		Args:   optCast[[]file.GoCode](argsI),
		RParen: rParen.(file.Position),
		Check:  checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["argsI"], stack["rParen"], stack["checkI"])
}

func (c *current) onparenExpressionArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonparenExpressionArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs15()
}

func (c *current) onparenExpressionArgs1(firstI, restI any) (any, error) {
	return collectList[file.GoCode](firstI, restI, -1), nil
}

func (p *parser) callonparenExpressionArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onGoExpression20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression20()
}

func (c *current) onGoExpression33() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression33()
}

func (c *current) onGoExpression39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGoExpression39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression39()
}

func (c *current) onGoExpression40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression40()
}

func (c *current) onGoExpression46() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression46()
}

func (c *current) onGoExpression31() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression31()
}

func (c *current) onGoExpression51(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoExpression51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression51(stack["identI"])
}

func (c *current) onGoExpression70() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression70()
}

func (c *current) onGoExpression75() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression75()
}

func (c *current) onGoExpression77(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGoExpression77() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression77(stack["endI"])
}

func (c *current) onGoExpression59(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonGoExpression59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression59(stack["endI"])
}

func (c *current) onGoExpression79() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression79()
}

func (c *current) onGoExpression78() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonGoExpression78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression78()
}

func (c *current) onGoExpression25(lParenI, identI, rParenI any) (any, error) {
	return file.BlockFunction{
		LParen:   lParenI.(file.Position),
		Block:    identI.(file.Ident),
		RParen:   rParenI.(file.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGoExpression25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onGoExpression7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{file.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonGoExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression7(stack["prefixI"], stack["bfI"])
}

func (c *current) onGoExpression99() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression99()
}

func (c *current) onGoExpression117() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression117()
}

func (c *current) onGoExpression138() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression138()
}

func (c *current) onGoExpression170() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression170()
}

func (c *current) onGoExpression177() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression177()
}

func (c *current) onGoExpression188() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression188()
}

func (c *current) onGoExpression195() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression195()
}

func (c *current) onGoExpression200() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression200()
}

func (c *current) onGoExpression215() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression215()
}

func (c *current) onGoExpression236() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoExpression236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression236()
}

func (c *current) onGoExpression268() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression268() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression268()
}

func (c *current) onGoExpression275() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression275() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression275()
}

func (c *current) onGoExpression286() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression286() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression286()
}

func (c *current) onGoExpression293() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression293()
}

func (c *current) onGoExpression298() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression298()
}

func (c *current) onGoExpression302() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoExpression302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression302()
}

func (c *current) onGoExpression203(valsI, endPosI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression203() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression203(stack["valsI"], stack["endPosI"])
}

func (c *current) onGoExpression314() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression314() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression314()
}

func (c *current) onGoExpression85() (any, error) {
	return file.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoExpression85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression85()
}

func (c *current) onGoExpression1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonGoExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["codesI"])
}

func (c *current) onnestedGoCode20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode20()
}

func (c *current) onnestedGoCode33() (any, error) {
	return pos(c), nil
}

func (p *parser) callonnestedGoCode33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode33()
}

func (c *current) onnestedGoCode39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonnestedGoCode39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode39()
}

func (c *current) onnestedGoCode40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonnestedGoCode40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode40()
}

func (c *current) onnestedGoCode46() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode46()
}

func (c *current) onnestedGoCode31() (any, error) {
	return pos(c), nil
}

func (p *parser) callonnestedGoCode31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode31()
}

func (c *current) onnestedGoCode51(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonnestedGoCode51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode51(stack["identI"])
}

func (c *current) onnestedGoCode70() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode70()
}

func (c *current) onnestedGoCode75() (any, error) {
	return pos(c), nil
}

func (p *parser) callonnestedGoCode75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode75()
}

func (c *current) onnestedGoCode77(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonnestedGoCode77() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode77(stack["endI"])
}

func (c *current) onnestedGoCode59(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonnestedGoCode59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode59(stack["endI"])
}

func (c *current) onnestedGoCode79() (any, error) {
	return pos(c), nil
}

func (p *parser) callonnestedGoCode79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode79()
}

func (c *current) onnestedGoCode78() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonnestedGoCode78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode78()
}

func (c *current) onnestedGoCode25(lParenI, identI, rParenI any) (any, error) {
	return file.BlockFunction{
		LParen:   lParenI.(file.Position),
		Block:    identI.(file.Ident),
		RParen:   rParenI.(file.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonnestedGoCode25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onnestedGoCode7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{file.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonnestedGoCode7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode7(stack["prefixI"], stack["bfI"])
}

func (c *current) onnestedGoCode99() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode99()
}

func (c *current) onnestedGoCode117() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode117()
}

func (c *current) onnestedGoCode138() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode138()
}

func (c *current) onnestedGoCode170() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonnestedGoCode170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode170()
}

func (c *current) onnestedGoCode177() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode177()
}

func (c *current) onnestedGoCode188() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode188()
}

func (c *current) onnestedGoCode195() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode195()
}

func (c *current) onnestedGoCode200() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode200()
}

func (c *current) onnestedGoCode215() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode215()
}

func (c *current) onnestedGoCode236() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonnestedGoCode236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode236()
}

func (c *current) onnestedGoCode268() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonnestedGoCode268() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode268()
}

func (c *current) onnestedGoCode275() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode275() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode275()
}

func (c *current) onnestedGoCode286() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode286() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode286()
}

func (c *current) onnestedGoCode293() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode293()
}

func (c *current) onnestedGoCode298() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode298()
}

func (c *current) onnestedGoCode302() (any, error) {
	return pos(c), nil
}

func (p *parser) callonnestedGoCode302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode302()
}

func (c *current) onnestedGoCode203(valsI, endPosI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonnestedGoCode203() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode203(stack["valsI"], stack["endPosI"])
}

func (c *current) onnestedGoCode312() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode312() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode312()
}

func (c *current) onnestedGoCode85() (any, error) {
	return file.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonnestedGoCode85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode85()
}

func (c *current) onnestedGoCode1(exprsI any) (any, error) {
	return exprsI, nil
}

func (p *parser) callonnestedGoCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode1(stack["exprsI"])
}

func (c *current) ongoParenExpr11() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr11()
}

func (c *current) ongoParenExpr17() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr17() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr17()
}

func (c *current) ongoParenExpr5() (any, error) {
	return file.RawGoCode{Code: "(", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr5()
}

func (c *current) ongoParenExpr27() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr27()
}

func (c *current) ongoParenExpr24() (any, error) {
	return file.RawGoCode{Code: ")", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr24()
}

func (c *current) ongoParenExpr29() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr29()
}

func (c *current) ongoParenExpr28() (any, error) {
	return unclosedParen(c, "(", ")")
}

func (p *parser) callongoParenExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr28()
}

func (c *current) ongoParenExpr2(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr2(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) ongoParenExpr44() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr44()
}

func (c *current) ongoParenExpr50() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr50()
}

func (c *current) ongoParenExpr38() (any, error) {
	return file.RawGoCode{Code: "{", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr38()
}

func (c *current) ongoParenExpr60() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr60()
}

func (c *current) ongoParenExpr57() (any, error) {
	return file.RawGoCode{Code: "}", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr57()
}

func (c *current) ongoParenExpr62() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr62()
}

func (c *current) ongoParenExpr61() (any, error) {
	return unclosedParen(c, "{", "}")
}

func (p *parser) callongoParenExpr61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr61()
}

func (c *current) ongoParenExpr35(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr35(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) ongoParenExpr77() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr77()
}

func (c *current) ongoParenExpr83() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr83() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr83()
}

func (c *current) ongoParenExpr71() (any, error) {
	return file.RawGoCode{Code: "[", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr71()
}

func (c *current) ongoParenExpr93() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr93() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr93()
}

func (c *current) ongoParenExpr90() (any, error) {
	return file.RawGoCode{Code: "]", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr90()
}

func (c *current) ongoParenExpr95() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoParenExpr95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr95()
}

func (c *current) ongoParenExpr94() (any, error) {
	return unclosedParen(c, "[", "]")
}

func (p *parser) callongoParenExpr94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr94()
}

func (c *current) ongoParenExpr68(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr68(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onConditionalGoExpression20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression20()
}

func (c *current) onConditionalGoExpression33() (any, error) {
	return pos(c), nil
}

func (p *parser) callonConditionalGoExpression33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression33()
}

func (c *current) onConditionalGoExpression39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonConditionalGoExpression39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression39()
}

func (c *current) onConditionalGoExpression40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonConditionalGoExpression40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression40()
}

func (c *current) onConditionalGoExpression46() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression46()
}

func (c *current) onConditionalGoExpression31() (any, error) {
	return pos(c), nil
}

func (p *parser) callonConditionalGoExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression31()
}

func (c *current) onConditionalGoExpression51(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonConditionalGoExpression51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression51(stack["identI"])
}

func (c *current) onConditionalGoExpression70() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression70()
}

func (c *current) onConditionalGoExpression75() (any, error) {
	return pos(c), nil
}

func (p *parser) callonConditionalGoExpression75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression75()
}

func (c *current) onConditionalGoExpression77(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonConditionalGoExpression77() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression77(stack["endI"])
}

func (c *current) onConditionalGoExpression59(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonConditionalGoExpression59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression59(stack["endI"])
}

func (c *current) onConditionalGoExpression79() (any, error) {
	return pos(c), nil
}

func (p *parser) callonConditionalGoExpression79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression79()
}

func (c *current) onConditionalGoExpression78() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonConditionalGoExpression78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression78()
}

func (c *current) onConditionalGoExpression25(lParenI, identI, rParenI any) (any, error) {
	return file.BlockFunction{
		LParen:   lParenI.(file.Position),
		Block:    identI.(file.Ident),
		RParen:   rParenI.(file.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonConditionalGoExpression25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onConditionalGoExpression7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{file.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonConditionalGoExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression7(stack["prefixI"], stack["bfI"])
}

func (c *current) onConditionalGoExpression99() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression99()
}

func (c *current) onConditionalGoExpression117() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression117()
}

func (c *current) onConditionalGoExpression138() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression138()
}

func (c *current) onConditionalGoExpression170() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression170()
}

func (c *current) onConditionalGoExpression177() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression177()
}

func (c *current) onConditionalGoExpression188() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression188()
}

func (c *current) onConditionalGoExpression195() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression195()
}

func (c *current) onConditionalGoExpression200() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression200()
}

func (c *current) onConditionalGoExpression215() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression215()
}

func (c *current) onConditionalGoExpression236() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonConditionalGoExpression236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression236()
}

func (c *current) onConditionalGoExpression268() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression268() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression268()
}

func (c *current) onConditionalGoExpression275() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression275() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression275()
}

func (c *current) onConditionalGoExpression286() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression286() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression286()
}

func (c *current) onConditionalGoExpression293() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression293()
}

func (c *current) onConditionalGoExpression298() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression298()
}

func (c *current) onConditionalGoExpression302() (any, error) {
	return pos(c), nil
}

func (p *parser) callonConditionalGoExpression302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression302()
}

func (c *current) onConditionalGoExpression203(valsI, endPosI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression203() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression203(stack["valsI"], stack["endPosI"])
}

func (c *current) onConditionalGoExpression314() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression314() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression314()
}

func (c *current) onConditionalGoExpression85() (any, error) {
	return file.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonConditionalGoExpression85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression85()
}

func (c *current) onConditionalGoExpression1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonConditionalGoExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression1(stack["codesI"])
}

func (c *current) onconditionalGoParenExpr11() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr11()
}

func (c *current) onconditionalGoParenExpr17() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr17() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr17()
}

func (c *current) onconditionalGoParenExpr5() (any, error) {
	return file.RawGoCode{Code: "(", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr5()
}

func (c *current) onconditionalGoParenExpr27() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr27()
}

func (c *current) onconditionalGoParenExpr24() (any, error) {
	return file.RawGoCode{Code: ")", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr24()
}

func (c *current) onconditionalGoParenExpr29() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr29()
}

func (c *current) onconditionalGoParenExpr28() (any, error) {
	return unclosedParen(c, "(", ")")
}

func (p *parser) callonconditionalGoParenExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr28()
}

func (c *current) onconditionalGoParenExpr2(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr2(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onconditionalGoParenExpr44() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr44()
}

func (c *current) onconditionalGoParenExpr50() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr50()
}

func (c *current) onconditionalGoParenExpr38() (any, error) {
	return file.RawGoCode{Code: "{", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr38()
}

func (c *current) onconditionalGoParenExpr60() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr60()
}

func (c *current) onconditionalGoParenExpr57() (any, error) {
	return file.RawGoCode{Code: "}", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr57()
}

func (c *current) onconditionalGoParenExpr62() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr62()
}

func (c *current) onconditionalGoParenExpr61() (any, error) {
	return unclosedParen(c, "{", "}")
}

func (p *parser) callonconditionalGoParenExpr61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr61()
}

func (c *current) onconditionalGoParenExpr72() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr72()
}

func (c *current) onconditionalGoParenExpr70() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr70()
}

func (c *current) onconditionalGoParenExpr94() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonconditionalGoParenExpr94() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr94()
}

func (c *current) onconditionalGoParenExpr35(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr35(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onconditionalGoParenExpr108() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr108()
}

func (c *current) onconditionalGoParenExpr114() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr114() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr114()
}

func (c *current) onconditionalGoParenExpr102() (any, error) {
	return file.RawGoCode{Code: "[", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr102()
}

func (c *current) onconditionalGoParenExpr124() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr124() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr124()
}

func (c *current) onconditionalGoParenExpr121() (any, error) {
	return file.RawGoCode{Code: "]", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr121() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr121()
}

func (c *current) onconditionalGoParenExpr126() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr126()
}

func (c *current) onconditionalGoParenExpr125() (any, error) {
	return unclosedParen(c, "[", "]")
}

func (p *parser) callonconditionalGoParenExpr125() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr125()
}

func (c *current) onconditionalGoParenExpr136() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr136()
}

func (c *current) onconditionalGoParenExpr134() (any, error) {
	return pos(c), nil
}

func (p *parser) callonconditionalGoParenExpr134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr134()
}

func (c *current) onconditionalGoParenExpr158() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonconditionalGoParenExpr158() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr158()
}

func (c *current) onconditionalGoParenExpr99(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr99(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onGoStatement20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement20()
}

func (c *current) onGoStatement33() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoStatement33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement33()
}

func (c *current) onGoStatement39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGoStatement39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement39()
}

func (c *current) onGoStatement40() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoStatement40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement40()
}

func (c *current) onGoStatement46() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement46()
}

func (c *current) onGoStatement31() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoStatement31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement31()
}

func (c *current) onGoStatement51(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoStatement51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement51(stack["identI"])
}

func (c *current) onGoStatement70() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement70()
}

func (c *current) onGoStatement75() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoStatement75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement75()
}

func (c *current) onGoStatement77(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGoStatement77() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement77(stack["endI"])
}

func (c *current) onGoStatement59(endI any) (any, error) {
	return endI, nil
}

func (p *parser) callonGoStatement59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement59(stack["endI"])
}

func (c *current) onGoStatement79() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoStatement79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement79()
}

func (c *current) onGoStatement78() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonGoStatement78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement78()
}

func (c *current) onGoStatement25(lParenI, identI, rParenI any) (any, error) {
	return file.BlockFunction{
		LParen:   lParenI.(file.Position),
		Block:    identI.(file.Ident),
		RParen:   rParenI.(file.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGoStatement25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onGoStatement7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{file.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonGoStatement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement7(stack["prefixI"], stack["bfI"])
}

func (c *current) onGoStatement99() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement99() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement99()
}

func (c *current) onGoStatement117() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement117()
}

func (c *current) onGoStatement138() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement138()
}

func (c *current) onGoStatement170() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoStatement170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement170()
}

func (c *current) onGoStatement177() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement177()
}

func (c *current) onGoStatement188() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement188()
}

func (c *current) onGoStatement195() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement195()
}

func (c *current) onGoStatement200() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoStatement200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement200()
}

func (c *current) onGoStatement215() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement215()
}

func (c *current) onGoStatement236() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonGoStatement236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement236()
}

func (c *current) onGoStatement268() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoStatement268() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement268()
}

func (c *current) onGoStatement275() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement275() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement275()
}

func (c *current) onGoStatement286() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement286() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement286()
}

func (c *current) onGoStatement293() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement293() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement293()
}

func (c *current) onGoStatement298() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoStatement298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement298()
}

func (c *current) onGoStatement302() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGoStatement302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement302()
}

func (c *current) onGoStatement203(valsI, endPosI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message: "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endPosI.(file.Position),
			Annotation: "should contain only a single character or escape sequence",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoStatement203() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement203(stack["valsI"], stack["endPosI"])
}

func (c *current) onGoStatement314() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement314() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement314()
}

func (c *current) onGoStatement85() (any, error) {
	return file.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoStatement85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement85()
}

func (c *current) onGoStatement1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonGoStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement1(stack["codesI"])
}

func (c *current) onInterpretedString3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString3()
}

func (c *current) onInterpretedString9() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpretedString9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString9()
}

func (c *current) onInterpretedString19() error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpretedString19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString19()
}

func (c *current) onInterpretedString16() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedString16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString16()
}

func (c *current) onInterpretedString21() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpretedString21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString21()
}

func (c *current) onInterpretedString20() (any, error) {
	start := popStart(c)
	return pos(c), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:       start,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the string literal started here",
			}),
		},
	}
}

func (p *parser) callonInterpretedString20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString20()
}

func (c *current) onInterpretedString1(contentsI, endI any) (any, error) {
	return file.String{
		Start:    pos(c),
		Quote:    '"',
		Contents: sliceOf[file.StringItem](contentsI),
		End:      endI.(file.Position),
	}, nil
}

func (p *parser) callonInterpretedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString1(stack["contentsI"], stack["endI"])
}

func (c *current) onRawString3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonRawString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString3()
}

func (c *current) onRawString9() error {
	pushStart(c)
	return nil
}

func (p *parser) callonRawString9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString9()
}

func (c *current) onRawString19() error {
	popStart(c)
	return nil
}

func (p *parser) callonRawString19() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString19()
}

func (c *current) onRawString16() (any, error) {
	return pos(c), nil
}

func (p *parser) callonRawString16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString16()
}

func (c *current) onRawString21() (any, error) {
	return pos(c), nil
}

func (p *parser) callonRawString21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString21()
}

func (c *current) onRawString20() (any, error) {
	return pos(c), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      popStart(c),
			Annotation: "you never closed this ```",
		}),
	}
}

func (p *parser) callonRawString20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString20()
}

func (c *current) onRawString1(contentsI, endI any) (any, error) {
	return file.String{
		Start:    pos(c),
		Quote:    '`',
		Contents: sliceOf[file.StringItem](contentsI),
		End:      endI.(file.Position),
	}, nil
}

func (p *parser) callonRawString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString1(stack["contentsI"], stack["endI"])
}

func (c *current) onInterpretedStringItem18() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringItem18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem18()
}

func (c *current) onInterpretedStringItem39() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callonInterpretedStringItem39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem39()
}

func (c *current) onInterpretedStringItem71() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringItem71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem71()
}

func (c *current) onInterpretedStringItem78() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem78()
}

func (c *current) onInterpretedStringItem89() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem89()
}

func (c *current) onInterpretedStringItem96() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem96()
}

func (c *current) onInterpretedStringItem101() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringItem101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem101()
}

func (c *current) onInterpretedStringItem2() (any, error) {
	return file.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringItem2()
}

func (c *current) onRawStringItem13() (bool, error) {
	return state(c).Inline, nil
}

func (p *parser) callonRawStringItem13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem13()
}

func (c *current) onRawStringItem16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonRawStringItem16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem16()
}

func (c *current) onRawStringItem2() (any, error) {
	return file.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringItem2()
}

func (c *current) onStringInterpolation3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonStringInterpolation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation3()
}

func (c *current) onStringInterpolation9() error {
	pushStart(c)
	return nil
}

func (p *parser) callonStringInterpolation9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation9()
}

func (c *current) onStringInterpolation31() (any, error) {
	return []byte(nil), &fileerr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringInterpolation31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation31()
}

func (c *current) onStringInterpolation34() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid format verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonStringInterpolation34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation34()
}

func (c *current) onStringInterpolation14() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonStringInterpolation14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation14()
}

func (c *current) onStringInterpolation42() (any, error) {
	return pos(c), nil
}

func (p *parser) callonStringInterpolation42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation42()
}

func (c *current) onStringInterpolation36(endI any) (any, error) {
	return string(c.text[1:]), &fileerr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonStringInterpolation36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation36(stack["endI"])
}

func (c *current) onStringInterpolation1(fmtDirectiveI, exprI any) (any, error) {
	interp := exprI.(file.StringInterpolation)
	interp.FormatDirective = optCast[string](fmtDirectiveI)
	interp.Position = pos(c)
	return interp, nil
}

func (p *parser) callonStringInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation1(stack["fmtDirectiveI"], stack["exprI"])
}

func (c *current) onstringInterpolationExpression6() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression6()
}

func (c *current) onstringInterpolationExpression12() error {
	pushStart(c)
	return nil
}

func (p *parser) callonstringInterpolationExpression12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression12()
}

func (c *current) onstringInterpolationExpression13() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression13()
}

func (c *current) onstringInterpolationExpression4() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression4()
}

func (c *current) onstringInterpolationExpression15() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonstringInterpolationExpression15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression15()
}

func (c *current) onstringInterpolationExpression18(exprI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonstringInterpolationExpression18() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression18(stack["exprI"])
}

func (c *current) onstringInterpolationExpression23() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression23()
}

func (c *current) onstringInterpolationExpression25() error {
	popStart(c)
	return nil
}

func (p *parser) callonstringInterpolationExpression25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression25()
}

func (c *current) onstringInterpolationExpression26() error {
	popStart(c)
	return nil
}

func (p *parser) callonstringInterpolationExpression26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression26()
}

func (c *current) onstringInterpolationExpression21() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression21()
}

func (c *current) onstringInterpolationExpression28() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression28()
}

func (c *current) onstringInterpolationExpression27() (any, error) {
	braceStart := popStart(c)
	hashStart := popStart(c)
	return pos(c), &fileerr.Error{
		Message: "unclosed interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:       braceStart,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `}` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      hashStart,
				End:        braceStart,
				EndOffset:  1,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `}`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonstringInterpolationExpression27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression27()
}

func (c *current) onstringInterpolationExpression2(exprI, rBraceI any) (any, error) {
	return file.StringInterpolation{
		LBrace:     pos(c),
		Expression: optCast[file.Expression](exprI),
		RBrace:     rBraceI.(file.Position),
	}, nil
}

func (p *parser) callonstringInterpolationExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression2(stack["exprI"], stack["rBraceI"])
}

func (c *current) onstringInterpolationExpression35() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstringInterpolationExpression35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression35()
}

func (c *current) onstringInterpolationExpression34() (any, error) {
	start := popStart(c)
	return file.StringInterpolation{}, &fileerr.Error{
		Message: "string interpolation: missing expression",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a `{`",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      start,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "add an expression enclosed in braces",
				Example:    "`#" + string(c.text) + "{1+1}`",
			},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonstringInterpolationExpression34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolationExpression34()
}

func (c *current) ongoStructType12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoStructType12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoStructType12()
}

func (c *current) ongoStructType28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoStructType28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoStructType28()
}

func (c *current) ongoFieldDecl16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoFieldDecl16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl16()
}

func (c *current) ongoFieldDecl39() (any, error) {
	return pos(c), nil
}

func (p *parser) callongoFieldDecl39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl39()
}

func (c *current) ongoFieldDecl34() (any, error) {
	return c.text, &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a ``` somewhere here",
		}),
	}
}

func (p *parser) callongoFieldDecl34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl34()
}

func (c *current) ongoFieldDecl60() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl60()
}

func (c *current) ongoFieldDecl81() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl81()
}

func (c *current) ongoFieldDecl113() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl113() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl113()
}

func (c *current) ongoFieldDecl120() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl120()
}

func (c *current) ongoFieldDecl131() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl131() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl131()
}

func (c *current) ongoFieldDecl138() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl138()
}

func (c *current) ongoFieldDecl143() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl143()
}

func (c *current) ongoFieldDecl157() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message: "invalid little u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        6,
			Annotation: "expected `\\u`, followed by four hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl157()
}

func (c *current) ongoFieldDecl178() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message: "invalid big u escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        10,
			Annotation: "expected `\\U`, followed by eight hex digits",
		}),
		Example:     "`\\u1a7f`",
		Suggestions: suggestions,
	}

}

func (p *parser) callongoFieldDecl178() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl178()
}

func (c *current) ongoFieldDecl210() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid hex byte escape",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        4,
			Annotation: "expected `\\x`, followed by two hex digits",
		}),
		Example: "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl210()
}

func (c *current) ongoFieldDecl217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl217()
}

func (c *current) ongoFieldDecl228() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl228() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl228()
}

func (c *current) ongoFieldDecl235() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, `\\u`, an octal escape, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl235() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl235()
}

func (c *current) ongoFieldDecl240() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Len:        2,
			Annotation: "expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\\"`, `\\x`, an octal escape, `\\u`, or `\\U`",
		}),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl240() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl240()
}

func (c *current) ongoFieldDecl146() (any, error) {
	return c.text, &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			EOLDelta:   1,
			Annotation: "expected a `\"` somewhere here",
		}),
	}

}

func (p *parser) callongoFieldDecl146() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl146()
}

func (c *current) ongoParameters7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameters7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameters7()
}

func (c *current) ongoParameters23() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameters23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameters23()
}

func (c *current) ongoParameterList12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameterList12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameterList12()
}

func (c *current) ongoParameterDecl16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameterDecl16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameterDecl16()
}

func (c *current) ongoInterfaceType12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoInterfaceType12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoInterfaceType12()
}

func (c *current) ongoInterfaceType32() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoInterfaceType32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoInterfaceType32()
}

func (c *current) ongoTypeElem12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoTypeElem12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoTypeElem12()
}

func (c *current) onState10() (any, error) {
	return pos(c), nil
}

func (p *parser) callonState10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState10()
}

func (c *current) onState27() (any, error) {
	return pos(c), nil
}

func (p *parser) callonState27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState27()
}

func (c *current) onState25() (any, error) {
	return pos(c), nil
}

func (p *parser) callonState25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState25()
}

func (c *current) onState17(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonState17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState17(stack["unexpectedI"])
}

func (c *current) onState55() (any, error) {
	return pos(c), nil
}

func (p *parser) callonState55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState55()
}

func (c *current) onState53() (any, error) {
	return pos(c), nil
}

func (p *parser) callonState53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState53()
}

func (c *current) onState4(startI, badI, endI any) (any, error) {
	return file.State{
			Vars: []file.StateScopeItem{
				file.BadStateVar{
					Line:     badI.(string),
					Position: startI.(file.Position),
				},
			},
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid state",
			ErrorAnnotation: anno(c, annotation{
				Start:      startI.(file.Position),
				End:        endI.(file.Position),
				Annotation: "expected a state variable declaration or a group of state variables",
			}),
			Example: "`state bark = \"woof\"`",
		}
}

func (p *parser) callonState4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState4(stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onSingleState10() (any, error) {
	return pos(c), nil
}

func (p *parser) callonSingleState10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleState10()
}

func (c *current) onSingleState8(varI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonSingleState8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleState8(stack["varI"])
}

func (c *current) onSingleState1(varI any) (any, error) {
	return file.State{
		Vars:     []file.StateScopeItem{varI.(file.StateVar)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleState1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleState1(stack["varI"])
}

func (c *current) onGroupState9() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGroupState9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState9()
}

func (c *current) onGroupState15() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGroupState15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState15()
}

func (c *current) onGroupState16() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGroupState16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState16()
}

func (c *current) onGroupState22() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGroupState22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState22()
}

func (c *current) onGroupState7() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGroupState7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState7()
}

func (c *current) onGroupState37() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGroupState37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState37()
}

func (c *current) onGroupState42() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGroupState42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState42()
}

func (c *current) onGroupState31(rParenI any) (any, error) {
	return rParenI, nil
}

func (p *parser) callonGroupState31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState31(stack["rParenI"])
}

func (c *current) onGroupState45() (any, error) {
	return pos(c), nil
}

func (p *parser) callonGroupState45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState45()
}

func (c *current) onGroupState44() (any, error) {
	return nil, &fileerr.Error{
		Message: "missing `)`",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected `)` to close the state group",
		}),
	}
}

func (p *parser) callonGroupState44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState44()
}

func (c *current) onGroupState1(startI, itmsI, rParenI any) (any, error) {
	return file.State{
		LParen:   ptr(startI.(file.Position)),
		Vars:     sliceOf[file.StateScopeItem](itmsI),
		RParen:   ptr(rParenI.(file.Position)),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGroupState1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState1(stack["startI"], stack["itmsI"], stack["rParenI"])
}

func (c *current) onstateScopeItem7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateScopeItem7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem7()
}

func (c *current) onstateScopeItem21() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateScopeItem21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem21()
}

func (c *current) onstateScopeItem33(textI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateScopeItem33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem33(stack["textI"])
}

func (c *current) onstateScopeItem13(textI any) (any, error) {
	return file.CorgiComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonstateScopeItem13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem13(stack["textI"])
}

func (c *current) onstateScopeItem58() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateScopeItem58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem58()
}

func (c *current) onstateScopeItem56() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateScopeItem56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem56()
}

func (c *current) onstateScopeItem48(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateScopeItem48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem48(stack["unexpectedI"])
}

func (c *current) onstateScopeItem85() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateScopeItem85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem85()
}

func (c *current) onstateScopeItem83(lineI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateScopeItem83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem83(stack["lineI"])
}

func (c *current) onstateScopeItem45(lineI any) (any, error) {
	line := lineI.(string)
	return file.BadStateVar{
			Line:     line,
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid state variable",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        len(line),
				Annotation: "expected a state variable declaration",
			}),
		}
}

func (p *parser) callonstateScopeItem45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem45(stack["lineI"])
}

func (c *current) onstateScopeItem1(itmI any) (any, error) {
	return itmI, nil
}

func (p *parser) callonstateScopeItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateScopeItem1(stack["itmI"])
}

func (c *current) onStateVar8(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonStateVar8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar8(stack["identI"])
}

func (c *current) onStateVar14() (any, error) {
	return invalidIdent(c, "state variable", pos(c), string(c.text))
}

func (p *parser) callonStateVar14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar14()
}

func (c *current) onStateVar26(identI any) (any, error) {
	return file.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonStateVar26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar26(stack["identI"])
}

func (c *current) onStateVar32() (any, error) {
	return invalidIdent(c, "state variable", pos(c), string(c.text))
}

func (p *parser) callonStateVar32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar32()
}

func (c *current) onStateVar4(firstI, restI any) (any, error) {
	rest := getTuples[file.Ident](restI, -1)
	names := make([]file.Ident, 1, 1+len(rest))
	names[0] = firstI.(file.Ident)
	names = append(names, rest...)
	return names, nil
}

func (p *parser) callonStateVar4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar4(stack["firstI"], stack["restI"])
}

func (c *current) onStateVar43() (any, error) {
	return pos(c), nil
}

func (p *parser) callonStateVar43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar43()
}

func (c *current) onStateVar1(namesI, typI, assignI, valsI any) (any, error) {
	names := namesI.([]file.Ident)
	vals := valsI.([]file.GoCode)

	if len(names) != len(vals) && len(vals) > 0 {
		return file.StateVar{}, &fileerr.Error{
			Message: "state variable: unequal variable declarations and initializations",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: fmt.Sprintf("have %d declarations and %d initializations", len(names), len(vals)),
			}),
			Example: "`state bark, howl = \"woof\", \"awoooo\"`",
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "the number of variable names must always match the number of expressions"},
			},
		}
	}

	var assign *file.Position
	if len(vals) > 0 {
		assign = ptr(assignI.(file.Position))
	}

	return file.StateVar{
		Names:  names,
		Type:   optCastPtr[file.Type](typI),
		Assign: assign,
		Values: vals,
	}, nil
}

func (p *parser) callonStateVar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar1(stack["namesI"], stack["typI"], stack["assignI"], stack["valsI"])
}

func (c *current) onstateVarType2(typI any) (any, error) {
	return typI, nil
}

func (p *parser) callonstateVarType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarType2(stack["typI"])
}

func (c *current) onstateVarType8() (any, error) {
	return file.Type{
			Type:     string(c.text),
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid type",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Len:        len(c.text),
				Annotation: "this is not a valid Go type",
			}),
		}
}

func (p *parser) callonstateVarType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarType8()
}

func (c *current) onstateVarValues9() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues9()
}

func (c *current) onstateVarValues17() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues17()
}

func (c *current) onstateVarValues15(valsI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues15(stack["valsI"])
}

func (c *current) onstateVarValues2(valsI any) (any, error) {
	return valsI, nil
}

func (p *parser) callonstateVarValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues2(stack["valsI"])
}

func (c *current) onstateVarValues41() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues41()
}

func (c *current) onstateVarValues49() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues49()
}

func (c *current) onstateVarValues66() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues66()
}

func (c *current) onstateVarValues64() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues64()
}

func (c *current) onstateVarValues56(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateVarValues56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues56(stack["unexpectedI"])
}

func (c *current) onstateVarValues94() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues94()
}

func (c *current) onstateVarValues92() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues92()
}

func (c *current) onstateVarValues34(valsI, startI, badI, endI any) (any, error) {
	return optCast[[]file.GoCode](valsI),
		newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "unexpected tokens")
}

func (p *parser) callonstateVarValues34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues34(stack["valsI"], stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onstateVarValues118() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues118()
}

func (c *current) onstateVarValues123() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues123()
}

func (c *current) onstateVarValues139() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues139() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues139()
}

func (c *current) onstateVarValues137() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues137()
}

func (c *current) onstateVarValues129(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateVarValues129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues129(stack["startI"], stack["unexpectedI"])
}

func (c *current) onstateVarValues167() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues167() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues167()
}

func (c *current) onstateVarValues165() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues165() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues165()
}

func (c *current) onstateVarValues111(startI, unexpectedI, endI any) (any, error) {
	return ([]file.GoCode)(nil), &fileerr.Error{
		Message: "invalid state variable values",
		ErrorAnnotation: anno(c, annotation{
			Start:      startI.(file.Position),
			End:        endI.(file.Position),
			Annotation: "expected one or more Go expressions",
		}),
		Example: "`state bark = \"woof\"`",
	}
}

func (p *parser) callonstateVarValues111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues111(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onstateVarValues187() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues187()
}

func (c *current) onstateVarValues185() (any, error) {
	return pos(c), nil
}

func (p *parser) callonstateVarValues185() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues185()
}

func (c *current) onstateVarValues184() (any, error) {
	return ([]file.GoCode)(nil), nil
}

func (p *parser) callonstateVarValues184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues184()
}

func (c *current) onstateVarValueList1(firstI, restI any) (any, error) {
	rest := getTuples[file.GoCode](restI, -1)
	values := make([]file.GoCode, 1, 1+len(rest))
	values[0] = firstI.(file.GoCode)
	values = append(values, rest...)
	return values, nil
}

func (p *parser) callonstateVarValueList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValueList1(stack["firstI"], stack["restI"])
}

func (c *current) onArrowBlock4() (any, error) {
	return pos(c), nil
}

func (p *parser) callonArrowBlock4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock4()
}

func (c *current) onArrowBlock10() error {
	editState(c, func(s *State) {
		s.Indentation.Target = c.pos.col - 1 // col is 1-indexed
	})
	return nil
}

func (p *parser) callonArrowBlock10() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock10()
}

func (c *current) onArrowBlock15() (any, error) {
	return pos(c), nil
}

func (p *parser) callonArrowBlock15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock15()
}

func (c *current) onArrowBlock2(firstI, restI any) (any, error) {
	first, firstOk := firstI.(file.TextLine)
	restTuples := slice(restI)

	n := len(restTuples)
	if firstOk {
		n++
	}

	lines := make([]file.TextLine, 0, n)
	if firstOk {
		lines = append(lines, first)
	}
	for _, lt := range restTuples {
		lines = append(lines, getTuple[file.TextLine](lt, -1))
	}

	return file.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstI"], stack["restI"])
}

func (c *current) onArrowBlock41() (any, error) {
	return pos(c), nil
}

func (p *parser) callonArrowBlock41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock41()
}

func (c *current) onArrowBlock38() (any, error) {
	return file.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock38()
}

func (c *current) onBracketText4() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketText4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText4()
}

func (c *current) onBracketText10() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketText10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText10()
}

func (c *current) onBracketText21() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketText21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText21()
}

func (c *current) onBracketText26() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketText26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText26()
}

func (c *current) onBracketText30() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketText30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText30()
}

func (c *current) onBracketText28(btI, rBracketI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketText28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText28(stack["btI"], stack["rBracketI"])
}

func (c *current) onBracketText2(btI, rBracketI any) (any, error) {
	return file.BracketText{
		LBracket: pos(c),
		Lines:    sliceOf[file.TextLine](btI),
		RBracket: rBracketI.(file.Position),
	}, nil
}

func (p *parser) callonBracketText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText2(stack["btI"], stack["rBracketI"])
}

func (c *current) onBracketText49() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketText49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText49()
}

func (c *current) onBracketText47(btI any) (any, error) {
	return file.BracketText{
			LBracket: pos(c),
			Lines:    sliceOf[file.TextLine](btI),
		}, &fileerr.Error{
			Message: "unclosed bracket text",
			ErrorAnnotation: anno(c, annotation{
				Start:      pos(c),
				Annotation: "`[` opened, but never closed",
			}),
		}
}

func (p *parser) callonBracketText47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText47(stack["btI"])
}

func (c *current) onArrowBlockLine6(itemsI any) (any, error) {
	return pos(c), nil
}

func (p *parser) callonArrowBlockLine6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockLine6(stack["itemsI"])
}

func (c *current) onArrowBlockLine1(itemsI any) (any, error) {
	return file.TextLine(sliceOf[file.TextItem](itemsI)), nil
}

func (p *parser) callonArrowBlockLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockLine1(stack["itemsI"])
}

func (c *current) onBracketTextLine7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketTextLine7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine7()
}

func (c *current) onBracketTextLine15() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextLine15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine15()
}

func (c *current) onBracketTextLine1(itemsI any) (any, error) {
	return file.TextLine(sliceOf[file.TextItem](itemsI)), nil
}

func (p *parser) callonBracketTextLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine1(stack["itemsI"])
}

func (c *current) onInterpolationValueLine1(itemsI any) (any, error) {
	return file.TextLine(sliceOf[file.TextItem](itemsI)), nil
}

func (p *parser) callonInterpolationValueLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueLine1(stack["itemsI"])
}

func (c *current) onArrowBlockTextItem9() (any, error) {
	return pos(c), nil
}

func (p *parser) callonArrowBlockTextItem9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockTextItem9()
}

func (c *current) onArrowBlockTextItem2(textI any) (any, error) {
	return file.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlockTextItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockTextItem2(stack["textI"])
}

func (c *current) onBracketTextTextItem10() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem10()
}

func (c *current) onBracketTextTextItem24() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem24()
}

func (c *current) onBracketTextTextItem28() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem28()
}

func (c *current) onBracketTextTextItem26() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem26()
}

func (c *current) onBracketTextTextItem48() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem48()
}

func (c *current) onBracketTextTextItem53() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem53()
}

func (c *current) onBracketTextTextItem51() (any, error) {
	return pos(c), nil
}

func (p *parser) callonBracketTextTextItem51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem51()
}

func (c *current) onBracketTextTextItem2(textI any) (any, error) {
	return file.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBracketTextTextItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextItem2(stack["textI"])
}

func (c *current) onInterpolationValueTextItem9() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValueTextItem9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueTextItem9()
}

func (c *current) onInterpolationValueTextItem2(textI any) (any, error) {
	return file.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpolationValueTextItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueTextItem2(stack["textI"])
}

func (c *current) onInterpolation3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation3()
}

func (c *current) onInterpolation9() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpolation9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation9()
}

func (c *current) onInterpolation16() (any, error) {
	return file.BadInterpolation{Position: pos(c)}, &fileerr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "start of interpolation",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:       pos(c),
				StartOffset: 1,
				Annotation: "expected an expression interpolation, text interpolation, a component call,\n" +
					"or an element interpolation",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonInterpolation16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation16()
}

func (c *current) onInterpolation1(interpI any) (any, error) {
	return interpI, nil
}

func (p *parser) callonInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation1(stack["interpI"])
}

func (c *current) onExpressionInterpolation23() (any, error) {
	return []byte(nil), &fileerr.Error{
		Message: "missing format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "expected a formatting verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation23()
}

func (c *current) onExpressionInterpolation26() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid format verb",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			Annotation: "this is not a valid format verb",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation26()
}

func (c *current) onExpressionInterpolation6() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonExpressionInterpolation6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation6()
}

func (c *current) onExpressionInterpolation34() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation34()
}

func (c *current) onExpressionInterpolation28(endI any) (any, error) {
	return string(c.text[1:]), &fileerr.Error{
		Message: "invalid format directive",
		ErrorAnnotation: anno(c, annotation{
			Start:      pos(c),
			End:        endI.(file.Position),
			Annotation: "invalid formatter",
		}),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation28(stack["endI"])
}

func (c *current) onExpressionInterpolation43() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation43()
}

func (c *current) onExpressionInterpolation49() error {
	pushStart(c)
	return nil
}

func (p *parser) callonExpressionInterpolation49() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation49()
}

func (c *current) onExpressionInterpolation50() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation50()
}

func (c *current) onExpressionInterpolation41() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation41()
}

func (c *current) onExpressionInterpolation52(fmtDirectiveI, lBraceI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonExpressionInterpolation52() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation52(stack["fmtDirectiveI"], stack["lBraceI"])
}

func (c *current) onExpressionInterpolation55(fmtDirectiveI, lBraceI, exprI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonExpressionInterpolation55() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation55(stack["fmtDirectiveI"], stack["lBraceI"], stack["exprI"])
}

func (c *current) onExpressionInterpolation60() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation60()
}

func (c *current) onExpressionInterpolation62() error {
	popStart(c)
	return nil
}

func (p *parser) callonExpressionInterpolation62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation62()
}

func (c *current) onExpressionInterpolation63() error {
	popStart(c)
	return nil
}

func (p *parser) callonExpressionInterpolation63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation63()
}

func (c *current) onExpressionInterpolation58() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation58()
}

func (c *current) onExpressionInterpolation65() (any, error) {
	return pos(c), nil
}

func (p *parser) callonExpressionInterpolation65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation65()
}

func (c *current) onExpressionInterpolation64() (any, error) {
	braceStart := popStart(c)
	hashStart := popStart(c)
	return pos(c), &fileerr.Error{
		Message: "unclosed interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:       braceStart,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `}` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      hashStart,
				End:        braceStart,
				EndOffset:  1,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `}`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation64()
}

func (c *current) onExpressionInterpolation1(fmtDirectiveI, lBraceI, exprI, rBraceI any) (any, error) {
	return file.ExpressionInterpolation{
		FormatDirective: optCast[string](fmtDirectiveI),
		LBrace:          lBraceI.(file.Position),
		Expression:      optCast[file.Expression](exprI),
		RBrace:          rBraceI.(file.Position),
		Position:        peekStart(c, 1),
	}, nil
}

func (p *parser) callonExpressionInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation1(stack["fmtDirectiveI"], stack["lBraceI"], stack["exprI"], stack["rBraceI"])
}

func (c *current) onelementInterpolation6(nameI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonelementInterpolation6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation6(stack["nameI"])
}

func (c *current) onelementInterpolation10(nameI, attrsI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonelementInterpolation10() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation10(stack["nameI"], stack["attrsI"])
}

func (c *current) onelementInterpolation14() error {
	popStart(c)
	return nil
}

func (p *parser) callonelementInterpolation14() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation14()
}

func (c *current) onelementInterpolation1(nameI, attrsI, valI any) (any, error) {
	return file.ElementInterpolation{
		Element: file.Element{
			Name:       concat(nameI),
			Attributes: sliceOf[file.AttributeCollection](attrsI),
			Position:   pos(c),
		},
		Value:    optCast[file.InterpolationValue](valI),
		Position: peekStart(c, 1),
	}, nil
}

func (p *parser) callonelementInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation1(stack["nameI"], stack["attrsI"], stack["valI"])
}

func (c *current) onvoidElementInterpolation7(nameI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonvoidElementInterpolation7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation7(stack["nameI"])
}

func (c *current) onvoidElementInterpolation11(nameI, attrsI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonvoidElementInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation11(stack["nameI"], stack["attrsI"])
}

func (c *current) onvoidElementInterpolation12(nameI, attrsI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonvoidElementInterpolation12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation12(stack["nameI"], stack["attrsI"])
}

func (c *current) onvoidElementInterpolation1(nameI, attrsI any) (any, error) {
	return file.ElementInterpolation{
		Element: file.Element{
			Name:       concat(nameI),
			Attributes: sliceOf[file.AttributeCollection](attrsI),
			Void:       true,
			Position:   pos(c),
		},
		Position: peekStart(c, 1),
	}, nil
}

func (p *parser) callonvoidElementInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation1(stack["nameI"], stack["attrsI"])
}

func (c *current) onComponentCallInterpolation4() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallInterpolation4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation4()
}

func (c *current) onComponentCallInterpolation7(callI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallInterpolation7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation7(stack["callI"])
}

func (c *current) onComponentCallInterpolation11() error {
	popStart(c)
	return nil
}

func (p *parser) callonComponentCallInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation11()
}

func (c *current) onComponentCallInterpolation1(callI, valI any) (any, error) {
	call := callI.(file.ComponentCall)
	call.Position = pos(c)

	return file.ComponentCallInterpolation{
		ComponentCall: call,
		Value:         optCast[file.InterpolationValue](valI),
		Position:      pos(c),
	}, nil
}

func (p *parser) callonComponentCallInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation1(stack["callI"], stack["valI"])
}

func (c *current) onInterpolationValue5() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue5()
}

func (c *current) onInterpolationValue11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpolationValue11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue11()
}

func (c *current) onInterpolationValue12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValue12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue12()
}

func (c *current) onInterpolationValue3() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValue3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue3()
}

func (c *current) onInterpolationValue20() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValue20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue20()
}

func (c *current) onInterpolationValue22() error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpolationValue22() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue22()
}

func (c *current) onInterpolationValue23() error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpolationValue23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue23()
}

func (c *current) onInterpolationValue18() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValue18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue18()
}

func (c *current) onInterpolationValue25() (any, error) {
	return pos(c), nil
}

func (p *parser) callonInterpolationValue25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue25()
}

func (c *current) onInterpolationValue24() (any, error) {
	bracketStart := popStart(c)
	hashStart := popStart(c)
	return pos(c), &fileerr.Error{
		Message: "unclosed interpolation",
		ErrorAnnotation: anno(c, annotation{
			Start:       bracketStart,
			StartOffset: 1,
			EOLDelta:    1,
			Annotation:  "expected a `]` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno(c, annotation{
				Start:      hashStart,
				End:        bracketStart,
				EndOffset:  1,
				Annotation: "for the interpolation started here",
			}),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `]`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonInterpolationValue24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue24()
}

func (c *current) onInterpolationValue1(valI, rBracketI any) (any, error) {
	return file.InterpolationValue{
		LBracket: pos(c),
		Text:     valI.(file.TextLine),
		RBracket: rBracketI.(file.Position),
	}, nil
}

func (p *parser) callonInterpolationValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue1(stack["valI"], stack["rBracketI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return state(c).Indentation.Current < state(c).Indentation.Target, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

func (c *current) onINDENTATION25() error {
	editState(c, func(s *State) {
		s.Indentation.Current++
	})
	return nil
}

func (p *parser) callonINDENTATION25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION25()
}

func (c *current) onINDENTATION28() (bool, error) {
	return state(c).Indentation.Current == state(c).Indentation.Target, nil
}

func (p *parser) callonINDENTATION28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION28()
}

func (c *current) onINDENTATION210() error {
	editState(c, func(s *State) {
		s.Indentation.Current = 0
	})
	return nil
}

func (p *parser) callonINDENTATION210() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION210()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
