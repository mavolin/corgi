// ============================================================================
// Ident
// ======================================================================================

Ident <- identI:goIdentifier {
    return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

Namespace <- '.' identI:Ident {
    return identI, nil
}

// ============================================================================
// Type
// ======================================================================================

Type <- typeI:goType {
    return &ast.Type{Type: string(c.text), Position: pos(c)}, nil
}

// ============================================================================
// Static String
// ======================================================================================

StaticString <- staticRawString / staticInterpretedString

//
// `Raw String`
//

staticRawString <- rawStringStart contentsI:[^`]* endI:rawStringEnd {
    return &ast.StaticString{
        Start:    pos(c),
        Quote:    '`',
        Contents: concat(contentsI),
        End:      endI.(*ast.Position),
    }, nil
}

//
// "Interpreted String"
//

staticInterpretedString <- interpretedStringStart contentsI:staticInterpretedStringContents? endI:interpretedStringEnd {
    return &ast.StaticString{
        Start:    pos(c),
        Quote:    '"',
        Contents: optCast[string](contentsI),
        End:      endI.(*ast.Position),
    }, nil
}

staticInterpretedStringContents <- (`\"` / `\\` / [^"])+ {
    return string(c.text), nil
}
