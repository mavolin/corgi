// ============================================================================
// Mixin
// ======================================================================================

Mixin <- "mixin" ' '+ nameI:MustIdent paramsI:mixinParamList? bodyI:Beaitb {
    params := castedOrZero[file.Mixin](paramsI)
    return file.Mixin{
        Name: nameI.(file.Ident),
        LParenPos: params.LParenPos,
        Params: params.Params,
        RParenPos: params.RParenPos,
        Body: bodyI.(file.Scope),
        Position: pos(c),
    }, nil
} / "mixin" posI:POS bodyI:Beaitb {
    return file.Mixin{
        Body: bodyI.(file.Scope),
        Position: pos(c),
    }, &corgierr.Error{
        Message: "mixin: missing name",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            StartOffset: 1,
            Annotation: "expected the name of the mixin here",
        }),
        Example: "`mixin woof\n"+
            "  > bark`",
    }
}

mixinParamList <- '(' WS* paramsI:mixinParams? _* (',' WS*)? rParenPosI:R_PAREN {
    return file.Mixin{
        LParenPos: ptr(pos(c)),
        Params: castedOrZero[[]file.MixinParam](paramsI),
        RParenPos: ptr(rParenPosI.(file.Position)),
    }, nil
} / '(' WS* paramsI:mixinParams? (_* ',')? posI:POS {
    return file.Mixin{
        LParenPos: ptr(pos(c)),
        Params: castedOrZero[[]file.MixinParam](paramsI),
    }, &corgierr.Error{
        Message: "mixin parameters: unclosed `(`",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "expected a `)`",
        }),
        HintAnnotations: []corgierr.Annotation{
            anno(c, annotation{
                Start: pos(c),
                Annotation: "for the `(` you opened here",
            }),
        },
    }
}

mixinParams <- firstI:mixinParam restI:(_* ',' WS* mixinParam)* {
    restIs := islice(restI)
    mixinParams := make([]file.MixinParam, 1+len(restIs))
    mixinParams[0] = firstI.(file.MixinParam)
    for i, ai := range restIs {
        mixinParams[i+1] = getTuple[file.MixinParam](ai, -1)
    }

    return mixinParams, nil
}

mixinParam <- nameI:MustIdentIfText posI:POS typeI:(' '+ GoType)? defaultI:(' '* mixinParamDefault)? {
    defaultTuple := islice(defaultI)
    var paramDefault file.MixinParam
    if len(defaultTuple) == 2 {
        paramDefault = defaultTuple[1].(file.MixinParam)
    }

    typeTuple := islice(typeI)
    var paramType *file.GoType
    if len(typeTuple) == 2 {
        paramType = ptr(typeTuple[1].(file.GoType))
    }

    p := file.MixinParam{
        Name: nameI.(file.Ident),
        Type: paramType,
        AssignPos: paramDefault.AssignPos,
        Default: paramDefault.Default,
        Position: pos(c),
    }
    if p.Type == nil && p.Default == nil {
        return p, &corgierr.Error{
            Message: "mixin param: need either a type or a default",
            ErrorAnnotation: anno(c, annotation{
                Start: posI.(file.Position),
                StartOffset: 1,
                Annotation: "expected either a type or a default here",
            }),
            Suggestions: []corgierr.Suggestion{
                {Suggestion: "give this param a type", Code: "`"+ p.Name.Ident + " string`"},
                {Suggestion: "give this param a default with an inferrable type", Code: "`"+ p.Name.Ident + "=\"woof\"`"},
            },
        }
    }

    return p, nil
}

mixinParamDefault <- '=' ' '* exprI:GoExpression {
    return file.MixinParam{
        AssignPos: ptr(pos(c)),
        Default: ptrOrNil[file.Expression](exprI),
    }, nil
} / '=' posI:POS {
    return file.MixinParam{
        AssignPos: ptr(pos(c)),
    }, &corgierr.Error{
        Message: "mixin param: missing default",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "here",
        }),
        HintAnnotations: []corgierr.Annotation{
            anno(c, annotation{
                Start: pos(c),
                Annotation: "because of this `=`",
            }),
        },
        Suggestions: []corgierr.Suggestion{
            {Suggestion: "remove the `=`, if you didn't mean to define a default"},
        },
    }
}

// ============================================================================
// Return
// ======================================================================================

Return <- "return" errExprI:Expression? unexpectedTokens? EOL {
    return file.Return{
        Err: ptrOrNil[file.Expression](errExprI),
        Position: pos(c),
    }, nil
}

// ============================================================================
// Mixin Call
// ======================================================================================

MixinCall <- '+' namespaceI:(Ident '.')? nameI:MustIdent argsI:mixinArgList? bodyI:mixinCallBody {
    args := castedOrZero[file.MixinCall](argsI)
    return file.MixinCall{
        Name: nameI.(file.Ident),
        LParenPos: args.LParenPos,
        Args: args.Args,
        RParenPos: args.RParenPos,
        Body: bodyI.(file.Scope),
        Position: pos(c),
    }, nil
}

InlineMixinCall <- '+' namespaceI:(Ident '.')? nameI:MustIdent argsI:singleLineMixinArgList? bodyI:singleLineMixinCallBody {
    args := castedOrZero[file.MixinCall](argsI)
    return file.MixinCall{
        Name: nameI.(file.Ident),
        LParenPos: args.LParenPos,
        Args: args.Args,
        RParenPos: args.RParenPos,
        Body: bodyI.(file.Scope),
        Position: pos(c),
    }, nil
}

mixinArgList <- '(' WS* argsI:mixinArgs? _* (',' WS*)? rParenPosI:R_PAREN {
    return file.MixinCall{
        LParenPos: ptr(pos(c)),
        Args: castedOrZero[[]file.MixinArg](argsI),
        RParenPos: ptr(rParenPosI.(file.Position)),
    }, nil
} / '(' WS* argsI:mixinArgs? (_* ',')? posI:POS {
    return file.MixinCall{
        LParenPos: ptr(pos(c)),
        Args: castedOrZero[[]file.MixinArg](argsI),
    }, &corgierr.Error{
        Message: "mixin args: unclosed `(`",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "expected a `)`",
        }),
        HintAnnotations: []corgierr.Annotation{
            anno(c, annotation{
                Start: pos(c),
                Annotation: "for the `(` you opened here",
            }),
        },
    }
}
singleLineMixinArgList <- '(' ' '* argsI:singleLineMixinArgs? ' '* (',' ' '*)? rParenPosI:R_PAREN {
    return file.MixinCall{
        LParenPos: ptr(pos(c)),
        Args: castedOrZero[[]file.MixinArg](argsI),
        RParenPos: ptr(rParenPosI.(file.Position)),
    }, nil
} / '(' ' '* argsI:singleLineMixinArgs? (' '* ',')? posI:POS {
    return file.MixinCall{
        LParenPos: ptr(pos(c)),
        Args: castedOrZero[[]file.MixinArg](argsI),
    }, &corgierr.Error{
        Message: "mixin args: unclosed `(`",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "expected a `)`",
        }),
        HintAnnotations: []corgierr.Annotation{
            anno(c, annotation{
                Start: pos(c),
                Annotation: "for the `(` you opened here",
            }),
        },
    }
}

mixinArgs <- firstI:mixinArg restI:(_* ',' WS* mixinArg)* {
    restIs := islice(restI)
    mixinArgs := make([]file.MixinArg, 1+len(restIs))
    mixinArgs[0] = firstI.(file.MixinArg)
    for i, ai := range restIs {
        mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
    }

    return mixinArgs, nil
}
singleLineMixinArgs <- firstI:singleLineMixinArg restI:(' '* ',' ' '* singleLineMixinArg)* {
    restIs := islice(restI)
    mixinArgs := make([]file.MixinArg, 1+len(restIs))
    mixinArgs[0] = firstI.(file.MixinArg)
    for i, ai := range restIs {
        mixinArgs[i+1] = getTuple[file.MixinArg](ai, -1)
    }

    return mixinArgs, nil
}

mixinArg <- nameI:MustIdentIfText ' '* '=' ' '* valI:Expression {
    return file.MixinArg{
        Name: nameI.(file.Ident),
        Value: valI.(file.Expression),
    }, nil
} / nameI:MustIdentIfText (' '* '=')? posI:POS {
    return file.MixinArg{
        Name: nameI.(file.Ident),
    }, &corgierr.Error{
        Message: "missing mixin argument value",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "expected a value here",
        }),
        Example: "`argName=123`",
        Suggestions: []corgierr.Suggestion{
            {Suggestion: "remember that you always need to write the name of the arg before it's value"},
        },
    }
}
singleLineMixinArg <- nameI:MustIdentIfText ' '* '=' ' '* valI:SingleLineExpression {
    return file.MixinArg{
        Name: nameI.(file.Ident),
        Value: valI.(file.Expression),
    }, nil
} / nameI:MustIdentIfText (' '* '=')? posI:POS {
    return file.MixinArg{
        Name: nameI.(file.Ident),
    }, &corgierr.Error{
        Message: "missing mixin argument value",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "expected a value here",
        }),
        Example: "`argName=123`",
        Suggestions: []corgierr.Suggestion{
            {Suggestion: "remember that you always need to write the name of the arg before it's value"},
        },
    }
}

mixinCallBody <- shI:MixinMainBlockShorthand {
    return file.Scope{shI.(file.MixinMainBlockShorthand)}, nil
} / Beaitb
singleLineMixinCallBody <- Beait

// ============================================================================
// Mixin Main Block Shorthand
// ======================================================================================

MixinMainBlockShorthand <- '\\' unexpectedTokens? EOL bodyI:Body {
    return file.MixinMainBlockShorthand{
        Body: bodyI.(file.Scope),
        Position: pos(c),
    }, nil
} / '\\' unexpectedTokens? posI:POS EOL {
    return file.MixinMainBlockShorthand{
        Position: pos(c),
    }, &corgierr.Error{
        Message: "missing body",
        ErrorAnnotation: anno(c, annotation{
            Start: posI.(file.Position),
            Annotation: "expected an indented body",
        }),
        Suggestions: []corgierr.Suggestion{
            {
                Suggestion: "if you want the `_` block to write nothing,\n" +
                    "use a block directive inside the body of the mixin call",
                Example: "`+woof\n"+
                    "  block _`",
            },
        },
    }
}
