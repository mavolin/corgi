// ============================================================================
// Doctype
// ======================================================================================

Doctype <- "!doctype" behindDoctype {
    return file.Doctype{Position: pos(c)}, nil
}

behindDoctype <- _* listStart "html" attributeListEnd EOC / startI:POS UNEXPECTED endI:EOC {
    return nil, &fileerr.Error{
        Message: "corgi only permits the HTML5 doctype",
        ErrorAnnotation: anno(c, annotation{
            Start:      startI.(file.Position),
            End:        endI.(file.Position),
            EndOffset:  -1,
            Annotation: "this is not part of the HTML5 doctype",
        }),
        ShouldBe: "`!doctype(html)`",
    }
}

// ============================================================================
// Comment
// ======================================================================================

HTMLComment <- "//-" _? commentI:htmlComment EOL {
    return file.HTMLComment{
        Comment:  commentI.(string),
        Position: pos(c),
    }, nil
}

htmlComment <- (!EOL .)* {
    return string(c.text), nil
}

// ============================================================================
// Element
// ======================================================================================

Element <- !RESERVED nameI:htmlTagName voidI:'/'? _* attrsI:AttributeCollection? bodyI:OptionalBody {
    return file.Element{
        Name:       concat(nameI),
        Attributes: optCast[[]file.AttributeCollection](attrsI),
        Body:       optCast[file.Body](bodyI),
        Void:       voidI != nil,
        Position:   pos(c),
    }, nil
}

// ============================================================================
// Raw Element
// ======================================================================================

RawElement <- "!raw" _+ body:rawElementBody {
    return file.RawElement{
        Body:     body.(file.BracketText),
        Position: pos(c),
    }, nil
}

rawElementBody <- _+ btI:BracketText EOC {
    return btI, nil
} / _+ posI:POS Scope {
    return file.BracketText{}, &fileerr.Error{
        Message: "`!raw` with scope",
        ErrorAnnotation: anno(c, annotation{
            Start:      posI.(file.Position),
            Annotation: "the `!raw` element must have bracketed text as body",
        }),
        ShouldBe: "`!raw [ ... ]`",
    }
} / EOC {
    return file.BracketText{}, &fileerr.Error{
        Message: "empty `!raw` element",
        ErrorAnnotation: anno(c, annotation{
            Start:       pos(c),
            StartOffset: 1,
            Annotation:  "expected a body",
        }),
        ShouldBe: "`!raw [ ... ]`",
    }
} / _+ startI:POS UNEXPECTED endI:EOC {
    return file.BracketText{},
        newUnexpectedTokensErr(c, startI.(file.Position), endI.(file.Position), "expected the body of the `!raw` element")
}
