// ============================================================================
// Doctype
// ======================================================================================

Doctype <- "!doctype" behindDoctype {
    return &ast.Doctype{Position: pos(c)}, nil
}

behindDoctype <- _* listStart "html" attributeListEnd EOC / _* startI:POS UNEXPECTED endI:POS EOC {
    return nil, &fileerr.Error{
        Message:         "use of non-HTML5 doctype",
        ErrorAnnotation: annoRange(c, startI, endI, "this is not part of the HTML5 doctype"),
        ShouldBe:        "`!doctype(html)`",
    }
}

// ============================================================================
// Comment
// ======================================================================================

HTMLComment <- "//-" _? commentI:htmlComment EOL {
    return &ast.HTMLComment{
        Comment:  commentI.(string),
        Position: pos(c),
    }, nil
}

htmlComment <- (!EOL .)* {
    return string(c.text), nil
}

// ============================================================================
// Element
// ======================================================================================

Element <- !RESERVED nameI:htmlTagName voidI:'/'? _* attrsI:AttributeCollection? bodyI:OptionalBody {
    return ast.Element{
        Name:       concat(nameI),
        Attributes: optCast[[]ast.AttributeCollection](attrsI),
        Body:       optCast[ast.Body](bodyI),
        Void:       voidI != nil,
        Position:   pos(c),
    }, nil
}

// ============================================================================
// Raw Element
// ======================================================================================

RawElement <- "!raw" _+ bodyI:rawElementBody {
    return &ast.RawElement{
        Body:     bodyI.(*ast.BracketText),
        Position: pos(c),
    }, nil
}

rawElementBody <- _+ btI:BracketText EOC {
    return btI, nil
} / _+ posI:POS Scope {
    return (*ast.BracketText)(nil), &fileerr.Error{
        Message:         "`!raw` with scope",
        ErrorAnnotation: anno.Position(file(c), *posI.(*ast.Position),
            "the `!raw` element must have bracketed text as body"),
        ShouldBe:        "`!raw [ ... ]`",
    }
} / EOC {
    return (*ast.BracketText)(nil), &fileerr.Error{
        Message: "empty `!raw` element",
        ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
            Highlight:  anno.HighlightPosition(pos(c)).Delta(1, 1),
            Annotation: "expected a body",
        }),
        ShouldBe: "`!raw [ ... ]`",
    }
} / _+ startI:POS UNEXPECTED endI:EOC {
    return (*ast.BracketText)(nil),
        newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected the body of the `!raw` element")
}
