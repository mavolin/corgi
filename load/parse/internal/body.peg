// ============================================================================
// Body
// ======================================================================================

Body <- _* bodyI:body {
    return bodyI, nil
} / EOC {
    return nil, &fileerr.Error{
        Message: "missing body",
        ErrorAnnotation: annoPos(c, "expected a body"),
        Suggestions: []fileerr.Suggestion{
            {Suggestion: "start a scope", Example: "`{ ... }`"},
            {Suggestion: "write bracketed text", Example: "`[ woof woof ]`"},
        },
    }
} / _* startI:POS [^\r\n;[{}]* endI:POS &[[{] bodyI:body {
    return bodyI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
} / _* startI:POS UNEXPECTED endI:EOC {
    return nil, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected a body")
}

OptionalBody <- _* bodyI:body {
    return bodyI, nil
} / EOC {
    return nil, nil
} / _* startI:POS [^\r\n;[{}]+ endI:POS &[[{] bodyI:body {
    return bodyI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
} / _* startI:POS UNEXPECTED endI:EOC {
    return nil, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected a body, or nothing")
}

body <- Scope / BracketText / ubsI:UnderscoreBlockShorthand {
    return ubsI, &fileerr.Error{
        Message: "illegal use of underscore block shorthand",
        ErrorAnnotation: annoPos(c, "can only use underscore block shorthand for component calls"),
        Suggestions: []fileerr.Suggestion{
            {Suggestion: "if this is supposed to be a component call, you forgot the `+`"},
            {Suggestion: "remove the `_`"},
        },
    }
} / extI:Extend {
    return ubsI, &fileerr.Error{
        Message: "illegal use of extend",
        ErrorAnnotation: annoPos(c, "only components can extend other components"),
        Suggestions: []fileerr.Suggestion{
            {Suggestion: "place the component call inside a regular `{ scope }`"},
        },
    }
}

// ============================================================================
// Scope
// ======================================================================================

GlobalScope <- scopeStart nodesI:globalScopeNode* rBraceI:scopeEnd {
    return &ast.Scope{
        LBrace: pos(c),
        Nodes:  sliceOf[ast.ScopeNode](nodesI),
        RBrace: rBraceI.(*ast.Position),
    }, nil
}

globalScopeNode <- WS* nodeI:(LoneBrace / Import / State / Component / GlobalCode) {
    return nodeI, nil
}

Scope <- scopeStart nodesI:ScopeNode* rBraceI:scopeEnd {
    return &ast.Scope{
        LBrace: pos(c),
        Nodes:  sliceOf[ast.ScopeNode](nodesI),
        RBrace: rBraceI.(*ast.Position),
    }, nil
}

ScopeNode <- WS* !'}' nodeI:(ValidScopeNode / BadNode) {
    return nodeI, nil
}

ValidScopeNode <- WS* nodeI:validScopeNode {
    return nodeI, nil
}
validScopeNode <- And /                                        // attribute.peg
                       DevComment /                                 // body.peg
                       Code / Return / Continue / Break /           // code.peg
                       ComponentCall / Block /                      // component.peg
                       If / Switch / For /                          // control_structures.peg
                       HTMLComment / And / RawElement / Doctype /   // element.peg, excl. Element, which is last
                       ArrowBlock /                                 // text.peg
                       Element                                      // needs to come last

// ============================================================================
// Extend
// ======================================================================================

Extend <- ccI:ComponentCall {
    return &file.Extend{ComponentCall: ccI.(*ast.ComponentCall)}, nil
}

// ============================================================================
// Lone Brace
// ======================================================================================

LoneBrace <- R_BRACE {
    return &ast.BadNode{
        Line:     "}",
        Position: pos(c),
    }, &fileerr.Error{
        Message: "lone brace",
        ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
            Context:    anno.ContextDelta(-1, 1),
            Highlight:  anno.HighlightPosition(pos(c)),
            Annotation: "no matching opening brace",
        }),
    }
}

// ============================================================================
// BadNode
// ======================================================================================

BadNode <- reservedBadNode / lineI:(!(_* [\r\n;{}]) [^\r\n;{}])+ bodyI:OptionalBody {
    line := concat(lineI)
    return &ast.BadNode{
        Line:     line,
        Body:     optCast[ast.Body](bodyI),
        Position: pos(c),
    }, &fileerr.Error{
        Message: "unrecognized directive or invalid element name",
        ErrorAnnotation: anno.FirstWord(file(c), pos(c), line, "expected a state variable"),
        Suggestions: []fileerr.Suggestion{
            {Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
            {Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
        },
    }
} / LoneBody

LoneBody <- _* &[[{] bodyI:Body {
    return &ast.BadNode{
        Body:     optCast[ast.Body](bodyI),
        Position: pos(c),
    }, &fileerr.Error{
        Message: "lone body",
        ErrorAnnotation: annoPos(c, "this body is not attached to a directive or element"),
        Suggestions: []fileerr.Suggestion{
            {Suggestion: "make sure to place the opening brace/bracket on the same line as the attached directive"},
            {Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
        },
    }
}

reservedBadNode <- resI:RESERVED endI:POS lineI:(!(_* [\r\n;{}]) [^\r\n;{}])+ bodyI:OptionalBody {
    return &ast.BadNode{
        Line:     concat(resI)+concat(lineI),
        Body:     optCast[ast.Body](bodyI),
        Position: pos(c),
    }, &fileerr.Error{
        Message: "potential use of reserved word",
        ErrorAnnotation: annoRange(c, pos(c), endI, "cannot use reserved word as element name"),
        Suggestions: []fileerr.Suggestion{
            {Suggestion: "if this is supposed to be an element, uppercase the first letter"},
            {Suggestion: "if this is Go code, you are seeing this error because you have a syntax error"},
        },
    }
}

// ============================================================================
// Comment
// ======================================================================================

DevComment <- "//" !'-' textI:(!EOL .) EOL {
    return &ast.DevComment{
        Comment:  concat(textI),
        Position: pos(c),
    }, nil
}
