// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mavolin/corgi/escape/attrtype"
	"github.com/mavolin/corgi/file/ast"
	"github.com/mavolin/corgi/file/fileerr"
	anno "github.com/mavolin/corgi/file/fileerr/anno"
)

type ErrList = errList
type ParserError = parserError

var g = &grammar{
	rules: []*rule{
		{
			name: "AST",
			pos:  position{line: 8, col: 1, offset: 89},
			expr: &actionExpr{
				pos: position{line: 8, col: 8, offset: 96},
				run: (*parser).callonAST1,
				expr: &seqExpr{
					pos: position{line: 8, col: 8, offset: 96},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 16, col: 9, offset: 389},
							run: (*parser).callonAST3,
						},
						&labeledExpr{
							pos:   position{line: 8, col: 13, offset: 101},
							label: "docI",
							expr: &actionExpr{
								pos: position{line: 1935, col: 15, offset: 67332},
								run: (*parser).callonAST5,
								expr: &labeledExpr{
									pos:   position{line: 1935, col: 15, offset: 67332},
									label: "commentsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1935, col: 25, offset: 67342},
										expr: &choiceExpr{
											pos: position{line: 1935, col: 26, offset: 67343},
											alternatives: []any{
												&oneOrMoreExpr{
													pos: position{line: 1935, col: 26, offset: 67343},
													expr: &seqExpr{
														pos: position{line: 2508, col: 28, offset: 87430},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2508, col: 28, offset: 87430},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 441, col: 15, offset: 14245},
													run: (*parser).callonAST16,
													expr: &seqExpr{
														pos: position{line: 441, col: 15, offset: 14245},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 441, col: 15, offset: 14245},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&notExpr{
																pos: position{line: 441, col: 20, offset: 14250},
																expr: &litMatcher{
																	pos:        position{line: 441, col: 21, offset: 14251},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 441, col: 25, offset: 14255},
																label: "textI",
																expr: &seqExpr{
																	pos: position{line: 441, col: 32, offset: 14262},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 441, col: 32, offset: 14262},
																			expr: &seqExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2507, col: 23, offset: 87381},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										expr: &litMatcher{
																											pos:        position{line: 2507, col: 27, offset: 87385},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2507, col: 33, offset: 87391},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2506, col: 23, offset: 87356},
																								expr: &anyMatcher{
																									line: 2506, col: 24, offset: 87357,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 441, col: 37, offset: 14267,
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2507, col: 23, offset: 87381},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				expr: &litMatcher{
																					pos:        position{line: 2507, col: 27, offset: 87385},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2507, col: 33, offset: 87391},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2506, col: 23, offset: 87356},
																		expr: &anyMatcher{
																			line: 2506, col: 24, offset: 87357,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 29, offset: 117},
							expr: &seqExpr{
								pos: position{line: 2508, col: 28, offset: 87430},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2508, col: 28, offset: 87430},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2530, col: 37, offset: 88223},
										expr: &litMatcher{
											pos:        position{line: 2530, col: 37, offset: 88223},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2530, col: 43, offset: 88229},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 41, offset: 129},
							label: "pkgI",
							expr: &choiceExpr{
								pos: position{line: 1947, col: 12, offset: 67699},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1949, col: 21, offset: 67763},
										run: (*parser).callonAST53,
										expr: &seqExpr{
											pos: position{line: 1949, col: 21, offset: 67763},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1949, col: 21, offset: 67763},
													val:        "package",
													ignoreCase: false,
													want:       "\"package\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 1949, col: 31, offset: 67773},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 1949, col: 34, offset: 67776},
													label: "nameI",
													expr: &choiceExpr{
														pos: position{line: 1956, col: 16, offset: 67923},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1956, col: 16, offset: 67923},
																run: (*parser).callonAST60,
																expr: &seqExpr{
																	pos: position{line: 1956, col: 16, offset: 67923},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1956, col: 16, offset: 67923},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 245, col: 10, offset: 7100},
																				run: (*parser).callonAST63,
																				expr: &labeledExpr{
																					pos:   position{line: 245, col: 10, offset: 7100},
																					label: "identI",
																					expr: &seqExpr{
																						pos: position{line: 1490, col: 17, offset: 49722},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 1473, col: 20, offset: 49477},
																								val:        "[_\\pL]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 1490, col: 26, offset: 49731},
																								expr: &charClassMatcher{
																									pos:        position{line: 1473, col: 20, offset: 49477},
																									val:        "[_\\pL\\pNd]",
																									chars:      []rune{'_'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1958, col: 5, offset: 67969},
																run: (*parser).callonAST78,
																expr: &seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1967, col: 5, offset: 68299},
																run: (*parser).callonAST89,
																expr: &seqExpr{
																	pos: position{line: 1967, col: 5, offset: 68299},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1967, col: 5, offset: 68299},
																			label: "startI",
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonAST92,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1967, col: 16, offset: 68310},
																			label: "identI",
																			expr: &actionExpr{
																				pos: position{line: 2512, col: 35, offset: 87610},
																				run: (*parser).callonAST99,
																				expr: &seqExpr{
																					pos: position{line: 2512, col: 35, offset: 87610},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2512, col: 35, offset: 87610},
																							expr: &charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2512, col: 38, offset: 87613},
																							label: "unexpectedI",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2512, col: 50, offset: 87625},
																								expr: &seqExpr{
																									pos: position{line: 2512, col: 51, offset: 87626},
																									exprs: []any{
																										&notExpr{
																											pos: position{line: 2512, col: 51, offset: 87626},
																											expr: &choiceExpr{
																												pos: position{line: 2509, col: 27, offset: 87467},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2507, col: 23, offset: 87381},
																														exprs: []any{
																															&zeroOrMoreExpr{
																																pos: position{line: 2507, col: 23, offset: 87381},
																																expr: &charClassMatcher{
																																	pos:        position{line: 2529, col: 37, offset: 88181},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2507, col: 27, offset: 87385},
																																alternatives: []any{
																																	&seqExpr{
																																		pos: position{line: 2507, col: 27, offset: 87385},
																																		exprs: []any{
																																			&zeroOrOneExpr{
																																				pos: position{line: 2507, col: 27, offset: 87385},
																																				expr: &litMatcher{
																																					pos:        position{line: 2507, col: 27, offset: 87385},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2507, col: 33, offset: 87391},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2506, col: 23, offset: 87356},
																																		expr: &anyMatcher{
																																			line: 2506, col: 24, offset: 87357,
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2509, col: 33, offset: 87473},
																														val:        ";",
																														ignoreCase: false,
																														want:       "\";\"",
																													},
																													&andExpr{
																														pos: position{line: 2509, col: 39, offset: 87479},
																														expr: &seqExpr{
																															pos: position{line: 2509, col: 41, offset: 87481},
																															exprs: []any{
																																&zeroOrMoreExpr{
																																	pos: position{line: 2509, col: 41, offset: 87481},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2529, col: 37, offset: 88181},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 2509, col: 45, offset: 87485},
																																	alternatives: []any{
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 45, offset: 87485},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 51, offset: 87491},
																																			val:        "//",
																																			ignoreCase: false,
																																			want:       "\"//\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2512, col: 57, offset: 87632},
																											alternatives: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 2512, col: 57, offset: 87632},
																													expr: &charClassMatcher{
																														pos:        position{line: 2512, col: 57, offset: 87632},
																														val:        "[^\\r\\n;{}]",
																														chars:      []rune{'\r', '\n', ';', '{', '}'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2512, col: 71, offset: 87646},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 2512, col: 71, offset: 87646},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2512, col: 75, offset: 87650},
																															expr: &charClassMatcher{
																																pos:        position{line: 2512, col: 75, offset: 87650},
																																val:        "[^}]",
																																chars:      []rune{'}'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2512, col: 81, offset: 87656},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1971, col: 28, offset: 68444},
										run: (*parser).callonAST143,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonAST144,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 54, offset: 142},
							expr: &seqExpr{
								pos: position{line: 2508, col: 28, offset: 87430},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2508, col: 28, offset: 87430},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2530, col: 37, offset: 88223},
										expr: &litMatcher{
											pos:        position{line: 2530, col: 37, offset: 88223},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2530, col: 43, offset: 88229},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 66, offset: 154},
							label: "scopeI",
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 73, offset: 161},
								name: "GlobalScope",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 8, col: 85, offset: 173},
							expr: &seqExpr{
								pos: position{line: 2508, col: 28, offset: 87430},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2508, col: 28, offset: 87430},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 2530, col: 37, offset: 88223},
										expr: &litMatcher{
											pos:        position{line: 2530, col: 37, offset: 88223},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
									&litMatcher{
										pos:        position{line: 2530, col: 43, offset: 88229},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2506, col: 23, offset: 87356},
							expr: &anyMatcher{
								line: 2506, col: 24, offset: 87357,
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 24, col: 1, offset: 603},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 610},
				run: (*parser).callonAnd1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 610},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 24, col: 8, offset: 610},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 614},
							label: "collsI",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 19, offset: 621},
								name: "andAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andAttributes",
			pos:  position{line: 31, col: 1, offset: 760},
			expr: &choiceExpr{
				pos: position{line: 31, col: 18, offset: 777},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 31, col: 18, offset: 777},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 31, col: 18, offset: 777},
								name: "AttributeCollection",
							},
							&actionExpr{
								pos: position{line: 43, col: 28, offset: 1341},
								run: (*parser).callonandAttributes4,
								expr: &seqExpr{
									pos: position{line: 43, col: 28, offset: 1341},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2512, col: 35, offset: 87610},
											run: (*parser).callonandAttributes6,
											expr: &seqExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2512, col: 35, offset: 87610},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&labeledExpr{
														pos:   position{line: 2512, col: 38, offset: 87613},
														label: "unexpectedI",
														expr: &oneOrMoreExpr{
															pos: position{line: 2512, col: 50, offset: 87625},
															expr: &seqExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 2512, col: 51, offset: 87626},
																		expr: &choiceExpr{
																			pos: position{line: 2509, col: 27, offset: 87467},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2507, col: 23, offset: 87381},
																							expr: &charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2507, col: 27, offset: 87385},
																											expr: &litMatcher{
																												pos:        position{line: 2507, col: 27, offset: 87385},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2507, col: 33, offset: 87391},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2506, col: 23, offset: 87356},
																									expr: &anyMatcher{
																										line: 2506, col: 24, offset: 87357,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2509, col: 33, offset: 87473},
																					val:        ";",
																					ignoreCase: false,
																					want:       "\";\"",
																				},
																				&andExpr{
																					pos: position{line: 2509, col: 39, offset: 87479},
																					expr: &seqExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2509, col: 41, offset: 87481},
																								expr: &charClassMatcher{
																									pos:        position{line: 2529, col: 37, offset: 88181},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2509, col: 45, offset: 87485},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2509, col: 45, offset: 87485},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2509, col: 51, offset: 87491},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		alternatives: []any{
																			&oneOrMoreExpr{
																				pos: position{line: 2512, col: 57, offset: 87632},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 57, offset: 87632},
																					val:        "[^\\r\\n;{}]",
																					chars:      []rune{'\r', '\n', ';', '{', '}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2512, col: 71, offset: 87646},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 2512, col: 71, offset: 87646},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 2512, col: 75, offset: 87650},
																						expr: &charClassMatcher{
																							pos:        position{line: 2512, col: 75, offset: 87650},
																							val:        "[^}]",
																							chars:      []rune{'}'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2512, col: 81, offset: 87656},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 43, col: 39, offset: 1352},
											label: "endI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonandAttributes42,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 31, col: 64, offset: 823},
						run: (*parser).callonandAttributes48,
						expr: &actionExpr{
							pos: position{line: 2512, col: 35, offset: 87610},
							run: (*parser).callonandAttributes49,
							expr: &seqExpr{
								pos: position{line: 2512, col: 35, offset: 87610},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&labeledExpr{
										pos:   position{line: 2512, col: 38, offset: 87613},
										label: "unexpectedI",
										expr: &oneOrMoreExpr{
											pos: position{line: 2512, col: 50, offset: 87625},
											expr: &seqExpr{
												pos: position{line: 2512, col: 51, offset: 87626},
												exprs: []any{
													&notExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														expr: &choiceExpr{
															pos: position{line: 2509, col: 27, offset: 87467},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 33, offset: 87473},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2509, col: 39, offset: 87479},
																	expr: &seqExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2509, col: 45, offset: 87485},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2509, col: 45, offset: 87485},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2509, col: 51, offset: 87491},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2512, col: 57, offset: 87632},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																expr: &charClassMatcher{
																	pos:        position{line: 2512, col: 57, offset: 87632},
																	val:        "[^\\r\\n;{}]",
																	chars:      []rune{'\r', '\n', ';', '{', '}'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&seqExpr{
																pos: position{line: 2512, col: 71, offset: 87646},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2512, col: 71, offset: 87646},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2512, col: 75, offset: 87650},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 75, offset: 87650},
																			val:        "[^}]",
																			chars:      []rune{'}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2512, col: 81, offset: 87656},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeCollection",
			pos:  position{line: 64, col: 1, offset: 2301},
			expr: &actionExpr{
				pos: position{line: 64, col: 24, offset: 2324},
				run: (*parser).callonAttributeCollection1,
				expr: &labeledExpr{
					pos:   position{line: 64, col: 24, offset: 2324},
					label: "attrsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 64, col: 31, offset: 2331},
						expr: &ruleRefExpr{
							pos:  position{line: 64, col: 31, offset: 2331},
							name: "attributeCollection",
						},
					},
				},
			},
		},
		{
			name: "attributeCollection",
			pos:  position{line: 67, col: 1, offset: 2414},
			expr: &actionExpr{
				pos: position{line: 67, col: 24, offset: 2437},
				run: (*parser).callonattributeCollection1,
				expr: &seqExpr{
					pos: position{line: 67, col: 24, offset: 2437},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 67, col: 24, offset: 2437},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 27, offset: 2440},
							label: "nodeI",
							expr: &choiceExpr{
								pos: position{line: 67, col: 34, offset: 2447},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 78, col: 16, offset: 2630},
										run: (*parser).callonattributeCollection7,
										expr: &seqExpr{
											pos: position{line: 78, col: 16, offset: 2630},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 78, col: 16, offset: 2630},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&labeledExpr{
													pos:   position{line: 78, col: 20, offset: 2634},
													label: "idI",
													expr: &choiceExpr{
														pos: position{line: 85, col: 20, offset: 2776},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 71, col: 18, offset: 2538},
																run: (*parser).callonattributeCollection12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 71, col: 18, offset: 2538},
																	expr: &charClassMatcher{
																		pos:        position{line: 71, col: 18, offset: 2538},
																		val:        "[^ \\t\\r\\n.#()[]{};]",
																		chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ';'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 85, col: 36, offset: 2792},
																run: (*parser).callonattributeCollection15,
																expr: &actionExpr{
																	pos: position{line: 2519, col: 8, offset: 87865},
																	run: (*parser).callonattributeCollection16,
																	expr: &choiceExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				expr: &anyMatcher{
																					line: 2519, col: 10, offset: 87867,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2519, col: 14, offset: 87871},
																				expr: &anyMatcher{
																					line: 2519, col: 15, offset: 87872,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 96, col: 19, offset: 2989},
										run: (*parser).callonattributeCollection22,
										expr: &seqExpr{
											pos: position{line: 96, col: 19, offset: 2989},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 96, col: 19, offset: 2989},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&labeledExpr{
													pos:   position{line: 96, col: 23, offset: 2993},
													label: "nameI",
													expr: &choiceExpr{
														pos: position{line: 103, col: 23, offset: 3148},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 71, col: 18, offset: 2538},
																run: (*parser).callonattributeCollection27,
																expr: &oneOrMoreExpr{
																	pos: position{line: 71, col: 18, offset: 2538},
																	expr: &charClassMatcher{
																		pos:        position{line: 71, col: 18, offset: 2538},
																		val:        "[^ \\t\\r\\n.#()[]{};]",
																		chars:      []rune{' ', '\t', '\r', '\n', '.', '#', '(', ')', '[', ']', '{', '}', ';'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 103, col: 39, offset: 3164},
																run: (*parser).callonattributeCollection30,
																expr: &actionExpr{
																	pos: position{line: 2519, col: 8, offset: 87865},
																	run: (*parser).callonattributeCollection31,
																	expr: &choiceExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				expr: &anyMatcher{
																					line: 2519, col: 10, offset: 87867,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2519, col: 14, offset: 87871},
																				expr: &anyMatcher{
																					line: 2519, col: 15, offset: 87872,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 65, offset: 2478},
										name: "AttributeList",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeList",
			pos:  position{line: 115, col: 1, offset: 3361},
			expr: &actionExpr{
				pos: position{line: 115, col: 18, offset: 3378},
				run: (*parser).callonAttributeList1,
				expr: &seqExpr{
					pos: position{line: 115, col: 18, offset: 3378},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2612, col: 14, offset: 91211},
							run: (*parser).callonAttributeList3,
							expr: &seqExpr{
								pos: position{line: 2612, col: 14, offset: 91211},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonAttributeList5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonAttributeList11,
									},
									&labeledExpr{
										pos:   position{line: 2612, col: 24, offset: 91221},
										label: "lParenI",
										expr: &actionExpr{
											pos: position{line: 2538, col: 12, offset: 88518},
											run: (*parser).callonAttributeList13,
											expr: &seqExpr{
												pos: position{line: 2538, col: 12, offset: 88518},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2538, col: 12, offset: 88518},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonAttributeList16,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2538, col: 21, offset: 88527},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2612, col: 40, offset: 91237},
										expr: &choiceExpr{
											pos: position{line: 2532, col: 20, offset: 88254},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2532, col: 31, offset: 88265},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															run: (*parser).callonAttributeList27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2530, col: 37, offset: 88223},
															expr: &litMatcher{
																pos:        position{line: 2530, col: 37, offset: 88223},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2530, col: 43, offset: 88229},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 28, offset: 3388},
							label: "attributesI",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 40, offset: 3400},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 40, offset: 3400},
									name: "attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 52, offset: 3412},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 123, col: 21, offset: 3636},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2616, col: 12, offset: 91297},
										run: (*parser).callonAttributeList36,
										expr: &seqExpr{
											pos: position{line: 2616, col: 12, offset: 91297},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2616, col: 12, offset: 91297},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2616, col: 15, offset: 91300},
													expr: &seqExpr{
														pos: position{line: 2616, col: 16, offset: 91301},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2616, col: 16, offset: 91301},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2616, col: 20, offset: 91305},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).callonAttributeList47,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2616, col: 26, offset: 91311},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2539, col: 12, offset: 88579},
														run: (*parser).callonAttributeList52,
														expr: &seqExpr{
															pos: position{line: 2539, col: 12, offset: 88579},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2539, col: 12, offset: 88579},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonAttributeList55,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2539, col: 21, offset: 88588},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonAttributeList62,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 123, col: 31, offset: 3646},
										run: (*parser).callonAttributeList63,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonAttributeList64,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attributes",
			pos:  position{line: 127, col: 1, offset: 3700},
			expr: &actionExpr{
				pos: position{line: 127, col: 15, offset: 3714},
				run: (*parser).callonattributes1,
				expr: &seqExpr{
					pos: position{line: 127, col: 15, offset: 3714},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 127, col: 15, offset: 3714},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 22, offset: 3721},
								name: "Attribute",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 32, offset: 3731},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 127, col: 38, offset: 3737},
								expr: &seqExpr{
									pos: position{line: 127, col: 39, offset: 3738},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 127, col: 39, offset: 3738},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 127, col: 42, offset: 3741},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 127, col: 46, offset: 3745},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonattributes15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 127, col: 50, offset: 3749},
											name: "Attribute",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 135, col: 1, offset: 4012},
			expr: &choiceExpr{
				pos: position{line: 135, col: 14, offset: 4025},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 150, col: 19, offset: 4434},
						run: (*parser).callonAttribute2,
						expr: &seqExpr{
							pos: position{line: 150, col: 19, offset: 4434},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 150, col: 19, offset: 4434},
									val:        "&&",
									ignoreCase: false,
									want:       "\"&&\"",
								},
								&andExpr{
									pos: position{line: 150, col: 24, offset: 4439},
									expr: &seqExpr{
										pos: position{line: 150, col: 26, offset: 4441},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 150, col: 26, offset: 4441},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 150, col: 29, offset: 4444},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 135, col: 31, offset: 4042},
						name: "SimpleAttribute",
					},
				},
			},
		},
		{
			name: "SimpleAttribute",
			pos:  position{line: 158, col: 1, offset: 4535},
			expr: &actionExpr{
				pos: position{line: 158, col: 20, offset: 4554},
				run: (*parser).callonSimpleAttribute1,
				expr: &seqExpr{
					pos: position{line: 158, col: 20, offset: 4554},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 158, col: 20, offset: 4554},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 137, col: 18, offset: 4076},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 137, col: 18, offset: 4076},
										run: (*parser).callonSimpleAttribute5,
										expr: &seqExpr{
											pos: position{line: 137, col: 18, offset: 4076},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 137, col: 18, offset: 4076},
													expr: &seqExpr{
														pos: position{line: 137, col: 19, offset: 4077},
														exprs: []any{
															&notExpr{
																pos: position{line: 137, col: 19, offset: 4077},
																expr: &charClassMatcher{
																	pos:        position{line: 137, col: 20, offset: 4078},
																	val:        "[(),=]",
																	chars:      []rune{'(', ')', ',', '='},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&notExpr{
																pos: position{line: 1924, col: 26, offset: 66799},
																expr: &charClassMatcher{
																	pos:        position{line: 1900, col: 27, offset: 65707},
																	val:        "[ \"\\>/=\\ufffe\\uffff\\U0001fffe\\U0001ffff\\U0002fffe\\U0002ffff\\U0003fffe\\U0003ffff\\U0004fffe\\U0004ffff\\U0005fffe\\U0005ffff\\U0006fffe\\U0006ffff\\U0007fffe\\U0007ffff\\U0008fffe\\U0008ffff\\U0009fffe\\U0009ffff\\U000afffe\\U000affff\\U000bfffe\\U000bffff\\U000cfffe\\U000cffff\\U000dfffe\\U000dffff\\U000efffe\\U000fffff\\U0010fffe\\U0010ffff\\x00-\\x1f\\x7f-\\u009f\\ufdd0-\\ufdef]",
																	chars:      []rune{' ', '"', '\'', '>', '/', '=', '\ufffe', '\uffff', '\U0001fffe', '\U0001ffff', '\U0002fffe', '\U0002ffff', '\U0003fffe', '\U0003ffff', '\U0004fffe', '\U0004ffff', '\U0005fffe', '\U0005ffff', '\U0006fffe', '\U0006ffff', '\U0007fffe', '\U0007ffff', '\U0008fffe', '\U0008ffff', '\U0009fffe', '\U0009ffff', '\U000afffe', '\U000affff', '\U000bfffe', '\U000bffff', '\U000cfffe', '\U000cffff', '\U000dfffe', '\U000dffff', '\U000efffe', '\U000fffff', '\U0010fffe', '\U0010ffff'},
																	ranges:     []rune{'\x00', '\x1f', '\x7f', '\u009f', '\ufdd0', '\ufdef'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&anyMatcher{
																line: 1924, col: 101, offset: 66874,
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 137, col: 51, offset: 4109},
													expr: &seqExpr{
														pos: position{line: 137, col: 53, offset: 4111},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 137, col: 53, offset: 4111},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 137, col: 56, offset: 4114},
																val:        "[\\r\\n=,)]",
																chars:      []rune{'\r', '\n', '=', ',', ')'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 139, col: 5, offset: 4162},
										run: (*parser).callonSimpleAttribute19,
										expr: &oneOrMoreExpr{
											pos: position{line: 139, col: 5, offset: 4162},
											expr: &seqExpr{
												pos: position{line: 139, col: 6, offset: 4163},
												exprs: []any{
													&notExpr{
														pos: position{line: 139, col: 6, offset: 4163},
														expr: &seqExpr{
															pos: position{line: 139, col: 8, offset: 4165},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 139, col: 8, offset: 4165},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 139, col: 11, offset: 4168},
																	val:        "[,=)]",
																	chars:      []rune{',', '=', ')'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 139, col: 18, offset: 4175},
														val:        "[^\\r\\t(),=]",
														chars:      []rune{'\r', '\t', '(', ')', ',', '='},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 158, col: 40, offset: 4574},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 158, col: 43, offset: 4577},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 48, offset: 4582},
								name: "simpleAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "simpleAttributeValue",
			pos:  position{line: 165, col: 1, offset: 4715},
			expr: &choiceExpr{
				pos: position{line: 165, col: 25, offset: 4739},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 165, col: 25, offset: 4739},
						run: (*parser).callonsimpleAttributeValue2,
						expr: &andExpr{
							pos: position{line: 165, col: 25, offset: 4739},
							expr: &charClassMatcher{
								pos:        position{line: 165, col: 26, offset: 4740},
								val:        "[,)]",
								chars:      []rune{',', ')'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 167, col: 5, offset: 4789},
						run: (*parser).callonsimpleAttributeValue5,
						expr: &seqExpr{
							pos: position{line: 167, col: 5, offset: 4789},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 167, col: 5, offset: 4789},
									label: "assignI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonsimpleAttributeValue8,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 17, offset: 4801},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 167, col: 21, offset: 4805},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonsimpleAttributeValue19,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 167, col: 25, offset: 4809},
									label: "valI",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 30, offset: 4814},
										name: "AttributeValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 179, col: 1, offset: 5164},
			expr: &choiceExpr{
				pos: position{line: 179, col: 19, offset: 5182},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 179, col: 19, offset: 5182},
						name: "TypedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 41, offset: 5204},
						name: "ComponentCallAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 71, offset: 5234},
						name: "Expression",
					},
					&actionExpr{
						pos: position{line: 179, col: 84, offset: 5247},
						run: (*parser).callonAttributeValue5,
						expr: &actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).callonAttributeValue6,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypedAttributeValue",
			pos:  position{line: 196, col: 1, offset: 5686},
			expr: &actionExpr{
				pos: position{line: 196, col: 24, offset: 5709},
				run: (*parser).callonTypedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 196, col: 24, offset: 5709},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 196, col: 24, offset: 5709},
							label: "typeI",
							expr: &choiceExpr{
								pos: position{line: 210, col: 18, offset: 6174},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 210, col: 18, offset: 6174},
										run: (*parser).callonTypedAttributeValue5,
										expr: &litMatcher{
											pos:        position{line: 210, col: 18, offset: 6174},
											val:        "plain",
											ignoreCase: false,
											want:       "\"plain\"",
										},
									},
									&actionExpr{
										pos: position{line: 212, col: 5, offset: 6219},
										run: (*parser).callonTypedAttributeValue7,
										expr: &litMatcher{
											pos:        position{line: 212, col: 5, offset: 6219},
											val:        "css",
											ignoreCase: false,
											want:       "\"css\"",
										},
									},
									&actionExpr{
										pos: position{line: 214, col: 5, offset: 6260},
										run: (*parser).callonTypedAttributeValue9,
										expr: &litMatcher{
											pos:        position{line: 214, col: 5, offset: 6260},
											val:        "js",
											ignoreCase: false,
											want:       "\"js\"",
										},
									},
									&actionExpr{
										pos: position{line: 216, col: 5, offset: 6299},
										run: (*parser).callonTypedAttributeValue11,
										expr: &litMatcher{
											pos:        position{line: 216, col: 5, offset: 6299},
											val:        "url",
											ignoreCase: false,
											want:       "\"url\"",
										},
									},
									&actionExpr{
										pos: position{line: 218, col: 5, offset: 6340},
										run: (*parser).callonTypedAttributeValue13,
										expr: &litMatcher{
											pos:        position{line: 218, col: 5, offset: 6340},
											val:        "urlList",
											ignoreCase: false,
											want:       "\"urlList\"",
										},
									},
									&actionExpr{
										pos: position{line: 220, col: 5, offset: 6389},
										run: (*parser).callonTypedAttributeValue15,
										expr: &litMatcher{
											pos:        position{line: 220, col: 5, offset: 6389},
											val:        "resourceURL",
											ignoreCase: false,
											want:       "\"resourceURL\"",
										},
									},
									&actionExpr{
										pos: position{line: 222, col: 5, offset: 6446},
										run: (*parser).callonTypedAttributeValue17,
										expr: &litMatcher{
											pos:        position{line: 222, col: 5, offset: 6446},
											val:        "srcset",
											ignoreCase: false,
											want:       "\"srcset\"",
										},
									},
									&actionExpr{
										pos: position{line: 224, col: 5, offset: 6493},
										run: (*parser).callonTypedAttributeValue19,
										expr: &litMatcher{
											pos:        position{line: 224, col: 5, offset: 6493},
											val:        "unsafe",
											ignoreCase: false,
											want:       "\"unsafe\"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 44, offset: 5729},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 47, offset: 5732},
							label: "lParenI",
							expr: &actionExpr{
								pos: position{line: 2612, col: 14, offset: 91211},
								run: (*parser).callonTypedAttributeValue24,
								expr: &seqExpr{
									pos: position{line: 2612, col: 14, offset: 91211},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonTypedAttributeValue26,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2586, col: 18, offset: 90318},
											run: (*parser).callonTypedAttributeValue32,
										},
										&labeledExpr{
											pos:   position{line: 2612, col: 24, offset: 91221},
											label: "lParenI",
											expr: &actionExpr{
												pos: position{line: 2538, col: 12, offset: 88518},
												run: (*parser).callonTypedAttributeValue34,
												expr: &seqExpr{
													pos: position{line: 2538, col: 12, offset: 88518},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2538, col: 12, offset: 88518},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonTypedAttributeValue37,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2538, col: 21, offset: 88527},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2612, col: 40, offset: 91237},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonTypedAttributeValue48,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 65, offset: 5750},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 70, offset: 5755},
								name: "typedAttributeValueValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 95, offset: 5780},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 206, col: 27, offset: 6092},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2616, col: 12, offset: 91297},
										run: (*parser).callonTypedAttributeValue56,
										expr: &seqExpr{
											pos: position{line: 2616, col: 12, offset: 91297},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2616, col: 12, offset: 91297},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2616, col: 15, offset: 91300},
													expr: &seqExpr{
														pos: position{line: 2616, col: 16, offset: 91301},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2616, col: 16, offset: 91301},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2616, col: 20, offset: 91305},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).callonTypedAttributeValue67,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2616, col: 26, offset: 91311},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2539, col: 12, offset: 88579},
														run: (*parser).callonTypedAttributeValue72,
														expr: &seqExpr{
															pos: position{line: 2539, col: 12, offset: 88579},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2539, col: 12, offset: 88579},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonTypedAttributeValue75,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2539, col: 21, offset: 88588},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonTypedAttributeValue82,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 206, col: 37, offset: 6102},
										run: (*parser).callonTypedAttributeValue83,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonTypedAttributeValue84,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typedAttributeValueValue",
			pos:  position{line: 228, col: 1, offset: 6539},
			expr: &ruleRefExpr{
				pos:  position{line: 228, col: 29, offset: 6567},
				name: "Expression",
			},
		},
		{
			name: "ComponentCallAttributeValue",
			pos:  position{line: 234, col: 1, offset: 6620},
			expr: &actionExpr{
				pos: position{line: 234, col: 32, offset: 6651},
				run: (*parser).callonComponentCallAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 234, col: 32, offset: 6651},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 234, col: 32, offset: 6651},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&stateCodeExpr{
							pos: position{line: 2649, col: 16, offset: 92419},
							run: (*parser).callonComponentCallAttributeValue4,
						},
						&labeledExpr{
							pos:   position{line: 234, col: 48, offset: 6667},
							label: "headerI",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 56, offset: 6675},
								name: "ComponentCallHeader",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2656, col: 14, offset: 92518},
							run: (*parser).callonComponentCallAttributeValue7,
						},
						&labeledExpr{
							pos:   position{line: 234, col: 86, offset: 6705},
							label: "valueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 234, col: 93, offset: 6712},
								expr: &ruleRefExpr{
									pos:  position{line: 234, col: 93, offset: 6712},
									name: "InterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 257, col: 1, offset: 7430},
			expr: &actionExpr{
				pos: position{line: 257, col: 9, offset: 7438},
				run: (*parser).callonType1,
				expr: &labeledExpr{
					pos:   position{line: 257, col: 9, offset: 7438},
					label: "typeI",
					expr: &ruleRefExpr{
						pos:  position{line: 257, col: 15, offset: 7444},
						name: "goType",
					},
				},
			},
		},
		{
			name: "Body",
			pos:  position{line: 301, col: 1, offset: 8635},
			expr: &choiceExpr{
				pos: position{line: 301, col: 9, offset: 8643},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 301, col: 9, offset: 8643},
						run: (*parser).callonBody2,
						expr: &seqExpr{
							pos: position{line: 301, col: 9, offset: 8643},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 301, col: 9, offset: 8643},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 301, col: 12, offset: 8646},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 301, col: 18, offset: 8652},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 8685},
						run: (*parser).callonBody8,
						expr: &choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 9019},
						run: (*parser).callonBody28,
						expr: &seqExpr{
							pos: position{line: 312, col: 5, offset: 9019},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 312, col: 5, offset: 9019},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 312, col: 8, offset: 9022},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonBody33,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 312, col: 19, offset: 9033},
									expr: &charClassMatcher{
										pos:        position{line: 312, col: 19, offset: 9033},
										val:        "[^\\r\\n;[{}]",
										chars:      []rune{'\r', '\n', ';', '[', '{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 312, col: 32, offset: 9046},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonBody42,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 312, col: 41, offset: 9055},
									expr: &charClassMatcher{
										pos:        position{line: 312, col: 42, offset: 9056},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 312, col: 47, offset: 9061},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 53, offset: 9067},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 314, col: 5, offset: 9191},
						run: (*parser).callonBody52,
						expr: &seqExpr{
							pos: position{line: 314, col: 5, offset: 9191},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 314, col: 5, offset: 9191},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 314, col: 8, offset: 9194},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonBody57,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2512, col: 35, offset: 87610},
									run: (*parser).callonBody63,
									expr: &seqExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2512, col: 38, offset: 87613},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2512, col: 50, offset: 87625},
													expr: &seqExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														exprs: []any{
															&notExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																expr: &choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 57, offset: 87632},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2512, col: 71, offset: 87646},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2512, col: 71, offset: 87646},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2512, col: 75, offset: 87650},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 75, offset: 87650},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2512, col: 81, offset: 87656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 314, col: 30, offset: 9216},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalBody",
			pos:  position{line: 318, col: 1, offset: 9339},
			expr: &choiceExpr{
				pos: position{line: 318, col: 17, offset: 9355},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 318, col: 17, offset: 9355},
						run: (*parser).callonOptionalBody2,
						expr: &seqExpr{
							pos: position{line: 318, col: 17, offset: 9355},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 318, col: 17, offset: 9355},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 318, col: 20, offset: 9358},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 26, offset: 9364},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 9397},
						run: (*parser).callonOptionalBody8,
						expr: &choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9427},
						run: (*parser).callonOptionalBody28,
						expr: &seqExpr{
							pos: position{line: 322, col: 5, offset: 9427},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 322, col: 5, offset: 9427},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 322, col: 8, offset: 9430},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonOptionalBody33,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 322, col: 19, offset: 9441},
									expr: &charClassMatcher{
										pos:        position{line: 322, col: 19, offset: 9441},
										val:        "[^\\r\\n;[{}]",
										chars:      []rune{'\r', '\n', ';', '[', '{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 322, col: 32, offset: 9454},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonOptionalBody42,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 322, col: 41, offset: 9463},
									expr: &charClassMatcher{
										pos:        position{line: 322, col: 42, offset: 9464},
										val:        "[[{]",
										chars:      []rune{'[', '{'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 322, col: 47, offset: 9469},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 322, col: 53, offset: 9475},
										name: "body",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 324, col: 5, offset: 9599},
						run: (*parser).callonOptionalBody52,
						expr: &seqExpr{
							pos: position{line: 324, col: 5, offset: 9599},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 324, col: 5, offset: 9599},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 324, col: 8, offset: 9602},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonOptionalBody57,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2512, col: 35, offset: 87610},
									run: (*parser).callonOptionalBody63,
									expr: &seqExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2512, col: 38, offset: 87613},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2512, col: 50, offset: 87625},
													expr: &seqExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														exprs: []any{
															&notExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																expr: &choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 57, offset: 87632},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2512, col: 71, offset: 87646},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2512, col: 71, offset: 87646},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2512, col: 75, offset: 87650},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 75, offset: 87650},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2512, col: 81, offset: 87656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 324, col: 30, offset: 9624},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "body",
			pos:  position{line: 328, col: 1, offset: 9759},
			expr: &choiceExpr{
				pos: position{line: 328, col: 9, offset: 9767},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 328, col: 9, offset: 9767},
						name: "Scope",
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 17, offset: 9775},
						name: "BracketText",
					},
				},
			},
		},
		{
			name: "GlobalScope",
			pos:  position{line: 334, col: 1, offset: 9968},
			expr: &actionExpr{
				pos: position{line: 334, col: 16, offset: 9983},
				run: (*parser).callonGlobalScope1,
				expr: &seqExpr{
					pos: position{line: 334, col: 16, offset: 9983},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2628, col: 15, offset: 91592},
							run: (*parser).callonGlobalScope3,
							expr: &seqExpr{
								pos: position{line: 2628, col: 15, offset: 91592},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonGlobalScope5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonGlobalScope11,
									},
									&labeledExpr{
										pos:   position{line: 2628, col: 25, offset: 91602},
										label: "lBraceI",
										expr: &actionExpr{
											pos: position{line: 2541, col: 12, offset: 88641},
											run: (*parser).callonGlobalScope13,
											expr: &seqExpr{
												pos: position{line: 2541, col: 12, offset: 88641},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2541, col: 12, offset: 88641},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonGlobalScope16,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2541, col: 21, offset: 88650},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2628, col: 41, offset: 91618},
										expr: &choiceExpr{
											pos: position{line: 2532, col: 20, offset: 88254},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2532, col: 31, offset: 88265},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															run: (*parser).callonGlobalScope27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2530, col: 37, offset: 88223},
															expr: &litMatcher{
																pos:        position{line: 2530, col: 37, offset: 88223},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2530, col: 43, offset: 88229},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 27, offset: 9994},
							label: "nodesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 334, col: 34, offset: 10001},
								expr: &ruleRefExpr{
									pos:  position{line: 334, col: 34, offset: 10001},
									name: "globalScopeNode",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 51, offset: 10018},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2632, col: 13, offset: 91679},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2632, col: 13, offset: 91679},
										run: (*parser).callonGlobalScope36,
										expr: &seqExpr{
											pos: position{line: 2632, col: 13, offset: 91679},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2632, col: 13, offset: 91679},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).callonGlobalScope42,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2632, col: 17, offset: 91683},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2542, col: 12, offset: 88702},
														run: (*parser).callonGlobalScope47,
														expr: &seqExpr{
															pos: position{line: 2542, col: 12, offset: 88702},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2542, col: 12, offset: 88702},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonGlobalScope50,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2542, col: 21, offset: 88711},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonGlobalScope57,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 5, offset: 91754},
										run: (*parser).callonGlobalScope58,
										expr: &labeledExpr{
											pos:   position{line: 2634, col: 5, offset: 91754},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonGlobalScope60,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "globalScopeNode",
			pos:  position{line: 342, col: 1, offset: 10187},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 10206},
				run: (*parser).callonglobalScopeNode1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 10206},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 20, offset: 10206},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonglobalScopeNode7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 24, offset: 10210},
							label: "nodeI",
							expr: &choiceExpr{
								pos: position{line: 342, col: 31, offset: 10217},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 374, col: 14, offset: 11556},
										run: (*parser).callonglobalScopeNode13,
										expr: &actionExpr{
											pos: position{line: 2542, col: 12, offset: 88702},
											run: (*parser).callonglobalScopeNode14,
											expr: &seqExpr{
												pos: position{line: 2542, col: 12, offset: 88702},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2542, col: 12, offset: 88702},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonglobalScopeNode17,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2542, col: 21, offset: 88711},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1986, col: 17, offset: 68983},
										run: (*parser).callonglobalScopeNode24,
										expr: &seqExpr{
											pos: position{line: 1986, col: 17, offset: 68983},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1986, col: 17, offset: 68983},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 1986, col: 26, offset: 68992},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 1986, col: 29, offset: 68995},
													label: "specI",
													expr: &actionExpr{
														pos: position{line: 2033, col: 15, offset: 70342},
														run: (*parser).callonglobalScopeNode30,
														expr: &seqExpr{
															pos: position{line: 2033, col: 15, offset: 70342},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2033, col: 15, offset: 70342},
																	label: "aliasI",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 2033, col: 22, offset: 70349},
																		expr: &choiceExpr{
																			pos: position{line: 2040, col: 16, offset: 70536},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2040, col: 16, offset: 70536},
																					run: (*parser).callonglobalScopeNode35,
																					expr: &seqExpr{
																						pos: position{line: 2040, col: 16, offset: 70536},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 2040, col: 16, offset: 70536},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2040, col: 20, offset: 70540},
																								expr: &charClassMatcher{
																									pos:        position{line: 2529, col: 37, offset: 88181},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2042, col: 5, offset: 70605},
																					run: (*parser).callonglobalScopeNode40,
																					expr: &seqExpr{
																						pos: position{line: 2042, col: 5, offset: 70605},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2042, col: 5, offset: 70605},
																								label: "identI",
																								expr: &actionExpr{
																									pos: position{line: 245, col: 10, offset: 7100},
																									run: (*parser).callonglobalScopeNode43,
																									expr: &labeledExpr{
																										pos:   position{line: 245, col: 10, offset: 7100},
																										label: "identI",
																										expr: &seqExpr{
																											pos: position{line: 1490, col: 17, offset: 49722},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1473, col: 20, offset: 49477},
																													val:        "[_\\pL]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1490, col: 26, offset: 49731},
																													expr: &charClassMatcher{
																														pos:        position{line: 1473, col: 20, offset: 49477},
																														val:        "[_\\pL\\pNd]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2042, col: 18, offset: 70618},
																								expr: &charClassMatcher{
																									pos:        position{line: 2529, col: 37, offset: 88181},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2044, col: 5, offset: 70650},
																					run: (*parser).callonglobalScopeNode51,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2044, col: 5, offset: 70650},
																						expr: &seqExpr{
																							pos: position{line: 2044, col: 6, offset: 70651},
																							exprs: []any{
																								&notExpr{
																									pos: position{line: 2044, col: 6, offset: 70651},
																									expr: &seqExpr{
																										pos: position{line: 2044, col: 8, offset: 70653},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2044, col: 8, offset: 70653},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&charClassMatcher{
																												pos:        position{line: 2044, col: 11, offset: 70656},
																												val:        "[`\"]",
																												chars:      []rune{'`', '"'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 2044, col: 17, offset: 70662,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2033, col: 35, offset: 70362},
																	label: "pathI",
																	expr: &choiceExpr{
																		pos: position{line: 265, col: 17, offset: 7726},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 271, col: 20, offset: 7811},
																				run: (*parser).callonglobalScopeNode62,
																				expr: &seqExpr{
																					pos: position{line: 271, col: 20, offset: 7811},
																					exprs: []any{
																						&actionExpr{
																							pos: position{line: 1432, col: 19, offset: 48018},
																							run: (*parser).callonglobalScopeNode64,
																							expr: &seqExpr{
																								pos: position{line: 1432, col: 19, offset: 48018},
																								exprs: []any{
																									&actionExpr{
																										pos: position{line: 2519, col: 8, offset: 87865},
																										run: (*parser).callonglobalScopeNode66,
																										expr: &choiceExpr{
																											pos: position{line: 2519, col: 9, offset: 87866},
																											alternatives: []any{
																												&andExpr{
																													pos: position{line: 2519, col: 9, offset: 87866},
																													expr: &anyMatcher{
																														line: 2519, col: 10, offset: 87867,
																													},
																												},
																												&notExpr{
																													pos: position{line: 2519, col: 14, offset: 87871},
																													expr: &anyMatcher{
																														line: 2519, col: 15, offset: 87872,
																													},
																												},
																											},
																										},
																									},
																									&stateCodeExpr{
																										pos: position{line: 2586, col: 18, offset: 90318},
																										run: (*parser).callonglobalScopeNode72,
																									},
																									&labeledExpr{
																										pos:   position{line: 1432, col: 29, offset: 48028},
																										label: "startI",
																										expr: &actionExpr{
																											pos: position{line: 2519, col: 8, offset: 87865},
																											run: (*parser).callonglobalScopeNode74,
																											expr: &choiceExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2519, col: 9, offset: 87866},
																														expr: &anyMatcher{
																															line: 2519, col: 10, offset: 87867,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2519, col: 14, offset: 87871},
																														expr: &anyMatcher{
																															line: 2519, col: 15, offset: 87872,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1432, col: 40, offset: 48039},
																										val:        "`",
																										ignoreCase: false,
																										want:       "\"`\"",
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 271, col: 35, offset: 7826},
																							label: "contentsI",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 271, col: 45, offset: 7836},
																								expr: &charClassMatcher{
																									pos:        position{line: 271, col: 45, offset: 7836},
																									val:        "[^`]",
																									chars:      []rune{'`'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 271, col: 51, offset: 7842},
																							label: "endI",
																							expr: &choiceExpr{
																								pos: position{line: 1433, col: 17, offset: 48098},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1433, col: 17, offset: 48098},
																										run: (*parser).callonglobalScopeNode86,
																										expr: &seqExpr{
																											pos: position{line: 1433, col: 17, offset: 48098},
																											exprs: []any{
																												&labeledExpr{
																													pos:   position{line: 1433, col: 17, offset: 48098},
																													label: "posI",
																													expr: &actionExpr{
																														pos: position{line: 2519, col: 8, offset: 87865},
																														run: (*parser).callonglobalScopeNode89,
																														expr: &choiceExpr{
																															pos: position{line: 2519, col: 9, offset: 87866},
																															alternatives: []any{
																																&andExpr{
																																	pos: position{line: 2519, col: 9, offset: 87866},
																																	expr: &anyMatcher{
																																		line: 2519, col: 10, offset: 87867,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2519, col: 14, offset: 87871},
																																	expr: &anyMatcher{
																																		line: 2519, col: 15, offset: 87872,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1433, col: 26, offset: 48107},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																												&stateCodeExpr{
																													pos: position{line: 2592, col: 13, offset: 90451},
																													run: (*parser).callonglobalScopeNode96,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1435, col: 5, offset: 48163},
																										run: (*parser).callonglobalScopeNode97,
																										expr: &labeledExpr{
																											pos:   position{line: 1435, col: 5, offset: 48163},
																											label: "posI",
																											expr: &actionExpr{
																												pos: position{line: 2519, col: 8, offset: 87865},
																												run: (*parser).callonglobalScopeNode99,
																												expr: &choiceExpr{
																													pos: position{line: 2519, col: 9, offset: 87866},
																													alternatives: []any{
																														&andExpr{
																															pos: position{line: 2519, col: 9, offset: 87866},
																															expr: &anyMatcher{
																																line: 2519, col: 10, offset: 87867,
																															},
																														},
																														&notExpr{
																															pos: position{line: 2519, col: 14, offset: 87871},
																															expr: &anyMatcher{
																																line: 2519, col: 15, offset: 87872,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 284, col: 28, offset: 8090},
																				run: (*parser).callonglobalScopeNode105,
																				expr: &seqExpr{
																					pos: position{line: 284, col: 28, offset: 8090},
																					exprs: []any{
																						&actionExpr{
																							pos: position{line: 1406, col: 27, offset: 47114},
																							run: (*parser).callonglobalScopeNode107,
																							expr: &seqExpr{
																								pos: position{line: 1406, col: 27, offset: 47114},
																								exprs: []any{
																									&actionExpr{
																										pos: position{line: 2519, col: 8, offset: 87865},
																										run: (*parser).callonglobalScopeNode109,
																										expr: &choiceExpr{
																											pos: position{line: 2519, col: 9, offset: 87866},
																											alternatives: []any{
																												&andExpr{
																													pos: position{line: 2519, col: 9, offset: 87866},
																													expr: &anyMatcher{
																														line: 2519, col: 10, offset: 87867,
																													},
																												},
																												&notExpr{
																													pos: position{line: 2519, col: 14, offset: 87871},
																													expr: &anyMatcher{
																														line: 2519, col: 15, offset: 87872,
																													},
																												},
																											},
																										},
																									},
																									&stateCodeExpr{
																										pos: position{line: 2586, col: 18, offset: 90318},
																										run: (*parser).callonglobalScopeNode115,
																									},
																									&labeledExpr{
																										pos:   position{line: 1406, col: 37, offset: 47124},
																										label: "startI",
																										expr: &actionExpr{
																											pos: position{line: 2519, col: 8, offset: 87865},
																											run: (*parser).callonglobalScopeNode117,
																											expr: &choiceExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2519, col: 9, offset: 87866},
																														expr: &anyMatcher{
																															line: 2519, col: 10, offset: 87867,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2519, col: 14, offset: 87871},
																														expr: &anyMatcher{
																															line: 2519, col: 15, offset: 87872,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1406, col: 48, offset: 47135},
																										val:        "\"",
																										ignoreCase: false,
																										want:       "\"\\\"\"",
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 284, col: 51, offset: 8113},
																							label: "contentsI",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 284, col: 61, offset: 8123},
																								expr: &actionExpr{
																									pos: position{line: 293, col: 36, offset: 8398},
																									run: (*parser).callonglobalScopeNode126,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 293, col: 36, offset: 8398},
																										expr: &choiceExpr{
																											pos: position{line: 293, col: 37, offset: 8399},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 293, col: 37, offset: 8399},
																													val:        "\\\"",
																													ignoreCase: false,
																													want:       "\"\\\\\\\"\"",
																												},
																												&litMatcher{
																													pos:        position{line: 293, col: 44, offset: 8406},
																													val:        "\\\\",
																													ignoreCase: false,
																													want:       "\"\\\\\\\\\"",
																												},
																												&charClassMatcher{
																													pos:        position{line: 293, col: 51, offset: 8413},
																													val:        "[^\"]",
																													chars:      []rune{'"'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 284, col: 94, offset: 8156},
																							label: "endI",
																							expr: &choiceExpr{
																								pos: position{line: 1407, col: 25, offset: 47202},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1407, col: 25, offset: 47202},
																										run: (*parser).callonglobalScopeNode134,
																										expr: &seqExpr{
																											pos: position{line: 1407, col: 25, offset: 47202},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 1407, col: 25, offset: 47202},
																													val:        "\"",
																													ignoreCase: false,
																													want:       "\"\\\"\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 1407, col: 29, offset: 47206},
																													label: "endI",
																													expr: &actionExpr{
																														pos: position{line: 2519, col: 8, offset: 87865},
																														run: (*parser).callonglobalScopeNode138,
																														expr: &choiceExpr{
																															pos: position{line: 2519, col: 9, offset: 87866},
																															alternatives: []any{
																																&andExpr{
																																	pos: position{line: 2519, col: 9, offset: 87866},
																																	expr: &anyMatcher{
																																		line: 2519, col: 10, offset: 87867,
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2519, col: 14, offset: 87871},
																																	expr: &anyMatcher{
																																		line: 2519, col: 15, offset: 87872,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&stateCodeExpr{
																													pos: position{line: 2592, col: 13, offset: 90451},
																													run: (*parser).callonglobalScopeNode144,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1409, col: 5, offset: 47267},
																										run: (*parser).callonglobalScopeNode145,
																										expr: &labeledExpr{
																											pos:   position{line: 1409, col: 5, offset: 47267},
																											label: "endI",
																											expr: &actionExpr{
																												pos: position{line: 2519, col: 8, offset: 87865},
																												run: (*parser).callonglobalScopeNode147,
																												expr: &choiceExpr{
																													pos: position{line: 2519, col: 9, offset: 87866},
																													alternatives: []any{
																														&andExpr{
																															pos: position{line: 2519, col: 9, offset: 87866},
																															expr: &anyMatcher{
																																line: 2519, col: 10, offset: 87867,
																															},
																														},
																														&notExpr{
																															pos: position{line: 2519, col: 14, offset: 87871},
																															expr: &anyMatcher{
																																line: 2519, col: 15, offset: 87872,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2509, col: 27, offset: 87467},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2509, col: 33, offset: 87473},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2509, col: 39, offset: 87479},
															expr: &seqExpr{
																pos: position{line: 2509, col: 41, offset: 87481},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2509, col: 45, offset: 87485},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2509, col: 45, offset: 87485},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 51, offset: 87491},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1993, col: 16, offset: 69157},
										run: (*parser).callonglobalScopeNode191,
										expr: &seqExpr{
											pos: position{line: 1993, col: 16, offset: 69157},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1993, col: 16, offset: 69157},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1993, col: 25, offset: 69166},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 1993, col: 28, offset: 69169},
													label: "lParenI",
													expr: &actionExpr{
														pos: position{line: 2612, col: 14, offset: 91211},
														run: (*parser).callonglobalScopeNode197,
														expr: &seqExpr{
															pos: position{line: 2612, col: 14, offset: 91211},
															exprs: []any{
																&actionExpr{
																	pos: position{line: 2519, col: 8, offset: 87865},
																	run: (*parser).callonglobalScopeNode199,
																	expr: &choiceExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				expr: &anyMatcher{
																					line: 2519, col: 10, offset: 87867,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2519, col: 14, offset: 87871},
																				expr: &anyMatcher{
																					line: 2519, col: 15, offset: 87872,
																				},
																			},
																		},
																	},
																},
																&stateCodeExpr{
																	pos: position{line: 2586, col: 18, offset: 90318},
																	run: (*parser).callonglobalScopeNode205,
																},
																&labeledExpr{
																	pos:   position{line: 2612, col: 24, offset: 91221},
																	label: "lParenI",
																	expr: &actionExpr{
																		pos: position{line: 2538, col: 12, offset: 88518},
																		run: (*parser).callonglobalScopeNode207,
																		expr: &seqExpr{
																			pos: position{line: 2538, col: 12, offset: 88518},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 2538, col: 12, offset: 88518},
																					label: "posI",
																					expr: &actionExpr{
																						pos: position{line: 2519, col: 8, offset: 87865},
																						run: (*parser).callonglobalScopeNode210,
																						expr: &choiceExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							alternatives: []any{
																								&andExpr{
																									pos: position{line: 2519, col: 9, offset: 87866},
																									expr: &anyMatcher{
																										line: 2519, col: 10, offset: 87867,
																									},
																								},
																								&notExpr{
																									pos: position{line: 2519, col: 14, offset: 87871},
																									expr: &anyMatcher{
																										line: 2519, col: 15, offset: 87872,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2538, col: 21, offset: 88527},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2612, col: 40, offset: 91237},
																	expr: &choiceExpr{
																		pos: position{line: 2532, col: 20, offset: 88254},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2532, col: 31, offset: 88265},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2532, col: 31, offset: 88265},
																						run: (*parser).callonglobalScopeNode221,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2530, col: 37, offset: 88223},
																						expr: &litMatcher{
																							pos:        position{line: 2530, col: 37, offset: 88223},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2530, col: 43, offset: 88229},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1993, col: 46, offset: 69187},
													label: "nodesI",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1993, col: 53, offset: 69194},
														expr: &actionExpr{
															pos: position{line: 2029, col: 15, offset: 70249},
															run: (*parser).callonglobalScopeNode227,
															expr: &seqExpr{
																pos: position{line: 2029, col: 15, offset: 70249},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2029, col: 15, offset: 70249},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).callonglobalScopeNode233,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2029, col: 19, offset: 70253},
																		label: "nodeI",
																		expr: &choiceExpr{
																			pos: position{line: 2029, col: 26, offset: 70260},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 441, col: 15, offset: 14245},
																					run: (*parser).callonglobalScopeNode239,
																					expr: &seqExpr{
																						pos: position{line: 441, col: 15, offset: 14245},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 441, col: 15, offset: 14245},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 441, col: 20, offset: 14250},
																								expr: &litMatcher{
																									pos:        position{line: 441, col: 21, offset: 14251},
																									val:        "-",
																									ignoreCase: false,
																									want:       "\"-\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 441, col: 25, offset: 14255},
																								label: "textI",
																								expr: &seqExpr{
																									pos: position{line: 441, col: 32, offset: 14262},
																									exprs: []any{
																										&notExpr{
																											pos: position{line: 441, col: 32, offset: 14262},
																											expr: &seqExpr{
																												pos: position{line: 2507, col: 23, offset: 87381},
																												exprs: []any{
																													&zeroOrMoreExpr{
																														pos: position{line: 2507, col: 23, offset: 87381},
																														expr: &charClassMatcher{
																															pos:        position{line: 2529, col: 37, offset: 88181},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2507, col: 27, offset: 87385},
																														alternatives: []any{
																															&seqExpr{
																																pos: position{line: 2507, col: 27, offset: 87385},
																																exprs: []any{
																																	&zeroOrOneExpr{
																																		pos: position{line: 2507, col: 27, offset: 87385},
																																		expr: &litMatcher{
																																			pos:        position{line: 2507, col: 27, offset: 87385},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2507, col: 33, offset: 87391},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2506, col: 23, offset: 87356},
																																expr: &anyMatcher{
																																	line: 2506, col: 24, offset: 87357,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&anyMatcher{
																											line: 441, col: 37, offset: 14267,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2507, col: 23, offset: 87381},
																								expr: &charClassMatcher{
																									pos:        position{line: 2529, col: 37, offset: 88181},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										exprs: []any{
																											&zeroOrOneExpr{
																												pos: position{line: 2507, col: 27, offset: 87385},
																												expr: &litMatcher{
																													pos:        position{line: 2507, col: 27, offset: 87385},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 2507, col: 33, offset: 87391},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2506, col: 23, offset: 87356},
																										expr: &anyMatcher{
																											line: 2506, col: 24, offset: 87357,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2033, col: 15, offset: 70342},
																					run: (*parser).callonglobalScopeNode267,
																					expr: &seqExpr{
																						pos: position{line: 2033, col: 15, offset: 70342},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2033, col: 15, offset: 70342},
																								label: "aliasI",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 2033, col: 22, offset: 70349},
																									expr: &choiceExpr{
																										pos: position{line: 2040, col: 16, offset: 70536},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 2040, col: 16, offset: 70536},
																												run: (*parser).callonglobalScopeNode272,
																												expr: &seqExpr{
																													pos: position{line: 2040, col: 16, offset: 70536},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 2040, col: 16, offset: 70536},
																															val:        ".",
																															ignoreCase: false,
																															want:       "\".\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2040, col: 20, offset: 70540},
																															expr: &charClassMatcher{
																																pos:        position{line: 2529, col: 37, offset: 88181},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2042, col: 5, offset: 70605},
																												run: (*parser).callonglobalScopeNode277,
																												expr: &seqExpr{
																													pos: position{line: 2042, col: 5, offset: 70605},
																													exprs: []any{
																														&labeledExpr{
																															pos:   position{line: 2042, col: 5, offset: 70605},
																															label: "identI",
																															expr: &actionExpr{
																																pos: position{line: 245, col: 10, offset: 7100},
																																run: (*parser).callonglobalScopeNode280,
																																expr: &labeledExpr{
																																	pos:   position{line: 245, col: 10, offset: 7100},
																																	label: "identI",
																																	expr: &seqExpr{
																																		pos: position{line: 1490, col: 17, offset: 49722},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 1473, col: 20, offset: 49477},
																																				val:        "[_\\pL]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1490, col: 26, offset: 49731},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1473, col: 20, offset: 49477},
																																					val:        "[_\\pL\\pNd]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2042, col: 18, offset: 70618},
																															expr: &charClassMatcher{
																																pos:        position{line: 2529, col: 37, offset: 88181},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2044, col: 5, offset: 70650},
																												run: (*parser).callonglobalScopeNode288,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2044, col: 5, offset: 70650},
																													expr: &seqExpr{
																														pos: position{line: 2044, col: 6, offset: 70651},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2044, col: 6, offset: 70651},
																																expr: &seqExpr{
																																	pos: position{line: 2044, col: 8, offset: 70653},
																																	exprs: []any{
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2044, col: 8, offset: 70653},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2529, col: 37, offset: 88181},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																		&charClassMatcher{
																																			pos:        position{line: 2044, col: 11, offset: 70656},
																																			val:        "[`\"]",
																																			chars:      []rune{'`', '"'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																															&anyMatcher{
																																line: 2044, col: 17, offset: 70662,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2033, col: 35, offset: 70362},
																								label: "pathI",
																								expr: &choiceExpr{
																									pos: position{line: 265, col: 17, offset: 7726},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 271, col: 20, offset: 7811},
																											run: (*parser).callonglobalScopeNode299,
																											expr: &seqExpr{
																												pos: position{line: 271, col: 20, offset: 7811},
																												exprs: []any{
																													&actionExpr{
																														pos: position{line: 1432, col: 19, offset: 48018},
																														run: (*parser).callonglobalScopeNode301,
																														expr: &seqExpr{
																															pos: position{line: 1432, col: 19, offset: 48018},
																															exprs: []any{
																																&actionExpr{
																																	pos: position{line: 2519, col: 8, offset: 87865},
																																	run: (*parser).callonglobalScopeNode303,
																																	expr: &choiceExpr{
																																		pos: position{line: 2519, col: 9, offset: 87866},
																																		alternatives: []any{
																																			&andExpr{
																																				pos: position{line: 2519, col: 9, offset: 87866},
																																				expr: &anyMatcher{
																																					line: 2519, col: 10, offset: 87867,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2519, col: 14, offset: 87871},
																																				expr: &anyMatcher{
																																					line: 2519, col: 15, offset: 87872,
																																				},
																																			},
																																		},
																																	},
																																},
																																&stateCodeExpr{
																																	pos: position{line: 2586, col: 18, offset: 90318},
																																	run: (*parser).callonglobalScopeNode309,
																																},
																																&labeledExpr{
																																	pos:   position{line: 1432, col: 29, offset: 48028},
																																	label: "startI",
																																	expr: &actionExpr{
																																		pos: position{line: 2519, col: 8, offset: 87865},
																																		run: (*parser).callonglobalScopeNode311,
																																		expr: &choiceExpr{
																																			pos: position{line: 2519, col: 9, offset: 87866},
																																			alternatives: []any{
																																				&andExpr{
																																					pos: position{line: 2519, col: 9, offset: 87866},
																																					expr: &anyMatcher{
																																						line: 2519, col: 10, offset: 87867,
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2519, col: 14, offset: 87871},
																																					expr: &anyMatcher{
																																						line: 2519, col: 15, offset: 87872,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 1432, col: 40, offset: 48039},
																																	val:        "`",
																																	ignoreCase: false,
																																	want:       "\"`\"",
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 271, col: 35, offset: 7826},
																														label: "contentsI",
																														expr: &zeroOrMoreExpr{
																															pos: position{line: 271, col: 45, offset: 7836},
																															expr: &charClassMatcher{
																																pos:        position{line: 271, col: 45, offset: 7836},
																																val:        "[^`]",
																																chars:      []rune{'`'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 271, col: 51, offset: 7842},
																														label: "endI",
																														expr: &choiceExpr{
																															pos: position{line: 1433, col: 17, offset: 48098},
																															alternatives: []any{
																																&actionExpr{
																																	pos: position{line: 1433, col: 17, offset: 48098},
																																	run: (*parser).callonglobalScopeNode323,
																																	expr: &seqExpr{
																																		pos: position{line: 1433, col: 17, offset: 48098},
																																		exprs: []any{
																																			&labeledExpr{
																																				pos:   position{line: 1433, col: 17, offset: 48098},
																																				label: "posI",
																																				expr: &actionExpr{
																																					pos: position{line: 2519, col: 8, offset: 87865},
																																					run: (*parser).callonglobalScopeNode326,
																																					expr: &choiceExpr{
																																						pos: position{line: 2519, col: 9, offset: 87866},
																																						alternatives: []any{
																																							&andExpr{
																																								pos: position{line: 2519, col: 9, offset: 87866},
																																								expr: &anyMatcher{
																																									line: 2519, col: 10, offset: 87867,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2519, col: 14, offset: 87871},
																																								expr: &anyMatcher{
																																									line: 2519, col: 15, offset: 87872,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1433, col: 26, offset: 48107},
																																				val:        "`",
																																				ignoreCase: false,
																																				want:       "\"`\"",
																																			},
																																			&stateCodeExpr{
																																				pos: position{line: 2592, col: 13, offset: 90451},
																																				run: (*parser).callonglobalScopeNode333,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1435, col: 5, offset: 48163},
																																	run: (*parser).callonglobalScopeNode334,
																																	expr: &labeledExpr{
																																		pos:   position{line: 1435, col: 5, offset: 48163},
																																		label: "posI",
																																		expr: &actionExpr{
																																			pos: position{line: 2519, col: 8, offset: 87865},
																																			run: (*parser).callonglobalScopeNode336,
																																			expr: &choiceExpr{
																																				pos: position{line: 2519, col: 9, offset: 87866},
																																				alternatives: []any{
																																					&andExpr{
																																						pos: position{line: 2519, col: 9, offset: 87866},
																																						expr: &anyMatcher{
																																							line: 2519, col: 10, offset: 87867,
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2519, col: 14, offset: 87871},
																																						expr: &anyMatcher{
																																							line: 2519, col: 15, offset: 87872,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 284, col: 28, offset: 8090},
																											run: (*parser).callonglobalScopeNode342,
																											expr: &seqExpr{
																												pos: position{line: 284, col: 28, offset: 8090},
																												exprs: []any{
																													&actionExpr{
																														pos: position{line: 1406, col: 27, offset: 47114},
																														run: (*parser).callonglobalScopeNode344,
																														expr: &seqExpr{
																															pos: position{line: 1406, col: 27, offset: 47114},
																															exprs: []any{
																																&actionExpr{
																																	pos: position{line: 2519, col: 8, offset: 87865},
																																	run: (*parser).callonglobalScopeNode346,
																																	expr: &choiceExpr{
																																		pos: position{line: 2519, col: 9, offset: 87866},
																																		alternatives: []any{
																																			&andExpr{
																																				pos: position{line: 2519, col: 9, offset: 87866},
																																				expr: &anyMatcher{
																																					line: 2519, col: 10, offset: 87867,
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2519, col: 14, offset: 87871},
																																				expr: &anyMatcher{
																																					line: 2519, col: 15, offset: 87872,
																																				},
																																			},
																																		},
																																	},
																																},
																																&stateCodeExpr{
																																	pos: position{line: 2586, col: 18, offset: 90318},
																																	run: (*parser).callonglobalScopeNode352,
																																},
																																&labeledExpr{
																																	pos:   position{line: 1406, col: 37, offset: 47124},
																																	label: "startI",
																																	expr: &actionExpr{
																																		pos: position{line: 2519, col: 8, offset: 87865},
																																		run: (*parser).callonglobalScopeNode354,
																																		expr: &choiceExpr{
																																			pos: position{line: 2519, col: 9, offset: 87866},
																																			alternatives: []any{
																																				&andExpr{
																																					pos: position{line: 2519, col: 9, offset: 87866},
																																					expr: &anyMatcher{
																																						line: 2519, col: 10, offset: 87867,
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2519, col: 14, offset: 87871},
																																					expr: &anyMatcher{
																																						line: 2519, col: 15, offset: 87872,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 1406, col: 48, offset: 47135},
																																	val:        "\"",
																																	ignoreCase: false,
																																	want:       "\"\\\"\"",
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 284, col: 51, offset: 8113},
																														label: "contentsI",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 284, col: 61, offset: 8123},
																															expr: &actionExpr{
																																pos: position{line: 293, col: 36, offset: 8398},
																																run: (*parser).callonglobalScopeNode363,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 293, col: 36, offset: 8398},
																																	expr: &choiceExpr{
																																		pos: position{line: 293, col: 37, offset: 8399},
																																		alternatives: []any{
																																			&litMatcher{
																																				pos:        position{line: 293, col: 37, offset: 8399},
																																				val:        "\\\"",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\"\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 293, col: 44, offset: 8406},
																																				val:        "\\\\",
																																				ignoreCase: false,
																																				want:       "\"\\\\\\\\\"",
																																			},
																																			&charClassMatcher{
																																				pos:        position{line: 293, col: 51, offset: 8413},
																																				val:        "[^\"]",
																																				chars:      []rune{'"'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 284, col: 94, offset: 8156},
																														label: "endI",
																														expr: &choiceExpr{
																															pos: position{line: 1407, col: 25, offset: 47202},
																															alternatives: []any{
																																&actionExpr{
																																	pos: position{line: 1407, col: 25, offset: 47202},
																																	run: (*parser).callonglobalScopeNode371,
																																	expr: &seqExpr{
																																		pos: position{line: 1407, col: 25, offset: 47202},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 1407, col: 25, offset: 47202},
																																				val:        "\"",
																																				ignoreCase: false,
																																				want:       "\"\\\"\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1407, col: 29, offset: 47206},
																																				label: "endI",
																																				expr: &actionExpr{
																																					pos: position{line: 2519, col: 8, offset: 87865},
																																					run: (*parser).callonglobalScopeNode375,
																																					expr: &choiceExpr{
																																						pos: position{line: 2519, col: 9, offset: 87866},
																																						alternatives: []any{
																																							&andExpr{
																																								pos: position{line: 2519, col: 9, offset: 87866},
																																								expr: &anyMatcher{
																																									line: 2519, col: 10, offset: 87867,
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2519, col: 14, offset: 87871},
																																								expr: &anyMatcher{
																																									line: 2519, col: 15, offset: 87872,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&stateCodeExpr{
																																				pos: position{line: 2592, col: 13, offset: 90451},
																																				run: (*parser).callonglobalScopeNode381,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1409, col: 5, offset: 47267},
																																	run: (*parser).callonglobalScopeNode382,
																																	expr: &labeledExpr{
																																		pos:   position{line: 1409, col: 5, offset: 47267},
																																		label: "endI",
																																		expr: &actionExpr{
																																			pos: position{line: 2519, col: 8, offset: 87865},
																																			run: (*parser).callonglobalScopeNode384,
																																			expr: &choiceExpr{
																																				pos: position{line: 2519, col: 9, offset: 87866},
																																				alternatives: []any{
																																					&andExpr{
																																						pos: position{line: 2519, col: 9, offset: 87866},
																																						expr: &anyMatcher{
																																							line: 2519, col: 10, offset: 87867,
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2519, col: 14, offset: 87871},
																																						expr: &anyMatcher{
																																							line: 2519, col: 15, offset: 87872,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2509, col: 27, offset: 87467},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2507, col: 23, offset: 87381},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2507, col: 23, offset: 87381},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2507, col: 27, offset: 87385},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2507, col: 27, offset: 87385},
																														exprs: []any{
																															&zeroOrOneExpr{
																																pos: position{line: 2507, col: 27, offset: 87385},
																																expr: &litMatcher{
																																	pos:        position{line: 2507, col: 27, offset: 87385},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2507, col: 33, offset: 87391},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2506, col: 23, offset: 87356},
																														expr: &anyMatcher{
																															line: 2506, col: 24, offset: 87357,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2509, col: 33, offset: 87473},
																										val:        ";",
																										ignoreCase: false,
																										want:       "\";\"",
																									},
																									&andExpr{
																										pos: position{line: 2509, col: 39, offset: 87479},
																										expr: &seqExpr{
																											pos: position{line: 2509, col: 41, offset: 87481},
																											exprs: []any{
																												&zeroOrMoreExpr{
																													pos: position{line: 2509, col: 41, offset: 87481},
																													expr: &charClassMatcher{
																														pos:        position{line: 2529, col: 37, offset: 88181},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2509, col: 45, offset: 87485},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 2509, col: 45, offset: 87485},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2509, col: 51, offset: 87491},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2048, col: 18, offset: 70755},
																					run: (*parser).callonglobalScopeNode409,
																					expr: &seqExpr{
																						pos: position{line: 2048, col: 18, offset: 70755},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2048, col: 18, offset: 70755},
																								label: "lineI",
																								expr: &actionExpr{
																									pos: position{line: 2512, col: 35, offset: 87610},
																									run: (*parser).callonglobalScopeNode412,
																									expr: &seqExpr{
																										pos: position{line: 2512, col: 35, offset: 87610},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2512, col: 35, offset: 87610},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 2512, col: 38, offset: 87613},
																												label: "unexpectedI",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2512, col: 50, offset: 87625},
																													expr: &seqExpr{
																														pos: position{line: 2512, col: 51, offset: 87626},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2512, col: 51, offset: 87626},
																																expr: &choiceExpr{
																																	pos: position{line: 2509, col: 27, offset: 87467},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2507, col: 23, offset: 87381},
																																			exprs: []any{
																																				&zeroOrMoreExpr{
																																					pos: position{line: 2507, col: 23, offset: 87381},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2529, col: 37, offset: 88181},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2507, col: 27, offset: 87385},
																																					alternatives: []any{
																																						&seqExpr{
																																							pos: position{line: 2507, col: 27, offset: 87385},
																																							exprs: []any{
																																								&zeroOrOneExpr{
																																									pos: position{line: 2507, col: 27, offset: 87385},
																																									expr: &litMatcher{
																																										pos:        position{line: 2507, col: 27, offset: 87385},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2507, col: 33, offset: 87391},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2506, col: 23, offset: 87356},
																																							expr: &anyMatcher{
																																								line: 2506, col: 24, offset: 87357,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2509, col: 33, offset: 87473},
																																			val:        ";",
																																			ignoreCase: false,
																																			want:       "\";\"",
																																		},
																																		&andExpr{
																																			pos: position{line: 2509, col: 39, offset: 87479},
																																			expr: &seqExpr{
																																				pos: position{line: 2509, col: 41, offset: 87481},
																																				exprs: []any{
																																					&zeroOrMoreExpr{
																																						pos: position{line: 2509, col: 41, offset: 87481},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2529, col: 37, offset: 88181},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2509, col: 45, offset: 87485},
																																						alternatives: []any{
																																							&litMatcher{
																																								pos:        position{line: 2509, col: 45, offset: 87485},
																																								val:        "}",
																																								ignoreCase: false,
																																								want:       "\"}\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2509, col: 51, offset: 87491},
																																								val:        "//",
																																								ignoreCase: false,
																																								want:       "\"//\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 2512, col: 57, offset: 87632},
																																alternatives: []any{
																																	&oneOrMoreExpr{
																																		pos: position{line: 2512, col: 57, offset: 87632},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2512, col: 57, offset: 87632},
																																			val:        "[^\\r\\n;{}]",
																																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																	&seqExpr{
																																		pos: position{line: 2512, col: 71, offset: 87646},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 2512, col: 71, offset: 87646},
																																				val:        "{",
																																				ignoreCase: false,
																																				want:       "\"{\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 2512, col: 75, offset: 87650},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2512, col: 75, offset: 87650},
																																					val:        "[^}]",
																																					chars:      []rune{'}'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2512, col: 81, offset: 87656},
																																				val:        "}",
																																				ignoreCase: false,
																																				want:       "\"}\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2509, col: 27, offset: 87467},
																								alternatives: []any{
																									&seqExpr{
																										pos: position{line: 2507, col: 23, offset: 87381},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2507, col: 23, offset: 87381},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2507, col: 27, offset: 87385},
																												alternatives: []any{
																													&seqExpr{
																														pos: position{line: 2507, col: 27, offset: 87385},
																														exprs: []any{
																															&zeroOrOneExpr{
																																pos: position{line: 2507, col: 27, offset: 87385},
																																expr: &litMatcher{
																																	pos:        position{line: 2507, col: 27, offset: 87385},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2507, col: 33, offset: 87391},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2506, col: 23, offset: 87356},
																														expr: &anyMatcher{
																															line: 2506, col: 24, offset: 87357,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2509, col: 33, offset: 87473},
																										val:        ";",
																										ignoreCase: false,
																										want:       "\";\"",
																									},
																									&andExpr{
																										pos: position{line: 2509, col: 39, offset: 87479},
																										expr: &seqExpr{
																											pos: position{line: 2509, col: 41, offset: 87481},
																											exprs: []any{
																												&zeroOrMoreExpr{
																													pos: position{line: 2509, col: 41, offset: 87481},
																													expr: &charClassMatcher{
																														pos:        position{line: 2529, col: 37, offset: 88181},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2509, col: 45, offset: 87485},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 2509, col: 45, offset: 87485},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2509, col: 51, offset: 87491},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1993, col: 65, offset: 69206},
													label: "rParenI",
													expr: &choiceExpr{
														pos: position{line: 2002, col: 19, offset: 69449},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2002, col: 19, offset: 69449},
																run: (*parser).callonglobalScopeNode468,
																expr: &seqExpr{
																	pos: position{line: 2002, col: 19, offset: 69449},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2002, col: 19, offset: 69449},
																			expr: &choiceExpr{
																				pos: position{line: 2532, col: 20, offset: 88254},
																				alternatives: []any{
																					&charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&seqExpr{
																						pos: position{line: 2532, col: 31, offset: 88265},
																						exprs: []any{
																							&andCodeExpr{
																								pos: position{line: 2532, col: 31, offset: 88265},
																								run: (*parser).callonglobalScopeNode474,
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 2530, col: 37, offset: 88223},
																								expr: &litMatcher{
																									pos:        position{line: 2530, col: 37, offset: 88223},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2530, col: 43, offset: 88229},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 2002, col: 23, offset: 69453},
																			label: "rParenI",
																			expr: &actionExpr{
																				pos: position{line: 2539, col: 12, offset: 88579},
																				run: (*parser).callonglobalScopeNode479,
																				expr: &seqExpr{
																					pos: position{line: 2539, col: 12, offset: 88579},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 2539, col: 12, offset: 88579},
																							label: "posI",
																							expr: &actionExpr{
																								pos: position{line: 2519, col: 8, offset: 87865},
																								run: (*parser).callonglobalScopeNode482,
																								expr: &choiceExpr{
																									pos: position{line: 2519, col: 9, offset: 87866},
																									alternatives: []any{
																										&andExpr{
																											pos: position{line: 2519, col: 9, offset: 87866},
																											expr: &anyMatcher{
																												line: 2519, col: 10, offset: 87867,
																											},
																										},
																										&notExpr{
																											pos: position{line: 2519, col: 14, offset: 87871},
																											expr: &anyMatcher{
																												line: 2519, col: 15, offset: 87872,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2539, col: 21, offset: 88588},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2004, col: 5, offset: 69499},
																run: (*parser).callonglobalScopeNode489,
																expr: &actionExpr{
																	pos: position{line: 2519, col: 8, offset: 87865},
																	run: (*parser).callonglobalScopeNode490,
																	expr: &choiceExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				expr: &anyMatcher{
																					line: 2519, col: 10, offset: 87867,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2519, col: 14, offset: 87871},
																				expr: &anyMatcher{
																					line: 2519, col: 15, offset: 87872,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2011, col: 14, offset: 69670},
										run: (*parser).callonglobalScopeNode496,
										expr: &seqExpr{
											pos: position{line: 2011, col: 14, offset: 69670},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2011, col: 14, offset: 69670},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2011, col: 23, offset: 69679},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2011, col: 26, offset: 69682},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonglobalScopeNode502,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2011, col: 37, offset: 69693},
													label: "badI",
													expr: &actionExpr{
														pos: position{line: 2512, col: 35, offset: 87610},
														run: (*parser).callonglobalScopeNode509,
														expr: &seqExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2512, col: 35, offset: 87610},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2512, col: 38, offset: 87613},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2512, col: 50, offset: 87625},
																		expr: &seqExpr{
																			pos: position{line: 2512, col: 51, offset: 87626},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2512, col: 51, offset: 87626},
																					expr: &choiceExpr{
																						pos: position{line: 2509, col: 27, offset: 87467},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 23, offset: 87381},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2507, col: 23, offset: 87381},
																										expr: &charClassMatcher{
																											pos:        position{line: 2529, col: 37, offset: 88181},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2507, col: 27, offset: 87385},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2507, col: 27, offset: 87385},
																														expr: &litMatcher{
																															pos:        position{line: 2507, col: 27, offset: 87385},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2507, col: 33, offset: 87391},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2506, col: 23, offset: 87356},
																												expr: &anyMatcher{
																													line: 2506, col: 24, offset: 87357,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 33, offset: 87473},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																							&andExpr{
																								pos: position{line: 2509, col: 39, offset: 87479},
																								expr: &seqExpr{
																									pos: position{line: 2509, col: 41, offset: 87481},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2509, col: 41, offset: 87481},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2509, col: 45, offset: 87485},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2509, col: 45, offset: 87485},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2509, col: 51, offset: 87491},
																													val:        "//",
																													ignoreCase: false,
																													want:       "\"//\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2512, col: 57, offset: 87632},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2512, col: 57, offset: 87632},
																							expr: &charClassMatcher{
																								pos:        position{line: 2512, col: 57, offset: 87632},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2512, col: 71, offset: 87646},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2512, col: 71, offset: 87646},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2512, col: 75, offset: 87650},
																									expr: &charClassMatcher{
																										pos:        position{line: 2512, col: 75, offset: 87650},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2512, col: 81, offset: 87656},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2011, col: 53, offset: 69709},
													label: "endI",
													expr: &choiceExpr{
														pos: position{line: 2509, col: 27, offset: 87467},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 23, offset: 87381},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						expr: &litMatcher{
																							pos:        position{line: 2507, col: 27, offset: 87385},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2507, col: 33, offset: 87391},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2506, col: 23, offset: 87356},
																				expr: &anyMatcher{
																					line: 2506, col: 24, offset: 87357,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2509, col: 33, offset: 87473},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2509, col: 39, offset: 87479},
																expr: &seqExpr{
																	pos: position{line: 2509, col: 41, offset: 87481},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2509, col: 45, offset: 87485},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2509, col: 45, offset: 87485},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2509, col: 51, offset: 87491},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 342, col: 52, offset: 10238},
										name: "State",
									},
									&ruleRefExpr{
										pos:  position{line: 342, col: 60, offset: 10246},
										name: "Component",
									},
									&ruleRefExpr{
										pos:  position{line: 342, col: 72, offset: 10258},
										name: "GlobalCode",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 346, col: 1, offset: 10297},
			expr: &actionExpr{
				pos: position{line: 346, col: 10, offset: 10306},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 346, col: 10, offset: 10306},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2628, col: 15, offset: 91592},
							run: (*parser).callonScope3,
							expr: &seqExpr{
								pos: position{line: 2628, col: 15, offset: 91592},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonScope5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonScope11,
									},
									&labeledExpr{
										pos:   position{line: 2628, col: 25, offset: 91602},
										label: "lBraceI",
										expr: &actionExpr{
											pos: position{line: 2541, col: 12, offset: 88641},
											run: (*parser).callonScope13,
											expr: &seqExpr{
												pos: position{line: 2541, col: 12, offset: 88641},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2541, col: 12, offset: 88641},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonScope16,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2541, col: 21, offset: 88650},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2628, col: 41, offset: 91618},
										expr: &choiceExpr{
											pos: position{line: 2532, col: 20, offset: 88254},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2532, col: 31, offset: 88265},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															run: (*parser).callonScope27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2530, col: 37, offset: 88223},
															expr: &litMatcher{
																pos:        position{line: 2530, col: 37, offset: 88223},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2530, col: 43, offset: 88229},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 21, offset: 10317},
							label: "nodesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 346, col: 28, offset: 10324},
								expr: &ruleRefExpr{
									pos:  position{line: 346, col: 28, offset: 10324},
									name: "ScopeNode",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 39, offset: 10335},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2632, col: 13, offset: 91679},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2632, col: 13, offset: 91679},
										run: (*parser).callonScope36,
										expr: &seqExpr{
											pos: position{line: 2632, col: 13, offset: 91679},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2632, col: 13, offset: 91679},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).callonScope42,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2632, col: 17, offset: 91683},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2542, col: 12, offset: 88702},
														run: (*parser).callonScope47,
														expr: &seqExpr{
															pos: position{line: 2542, col: 12, offset: 88702},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2542, col: 12, offset: 88702},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonScope50,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2542, col: 21, offset: 88711},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonScope57,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 5, offset: 91754},
										run: (*parser).callonScope58,
										expr: &labeledExpr{
											pos:   position{line: 2634, col: 5, offset: 91754},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonScope60,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopeNode",
			pos:  position{line: 354, col: 1, offset: 10504},
			expr: &actionExpr{
				pos: position{line: 354, col: 14, offset: 10517},
				run: (*parser).callonScopeNode1,
				expr: &seqExpr{
					pos: position{line: 354, col: 14, offset: 10517},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 354, col: 14, offset: 10517},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonScopeNode7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 354, col: 18, offset: 10521},
							expr: &litMatcher{
								pos:        position{line: 354, col: 19, offset: 10522},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 23, offset: 10526},
							label: "nodeI",
							expr: &choiceExpr{
								pos: position{line: 354, col: 30, offset: 10533},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 354, col: 30, offset: 10533},
										name: "ValidScopeNode",
									},
									&ruleRefExpr{
										pos:  position{line: 354, col: 47, offset: 10550},
										name: "BadNode",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ValidScopeNode",
			pos:  position{line: 358, col: 1, offset: 10586},
			expr: &actionExpr{
				pos: position{line: 358, col: 19, offset: 10604},
				run: (*parser).callonValidScopeNode1,
				expr: &seqExpr{
					pos: position{line: 358, col: 19, offset: 10604},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 358, col: 19, offset: 10604},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonValidScopeNode7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 23, offset: 10608},
							label: "nodeI",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 29, offset: 10614},
								name: "validScopeNode",
							},
						},
					},
				},
			},
		},
		{
			name: "validScopeNode",
			pos:  position{line: 361, col: 1, offset: 10655},
			expr: &choiceExpr{
				pos: position{line: 361, col: 19, offset: 10673},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 361, col: 19, offset: 10673},
						name: "And",
					},
					&actionExpr{
						pos: position{line: 441, col: 15, offset: 14245},
						run: (*parser).callonvalidScopeNode3,
						expr: &seqExpr{
							pos: position{line: 441, col: 15, offset: 14245},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 441, col: 15, offset: 14245},
									val:        "//",
									ignoreCase: false,
									want:       "\"//\"",
								},
								&notExpr{
									pos: position{line: 441, col: 20, offset: 14250},
									expr: &litMatcher{
										pos:        position{line: 441, col: 21, offset: 14251},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 441, col: 25, offset: 14255},
									label: "textI",
									expr: &seqExpr{
										pos: position{line: 441, col: 32, offset: 14262},
										exprs: []any{
											&notExpr{
												pos: position{line: 441, col: 32, offset: 14262},
												expr: &seqExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			expr: &litMatcher{
																				pos:        position{line: 2507, col: 27, offset: 87385},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2507, col: 33, offset: 87391},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2506, col: 23, offset: 87356},
																	expr: &anyMatcher{
																		line: 2506, col: 24, offset: 87357,
																	},
																},
															},
														},
													},
												},
											},
											&anyMatcher{
												line: 441, col: 37, offset: 14267,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2507, col: 27, offset: 87385},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													expr: &litMatcher{
														pos:        position{line: 2507, col: 27, offset: 87385},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2507, col: 33, offset: 87391},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2506, col: 23, offset: 87356},
											expr: &anyMatcher{
												line: 2506, col: 24, offset: 87357,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 363, col: 24, offset: 10838},
						name: "Code",
					},
					&ruleRefExpr{
						pos:  position{line: 363, col: 31, offset: 10845},
						name: "Return",
					},
					&actionExpr{
						pos: position{line: 543, col: 13, offset: 17830},
						run: (*parser).callonvalidScopeNode33,
						expr: &seqExpr{
							pos: position{line: 543, col: 13, offset: 17830},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 543, col: 13, offset: 17830},
									val:        "continue",
									ignoreCase: false,
									want:       "\"continue\"",
								},
								&labeledExpr{
									pos:   position{line: 543, col: 24, offset: 17841},
									label: "labelI",
									expr: &choiceExpr{
										pos: position{line: 557, col: 23, offset: 18143},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 557, col: 23, offset: 18143},
												run: (*parser).callonvalidScopeNode38,
												expr: &choiceExpr{
													pos: position{line: 2509, col: 27, offset: 87467},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2509, col: 33, offset: 87473},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2509, col: 39, offset: 87479},
															expr: &seqExpr{
																pos: position{line: 2509, col: 41, offset: 87481},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2509, col: 45, offset: 87485},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2509, col: 45, offset: 87485},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 51, offset: 87491},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 559, col: 4, offset: 18186},
												run: (*parser).callonvalidScopeNode58,
												expr: &seqExpr{
													pos: position{line: 559, col: 4, offset: 18186},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 559, col: 4, offset: 18186},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 559, col: 7, offset: 18189},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 245, col: 10, offset: 7100},
																run: (*parser).callonvalidScopeNode63,
																expr: &labeledExpr{
																	pos:   position{line: 245, col: 10, offset: 7100},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1490, col: 17, offset: 49722},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1490, col: 26, offset: 49731},
																				expr: &charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 27, offset: 87467},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 33, offset: 87473},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2509, col: 39, offset: 87479},
																	expr: &seqExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2509, col: 45, offset: 87485},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2509, col: 45, offset: 87485},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2509, col: 51, offset: 87491},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 561, col: 5, offset: 18235},
												run: (*parser).callonvalidScopeNode88,
												expr: &seqExpr{
													pos: position{line: 561, col: 5, offset: 18235},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 561, col: 5, offset: 18235},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 561, col: 8, offset: 18238},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 245, col: 10, offset: 7100},
																run: (*parser).callonvalidScopeNode93,
																expr: &labeledExpr{
																	pos:   position{line: 245, col: 10, offset: 7100},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1490, col: 17, offset: 49722},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1490, col: 26, offset: 49731},
																				expr: &charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 561, col: 21, offset: 18251},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonvalidScopeNode100,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															run: (*parser).callonvalidScopeNode106,
															expr: &seqExpr{
																pos: position{line: 2512, col: 35, offset: 87610},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2512, col: 35, offset: 87610},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2512, col: 38, offset: 87613},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2512, col: 50, offset: 87625},
																			expr: &seqExpr{
																				pos: position{line: 2512, col: 51, offset: 87626},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2512, col: 51, offset: 87626},
																						expr: &choiceExpr{
																							pos: position{line: 2509, col: 27, offset: 87467},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2507, col: 23, offset: 87381},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2507, col: 23, offset: 87381},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2507, col: 27, offset: 87385},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2507, col: 27, offset: 87385},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2507, col: 27, offset: 87385},
																															expr: &litMatcher{
																																pos:        position{line: 2507, col: 27, offset: 87385},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2507, col: 33, offset: 87391},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2506, col: 23, offset: 87356},
																													expr: &anyMatcher{
																														line: 2506, col: 24, offset: 87357,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 33, offset: 87473},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2509, col: 39, offset: 87479},
																									expr: &seqExpr{
																										pos: position{line: 2509, col: 41, offset: 87481},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2509, col: 41, offset: 87481},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2509, col: 45, offset: 87485},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2509, col: 45, offset: 87485},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2509, col: 51, offset: 87491},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2512, col: 57, offset: 87632},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2512, col: 57, offset: 87632},
																								expr: &charClassMatcher{
																									pos:        position{line: 2512, col: 57, offset: 87632},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2512, col: 71, offset: 87646},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2512, col: 71, offset: 87646},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2512, col: 75, offset: 87650},
																										expr: &charClassMatcher{
																											pos:        position{line: 2512, col: 75, offset: 87650},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2512, col: 81, offset: 87656},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 561, col: 43, offset: 18273},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2509, col: 27, offset: 87467},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								expr: &litMatcher{
																									pos:        position{line: 2507, col: 27, offset: 87385},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2507, col: 33, offset: 87391},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2506, col: 23, offset: 87356},
																						expr: &anyMatcher{
																							line: 2506, col: 24, offset: 87357,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2509, col: 33, offset: 87473},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2509, col: 39, offset: 87479},
																		expr: &seqExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2509, col: 45, offset: 87485},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2509, col: 45, offset: 87485},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2509, col: 51, offset: 87491},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 563, col: 5, offset: 18429},
												run: (*parser).callonvalidScopeNode161,
												expr: &seqExpr{
													pos: position{line: 563, col: 5, offset: 18429},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 563, col: 5, offset: 18429},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 563, col: 8, offset: 18432},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonvalidScopeNode166,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															run: (*parser).callonvalidScopeNode172,
															expr: &seqExpr{
																pos: position{line: 2512, col: 35, offset: 87610},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2512, col: 35, offset: 87610},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2512, col: 38, offset: 87613},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2512, col: 50, offset: 87625},
																			expr: &seqExpr{
																				pos: position{line: 2512, col: 51, offset: 87626},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2512, col: 51, offset: 87626},
																						expr: &choiceExpr{
																							pos: position{line: 2509, col: 27, offset: 87467},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2507, col: 23, offset: 87381},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2507, col: 23, offset: 87381},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2507, col: 27, offset: 87385},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2507, col: 27, offset: 87385},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2507, col: 27, offset: 87385},
																															expr: &litMatcher{
																																pos:        position{line: 2507, col: 27, offset: 87385},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2507, col: 33, offset: 87391},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2506, col: 23, offset: 87356},
																													expr: &anyMatcher{
																														line: 2506, col: 24, offset: 87357,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 33, offset: 87473},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2509, col: 39, offset: 87479},
																									expr: &seqExpr{
																										pos: position{line: 2509, col: 41, offset: 87481},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2509, col: 41, offset: 87481},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2509, col: 45, offset: 87485},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2509, col: 45, offset: 87485},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2509, col: 51, offset: 87491},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2512, col: 57, offset: 87632},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2512, col: 57, offset: 87632},
																								expr: &charClassMatcher{
																									pos:        position{line: 2512, col: 57, offset: 87632},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2512, col: 71, offset: 87646},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2512, col: 71, offset: 87646},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2512, col: 75, offset: 87650},
																										expr: &charClassMatcher{
																											pos:        position{line: 2512, col: 75, offset: 87650},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2512, col: 81, offset: 87656},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 563, col: 30, offset: 18454},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2509, col: 27, offset: 87467},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								expr: &litMatcher{
																									pos:        position{line: 2507, col: 27, offset: 87385},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2507, col: 33, offset: 87391},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2506, col: 23, offset: 87356},
																						expr: &anyMatcher{
																							line: 2506, col: 24, offset: 87357,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2509, col: 33, offset: 87473},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2509, col: 39, offset: 87479},
																		expr: &seqExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2509, col: 45, offset: 87485},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2509, col: 45, offset: 87485},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2509, col: 51, offset: 87491},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 550, col: 10, offset: 17983},
						run: (*parser).callonvalidScopeNode227,
						expr: &seqExpr{
							pos: position{line: 550, col: 10, offset: 17983},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 550, col: 10, offset: 17983},
									val:        "break",
									ignoreCase: false,
									want:       "\"break\"",
								},
								&labeledExpr{
									pos:   position{line: 550, col: 18, offset: 17991},
									label: "labelI",
									expr: &choiceExpr{
										pos: position{line: 557, col: 23, offset: 18143},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 557, col: 23, offset: 18143},
												run: (*parser).callonvalidScopeNode232,
												expr: &choiceExpr{
													pos: position{line: 2509, col: 27, offset: 87467},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2509, col: 33, offset: 87473},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2509, col: 39, offset: 87479},
															expr: &seqExpr{
																pos: position{line: 2509, col: 41, offset: 87481},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2509, col: 45, offset: 87485},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2509, col: 45, offset: 87485},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 51, offset: 87491},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 559, col: 4, offset: 18186},
												run: (*parser).callonvalidScopeNode252,
												expr: &seqExpr{
													pos: position{line: 559, col: 4, offset: 18186},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 559, col: 4, offset: 18186},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 559, col: 7, offset: 18189},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 245, col: 10, offset: 7100},
																run: (*parser).callonvalidScopeNode257,
																expr: &labeledExpr{
																	pos:   position{line: 245, col: 10, offset: 7100},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1490, col: 17, offset: 49722},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1490, col: 26, offset: 49731},
																				expr: &charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 27, offset: 87467},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 33, offset: 87473},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2509, col: 39, offset: 87479},
																	expr: &seqExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2509, col: 45, offset: 87485},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2509, col: 45, offset: 87485},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2509, col: 51, offset: 87491},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 561, col: 5, offset: 18235},
												run: (*parser).callonvalidScopeNode282,
												expr: &seqExpr{
													pos: position{line: 561, col: 5, offset: 18235},
													exprs: []any{
														&oneOrMoreExpr{
															pos: position{line: 561, col: 5, offset: 18235},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 561, col: 8, offset: 18238},
															label: "identI",
															expr: &actionExpr{
																pos: position{line: 245, col: 10, offset: 7100},
																run: (*parser).callonvalidScopeNode287,
																expr: &labeledExpr{
																	pos:   position{line: 245, col: 10, offset: 7100},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1490, col: 17, offset: 49722},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1490, col: 26, offset: 49731},
																				expr: &charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 561, col: 21, offset: 18251},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonvalidScopeNode294,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															run: (*parser).callonvalidScopeNode300,
															expr: &seqExpr{
																pos: position{line: 2512, col: 35, offset: 87610},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2512, col: 35, offset: 87610},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2512, col: 38, offset: 87613},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2512, col: 50, offset: 87625},
																			expr: &seqExpr{
																				pos: position{line: 2512, col: 51, offset: 87626},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2512, col: 51, offset: 87626},
																						expr: &choiceExpr{
																							pos: position{line: 2509, col: 27, offset: 87467},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2507, col: 23, offset: 87381},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2507, col: 23, offset: 87381},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2507, col: 27, offset: 87385},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2507, col: 27, offset: 87385},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2507, col: 27, offset: 87385},
																															expr: &litMatcher{
																																pos:        position{line: 2507, col: 27, offset: 87385},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2507, col: 33, offset: 87391},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2506, col: 23, offset: 87356},
																													expr: &anyMatcher{
																														line: 2506, col: 24, offset: 87357,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 33, offset: 87473},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2509, col: 39, offset: 87479},
																									expr: &seqExpr{
																										pos: position{line: 2509, col: 41, offset: 87481},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2509, col: 41, offset: 87481},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2509, col: 45, offset: 87485},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2509, col: 45, offset: 87485},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2509, col: 51, offset: 87491},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2512, col: 57, offset: 87632},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2512, col: 57, offset: 87632},
																								expr: &charClassMatcher{
																									pos:        position{line: 2512, col: 57, offset: 87632},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2512, col: 71, offset: 87646},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2512, col: 71, offset: 87646},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2512, col: 75, offset: 87650},
																										expr: &charClassMatcher{
																											pos:        position{line: 2512, col: 75, offset: 87650},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2512, col: 81, offset: 87656},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 561, col: 43, offset: 18273},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2509, col: 27, offset: 87467},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								expr: &litMatcher{
																									pos:        position{line: 2507, col: 27, offset: 87385},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2507, col: 33, offset: 87391},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2506, col: 23, offset: 87356},
																						expr: &anyMatcher{
																							line: 2506, col: 24, offset: 87357,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2509, col: 33, offset: 87473},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2509, col: 39, offset: 87479},
																		expr: &seqExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2509, col: 45, offset: 87485},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2509, col: 45, offset: 87485},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2509, col: 51, offset: 87491},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 563, col: 5, offset: 18429},
												run: (*parser).callonvalidScopeNode355,
												expr: &seqExpr{
													pos: position{line: 563, col: 5, offset: 18429},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 563, col: 5, offset: 18429},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&labeledExpr{
															pos:   position{line: 563, col: 8, offset: 18432},
															label: "startI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonvalidScopeNode360,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															run: (*parser).callonvalidScopeNode366,
															expr: &seqExpr{
																pos: position{line: 2512, col: 35, offset: 87610},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2512, col: 35, offset: 87610},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2512, col: 38, offset: 87613},
																		label: "unexpectedI",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2512, col: 50, offset: 87625},
																			expr: &seqExpr{
																				pos: position{line: 2512, col: 51, offset: 87626},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2512, col: 51, offset: 87626},
																						expr: &choiceExpr{
																							pos: position{line: 2509, col: 27, offset: 87467},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2507, col: 23, offset: 87381},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2507, col: 23, offset: 87381},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2507, col: 27, offset: 87385},
																											alternatives: []any{
																												&seqExpr{
																													pos: position{line: 2507, col: 27, offset: 87385},
																													exprs: []any{
																														&zeroOrOneExpr{
																															pos: position{line: 2507, col: 27, offset: 87385},
																															expr: &litMatcher{
																																pos:        position{line: 2507, col: 27, offset: 87385},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2507, col: 33, offset: 87391},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2506, col: 23, offset: 87356},
																													expr: &anyMatcher{
																														line: 2506, col: 24, offset: 87357,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 33, offset: 87473},
																									val:        ";",
																									ignoreCase: false,
																									want:       "\";\"",
																								},
																								&andExpr{
																									pos: position{line: 2509, col: 39, offset: 87479},
																									expr: &seqExpr{
																										pos: position{line: 2509, col: 41, offset: 87481},
																										exprs: []any{
																											&zeroOrMoreExpr{
																												pos: position{line: 2509, col: 41, offset: 87481},
																												expr: &charClassMatcher{
																													pos:        position{line: 2529, col: 37, offset: 88181},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2509, col: 45, offset: 87485},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2509, col: 45, offset: 87485},
																														val:        "}",
																														ignoreCase: false,
																														want:       "\"}\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2509, col: 51, offset: 87491},
																														val:        "//",
																														ignoreCase: false,
																														want:       "\"//\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2512, col: 57, offset: 87632},
																						alternatives: []any{
																							&oneOrMoreExpr{
																								pos: position{line: 2512, col: 57, offset: 87632},
																								expr: &charClassMatcher{
																									pos:        position{line: 2512, col: 57, offset: 87632},
																									val:        "[^\\r\\n;{}]",
																									chars:      []rune{'\r', '\n', ';', '{', '}'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2512, col: 71, offset: 87646},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2512, col: 71, offset: 87646},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2512, col: 75, offset: 87650},
																										expr: &charClassMatcher{
																											pos:        position{line: 2512, col: 75, offset: 87650},
																											val:        "[^}]",
																											chars:      []rune{'}'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2512, col: 81, offset: 87656},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 563, col: 30, offset: 18454},
															label: "endI",
															expr: &choiceExpr{
																pos: position{line: 2509, col: 27, offset: 87467},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						exprs: []any{
																							&zeroOrOneExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								expr: &litMatcher{
																									pos:        position{line: 2507, col: 27, offset: 87385},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2507, col: 33, offset: 87391},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2506, col: 23, offset: 87356},
																						expr: &anyMatcher{
																							line: 2506, col: 24, offset: 87357,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2509, col: 33, offset: 87473},
																		val:        ";",
																		ignoreCase: false,
																		want:       "\";\"",
																	},
																	&andExpr{
																		pos: position{line: 2509, col: 39, offset: 87479},
																		expr: &seqExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2509, col: 45, offset: 87485},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2509, col: 45, offset: 87485},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2509, col: 51, offset: 87491},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 24, offset: 10918},
						name: "ComponentCall",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 40, offset: 10934},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 24, offset: 11003},
						name: "If",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 29, offset: 11008},
						name: "Switch",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 38, offset: 11017},
						name: "For",
					},
					&actionExpr{
						pos: position{line: 1088, col: 16, offset: 35354},
						run: (*parser).callonvalidScopeNode426,
						expr: &seqExpr{
							pos: position{line: 1088, col: 16, offset: 35354},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1088, col: 16, offset: 35354},
									val:        "//-",
									ignoreCase: false,
									want:       "\"//-\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 1088, col: 22, offset: 35360},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 25, offset: 35363},
									label: "commentI",
									expr: &actionExpr{
										pos: position{line: 1095, col: 16, offset: 35511},
										run: (*parser).callonvalidScopeNode432,
										expr: &zeroOrMoreExpr{
											pos: position{line: 1095, col: 16, offset: 35511},
											expr: &seqExpr{
												pos: position{line: 1095, col: 17, offset: 35512},
												exprs: []any{
													&notExpr{
														pos: position{line: 1095, col: 17, offset: 35512},
														expr: &seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
													},
													&anyMatcher{
														line: 1095, col: 22, offset: 35517,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2507, col: 27, offset: 87385},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													expr: &litMatcher{
														pos:        position{line: 2507, col: 27, offset: 87385},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2507, col: 33, offset: 87391},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2506, col: 23, offset: 87356},
											expr: &anyMatcher{
												line: 2506, col: 24, offset: 87357,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 38, offset: 11111},
						name: "And",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 44, offset: 11117},
						name: "RawElement",
					},
					&actionExpr{
						pos: position{line: 1072, col: 12, offset: 34747},
						run: (*parser).callonvalidScopeNode458,
						expr: &seqExpr{
							pos: position{line: 1072, col: 12, offset: 34747},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1072, col: 12, offset: 34747},
									val:        "!doctype",
									ignoreCase: false,
									want:       "\"!doctype\"",
								},
								&choiceExpr{
									pos: position{line: 1076, col: 18, offset: 34841},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 1076, col: 18, offset: 34841},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1076, col: 18, offset: 34841},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&actionExpr{
													pos: position{line: 2612, col: 14, offset: 91211},
													run: (*parser).callonvalidScopeNode465,
													expr: &seqExpr{
														pos: position{line: 2612, col: 14, offset: 91211},
														exprs: []any{
															&actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonvalidScopeNode467,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
															&stateCodeExpr{
																pos: position{line: 2586, col: 18, offset: 90318},
																run: (*parser).callonvalidScopeNode473,
															},
															&labeledExpr{
																pos:   position{line: 2612, col: 24, offset: 91221},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2538, col: 12, offset: 88518},
																	run: (*parser).callonvalidScopeNode475,
																	expr: &seqExpr{
																		pos: position{line: 2538, col: 12, offset: 88518},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 2538, col: 12, offset: 88518},
																				label: "posI",
																				expr: &actionExpr{
																					pos: position{line: 2519, col: 8, offset: 87865},
																					run: (*parser).callonvalidScopeNode478,
																					expr: &choiceExpr{
																						pos: position{line: 2519, col: 9, offset: 87866},
																						alternatives: []any{
																							&andExpr{
																								pos: position{line: 2519, col: 9, offset: 87866},
																								expr: &anyMatcher{
																									line: 2519, col: 10, offset: 87867,
																								},
																							},
																							&notExpr{
																								pos: position{line: 2519, col: 14, offset: 87871},
																								expr: &anyMatcher{
																									line: 2519, col: 15, offset: 87872,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2538, col: 21, offset: 88527},
																				val:        "(",
																				ignoreCase: false,
																				want:       "\"(\"",
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 2612, col: 40, offset: 91237},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).callonvalidScopeNode489,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1076, col: 31, offset: 34854},
													val:        "html",
													ignoreCase: false,
													want:       "\"html\"",
												},
												&choiceExpr{
													pos: position{line: 123, col: 21, offset: 3636},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2616, col: 12, offset: 91297},
															run: (*parser).callonvalidScopeNode495,
															expr: &seqExpr{
																pos: position{line: 2616, col: 12, offset: 91297},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2616, col: 12, offset: 91297},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2616, col: 15, offset: 91300},
																		expr: &seqExpr{
																			pos: position{line: 2616, col: 16, offset: 91301},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2616, col: 16, offset: 91301},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2616, col: 20, offset: 91305},
																					expr: &choiceExpr{
																						pos: position{line: 2532, col: 20, offset: 88254},
																						alternatives: []any{
																							&charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&seqExpr{
																								pos: position{line: 2532, col: 31, offset: 88265},
																								exprs: []any{
																									&andCodeExpr{
																										pos: position{line: 2532, col: 31, offset: 88265},
																										run: (*parser).callonvalidScopeNode506,
																									},
																									&zeroOrOneExpr{
																										pos: position{line: 2530, col: 37, offset: 88223},
																										expr: &litMatcher{
																											pos:        position{line: 2530, col: 37, offset: 88223},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2530, col: 43, offset: 88229},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2616, col: 26, offset: 91311},
																		label: "rParenI",
																		expr: &actionExpr{
																			pos: position{line: 2539, col: 12, offset: 88579},
																			run: (*parser).callonvalidScopeNode511,
																			expr: &seqExpr{
																				pos: position{line: 2539, col: 12, offset: 88579},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 2539, col: 12, offset: 88579},
																						label: "posI",
																						expr: &actionExpr{
																							pos: position{line: 2519, col: 8, offset: 87865},
																							run: (*parser).callonvalidScopeNode514,
																							expr: &choiceExpr{
																								pos: position{line: 2519, col: 9, offset: 87866},
																								alternatives: []any{
																									&andExpr{
																										pos: position{line: 2519, col: 9, offset: 87866},
																										expr: &anyMatcher{
																											line: 2519, col: 10, offset: 87867,
																										},
																									},
																									&notExpr{
																										pos: position{line: 2519, col: 14, offset: 87871},
																										expr: &anyMatcher{
																											line: 2519, col: 15, offset: 87872,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2539, col: 21, offset: 88588},
																						val:        ")",
																						ignoreCase: false,
																						want:       "\")\"",
																					},
																				},
																			},
																		},
																	},
																	&stateCodeExpr{
																		pos: position{line: 2592, col: 13, offset: 90451},
																		run: (*parser).callonvalidScopeNode521,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 123, col: 31, offset: 3646},
															run: (*parser).callonvalidScopeNode522,
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonvalidScopeNode523,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2509, col: 27, offset: 87467},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2509, col: 33, offset: 87473},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2509, col: 39, offset: 87479},
															expr: &seqExpr{
																pos: position{line: 2509, col: 41, offset: 87481},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2509, col: 45, offset: 87485},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2509, col: 45, offset: 87485},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 51, offset: 87491},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1076, col: 61, offset: 34884},
											run: (*parser).callonvalidScopeNode548,
											expr: &seqExpr{
												pos: position{line: 1076, col: 61, offset: 34884},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1076, col: 61, offset: 34884},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&labeledExpr{
														pos:   position{line: 1076, col: 64, offset: 34887},
														label: "startI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonvalidScopeNode553,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2512, col: 35, offset: 87610},
														run: (*parser).callonvalidScopeNode559,
														expr: &seqExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2512, col: 35, offset: 87610},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2512, col: 38, offset: 87613},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2512, col: 50, offset: 87625},
																		expr: &seqExpr{
																			pos: position{line: 2512, col: 51, offset: 87626},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2512, col: 51, offset: 87626},
																					expr: &choiceExpr{
																						pos: position{line: 2509, col: 27, offset: 87467},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 23, offset: 87381},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2507, col: 23, offset: 87381},
																										expr: &charClassMatcher{
																											pos:        position{line: 2529, col: 37, offset: 88181},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2507, col: 27, offset: 87385},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2507, col: 27, offset: 87385},
																														expr: &litMatcher{
																															pos:        position{line: 2507, col: 27, offset: 87385},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2507, col: 33, offset: 87391},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2506, col: 23, offset: 87356},
																												expr: &anyMatcher{
																													line: 2506, col: 24, offset: 87357,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 33, offset: 87473},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																							&andExpr{
																								pos: position{line: 2509, col: 39, offset: 87479},
																								expr: &seqExpr{
																									pos: position{line: 2509, col: 41, offset: 87481},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2509, col: 41, offset: 87481},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2509, col: 45, offset: 87485},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2509, col: 45, offset: 87485},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2509, col: 51, offset: 87491},
																													val:        "//",
																													ignoreCase: false,
																													want:       "\"//\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2512, col: 57, offset: 87632},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2512, col: 57, offset: 87632},
																							expr: &charClassMatcher{
																								pos:        position{line: 2512, col: 57, offset: 87632},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2512, col: 71, offset: 87646},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2512, col: 71, offset: 87646},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2512, col: 75, offset: 87650},
																									expr: &charClassMatcher{
																										pos:        position{line: 2512, col: 75, offset: 87650},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2512, col: 81, offset: 87656},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1076, col: 86, offset: 34909},
														label: "endI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonvalidScopeNode595,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 27, offset: 87467},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 23, offset: 87381},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						expr: &litMatcher{
																							pos:        position{line: 2507, col: 27, offset: 87385},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2507, col: 33, offset: 87391},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2506, col: 23, offset: 87356},
																				expr: &anyMatcher{
																					line: 2506, col: 24, offset: 87357,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2509, col: 33, offset: 87473},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2509, col: 39, offset: 87479},
																expr: &seqExpr{
																	pos: position{line: 2509, col: 41, offset: 87481},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2509, col: 45, offset: 87485},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2509, col: 45, offset: 87485},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2509, col: 51, offset: 87491},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 24, offset: 11210},
						name: "ArrowBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 24, offset: 11290},
						name: "Element",
					},
				},
			},
		},
		{
			name: "BadNode",
			pos:  position{line: 392, col: 1, offset: 12117},
			expr: &choiceExpr{
				pos: position{line: 392, col: 12, offset: 12128},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 392, col: 12, offset: 12128},
						name: "reservedBadNode",
					},
					&actionExpr{
						pos: position{line: 392, col: 30, offset: 12146},
						run: (*parser).callonBadNode3,
						expr: &seqExpr{
							pos: position{line: 392, col: 30, offset: 12146},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 392, col: 30, offset: 12146},
									label: "lineI",
									expr: &oneOrMoreExpr{
										pos: position{line: 392, col: 36, offset: 12152},
										expr: &seqExpr{
											pos: position{line: 392, col: 37, offset: 12153},
											exprs: []any{
												&notExpr{
													pos: position{line: 392, col: 37, offset: 12153},
													expr: &seqExpr{
														pos: position{line: 392, col: 39, offset: 12155},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 392, col: 39, offset: 12155},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 392, col: 42, offset: 12158},
																val:        "[\\r\\n;{}]",
																chars:      []rune{'\r', '\n', ';', '{', '}'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 392, col: 53, offset: 12169},
													val:        "[^\\r\\n;{}]",
													chars:      []rune{'\r', '\n', ';', '{', '}'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 392, col: 66, offset: 12182},
									label: "bodyI",
									expr: &ruleRefExpr{
										pos:  position{line: 392, col: 72, offset: 12188},
										name: "OptionalBody",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 406, col: 5, offset: 12808},
						name: "LoneBody",
					},
				},
			},
		},
		{
			name: "LoneBody",
			pos:  position{line: 408, col: 1, offset: 12818},
			expr: &actionExpr{
				pos: position{line: 408, col: 13, offset: 12830},
				run: (*parser).callonLoneBody1,
				expr: &seqExpr{
					pos: position{line: 408, col: 13, offset: 12830},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 13, offset: 12830},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 408, col: 16, offset: 12833},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 17, offset: 12834},
								val:        "[[{]",
								chars:      []rune{'[', '{'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 408, col: 22, offset: 12839},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 28, offset: 12845},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "reservedBadNode",
			pos:  position{line: 422, col: 1, offset: 13374},
			expr: &actionExpr{
				pos: position{line: 422, col: 20, offset: 13393},
				run: (*parser).callonreservedBadNode1,
				expr: &seqExpr{
					pos: position{line: 422, col: 20, offset: 13393},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 422, col: 20, offset: 13393},
							label: "resI",
							expr: &choiceExpr{
								pos: position{line: 2517, col: 14, offset: 87752},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2517, col: 14, offset: 87752},
										val:        "if",
										ignoreCase: false,
										want:       "\"if\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 21, offset: 87759},
										val:        "else",
										ignoreCase: false,
										want:       "\"else\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 30, offset: 87768},
										val:        "switch",
										ignoreCase: false,
										want:       "\"switch\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 41, offset: 87779},
										val:        "case",
										ignoreCase: false,
										want:       "\"case\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 50, offset: 87788},
										val:        "default",
										ignoreCase: false,
										want:       "\"default\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 62, offset: 87800},
										val:        "for",
										ignoreCase: false,
										want:       "\"for\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 70, offset: 87808},
										val:        "return",
										ignoreCase: false,
										want:       "\"return\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 81, offset: 87819},
										val:        "break",
										ignoreCase: false,
										want:       "\"break\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 91, offset: 87829},
										val:        "continue",
										ignoreCase: false,
										want:       "\"continue\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 104, offset: 87842},
										val:        "fallthrough",
										ignoreCase: false,
										want:       "\"fallthrough\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 422, col: 34, offset: 13407},
							label: "endI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonreservedBadNode16,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 422, col: 43, offset: 13416},
							label: "lineI",
							expr: &oneOrMoreExpr{
								pos: position{line: 422, col: 49, offset: 13422},
								expr: &seqExpr{
									pos: position{line: 422, col: 50, offset: 13423},
									exprs: []any{
										&notExpr{
											pos: position{line: 422, col: 50, offset: 13423},
											expr: &seqExpr{
												pos: position{line: 422, col: 52, offset: 13425},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 422, col: 52, offset: 13425},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&charClassMatcher{
														pos:        position{line: 422, col: 55, offset: 13428},
														val:        "[\\r\\n;{}]",
														chars:      []rune{'\r', '\n', ';', '{', '}'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 422, col: 66, offset: 13439},
											val:        "[^\\r\\n;{}]",
											chars:      []rune{'\r', '\n', ';', '{', '}'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 422, col: 79, offset: 13452},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 85, offset: 13458},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobalCode",
			pos:  position{line: 452, col: 1, offset: 14563},
			expr: &actionExpr{
				pos: position{line: 452, col: 15, offset: 14577},
				run: (*parser).callonGlobalCode1,
				expr: &seqExpr{
					pos: position{line: 452, col: 15, offset: 14577},
					exprs: []any{
						&notExpr{
							pos: position{line: 452, col: 15, offset: 14577},
							expr: &choiceExpr{
								pos: position{line: 452, col: 17, offset: 14579},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 452, col: 17, offset: 14579},
										val:        "import",
										ignoreCase: false,
										want:       "\"import\"",
									},
									&litMatcher{
										pos:        position{line: 452, col: 28, offset: 14590},
										val:        "comp",
										ignoreCase: false,
										want:       "\"comp\"",
									},
									&litMatcher{
										pos:        position{line: 452, col: 37, offset: 14599},
										val:        "state",
										ignoreCase: false,
										want:       "\"state\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 46, offset: 14608},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 52, offset: 14614},
								name: "GoStatement",
							},
						},
						&choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Code",
			pos:  position{line: 460, col: 1, offset: 14906},
			expr: &choiceExpr{
				pos: position{line: 460, col: 9, offset: 14914},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 460, col: 9, offset: 14914},
						name: "implicitCode",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 24, offset: 14929},
						name: "explicitCode",
					},
				},
			},
		},
		{
			name: "explicitCode",
			pos:  position{line: 462, col: 1, offset: 14943},
			expr: &actionExpr{
				pos: position{line: 462, col: 17, offset: 14959},
				run: (*parser).callonexplicitCode1,
				expr: &seqExpr{
					pos: position{line: 462, col: 17, offset: 14959},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).callonexplicitCode3,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2551, col: 24, offset: 89124},
							run: (*parser).callonexplicitCode9,
						},
						&litMatcher{
							pos:        position{line: 462, col: 33, offset: 14975},
							val:        "- ",
							ignoreCase: false,
							want:       "\"- \"",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 38, offset: 14980},
							label: "codeStatementsI",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 54, offset: 14996},
								name: "codeStatements",
							},
						},
					},
				},
			},
		},
		{
			name: "codeStatements",
			pos:  position{line: 469, col: 1, offset: 15130},
			expr: &choiceExpr{
				pos: position{line: 469, col: 19, offset: 15148},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 469, col: 19, offset: 15148},
						run: (*parser).calloncodeStatements2,
						expr: &seqExpr{
							pos: position{line: 469, col: 19, offset: 15148},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 469, col: 19, offset: 15148},
									label: "firstLineI",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 30, offset: 15159},
										name: "GoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 469, col: 43, offset: 15172},
									label: "restI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 469, col: 49, offset: 15178},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 49, offset: 15178},
											name: "codeStatement",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 15418},
						run: (*parser).calloncodeStatements9,
						expr: &seqExpr{
							pos: position{line: 2507, col: 23, offset: 87381},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2507, col: 27, offset: 87385},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													expr: &litMatcher{
														pos:        position{line: 2507, col: 27, offset: 87385},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2507, col: 33, offset: 87391},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2506, col: 23, offset: 87356},
											expr: &anyMatcher{
												line: 2506, col: 24, offset: 87357,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "codeStatement",
			pos:  position{line: 487, col: 1, offset: 15708},
			expr: &choiceExpr{
				pos: position{line: 487, col: 18, offset: 15725},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 487, col: 18, offset: 15725},
						run: (*parser).calloncodeStatement2,
						expr: &seqExpr{
							pos: position{line: 487, col: 18, offset: 15725},
							exprs: []any{
								&notExpr{
									pos: position{line: 487, col: 18, offset: 15725},
									expr: &seqExpr{
										pos: position{line: 487, col: 20, offset: 15727},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 487, col: 20, offset: 15727},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 487, col: 23, offset: 15730},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2507, col: 27, offset: 87385},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														exprs: []any{
															&zeroOrOneExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																expr: &litMatcher{
																	pos:        position{line: 2507, col: 27, offset: 87385},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2507, col: 33, offset: 87391},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 2506, col: 23, offset: 87356},
														expr: &anyMatcher{
															line: 2506, col: 24, offset: 87357,
														},
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 487, col: 36, offset: 15743},
									label: "stmtI",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 42, offset: 15749},
										name: "GoExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 5, offset: 15790},
						run: (*parser).calloncodeStatement39,
						expr: &seqExpr{
							pos: position{line: 489, col: 5, offset: 15790},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 489, col: 9, offset: 15794},
									expr: &seqExpr{
										pos: position{line: 2508, col: 28, offset: 87430},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2508, col: 28, offset: 87430},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 489, col: 21, offset: 15806},
									name: "INDENTATION2",
								},
								&labeledExpr{
									pos:   position{line: 489, col: 34, offset: 15819},
									label: "stmtI",
									expr: &ruleRefExpr{
										pos:  position{line: 489, col: 40, offset: 15825},
										name: "GoExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "implicitCode",
			pos:  position{line: 493, col: 1, offset: 15865},
			expr: &actionExpr{
				pos: position{line: 493, col: 17, offset: 15881},
				run: (*parser).callonimplicitCode1,
				expr: &seqExpr{
					pos: position{line: 493, col: 17, offset: 15881},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 493, col: 17, offset: 15881},
							name: "implicitAhead",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 31, offset: 15895},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 37, offset: 15901},
								name: "GoStatement",
							},
						},
						&choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "implicitAhead",
			pos:  position{line: 500, col: 1, offset: 16039},
			expr: &andExpr{
				pos: position{line: 500, col: 18, offset: 16056},
				expr: &choiceExpr{
					pos: position{line: 500, col: 20, offset: 16058},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 500, col: 20, offset: 16058},
							name: "declaration",
						},
						&seqExpr{
							pos: position{line: 507, col: 15, offset: 16389},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 26, offset: 49731},
									expr: &charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 509, col: 31, offset: 16538},
									expr: &seqExpr{
										pos: position{line: 509, col: 32, offset: 16539},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 509, col: 32, offset: 16539},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 509, col: 36, offset: 16543},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 509, col: 36, offset: 16543},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 509, col: 36, offset: 16543},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 509, col: 40, offset: 16547},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&charClassMatcher{
																pos:        position{line: 1473, col: 20, offset: 49477},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 1490, col: 26, offset: 49731},
																expr: &charClassMatcher{
																	pos:        position{line: 1473, col: 20, offset: 49477},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 509, col: 58, offset: 16565},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 509, col: 58, offset: 16565},
																val:        "[",
																ignoreCase: false,
																want:       "\"[\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 509, col: 62, offset: 16569},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 509, col: 65, offset: 16572},
																expr: &charClassMatcher{
																	pos:        position{line: 509, col: 65, offset: 16572},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 509, col: 76, offset: 16583},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 509, col: 79, offset: 16586},
																val:        "]",
																ignoreCase: false,
																want:       "\"]\"",
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 508, col: 36, offset: 16480},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 508, col: 39, offset: 16483},
									expr: &seqExpr{
										pos: position{line: 508, col: 40, offset: 16484},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 508, col: 40, offset: 16484},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 508, col: 44, offset: 16488},
												expr: &choiceExpr{
													pos: position{line: 2532, col: 20, offset: 88254},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2532, col: 31, offset: 88265},
																	run: (*parser).callonimplicitAhead38,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2530, col: 37, offset: 88223},
																	expr: &litMatcher{
																		pos:        position{line: 2530, col: 37, offset: 88223},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2530, col: 43, offset: 88229},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1473, col: 20, offset: 49477},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1490, col: 26, offset: 49731},
												expr: &charClassMatcher{
													pos:        position{line: 1473, col: 20, offset: 49477},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 509, col: 31, offset: 16538},
												expr: &seqExpr{
													pos: position{line: 509, col: 32, offset: 16539},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 509, col: 32, offset: 16539},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 509, col: 36, offset: 16543},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 509, col: 36, offset: 16543},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 509, col: 36, offset: 16543},
																			val:        ".",
																			ignoreCase: false,
																			want:       "\".\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 509, col: 40, offset: 16547},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1473, col: 20, offset: 49477},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1490, col: 26, offset: 49731},
																			expr: &charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 509, col: 58, offset: 16565},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 509, col: 58, offset: 16565},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 509, col: 62, offset: 16569},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 509, col: 65, offset: 16572},
																			expr: &charClassMatcher{
																				pos:        position{line: 509, col: 65, offset: 16572},
																				val:        "[^\\r\\n]]",
																				chars:      []rune{'\r', '\n', ']'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 509, col: 76, offset: 16583},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 509, col: 79, offset: 16586},
																			val:        "]",
																			ignoreCase: false,
																			want:       "\"]\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 507, col: 33, offset: 16407},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 507, col: 36, offset: 16410},
									expr: &charClassMatcher{
										pos:        position{line: 507, col: 36, offset: 16410},
										val:        "[-+*/%|&^]",
										chars:      []rune{'-', '+', '*', '/', '%', '|', '&', '^'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 507, col: 48, offset: 16422},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 507, col: 52, offset: 16426},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 516, col: 20, offset: 16731},
									expr: &choiceExpr{
										pos: position{line: 516, col: 21, offset: 16732},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 516, col: 21, offset: 16732},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 516, col: 21, offset: 16732},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 516, col: 25, offset: 16736},
														expr: &charClassMatcher{
															pos:        position{line: 516, col: 25, offset: 16736},
															val:        "[^}]",
															chars:      []rune{'}'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 516, col: 31, offset: 16742},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
											&seqExpr{
												pos: position{line: 516, col: 37, offset: 16748},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 516, col: 37, offset: 16748},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 516, col: 41, offset: 16752},
														expr: &charClassMatcher{
															pos:        position{line: 516, col: 41, offset: 16752},
															val:        "[^]]",
															chars:      []rune{']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 516, col: 48, offset: 16759},
														val:        "]",
														ignoreCase: false,
														want:       "\"]\"",
													},
												},
											},
											&seqExpr{
												pos: position{line: 516, col: 54, offset: 16765},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 516, col: 54, offset: 16765},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 516, col: 58, offset: 16769},
														expr: &charClassMatcher{
															pos:        position{line: 516, col: 58, offset: 16769},
															val:        "[^)]",
															chars:      []rune{')'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 516, col: 64, offset: 16775},
														val:        ")",
														ignoreCase: false,
														want:       "\")\"",
													},
												},
											},
											&seqExpr{
												pos: position{line: 516, col: 70, offset: 16781},
												exprs: []any{
													&notExpr{
														pos: position{line: 516, col: 70, offset: 16781},
														expr: &choiceExpr{
															pos: position{line: 2509, col: 27, offset: 87467},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 33, offset: 87473},
																	val:        ";",
																	ignoreCase: false,
																	want:       "\";\"",
																},
																&andExpr{
																	pos: position{line: 2509, col: 39, offset: 87479},
																	expr: &seqExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2509, col: 45, offset: 87485},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2509, col: 45, offset: 87485},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2509, col: 51, offset: 87491},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&anyMatcher{
														line: 516, col: 75, offset: 16786,
													},
												},
											},
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 511, col: 14, offset: 16607},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 26, offset: 49731},
									expr: &charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 511, col: 27, offset: 16620},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 511, col: 31, offset: 16624},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 511, col: 31, offset: 16624},
											val:        "++",
											ignoreCase: false,
											want:       "\"++\"",
										},
										&litMatcher{
											pos:        position{line: 511, col: 38, offset: 16631},
											val:        "--",
											ignoreCase: false,
											want:       "\"--\"",
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 513, col: 10, offset: 16647},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 26, offset: 49731},
									expr: &charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 513, col: 23, offset: 16660},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 513, col: 26, offset: 16663},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 514, col: 23, offset: 16693},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 514, col: 23, offset: 16693},
									val:        "fallthrough",
									ignoreCase: false,
									want:       "\"fallthrough\"",
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "declaration",
			pos:  position{line: 502, col: 1, offset: 16126},
			expr: &choiceExpr{
				pos: position{line: 502, col: 16, offset: 16141},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 503, col: 16, offset: 16176},
						exprs: []any{
							&charClassMatcher{
								pos:        position{line: 1473, col: 20, offset: 49477},
								val:        "[_\\pL]",
								chars:      []rune{'_'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 1490, col: 26, offset: 49731},
								expr: &charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL\\pNd]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 1883, col: 34, offset: 64833},
								expr: &charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 1883, col: 37, offset: 64836},
								expr: &seqExpr{
									pos: position{line: 1883, col: 38, offset: 64837},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1883, col: 38, offset: 64837},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1883, col: 42, offset: 64841},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callondeclaration15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&charClassMatcher{
											pos:        position{line: 1473, col: 20, offset: 49477},
											val:        "[_\\pL]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 1490, col: 26, offset: 49731},
											expr: &charClassMatcher{
												pos:        position{line: 1473, col: 20, offset: 49477},
												val:        "[_\\pL\\pNd]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 503, col: 33, offset: 16193},
								expr: &charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 503, col: 36, offset: 16196},
								val:        ":=",
								ignoreCase: false,
								want:       "\":=\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 503, col: 41, offset: 16201},
								expr: &charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 516, col: 20, offset: 16731},
								expr: &choiceExpr{
									pos: position{line: 516, col: 21, offset: 16732},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 516, col: 21, offset: 16732},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 516, col: 21, offset: 16732},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 516, col: 25, offset: 16736},
													expr: &charClassMatcher{
														pos:        position{line: 516, col: 25, offset: 16736},
														val:        "[^}]",
														chars:      []rune{'}'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 516, col: 31, offset: 16742},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 516, col: 37, offset: 16748},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 516, col: 37, offset: 16748},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 516, col: 41, offset: 16752},
													expr: &charClassMatcher{
														pos:        position{line: 516, col: 41, offset: 16752},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 516, col: 48, offset: 16759},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 516, col: 54, offset: 16765},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 516, col: 54, offset: 16765},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 516, col: 58, offset: 16769},
													expr: &charClassMatcher{
														pos:        position{line: 516, col: 58, offset: 16769},
														val:        "[^)]",
														chars:      []rune{')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&litMatcher{
													pos:        position{line: 516, col: 64, offset: 16775},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 516, col: 70, offset: 16781},
											exprs: []any{
												&notExpr{
													pos: position{line: 516, col: 70, offset: 16781},
													expr: &choiceExpr{
														pos: position{line: 2509, col: 27, offset: 87467},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 23, offset: 87381},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						expr: &litMatcher{
																							pos:        position{line: 2507, col: 27, offset: 87385},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2507, col: 33, offset: 87391},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2506, col: 23, offset: 87356},
																				expr: &anyMatcher{
																					line: 2506, col: 24, offset: 87357,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2509, col: 33, offset: 87473},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2509, col: 39, offset: 87479},
																expr: &seqExpr{
																	pos: position{line: 2509, col: 41, offset: 87481},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2509, col: 45, offset: 87485},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2509, col: 45, offset: 87485},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2509, col: 51, offset: 87491},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&anyMatcher{
													line: 516, col: 75, offset: 16786,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 502, col: 28, offset: 16153},
						name: "varDecl",
					},
				},
			},
		},
		{
			name: "varDecl",
			pos:  position{line: 504, col: 1, offset: 16220},
			expr: &seqExpr{
				pos: position{line: 504, col: 16, offset: 16235},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 504, col: 17, offset: 16236},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 504, col: 17, offset: 16236},
								val:        "var",
								ignoreCase: false,
								want:       "\"var\"",
							},
							&litMatcher{
								pos:        position{line: 504, col: 25, offset: 16244},
								val:        "const",
								ignoreCase: false,
								want:       "\"const\"",
							},
						},
					},
					&choiceExpr{
						pos: position{line: 504, col: 35, offset: 16254},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 504, col: 35, offset: 16254},
								exprs: []any{
									&oneOrMoreExpr{
										pos: position{line: 504, col: 35, offset: 16254},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 504, col: 38, offset: 16257},
										name: "varDeclLine",
									},
								},
							},
							&seqExpr{
								pos: position{line: 504, col: 52, offset: 16271},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 504, col: 52, offset: 16271},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 504, col: 56, offset: 16275},
										expr: &seqExpr{
											pos: position{line: 504, col: 57, offset: 16276},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 504, col: 57, offset: 16276},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).callonvarDecl18,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 504, col: 61, offset: 16280},
													name: "varDeclLine",
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 504, col: 75, offset: 16294},
										expr: &choiceExpr{
											pos: position{line: 2532, col: 20, offset: 88254},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2532, col: 31, offset: 88265},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															run: (*parser).callonvarDecl27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2530, col: 37, offset: 88223},
															expr: &litMatcher{
																pos:        position{line: 2530, col: 37, offset: 88223},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2530, col: 43, offset: 88229},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 504, col: 79, offset: 16298},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "varDeclLine",
			pos:  position{line: 505, col: 1, offset: 16303},
			expr: &seqExpr{
				pos: position{line: 505, col: 16, offset: 16318},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1473, col: 20, offset: 49477},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1490, col: 26, offset: 49731},
						expr: &charClassMatcher{
							pos:        position{line: 1473, col: 20, offset: 49477},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1883, col: 34, offset: 64833},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1883, col: 37, offset: 64836},
						expr: &seqExpr{
							pos: position{line: 1883, col: 38, offset: 64837},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1883, col: 38, offset: 64837},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1883, col: 42, offset: 64841},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonvarDeclLine14,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 26, offset: 49731},
									expr: &charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 505, col: 33, offset: 16335},
						expr: &seqExpr{
							pos: position{line: 505, col: 34, offset: 16336},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 505, col: 34, offset: 16336},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 505, col: 37, offset: 16339},
									name: "goType",
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 505, col: 46, offset: 16348},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 505, col: 49, offset: 16351},
						val:        "=",
						ignoreCase: false,
						want:       "\"=\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 505, col: 53, offset: 16355},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 516, col: 20, offset: 16731},
						expr: &choiceExpr{
							pos: position{line: 516, col: 21, offset: 16732},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 516, col: 21, offset: 16732},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 516, col: 21, offset: 16732},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 516, col: 25, offset: 16736},
											expr: &charClassMatcher{
												pos:        position{line: 516, col: 25, offset: 16736},
												val:        "[^}]",
												chars:      []rune{'}'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 516, col: 31, offset: 16742},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 516, col: 37, offset: 16748},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 516, col: 37, offset: 16748},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 516, col: 41, offset: 16752},
											expr: &charClassMatcher{
												pos:        position{line: 516, col: 41, offset: 16752},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 516, col: 48, offset: 16759},
											val:        "]",
											ignoreCase: false,
											want:       "\"]\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 516, col: 54, offset: 16765},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 516, col: 54, offset: 16765},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 516, col: 58, offset: 16769},
											expr: &charClassMatcher{
												pos:        position{line: 516, col: 58, offset: 16769},
												val:        "[^)]",
												chars:      []rune{')'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 516, col: 64, offset: 16775},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
								&seqExpr{
									pos: position{line: 516, col: 70, offset: 16781},
									exprs: []any{
										&notExpr{
											pos: position{line: 516, col: 70, offset: 16781},
											expr: &choiceExpr{
												pos: position{line: 2509, col: 27, offset: 87467},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2507, col: 23, offset: 87381},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&choiceExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		exprs: []any{
																			&zeroOrOneExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				expr: &litMatcher{
																					pos:        position{line: 2507, col: 27, offset: 87385},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2507, col: 33, offset: 87391},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2506, col: 23, offset: 87356},
																		expr: &anyMatcher{
																			line: 2506, col: 24, offset: 87357,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2509, col: 33, offset: 87473},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
													&andExpr{
														pos: position{line: 2509, col: 39, offset: 87479},
														expr: &seqExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2509, col: 41, offset: 87481},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2509, col: 45, offset: 87485},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2509, col: 45, offset: 87485},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 51, offset: 87491},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&anyMatcher{
											line: 516, col: 75, offset: 16786,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Return",
			pos:  position{line: 522, col: 1, offset: 16972},
			expr: &actionExpr{
				pos: position{line: 522, col: 11, offset: 16982},
				run: (*parser).callonReturn1,
				expr: &seqExpr{
					pos: position{line: 522, col: 11, offset: 16982},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 522, col: 11, offset: 16982},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 20, offset: 16991},
							label: "errI",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 25, offset: 16996},
								name: "returnErr",
							},
						},
					},
				},
			},
		},
		{
			name: "returnErr",
			pos:  position{line: 529, col: 1, offset: 17110},
			expr: &choiceExpr{
				pos: position{line: 529, col: 14, offset: 17123},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 529, col: 14, offset: 17123},
						run: (*parser).callonreturnErr2,
						expr: &choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 17168},
						run: (*parser).callonreturnErr22,
						expr: &seqExpr{
							pos: position{line: 531, col: 5, offset: 17168},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 531, col: 5, offset: 17168},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 531, col: 8, offset: 17171},
									label: "errI",
									expr: &ruleRefExpr{
										pos:  position{line: 531, col: 13, offset: 17176},
										name: "GoExpression",
									},
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 17234},
						run: (*parser).callonreturnErr47,
						expr: &seqExpr{
							pos: position{line: 533, col: 5, offset: 17234},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 533, col: 5, offset: 17234},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 533, col: 8, offset: 17237},
									label: "errI",
									expr: &ruleRefExpr{
										pos:  position{line: 533, col: 13, offset: 17242},
										name: "GoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 533, col: 26, offset: 17255},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonreturnErr54,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2512, col: 35, offset: 87610},
									run: (*parser).callonreturnErr60,
									expr: &seqExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2512, col: 38, offset: 87613},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2512, col: 50, offset: 87625},
													expr: &seqExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														exprs: []any{
															&notExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																expr: &choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 57, offset: 87632},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2512, col: 71, offset: 87646},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2512, col: 71, offset: 87646},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2512, col: 75, offset: 87650},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 75, offset: 87650},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2512, col: 81, offset: 87656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 533, col: 48, offset: 17277},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 17437},
						run: (*parser).callonreturnErr115,
						expr: &seqExpr{
							pos: position{line: 535, col: 5, offset: 17437},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 535, col: 5, offset: 17437},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 535, col: 8, offset: 17440},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonreturnErr120,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2512, col: 35, offset: 87610},
									run: (*parser).callonreturnErr126,
									expr: &seqExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2512, col: 38, offset: 87613},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2512, col: 50, offset: 87625},
													expr: &seqExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														exprs: []any{
															&notExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																expr: &choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 57, offset: 87632},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2512, col: 71, offset: 87646},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2512, col: 71, offset: 87646},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2512, col: 75, offset: 87650},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 75, offset: 87650},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2512, col: 81, offset: 87656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 535, col: 30, offset: 17462},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Component",
			pos:  position{line: 571, col: 1, offset: 18788},
			expr: &actionExpr{
				pos: position{line: 571, col: 14, offset: 18801},
				run: (*parser).callonComponent1,
				expr: &seqExpr{
					pos: position{line: 571, col: 14, offset: 18801},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 571, col: 14, offset: 18801},
							val:        "comp",
							ignoreCase: false,
							want:       "\"comp\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 571, col: 21, offset: 18808},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 24, offset: 18811},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 585, col: 18, offset: 19274},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 585, col: 18, offset: 19274},
										run: (*parser).callonComponent8,
										expr: &labeledExpr{
											pos:   position{line: 585, col: 18, offset: 19274},
											label: "identI",
											expr: &actionExpr{
												pos: position{line: 245, col: 10, offset: 7100},
												run: (*parser).callonComponent10,
												expr: &labeledExpr{
													pos:   position{line: 245, col: 10, offset: 7100},
													label: "identI",
													expr: &seqExpr{
														pos: position{line: 1490, col: 17, offset: 49722},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 1473, col: 20, offset: 49477},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 1490, col: 26, offset: 49731},
																expr: &charClassMatcher{
																	pos:        position{line: 1473, col: 20, offset: 49477},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 587, col: 5, offset: 19316},
										run: (*parser).callonComponent16,
										expr: &seqExpr{
											pos: position{line: 587, col: 5, offset: 19316},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 587, col: 5, offset: 19316},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonComponent19,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 587, col: 16, offset: 19327},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 587, col: 23, offset: 19334},
														expr: &seqExpr{
															pos: position{line: 587, col: 24, offset: 19335},
															exprs: []any{
																&notExpr{
																	pos: position{line: 587, col: 24, offset: 19335},
																	expr: &seqExpr{
																		pos: position{line: 587, col: 26, offset: 19337},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 587, col: 26, offset: 19337},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 587, col: 29, offset: 19340},
																				val:        "[(};]",
																				chars:      []rune{'(', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 587, col: 36, offset: 19347},
																	val:        "[^\\r\\n(]",
																	chars:      []rune{'\r', '\n', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 587, col: 47, offset: 19358},
													expr: &litMatcher{
														pos:        position{line: 587, col: 48, offset: 19359},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 589, col: 5, offset: 19450},
										run: (*parser).callonComponent36,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonComponent37,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 571, col: 44, offset: 18831},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 47, offset: 18834},
							label: "typeParamsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 571, col: 59, offset: 18846},
								expr: &ruleRefExpr{
									pos:  position{line: 571, col: 59, offset: 18846},
									name: "componentTypeParamList",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 571, col: 83, offset: 18870},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 86, offset: 18873},
							label: "paramsI",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 94, offset: 18881},
								name: "componentParamList",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 113, offset: 18900},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 119, offset: 18906},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "componentTypeParamList",
			pos:  position{line: 593, col: 1, offset: 19518},
			expr: &actionExpr{
				pos: position{line: 593, col: 27, offset: 19544},
				run: (*parser).calloncomponentTypeParamList1,
				expr: &seqExpr{
					pos: position{line: 593, col: 27, offset: 19544},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 593, col: 27, offset: 19544},
							label: "lBracketI",
							expr: &actionExpr{
								pos: position{line: 2620, col: 15, offset: 91395},
								run: (*parser).calloncomponentTypeParamList4,
								expr: &seqExpr{
									pos: position{line: 2620, col: 15, offset: 91395},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).calloncomponentTypeParamList6,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2586, col: 18, offset: 90318},
											run: (*parser).calloncomponentTypeParamList12,
										},
										&labeledExpr{
											pos:   position{line: 2620, col: 25, offset: 91405},
											label: "lBracketI",
											expr: &actionExpr{
												pos: position{line: 2544, col: 14, offset: 88766},
												run: (*parser).calloncomponentTypeParamList14,
												expr: &seqExpr{
													pos: position{line: 2544, col: 14, offset: 88766},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2544, col: 14, offset: 88766},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).calloncomponentTypeParamList17,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2544, col: 23, offset: 88775},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2620, col: 45, offset: 91425},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).calloncomponentTypeParamList28,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 48, offset: 19565},
							label: "paramsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 593, col: 56, offset: 19573},
								expr: &ruleRefExpr{
									pos:  position{line: 593, col: 56, offset: 19573},
									name: "typeParams",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 68, offset: 19585},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 601, col: 30, offset: 19842},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2624, col: 13, offset: 91488},
										run: (*parser).calloncomponentTypeParamList37,
										expr: &seqExpr{
											pos: position{line: 2624, col: 13, offset: 91488},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2624, col: 13, offset: 91488},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2624, col: 16, offset: 91491},
													expr: &seqExpr{
														pos: position{line: 2624, col: 17, offset: 91492},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2624, col: 17, offset: 91492},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2624, col: 21, offset: 91496},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).calloncomponentTypeParamList48,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2624, col: 27, offset: 91502},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2545, col: 14, offset: 88829},
														run: (*parser).calloncomponentTypeParamList53,
														expr: &seqExpr{
															pos: position{line: 2545, col: 14, offset: 88829},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2545, col: 14, offset: 88829},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).calloncomponentTypeParamList56,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2545, col: 23, offset: 88838},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).calloncomponentTypeParamList63,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 601, col: 41, offset: 19853},
										run: (*parser).calloncomponentTypeParamList64,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).calloncomponentTypeParamList65,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeParams",
			pos:  position{line: 605, col: 1, offset: 19918},
			expr: &actionExpr{
				pos: position{line: 605, col: 15, offset: 19932},
				run: (*parser).callontypeParams1,
				expr: &seqExpr{
					pos: position{line: 605, col: 15, offset: 19932},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 605, col: 15, offset: 19932},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 22, offset: 19939},
								name: "typeParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 32, offset: 19949},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 605, col: 38, offset: 19955},
								expr: &seqExpr{
									pos: position{line: 605, col: 39, offset: 19956},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 605, col: 39, offset: 19956},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 605, col: 42, offset: 19959},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 605, col: 46, offset: 19963},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callontypeParams15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 605, col: 50, offset: 19967},
											name: "typeParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeParam",
			pos:  position{line: 609, col: 1, offset: 20047},
			expr: &actionExpr{
				pos: position{line: 609, col: 14, offset: 20060},
				run: (*parser).callontypeParam1,
				expr: &seqExpr{
					pos: position{line: 609, col: 14, offset: 20060},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 609, col: 14, offset: 20060},
							label: "namesI",
							expr: &actionExpr{
								pos: position{line: 616, col: 19, offset: 20244},
								run: (*parser).callontypeParam4,
								expr: &seqExpr{
									pos: position{line: 616, col: 19, offset: 20244},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 616, col: 19, offset: 20244},
											label: "firstI",
											expr: &choiceExpr{
												pos: position{line: 620, col: 18, offset: 20380},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 245, col: 10, offset: 7100},
														run: (*parser).callontypeParam8,
														expr: &labeledExpr{
															pos:   position{line: 245, col: 10, offset: 7100},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1490, col: 17, offset: 49722},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1473, col: 20, offset: 49477},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1490, col: 26, offset: 49731},
																		expr: &charClassMatcher{
																			pos:        position{line: 1473, col: 20, offset: 49477},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 620, col: 26, offset: 20388},
														run: (*parser).callontypeParam14,
														expr: &seqExpr{
															pos: position{line: 620, col: 26, offset: 20388},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 620, col: 26, offset: 20388},
																	expr: &charClassMatcher{
																		pos:        position{line: 620, col: 26, offset: 20388},
																		val:        "[^\\r\\n :,)]",
																		chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&andExpr{
																	pos: position{line: 620, col: 39, offset: 20401},
																	expr: &charClassMatcher{
																		pos:        position{line: 620, col: 40, offset: 20402},
																		val:        "[:,)]",
																		chars:      []rune{':', ',', ')'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 616, col: 40, offset: 20265},
											label: "restI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 616, col: 46, offset: 20271},
												expr: &seqExpr{
													pos: position{line: 616, col: 47, offset: 20272},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 616, col: 47, offset: 20272},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 616, col: 50, offset: 20275},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 616, col: 54, offset: 20279},
															expr: &choiceExpr{
																pos: position{line: 2532, col: 20, offset: 88254},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2532, col: 31, offset: 88265},
																				run: (*parser).callontypeParam30,
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2530, col: 37, offset: 88223},
																				expr: &litMatcher{
																					pos:        position{line: 2530, col: 37, offset: 88223},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2530, col: 43, offset: 88229},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 620, col: 18, offset: 20380},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 245, col: 10, offset: 7100},
																	run: (*parser).callontypeParam35,
																	expr: &labeledExpr{
																		pos:   position{line: 245, col: 10, offset: 7100},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1490, col: 17, offset: 49722},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1490, col: 26, offset: 49731},
																					expr: &charClassMatcher{
																						pos:        position{line: 1473, col: 20, offset: 49477},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 620, col: 26, offset: 20388},
																	run: (*parser).callontypeParam41,
																	expr: &seqExpr{
																		pos: position{line: 620, col: 26, offset: 20388},
																		exprs: []any{
																			&oneOrMoreExpr{
																				pos: position{line: 620, col: 26, offset: 20388},
																				expr: &charClassMatcher{
																					pos:        position{line: 620, col: 26, offset: 20388},
																					val:        "[^\\r\\n :,)]",
																					chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&andExpr{
																				pos: position{line: 620, col: 39, offset: 20401},
																				expr: &charClassMatcher{
																					pos:        position{line: 620, col: 40, offset: 20402},
																					val:        "[:,)]",
																					chars:      []rune{':', ',', ')'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 36, offset: 20082},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callontypeParam48,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 45, offset: 20091},
							label: "typeI",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 51, offset: 20097},
								name: "typeParamType",
							},
						},
					},
				},
			},
		},
		{
			name: "typeParamType",
			pos:  position{line: 624, col: 1, offset: 20482},
			expr: &choiceExpr{
				pos: position{line: 624, col: 18, offset: 20499},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 624, col: 18, offset: 20499},
						run: (*parser).callontypeParamType2,
						expr: &seqExpr{
							pos: position{line: 624, col: 18, offset: 20499},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 624, col: 18, offset: 20499},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 624, col: 21, offset: 20502},
									label: "tI",
									expr: &ruleRefExpr{
										pos:  position{line: 624, col: 24, offset: 20505},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 20535},
						run: (*parser).callontypeParamType8,
						expr: &actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).callontypeParamType9,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamList",
			pos:  position{line: 633, col: 1, offset: 20716},
			expr: &choiceExpr{
				pos: position{line: 633, col: 23, offset: 20738},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 633, col: 23, offset: 20738},
						run: (*parser).calloncomponentParamList2,
						expr: &seqExpr{
							pos: position{line: 633, col: 23, offset: 20738},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 633, col: 23, offset: 20738},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2612, col: 14, offset: 91211},
										run: (*parser).calloncomponentParamList5,
										expr: &seqExpr{
											pos: position{line: 2612, col: 14, offset: 91211},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).calloncomponentParamList7,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).calloncomponentParamList13,
												},
												&labeledExpr{
													pos:   position{line: 2612, col: 24, offset: 91221},
													label: "lParenI",
													expr: &actionExpr{
														pos: position{line: 2538, col: 12, offset: 88518},
														run: (*parser).calloncomponentParamList15,
														expr: &seqExpr{
															pos: position{line: 2538, col: 12, offset: 88518},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2538, col: 12, offset: 88518},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).calloncomponentParamList18,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2538, col: 21, offset: 88527},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2612, col: 40, offset: 91237},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).calloncomponentParamList29,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 633, col: 41, offset: 20756},
									label: "paramsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 633, col: 49, offset: 20764},
										expr: &ruleRefExpr{
											pos:  position{line: 633, col: 49, offset: 20764},
											name: "componentParams",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 633, col: 66, offset: 20781},
									label: "rParenI",
									expr: &choiceExpr{
										pos: position{line: 647, col: 26, offset: 21262},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2616, col: 12, offset: 91297},
												run: (*parser).calloncomponentParamList38,
												expr: &seqExpr{
													pos: position{line: 2616, col: 12, offset: 91297},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2616, col: 12, offset: 91297},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 2616, col: 15, offset: 91300},
															expr: &seqExpr{
																pos: position{line: 2616, col: 16, offset: 91301},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2616, col: 16, offset: 91301},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2616, col: 20, offset: 91305},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).calloncomponentParamList49,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2616, col: 26, offset: 91311},
															label: "rParenI",
															expr: &actionExpr{
																pos: position{line: 2539, col: 12, offset: 88579},
																run: (*parser).calloncomponentParamList54,
																expr: &seqExpr{
																	pos: position{line: 2539, col: 12, offset: 88579},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2539, col: 12, offset: 88579},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).calloncomponentParamList57,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2539, col: 21, offset: 88588},
																			val:        ")",
																			ignoreCase: false,
																			want:       "\")\"",
																		},
																	},
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).calloncomponentParamList64,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 647, col: 36, offset: 21272},
												run: (*parser).calloncomponentParamList65,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).calloncomponentParamList66,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 20993},
						run: (*parser).calloncomponentParamList72,
						expr: &actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).calloncomponentParamList73,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParams",
			pos:  position{line: 651, col: 1, offset: 21332},
			expr: &actionExpr{
				pos: position{line: 651, col: 20, offset: 21351},
				run: (*parser).calloncomponentParams1,
				expr: &seqExpr{
					pos: position{line: 651, col: 20, offset: 21351},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 651, col: 20, offset: 21351},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 27, offset: 21358},
								name: "componentParam",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 42, offset: 21373},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 651, col: 48, offset: 21379},
								expr: &seqExpr{
									pos: position{line: 651, col: 49, offset: 21380},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 651, col: 49, offset: 21380},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 651, col: 52, offset: 21383},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 651, col: 56, offset: 21387},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).calloncomponentParams15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 651, col: 60, offset: 21391},
											name: "componentParam",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParam",
			pos:  position{line: 655, col: 1, offset: 21481},
			expr: &actionExpr{
				pos: position{line: 655, col: 19, offset: 21499},
				run: (*parser).calloncomponentParam1,
				expr: &seqExpr{
					pos: position{line: 655, col: 19, offset: 21499},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 655, col: 19, offset: 21499},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 679, col: 23, offset: 22475},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 245, col: 10, offset: 7100},
										run: (*parser).calloncomponentParam5,
										expr: &labeledExpr{
											pos:   position{line: 245, col: 10, offset: 7100},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1490, col: 17, offset: 49722},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1473, col: 20, offset: 49477},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1490, col: 26, offset: 49731},
														expr: &charClassMatcher{
															pos:        position{line: 1473, col: 20, offset: 49477},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 679, col: 31, offset: 22483},
										run: (*parser).calloncomponentParam11,
										expr: &seqExpr{
											pos: position{line: 679, col: 31, offset: 22483},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 679, col: 31, offset: 22483},
													expr: &charClassMatcher{
														pos:        position{line: 679, col: 31, offset: 22483},
														val:        "[^\\r\\n :,)]",
														chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&andExpr{
													pos: position{line: 679, col: 44, offset: 22496},
													expr: &charClassMatcher{
														pos:        position{line: 679, col: 45, offset: 22497},
														val:        "[:,)]",
														chars:      []rune{':', ',', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 44, offset: 21524},
							label: "typeI",
							expr: &zeroOrOneExpr{
								pos: position{line: 655, col: 50, offset: 21530},
								expr: &ruleRefExpr{
									pos:  position{line: 655, col: 50, offset: 21530},
									name: "componentParamType",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 70, offset: 21550},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 655, col: 79, offset: 21559},
								expr: &ruleRefExpr{
									pos:  position{line: 655, col: 79, offset: 21559},
									name: "componentParamDefault",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamType",
			pos:  position{line: 683, col: 1, offset: 22582},
			expr: &actionExpr{
				pos: position{line: 683, col: 23, offset: 22604},
				run: (*parser).calloncomponentParamType1,
				expr: &seqExpr{
					pos: position{line: 683, col: 23, offset: 22604},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 683, col: 23, offset: 22604},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 26, offset: 22607},
							label: "tI",
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 29, offset: 22610},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamDefault",
			pos:  position{line: 687, col: 1, offset: 22639},
			expr: &actionExpr{
				pos: position{line: 687, col: 26, offset: 22664},
				run: (*parser).calloncomponentParamDefault1,
				expr: &seqExpr{
					pos: position{line: 687, col: 26, offset: 22664},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 687, col: 26, offset: 22664},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 29, offset: 22667},
							label: "colonI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).calloncomponentParamDefault6,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 687, col: 40, offset: 22678},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 687, col: 44, offset: 22682},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 47, offset: 22685},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 53, offset: 22691},
								name: "componentParamDefaultValue",
							},
						},
					},
				},
			},
		},
		{
			name: "componentParamDefaultValue",
			pos:  position{line: 694, col: 1, offset: 22844},
			expr: &choiceExpr{
				pos: position{line: 694, col: 31, offset: 22874},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 694, col: 31, offset: 22874},
						run: (*parser).calloncomponentParamDefaultValue2,
						expr: &labeledExpr{
							pos:   position{line: 694, col: 31, offset: 22874},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 37, offset: 22880},
								name: "GoExpression",
							},
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 22935},
						run: (*parser).calloncomponentParamDefaultValue5,
						expr: &actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).calloncomponentParamDefaultValue6,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCall",
			pos:  position{line: 713, col: 1, offset: 23554},
			expr: &actionExpr{
				pos: position{line: 713, col: 18, offset: 23571},
				run: (*parser).callonComponentCall1,
				expr: &seqExpr{
					pos: position{line: 713, col: 18, offset: 23571},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 713, col: 18, offset: 23571},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&labeledExpr{
							pos:   position{line: 713, col: 22, offset: 23575},
							label: "headerI",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 30, offset: 23583},
								name: "ComponentCallHeader",
							},
						},
						&labeledExpr{
							pos:   position{line: 713, col: 50, offset: 23603},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 56, offset: 23609},
								name: "ComponentCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCallHeader",
			pos:  position{line: 720, col: 1, offset: 23754},
			expr: &actionExpr{
				pos: position{line: 720, col: 24, offset: 23777},
				run: (*parser).callonComponentCallHeader1,
				expr: &seqExpr{
					pos: position{line: 720, col: 24, offset: 23777},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 720, col: 24, offset: 23777},
							label: "namespaceI",
							expr: &zeroOrOneExpr{
								pos: position{line: 720, col: 35, offset: 23788},
								expr: &actionExpr{
									pos: position{line: 249, col: 14, offset: 7206},
									run: (*parser).callonComponentCallHeader5,
									expr: &seqExpr{
										pos: position{line: 249, col: 14, offset: 7206},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 249, col: 14, offset: 7206},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&labeledExpr{
												pos:   position{line: 249, col: 18, offset: 7210},
												label: "identI",
												expr: &actionExpr{
													pos: position{line: 245, col: 10, offset: 7100},
													run: (*parser).callonComponentCallHeader9,
													expr: &labeledExpr{
														pos:   position{line: 245, col: 10, offset: 7100},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 1490, col: 17, offset: 49722},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1473, col: 20, offset: 49477},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1490, col: 26, offset: 49731},
																	expr: &charClassMatcher{
																		pos:        position{line: 1473, col: 20, offset: 49477},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 46, offset: 23799},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 733, col: 22, offset: 24206},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 245, col: 10, offset: 7100},
										run: (*parser).callonComponentCallHeader17,
										expr: &labeledExpr{
											pos:   position{line: 245, col: 10, offset: 7100},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1490, col: 17, offset: 49722},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1473, col: 20, offset: 49477},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1490, col: 26, offset: 49731},
														expr: &charClassMatcher{
															pos:        position{line: 1473, col: 20, offset: 49477},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 733, col: 30, offset: 24214},
										run: (*parser).callonComponentCallHeader23,
										expr: &seqExpr{
											pos: position{line: 733, col: 30, offset: 24214},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 733, col: 30, offset: 24214},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 733, col: 37, offset: 24221},
														expr: &seqExpr{
															pos: position{line: 733, col: 38, offset: 24222},
															exprs: []any{
																&notExpr{
																	pos: position{line: 733, col: 38, offset: 24222},
																	expr: &seqExpr{
																		pos: position{line: 733, col: 40, offset: 24224},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 733, col: 40, offset: 24224},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 733, col: 43, offset: 24227},
																				val:        "[(};]",
																				chars:      []rune{'(', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 733, col: 50, offset: 24234},
																	val:        "[^\\r\\n(]",
																	chars:      []rune{'\r', '\n', '('},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 733, col: 61, offset: 24245},
													expr: &litMatcher{
														pos:        position{line: 733, col: 62, offset: 24246},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 735, col: 5, offset: 24325},
										run: (*parser).callonComponentCallHeader36,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonComponentCallHeader37,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 70, offset: 23823},
							label: "typeArgsI",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 80, offset: 23833},
								name: "componentTypeArgList",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 101, offset: 23854},
							label: "argsI",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 107, offset: 23860},
								name: "componentArgList",
							},
						},
					},
				},
			},
		},
		{
			name: "componentTypeArgList",
			pos:  position{line: 739, col: 1, offset: 24394},
			expr: &actionExpr{
				pos: position{line: 739, col: 25, offset: 24418},
				run: (*parser).calloncomponentTypeArgList1,
				expr: &seqExpr{
					pos: position{line: 739, col: 25, offset: 24418},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 739, col: 25, offset: 24418},
							label: "lBracketI",
							expr: &actionExpr{
								pos: position{line: 2620, col: 15, offset: 91395},
								run: (*parser).calloncomponentTypeArgList4,
								expr: &seqExpr{
									pos: position{line: 2620, col: 15, offset: 91395},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).calloncomponentTypeArgList6,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2586, col: 18, offset: 90318},
											run: (*parser).calloncomponentTypeArgList12,
										},
										&labeledExpr{
											pos:   position{line: 2620, col: 25, offset: 91405},
											label: "lBracketI",
											expr: &actionExpr{
												pos: position{line: 2544, col: 14, offset: 88766},
												run: (*parser).calloncomponentTypeArgList14,
												expr: &seqExpr{
													pos: position{line: 2544, col: 14, offset: 88766},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2544, col: 14, offset: 88766},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).calloncomponentTypeArgList17,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2544, col: 23, offset: 88775},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2620, col: 45, offset: 91425},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).calloncomponentTypeArgList28,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 46, offset: 24439},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 52, offset: 24445},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 52, offset: 24445},
									name: "typeArgs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 62, offset: 24455},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 747, col: 28, offset: 24699},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2624, col: 13, offset: 91488},
										run: (*parser).calloncomponentTypeArgList37,
										expr: &seqExpr{
											pos: position{line: 2624, col: 13, offset: 91488},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2624, col: 13, offset: 91488},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2624, col: 16, offset: 91491},
													expr: &seqExpr{
														pos: position{line: 2624, col: 17, offset: 91492},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2624, col: 17, offset: 91492},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2624, col: 21, offset: 91496},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).calloncomponentTypeArgList48,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2624, col: 27, offset: 91502},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2545, col: 14, offset: 88829},
														run: (*parser).calloncomponentTypeArgList53,
														expr: &seqExpr{
															pos: position{line: 2545, col: 14, offset: 88829},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2545, col: 14, offset: 88829},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).calloncomponentTypeArgList56,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2545, col: 23, offset: 88838},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).calloncomponentTypeArgList63,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 747, col: 39, offset: 24710},
										run: (*parser).calloncomponentTypeArgList64,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).calloncomponentTypeArgList65,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeArgs",
			pos:  position{line: 751, col: 1, offset: 24774},
			expr: &actionExpr{
				pos: position{line: 751, col: 13, offset: 24786},
				run: (*parser).callontypeArgs1,
				expr: &seqExpr{
					pos: position{line: 751, col: 13, offset: 24786},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 751, col: 13, offset: 24786},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 20, offset: 24793},
								name: "typeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 28, offset: 24801},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 751, col: 34, offset: 24807},
								expr: &seqExpr{
									pos: position{line: 751, col: 35, offset: 24808},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 751, col: 35, offset: 24808},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 751, col: 38, offset: 24811},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 751, col: 42, offset: 24815},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callontypeArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 751, col: 46, offset: 24819},
											name: "typeArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "typeArg",
			pos:  position{line: 755, col: 1, offset: 24892},
			expr: &choiceExpr{
				pos: position{line: 755, col: 12, offset: 24903},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 755, col: 12, offset: 24903},
						run: (*parser).callontypeArg2,
						expr: &labeledExpr{
							pos:   position{line: 755, col: 12, offset: 24903},
							label: "tI",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 15, offset: 24906},
								name: "Type",
							},
						},
					},
					&actionExpr{
						pos: position{line: 757, col: 5, offset: 24936},
						run: (*parser).callontypeArg5,
						expr: &actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).callontypeArg6,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgList",
			pos:  position{line: 764, col: 1, offset: 25124},
			expr: &choiceExpr{
				pos: position{line: 764, col: 21, offset: 25144},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 764, col: 21, offset: 25144},
						run: (*parser).calloncomponentArgList2,
						expr: &seqExpr{
							pos: position{line: 764, col: 21, offset: 25144},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 764, col: 21, offset: 25144},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2612, col: 14, offset: 91211},
										run: (*parser).calloncomponentArgList5,
										expr: &seqExpr{
											pos: position{line: 2612, col: 14, offset: 91211},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).calloncomponentArgList7,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).calloncomponentArgList13,
												},
												&labeledExpr{
													pos:   position{line: 2612, col: 24, offset: 91221},
													label: "lParenI",
													expr: &actionExpr{
														pos: position{line: 2538, col: 12, offset: 88518},
														run: (*parser).calloncomponentArgList15,
														expr: &seqExpr{
															pos: position{line: 2538, col: 12, offset: 88518},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2538, col: 12, offset: 88518},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).calloncomponentArgList18,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2538, col: 21, offset: 88527},
																	val:        "(",
																	ignoreCase: false,
																	want:       "\"(\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2612, col: 40, offset: 91237},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).calloncomponentArgList29,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 764, col: 39, offset: 25162},
									label: "argsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 764, col: 45, offset: 25168},
										expr: &ruleRefExpr{
											pos:  position{line: 764, col: 45, offset: 25168},
											name: "componentArgs",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 764, col: 60, offset: 25183},
									label: "rParenI",
									expr: &choiceExpr{
										pos: position{line: 778, col: 24, offset: 25666},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2616, col: 12, offset: 91297},
												run: (*parser).calloncomponentArgList38,
												expr: &seqExpr{
													pos: position{line: 2616, col: 12, offset: 91297},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2616, col: 12, offset: 91297},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 2616, col: 15, offset: 91300},
															expr: &seqExpr{
																pos: position{line: 2616, col: 16, offset: 91301},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2616, col: 16, offset: 91301},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2616, col: 20, offset: 91305},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).calloncomponentArgList49,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 2616, col: 26, offset: 91311},
															label: "rParenI",
															expr: &actionExpr{
																pos: position{line: 2539, col: 12, offset: 88579},
																run: (*parser).calloncomponentArgList54,
																expr: &seqExpr{
																	pos: position{line: 2539, col: 12, offset: 88579},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 2539, col: 12, offset: 88579},
																			label: "posI",
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).calloncomponentArgList57,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2539, col: 21, offset: 88588},
																			val:        ")",
																			ignoreCase: false,
																			want:       "\")\"",
																		},
																	},
																},
															},
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).calloncomponentArgList64,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 778, col: 34, offset: 25676},
												run: (*parser).calloncomponentArgList65,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).calloncomponentArgList66,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 25393},
						run: (*parser).calloncomponentArgList72,
						expr: &actionExpr{
							pos: position{line: 2519, col: 8, offset: 87865},
							run: (*parser).calloncomponentArgList73,
							expr: &choiceExpr{
								pos: position{line: 2519, col: 9, offset: 87866},
								alternatives: []any{
									&andExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										expr: &anyMatcher{
											line: 2519, col: 10, offset: 87867,
										},
									},
									&notExpr{
										pos: position{line: 2519, col: 14, offset: 87871},
										expr: &anyMatcher{
											line: 2519, col: 15, offset: 87872,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgs",
			pos:  position{line: 782, col: 1, offset: 25735},
			expr: &actionExpr{
				pos: position{line: 782, col: 18, offset: 25752},
				run: (*parser).calloncomponentArgs1,
				expr: &seqExpr{
					pos: position{line: 782, col: 18, offset: 25752},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 782, col: 18, offset: 25752},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 25, offset: 25759},
								name: "componentArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 38, offset: 25772},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 782, col: 44, offset: 25778},
								expr: &seqExpr{
									pos: position{line: 782, col: 45, offset: 25779},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 782, col: 45, offset: 25779},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 782, col: 48, offset: 25782},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 782, col: 52, offset: 25786},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).calloncomponentArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 782, col: 56, offset: 25790},
											name: "componentArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "componentArg",
			pos:  position{line: 786, col: 1, offset: 25876},
			expr: &actionExpr{
				pos: position{line: 786, col: 17, offset: 25892},
				run: (*parser).calloncomponentArg1,
				expr: &seqExpr{
					pos: position{line: 786, col: 17, offset: 25892},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 786, col: 17, offset: 25892},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 793, col: 21, offset: 26088},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 245, col: 10, offset: 7100},
										run: (*parser).calloncomponentArg5,
										expr: &labeledExpr{
											pos:   position{line: 245, col: 10, offset: 7100},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1490, col: 17, offset: 49722},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1473, col: 20, offset: 49477},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1490, col: 26, offset: 49731},
														expr: &charClassMatcher{
															pos:        position{line: 1473, col: 20, offset: 49477},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 793, col: 29, offset: 26096},
										run: (*parser).calloncomponentArg11,
										expr: &seqExpr{
											pos: position{line: 793, col: 29, offset: 26096},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 793, col: 29, offset: 26096},
													expr: &charClassMatcher{
														pos:        position{line: 793, col: 29, offset: 26096},
														val:        "[^\\r\\n :,)]",
														chars:      []rune{'\r', '\n', ' ', ':', ',', ')'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&andExpr{
													pos: position{line: 793, col: 42, offset: 26109},
													expr: &charClassMatcher{
														pos:        position{line: 793, col: 43, offset: 26110},
														val:        "[:,)]",
														chars:      []rune{':', ',', ')'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 786, col: 40, offset: 25915},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 43, offset: 25918},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 48, offset: 25923},
								name: "componentArgValue",
							},
						},
					},
				},
			},
		},
		{
			name: "componentArgValue",
			pos:  position{line: 797, col: 1, offset: 26194},
			expr: &choiceExpr{
				pos: position{line: 797, col: 22, offset: 26215},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 797, col: 22, offset: 26215},
						run: (*parser).calloncomponentArgValue2,
						expr: &seqExpr{
							pos: position{line: 797, col: 22, offset: 26215},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 797, col: 22, offset: 26215},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 797, col: 26, offset: 26219},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).calloncomponentArgValue9,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 797, col: 30, offset: 26223},
									label: "exprI",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 36, offset: 26229},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 799, col: 5, offset: 26268},
						run: (*parser).calloncomponentArgValue15,
						expr: &seqExpr{
							pos: position{line: 799, col: 5, offset: 26268},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 799, col: 5, offset: 26268},
									expr: &litMatcher{
										pos:        position{line: 799, col: 5, offset: 26268},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 799, col: 10, offset: 26273},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 799, col: 13, offset: 26276},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).calloncomponentArgValue22,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComponentCallBody",
			pos:  position{line: 814, col: 1, offset: 26853},
			expr: &actionExpr{
				pos: position{line: 814, col: 22, offset: 26874},
				run: (*parser).callonComponentCallBody1,
				expr: &seqExpr{
					pos: position{line: 814, col: 22, offset: 26874},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 814, col: 22, offset: 26874},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 25, offset: 26877},
							label: "bI",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 28, offset: 26880},
								name: "componentCallBody",
							},
						},
					},
				},
			},
		},
		{
			name: "componentCallBody",
			pos:  position{line: 815, col: 1, offset: 26917},
			expr: &choiceExpr{
				pos: position{line: 815, col: 22, offset: 26938},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 815, col: 22, offset: 26938},
						name: "UnderscoreBlockShorthand",
					},
					&ruleRefExpr{
						pos:  position{line: 815, col: 49, offset: 26965},
						name: "Scope",
					},
					&actionExpr{
						pos: position{line: 815, col: 57, offset: 26973},
						run: (*parser).calloncomponentCallBody4,
						expr: &choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 83, offset: 26999},
						run: (*parser).calloncomponentCallBody24,
						expr: &seqExpr{
							pos: position{line: 815, col: 83, offset: 26999},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 815, col: 83, offset: 26999},
									label: "uI",
									expr: &actionExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										run: (*parser).calloncomponentCallBody27,
										expr: &seqExpr{
											pos: position{line: 2512, col: 35, offset: 87610},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2512, col: 35, offset: 87610},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2512, col: 38, offset: 87613},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2512, col: 50, offset: 87625},
														expr: &seqExpr{
															pos: position{line: 2512, col: 51, offset: 87626},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2512, col: 51, offset: 87626},
																	expr: &choiceExpr{
																		pos: position{line: 2509, col: 27, offset: 87467},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2507, col: 23, offset: 87381},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										expr: &litMatcher{
																											pos:        position{line: 2507, col: 27, offset: 87385},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2507, col: 33, offset: 87391},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2506, col: 23, offset: 87356},
																								expr: &anyMatcher{
																									line: 2506, col: 24, offset: 87357,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 33, offset: 87473},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2509, col: 39, offset: 87479},
																				expr: &seqExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2509, col: 41, offset: 87481},
																							expr: &charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2509, col: 45, offset: 87485},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2509, col: 45, offset: 87485},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 51, offset: 87491},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2512, col: 57, offset: 87632},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2512, col: 57, offset: 87632},
																			expr: &charClassMatcher{
																				pos:        position{line: 2512, col: 57, offset: 87632},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2512, col: 71, offset: 87646},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2512, col: 71, offset: 87646},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2512, col: 75, offset: 87650},
																					expr: &charClassMatcher{
																						pos:        position{line: 2512, col: 75, offset: 87650},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2512, col: 81, offset: 87656},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 815, col: 97, offset: 27013},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnderscoreBlockShorthand",
			pos:  position{line: 827, col: 1, offset: 27493},
			expr: &actionExpr{
				pos: position{line: 827, col: 29, offset: 27521},
				run: (*parser).callonUnderscoreBlockShorthand1,
				expr: &seqExpr{
					pos: position{line: 827, col: 29, offset: 27521},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 827, col: 29, offset: 27521},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 827, col: 33, offset: 27525},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 39, offset: 27531},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 838, col: 1, offset: 27844},
			expr: &actionExpr{
				pos: position{line: 838, col: 10, offset: 27853},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 838, col: 10, offset: 27853},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 838, col: 10, offset: 27853},
							val:        "block",
							ignoreCase: false,
							want:       "\"block\"",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 18, offset: 27861},
							label: "nameI",
							expr: &choiceExpr{
								pos: position{line: 846, col: 14, offset: 28056},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 846, col: 14, offset: 28056},
										run: (*parser).callonBlock6,
										expr: &labeledExpr{
											pos:   position{line: 846, col: 14, offset: 28056},
											label: "identI",
											expr: &actionExpr{
												pos: position{line: 245, col: 10, offset: 7100},
												run: (*parser).callonBlock8,
												expr: &labeledExpr{
													pos:   position{line: 245, col: 10, offset: 7100},
													label: "identI",
													expr: &seqExpr{
														pos: position{line: 1490, col: 17, offset: 49722},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 1473, col: 20, offset: 49477},
																val:        "[_\\pL]",
																chars:      []rune{'_'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 1490, col: 26, offset: 49731},
																expr: &charClassMatcher{
																	pos:        position{line: 1473, col: 20, offset: 49477},
																	val:        "[_\\pL\\pNd]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 848, col: 5, offset: 28097},
										run: (*parser).callonBlock14,
										expr: &seqExpr{
											pos: position{line: 848, col: 5, offset: 28097},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 848, col: 5, offset: 28097},
													label: "startI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonBlock17,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 848, col: 16, offset: 28108},
													label: "identI",
													expr: &oneOrMoreExpr{
														pos: position{line: 848, col: 23, offset: 28115},
														expr: &seqExpr{
															pos: position{line: 848, col: 24, offset: 28116},
															exprs: []any{
																&notExpr{
																	pos: position{line: 848, col: 24, offset: 28116},
																	expr: &seqExpr{
																		pos: position{line: 848, col: 26, offset: 28118},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 848, col: 26, offset: 28118},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 848, col: 29, offset: 28121},
																				val:        "[[{};]",
																				chars:      []rune{'[', '{', '}', ';'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 848, col: 37, offset: 28129},
																	val:        "[^\\r\\n[{};]",
																	chars:      []rune{'\r', '\n', '[', '{', '}', ';'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&andExpr{
													pos: position{line: 848, col: 51, offset: 28143},
													expr: &charClassMatcher{
														pos:        position{line: 848, col: 52, offset: 28144},
														val:        "[[{};]",
														chars:      []rune{'[', '{', '}', ';'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 850, col: 5, offset: 28234},
										run: (*parser).callonBlock34,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonBlock35,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 34, offset: 27877},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 40, offset: 27883},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "If",
			pos:  position{line: 865, col: 1, offset: 28658},
			expr: &actionExpr{
				pos: position{line: 865, col: 7, offset: 28664},
				run: (*parser).callonIf1,
				expr: &seqExpr{
					pos: position{line: 865, col: 7, offset: 28664},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 865, col: 7, offset: 28664},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&labeledExpr{
							pos:   position{line: 865, col: 12, offset: 28669},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 18, offset: 28675},
								name: "ifHeader",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 27, offset: 28684},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 33, offset: 28690},
								name: "Body",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 38, offset: 28695},
							label: "elseIfsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 865, col: 47, offset: 28704},
								expr: &ruleRefExpr{
									pos:  position{line: 865, col: 47, offset: 28704},
									name: "ElseIf",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 55, offset: 28712},
							label: "elseI",
							expr: &zeroOrOneExpr{
								pos: position{line: 865, col: 61, offset: 28718},
								expr: &ruleRefExpr{
									pos:  position{line: 865, col: 61, offset: 28718},
									name: "Else",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElseIf",
			pos:  position{line: 875, col: 1, offset: 28971},
			expr: &actionExpr{
				pos: position{line: 875, col: 11, offset: 28981},
				run: (*parser).callonElseIf1,
				expr: &seqExpr{
					pos: position{line: 875, col: 11, offset: 28981},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 875, col: 11, offset: 28981},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonElseIf7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 875, col: 15, offset: 28985},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 875, col: 22, offset: 28992},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 875, col: 25, offset: 28995},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&labeledExpr{
							pos:   position{line: 875, col: 30, offset: 29000},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 36, offset: 29006},
								name: "ifHeader",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 875, col: 45, offset: 29015},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 875, col: 48, offset: 29018},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 54, offset: 29024},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "Else",
			pos:  position{line: 883, col: 1, offset: 29180},
			expr: &actionExpr{
				pos: position{line: 883, col: 9, offset: 29188},
				run: (*parser).callonElse1,
				expr: &seqExpr{
					pos: position{line: 883, col: 9, offset: 29188},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 883, col: 9, offset: 29188},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonElse7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 883, col: 13, offset: 29192},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 883, col: 20, offset: 29199},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 23, offset: 29202},
							label: "thenI",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 29, offset: 29208},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "ifHeader",
			pos:  position{line: 890, col: 1, offset: 29321},
			expr: &choiceExpr{
				pos: position{line: 890, col: 13, offset: 29333},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 890, col: 13, offset: 29333},
						run: (*parser).callonifHeader2,
						expr: &seqExpr{
							pos: position{line: 890, col: 13, offset: 29333},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 890, col: 13, offset: 29333},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 890, col: 16, offset: 29336},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 890, col: 22, offset: 29342},
										name: "IfHeader",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 29379},
						run: (*parser).callonifHeader8,
						expr: &actionExpr{
							pos: position{line: 854, col: 21, offset: 28327},
							run: (*parser).callonifHeader9,
							expr: &seqExpr{
								pos: position{line: 854, col: 21, offset: 28327},
								exprs: []any{
									&zeroOrOneExpr{
										pos: position{line: 854, col: 21, offset: 28327},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&labeledExpr{
										pos:   position{line: 854, col: 24, offset: 28330},
										label: "posI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonifHeader14,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IfHeader",
			pos:  position{line: 896, col: 1, offset: 29438},
			expr: &actionExpr{
				pos: position{line: 896, col: 13, offset: 29450},
				run: (*parser).callonIfHeader1,
				expr: &seqExpr{
					pos: position{line: 896, col: 13, offset: 29450},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 896, col: 13, offset: 29450},
							label: "stmtI",
							expr: &zeroOrOneExpr{
								pos: position{line: 896, col: 19, offset: 29456},
								expr: &ruleRefExpr{
									pos:  position{line: 896, col: 19, offset: 29456},
									name: "goIfHeaderStatement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 896, col: 40, offset: 29477},
							label: "condI",
							expr: &choiceExpr{
								pos: position{line: 896, col: 47, offset: 29484},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 896, col: 47, offset: 29484},
										name: "ChainExpression",
									},
									&ruleRefExpr{
										pos:  position{line: 896, col: 65, offset: 29502},
										name: "ConditionalGoExpression",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goIfHeaderStatement",
			pos:  position{line: 902, col: 1, offset: 29667},
			expr: &actionExpr{
				pos: position{line: 902, col: 24, offset: 29690},
				run: (*parser).callongoIfHeaderStatement1,
				expr: &seqExpr{
					pos: position{line: 902, col: 24, offset: 29690},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 902, col: 24, offset: 29690},
							label: "stmtI",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 30, offset: 29696},
								name: "GoStatement",
							},
						},
						&choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 902, col: 46, offset: 29712},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callongoIfHeaderStatement28,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 902, col: 50, offset: 29716},
							expr: &charClassMatcher{
								pos:        position{line: 902, col: 51, offset: 29717},
								val:        "[[{]",
								chars:      []rune{'[', '{'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 910, col: 1, offset: 29930},
			expr: &actionExpr{
				pos: position{line: 910, col: 11, offset: 29940},
				run: (*parser).callonSwitch1,
				expr: &seqExpr{
					pos: position{line: 910, col: 11, offset: 29940},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 910, col: 11, offset: 29940},
							val:        "switch",
							ignoreCase: false,
							want:       "\"switch\"",
						},
						&labeledExpr{
							pos:   position{line: 910, col: 20, offset: 29949},
							label: "comparatorI",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 32, offset: 29961},
								name: "switchComparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 49, offset: 29978},
							label: "lBraceI",
							expr: &actionExpr{
								pos: position{line: 2628, col: 15, offset: 91592},
								run: (*parser).callonSwitch7,
								expr: &seqExpr{
									pos: position{line: 2628, col: 15, offset: 91592},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonSwitch9,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2586, col: 18, offset: 90318},
											run: (*parser).callonSwitch15,
										},
										&labeledExpr{
											pos:   position{line: 2628, col: 25, offset: 91602},
											label: "lBraceI",
											expr: &actionExpr{
												pos: position{line: 2541, col: 12, offset: 88641},
												run: (*parser).callonSwitch17,
												expr: &seqExpr{
													pos: position{line: 2541, col: 12, offset: 88641},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2541, col: 12, offset: 88641},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonSwitch20,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2541, col: 21, offset: 88650},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2628, col: 41, offset: 91618},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonSwitch31,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 68, offset: 29997},
							label: "casesI",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 75, offset: 30004},
								name: "switchCases",
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 87, offset: 30016},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2632, col: 13, offset: 91679},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2632, col: 13, offset: 91679},
										run: (*parser).callonSwitch39,
										expr: &seqExpr{
											pos: position{line: 2632, col: 13, offset: 91679},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2632, col: 13, offset: 91679},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).callonSwitch45,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2632, col: 17, offset: 91683},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2542, col: 12, offset: 88702},
														run: (*parser).callonSwitch50,
														expr: &seqExpr{
															pos: position{line: 2542, col: 12, offset: 88702},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2542, col: 12, offset: 88702},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonSwitch53,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2542, col: 21, offset: 88711},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonSwitch60,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2634, col: 5, offset: 91754},
										run: (*parser).callonSwitch61,
										expr: &labeledExpr{
											pos:   position{line: 2634, col: 5, offset: 91754},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonSwitch63,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchComparator",
			pos:  position{line: 935, col: 1, offset: 30705},
			expr: &choiceExpr{
				pos: position{line: 935, col: 21, offset: 30725},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 935, col: 21, offset: 30725},
						run: (*parser).callonswitchComparator2,
						expr: &seqExpr{
							pos: position{line: 935, col: 21, offset: 30725},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 935, col: 21, offset: 30725},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 935, col: 24, offset: 30728},
									expr: &litMatcher{
										pos:        position{line: 935, col: 25, offset: 30729},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 30774},
						run: (*parser).callonswitchComparator8,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 30774},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 937, col: 5, offset: 30774},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 937, col: 8, offset: 30777},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 14, offset: 30783},
										name: "ConditionalGoExpression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 937, col: 38, offset: 30807},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 937, col: 41, offset: 30810},
									expr: &litMatcher{
										pos:        position{line: 937, col: 42, offset: 30811},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 30857},
						run: (*parser).callonswitchComparator18,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 30857},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 939, col: 5, offset: 30857},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 8, offset: 30860},
									label: "compI",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 14, offset: 30866},
										name: "ConditionalGoExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 38, offset: 30890},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonswitchComparator25,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 939, col: 49, offset: 30901},
									expr: &charClassMatcher{
										pos:        position{line: 939, col: 49, offset: 30901},
										val:        "[^\\r\\n{]",
										chars:      []rune{'\r', '\n', '{'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 59, offset: 30911},
									label: "endI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonswitchComparator34,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchCases",
			pos:  position{line: 944, col: 1, offset: 31077},
			expr: &actionExpr{
				pos: position{line: 944, col: 16, offset: 31092},
				run: (*parser).callonswitchCases1,
				expr: &seqExpr{
					pos: position{line: 944, col: 16, offset: 31092},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 944, col: 16, offset: 31092},
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 16, offset: 31092},
								name: "preFirstCase",
							},
						},
						&labeledExpr{
							pos:   position{line: 944, col: 30, offset: 31106},
							label: "casesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 944, col: 37, offset: 31113},
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 37, offset: 31113},
									name: "switchCase",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "preFirstCase",
			pos:  position{line: 969, col: 1, offset: 31741},
			expr: &actionExpr{
				pos: position{line: 969, col: 17, offset: 31757},
				run: (*parser).callonpreFirstCase1,
				expr: &oneOrMoreExpr{
					pos: position{line: 969, col: 17, offset: 31757},
					expr: &choiceExpr{
						pos: position{line: 969, col: 18, offset: 31758},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 969, col: 18, offset: 31758},
								exprs: []any{
									&notExpr{
										pos: position{line: 969, col: 18, offset: 31758},
										expr: &choiceExpr{
											pos: position{line: 969, col: 20, offset: 31760},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 969, col: 20, offset: 31760},
													val:        "case",
													ignoreCase: false,
													want:       "\"case\"",
												},
												&litMatcher{
													pos:        position{line: 969, col: 29, offset: 31769},
													val:        "default",
													ignoreCase: false,
													want:       "\"default\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 969, col: 40, offset: 31780},
										val:        "[^{}]",
										chars:      []rune{'{', '}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
							&seqExpr{
								pos: position{line: 969, col: 48, offset: 31788},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 969, col: 48, offset: 31788},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
									&ruleRefExpr{
										pos:  position{line: 969, col: 52, offset: 31792},
										name: "preFirstCase",
									},
									&zeroOrOneExpr{
										pos: position{line: 969, col: 65, offset: 31805},
										expr: &litMatcher{
											pos:        position{line: 969, col: 65, offset: 31805},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchCase",
			pos:  position{line: 976, col: 1, offset: 31980},
			expr: &actionExpr{
				pos: position{line: 976, col: 15, offset: 31994},
				run: (*parser).callonswitchCase1,
				expr: &seqExpr{
					pos: position{line: 976, col: 15, offset: 31994},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 976, col: 15, offset: 31994},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonswitchCase7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 19, offset: 31998},
							label: "caseI",
							expr: &choiceExpr{
								pos: position{line: 976, col: 26, offset: 32005},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 976, col: 26, offset: 32005},
										name: "Case",
									},
									&ruleRefExpr{
										pos:  position{line: 976, col: 33, offset: 32012},
										name: "Default",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 980, col: 1, offset: 32048},
			expr: &actionExpr{
				pos: position{line: 980, col: 9, offset: 32056},
				run: (*parser).callonCase1,
				expr: &seqExpr{
					pos: position{line: 980, col: 9, offset: 32056},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 980, col: 9, offset: 32056},
							val:        "case",
							ignoreCase: false,
							want:       "\"case\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 980, col: 16, offset: 32063},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 980, col: 19, offset: 32066},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 25, offset: 32072},
								name: "caseCondition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 980, col: 39, offset: 32086},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 980, col: 42, offset: 32089},
							label: "colonI",
							expr: &choiceExpr{
								pos: position{line: 997, col: 16, offset: 32564},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 997, col: 16, offset: 32564},
										run: (*parser).callonCase12,
										expr: &litMatcher{
											pos:        position{line: 997, col: 16, offset: 32564},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
									&actionExpr{
										pos: position{line: 999, col: 5, offset: 32597},
										run: (*parser).callonCase14,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonCase15,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 980, col: 61, offset: 32108},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 980, col: 67, offset: 32114},
								expr: &ruleRefExpr{
									pos:  position{line: 980, col: 67, offset: 32114},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 989, col: 1, offset: 32336},
			expr: &actionExpr{
				pos: position{line: 989, col: 12, offset: 32347},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 989, col: 12, offset: 32347},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 989, col: 12, offset: 32347},
							val:        "default",
							ignoreCase: false,
							want:       "\"default\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 989, col: 22, offset: 32357},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 25, offset: 32360},
							label: "colonI",
							expr: &choiceExpr{
								pos: position{line: 997, col: 16, offset: 32564},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 997, col: 16, offset: 32564},
										run: (*parser).callonDefault8,
										expr: &litMatcher{
											pos:        position{line: 997, col: 16, offset: 32564},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
									&actionExpr{
										pos: position{line: 999, col: 5, offset: 32597},
										run: (*parser).callonDefault10,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonDefault11,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 44, offset: 32379},
							label: "thenI",
							expr: &zeroOrOneExpr{
								pos: position{line: 989, col: 50, offset: 32385},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 50, offset: 32385},
									name: "switchThen",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "caseCondition",
			pos:  position{line: 1006, col: 1, offset: 32751},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 18, offset: 32768},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1006, col: 18, offset: 32768},
						run: (*parser).calloncaseCondition2,
						expr: &seqExpr{
							pos: position{line: 1006, col: 18, offset: 32768},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1006, col: 18, offset: 32768},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1006, col: 21, offset: 32771},
									label: "condI",
									expr: &ruleRefExpr{
										pos:  position{line: 1006, col: 27, offset: 32777},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 32816},
						run: (*parser).calloncaseCondition8,
						expr: &actionExpr{
							pos: position{line: 854, col: 21, offset: 28327},
							run: (*parser).calloncaseCondition9,
							expr: &seqExpr{
								pos: position{line: 854, col: 21, offset: 28327},
								exprs: []any{
									&zeroOrOneExpr{
										pos: position{line: 854, col: 21, offset: 28327},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&labeledExpr{
										pos:   position{line: 854, col: 24, offset: 28330},
										label: "posI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).calloncaseCondition14,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "switchThen",
			pos:  position{line: 1012, col: 1, offset: 32858},
			expr: &actionExpr{
				pos: position{line: 1012, col: 15, offset: 32872},
				run: (*parser).callonswitchThen1,
				expr: &labeledExpr{
					pos:   position{line: 1012, col: 15, offset: 32872},
					label: "nodesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1012, col: 22, offset: 32879},
						expr: &ruleRefExpr{
							pos:  position{line: 1012, col: 22, offset: 32879},
							name: "switchScopeNode",
						},
					},
				},
			},
		},
		{
			name: "switchScopeNode",
			pos:  position{line: 1016, col: 1, offset: 32967},
			expr: &actionExpr{
				pos: position{line: 1016, col: 20, offset: 32986},
				run: (*parser).callonswitchScopeNode1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 20, offset: 32986},
					exprs: []any{
						&notExpr{
							pos: position{line: 1016, col: 20, offset: 32986},
							expr: &choiceExpr{
								pos: position{line: 1016, col: 22, offset: 32988},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1016, col: 22, offset: 32988},
										val:        "}",
										ignoreCase: false,
										want:       "\"}\"",
									},
									&seqExpr{
										pos: position{line: 1016, col: 28, offset: 32994},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1016, col: 28, offset: 32994},
												val:        "case",
												ignoreCase: false,
												want:       "\"case\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 1016, col: 35, offset: 33001},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1016, col: 40, offset: 33006},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1016, col: 40, offset: 33006},
												val:        "default",
												ignoreCase: false,
												want:       "\"default\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1016, col: 50, offset: 33016},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1016, col: 53, offset: 33019},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 58, offset: 33024},
							label: "nodeI",
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 64, offset: 33030},
								name: "ScopeNode",
							},
						},
					},
				},
			},
		},
		{
			name: "For",
			pos:  position{line: 1024, col: 1, offset: 33245},
			expr: &actionExpr{
				pos: position{line: 1024, col: 8, offset: 33252},
				run: (*parser).callonFor1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 8, offset: 33252},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1024, col: 8, offset: 33252},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 14, offset: 33258},
							label: "exprI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1024, col: 20, offset: 33264},
								expr: &ruleRefExpr{
									pos:  position{line: 1024, col: 20, offset: 33264},
									name: "forHeader",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1024, col: 31, offset: 33275},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 34, offset: 33278},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 40, offset: 33284},
								name: "Body",
							},
						},
					},
				},
			},
		},
		{
			name: "ForHeader",
			pos:  position{line: 1032, col: 1, offset: 33447},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 14, offset: 33460},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1032, col: 14, offset: 33460},
						name: "ForRangeHeader",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 31, offset: 33477},
						name: "ChainExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 49, offset: 33495},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "forHeader",
			pos:  position{line: 1034, col: 1, offset: 33509},
			expr: &actionExpr{
				pos: position{line: 1034, col: 14, offset: 33522},
				run: (*parser).callonforHeader1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 14, offset: 33522},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 1034, col: 14, offset: 33522},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 17, offset: 33525},
							label: "condI",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 23, offset: 33531},
								name: "ForHeader",
							},
						},
					},
				},
			},
		},
		{
			name: "ForRangeHeader",
			pos:  position{line: 1042, col: 1, offset: 33759},
			expr: &actionExpr{
				pos: position{line: 1042, col: 19, offset: 33777},
				run: (*parser).callonForRangeHeader1,
				expr: &seqExpr{
					pos: position{line: 1042, col: 19, offset: 33777},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1042, col: 19, offset: 33777},
							label: "varsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1042, col: 25, offset: 33783},
								expr: &actionExpr{
									pos: position{line: 1053, col: 23, offset: 34169},
									run: (*parser).callonForRangeHeader5,
									expr: &seqExpr{
										pos: position{line: 1053, col: 23, offset: 34169},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1053, col: 23, offset: 34169},
												label: "var1I",
												expr: &actionExpr{
													pos: position{line: 245, col: 10, offset: 7100},
													run: (*parser).callonForRangeHeader8,
													expr: &labeledExpr{
														pos:   position{line: 245, col: 10, offset: 7100},
														label: "identI",
														expr: &seqExpr{
															pos: position{line: 1490, col: 17, offset: 49722},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1473, col: 20, offset: 49477},
																	val:        "[_\\pL]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1490, col: 26, offset: 49731},
																	expr: &charClassMatcher{
																		pos:        position{line: 1473, col: 20, offset: 49477},
																		val:        "[_\\pL\\pNd]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1053, col: 35, offset: 34181},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1053, col: 38, offset: 34184},
												label: "var2I",
												expr: &zeroOrOneExpr{
													pos: position{line: 1053, col: 44, offset: 34190},
													expr: &seqExpr{
														pos: position{line: 1053, col: 45, offset: 34191},
														exprs: []any{
															&actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonForRangeHeader19,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1053, col: 49, offset: 34195},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1053, col: 53, offset: 34199},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&actionExpr{
																pos: position{line: 245, col: 10, offset: 7100},
																run: (*parser).callonForRangeHeader28,
																expr: &labeledExpr{
																	pos:   position{line: 245, col: 10, offset: 7100},
																	label: "identI",
																	expr: &seqExpr{
																		pos: position{line: 1490, col: 17, offset: 49722},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1490, col: 26, offset: 49731},
																				expr: &charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL\\pNd]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1053, col: 64, offset: 34210},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 1053, col: 67, offset: 34213},
												label: "eqPosI",
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonForRangeHeader37,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1053, col: 78, offset: 34224},
												label: "declaresI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1053, col: 88, offset: 34234},
													expr: &litMatcher{
														pos:        position{line: 1053, col: 88, offset: 34234},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1053, col: 93, offset: 34239},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1053, col: 97, offset: 34243},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1042, col: 45, offset: 33803},
							label: "orderedPosI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonForRangeHeader50,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1042, col: 61, offset: 33819},
							label: "orderedI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1042, col: 70, offset: 33828},
								expr: &seqExpr{
									pos: position{line: 1042, col: 71, offset: 33829},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1042, col: 71, offset: 33829},
											val:        "ordered",
											ignoreCase: false,
											want:       "\"ordered\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1042, col: 81, offset: 33839},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1042, col: 86, offset: 33844},
							label: "rangePosI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonForRangeHeader63,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1042, col: 100, offset: 33858},
							val:        "range",
							ignoreCase: false,
							want:       "\"range\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1042, col: 108, offset: 33866},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1042, col: 111, offset: 33869},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1042, col: 117, offset: 33875},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "Element",
			pos:  position{line: 1103, col: 1, offset: 35739},
			expr: &actionExpr{
				pos: position{line: 1103, col: 12, offset: 35750},
				run: (*parser).callonElement1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 12, offset: 35750},
					exprs: []any{
						&notExpr{
							pos: position{line: 1103, col: 12, offset: 35750},
							expr: &choiceExpr{
								pos: position{line: 2517, col: 14, offset: 87752},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2517, col: 14, offset: 87752},
										val:        "if",
										ignoreCase: false,
										want:       "\"if\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 21, offset: 87759},
										val:        "else",
										ignoreCase: false,
										want:       "\"else\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 30, offset: 87768},
										val:        "switch",
										ignoreCase: false,
										want:       "\"switch\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 41, offset: 87779},
										val:        "case",
										ignoreCase: false,
										want:       "\"case\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 50, offset: 87788},
										val:        "default",
										ignoreCase: false,
										want:       "\"default\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 62, offset: 87800},
										val:        "for",
										ignoreCase: false,
										want:       "\"for\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 70, offset: 87808},
										val:        "return",
										ignoreCase: false,
										want:       "\"return\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 81, offset: 87819},
										val:        "break",
										ignoreCase: false,
										want:       "\"break\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 91, offset: 87829},
										val:        "continue",
										ignoreCase: false,
										want:       "\"continue\"",
									},
									&litMatcher{
										pos:        position{line: 2517, col: 104, offset: 87842},
										val:        "fallthrough",
										ignoreCase: false,
										want:       "\"fallthrough\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 22, offset: 35760},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1917, col: 16, offset: 66519},
								expr: &charClassMatcher{
									pos:        position{line: 1903, col: 27, offset: 65858},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 40, offset: 35778},
							label: "voidI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1103, col: 46, offset: 35784},
								expr: &litMatcher{
									pos:        position{line: 1103, col: 46, offset: 35784},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1103, col: 51, offset: 35789},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 54, offset: 35792},
							label: "attrsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1103, col: 61, offset: 35799},
								expr: &ruleRefExpr{
									pos:  position{line: 1103, col: 61, offset: 35799},
									name: "AttributeCollection",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 82, offset: 35820},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 88, offset: 35826},
								name: "OptionalBody",
							},
						},
					},
				},
			},
		},
		{
			name: "RawElement",
			pos:  position{line: 1117, col: 1, offset: 36272},
			expr: &actionExpr{
				pos: position{line: 1117, col: 15, offset: 36286},
				run: (*parser).callonRawElement1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 15, offset: 36286},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1117, col: 15, offset: 36286},
							val:        "!raw",
							ignoreCase: false,
							want:       "\"!raw\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1117, col: 22, offset: 36293},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 25, offset: 36296},
							label: "bodyI",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 31, offset: 36302},
								name: "rawElementBody",
							},
						},
					},
				},
			},
		},
		{
			name: "rawElementBody",
			pos:  position{line: 1124, col: 1, offset: 36431},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 19, offset: 36449},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1124, col: 19, offset: 36449},
						run: (*parser).callonrawElementBody2,
						expr: &seqExpr{
							pos: position{line: 1124, col: 19, offset: 36449},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1124, col: 19, offset: 36449},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 22, offset: 36452},
									label: "btI",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 26, offset: 36456},
										name: "BracketText",
									},
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 36498},
						run: (*parser).callonrawElementBody27,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 36498},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1126, col: 5, offset: 36498},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 8, offset: 36501},
									label: "posI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonrawElementBody32,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1126, col: 17, offset: 36510},
									name: "Scope",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 36808},
						run: (*parser).callonrawElementBody39,
						expr: &choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 37137},
						run: (*parser).callonrawElementBody59,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 37137},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 1142, col: 5, offset: 37137},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 8, offset: 37140},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonrawElementBody64,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2512, col: 35, offset: 87610},
									run: (*parser).callonrawElementBody70,
									expr: &seqExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2512, col: 38, offset: 87613},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2512, col: 50, offset: 87625},
													expr: &seqExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														exprs: []any{
															&notExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																expr: &choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 57, offset: 87632},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2512, col: 71, offset: 87646},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2512, col: 71, offset: 87646},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2512, col: 75, offset: 87650},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 75, offset: 87650},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2512, col: 81, offset: 87656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 30, offset: 37162},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 1147, col: 1, offset: 37337},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 21, offset: 37357},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1147, col: 21, offset: 37357},
						name: "ChainExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 39, offset: 37375},
						name: "GoExpression",
					},
				},
			},
		},
		{
			name: "InlineExpression",
			pos:  position{line: 1148, col: 1, offset: 37388},
			expr: &actionExpr{
				pos: position{line: 1148, col: 21, offset: 37408},
				run: (*parser).callonInlineExpression1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 21, offset: 37408},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 2649, col: 16, offset: 92419},
							run: (*parser).callonInlineExpression3,
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 33, offset: 37420},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 39, offset: 37426},
								name: "Expression",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2656, col: 14, offset: 92518},
							run: (*parser).callonInlineExpression6,
						},
					},
				},
			},
		},
		{
			name: "ChainExpression",
			pos:  position{line: 1154, col: 1, offset: 37661},
			expr: &actionExpr{
				pos: position{line: 1154, col: 20, offset: 37680},
				run: (*parser).callonChainExpression1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 20, offset: 37680},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1154, col: 20, offset: 37680},
							label: "derefsI",
							expr: &actionExpr{
								pos: position{line: 1183, col: 26, offset: 39029},
								run: (*parser).callonChainExpression4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1183, col: 26, offset: 39029},
									expr: &litMatcher{
										pos:        position{line: 1183, col: 26, offset: 39029},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 50, offset: 37710},
							label: "rootI",
							expr: &ruleRefExpr{
								pos:  position{line: 1154, col: 56, offset: 37716},
								name: "chainExpressionRoot",
							},
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 76, offset: 37736},
							label: "checkRootI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1154, col: 87, offset: 37747},
								expr: &litMatcher{
									pos:        position{line: 1154, col: 87, offset: 37747},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 92, offset: 37752},
							label: "chainI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1154, col: 99, offset: 37759},
								expr: &ruleRefExpr{
									pos:  position{line: 1154, col: 99, offset: 37759},
									name: "ChainExpressionNode",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 20, offset: 37799},
							label: "defaultI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1155, col: 29, offset: 37808},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 29, offset: 37808},
									name: "chainExpressionDefault",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 53, offset: 37832},
							label: "endPosI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonChainExpression19,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1155, col: 65, offset: 37844},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andCodeExpr{
							pos: position{line: 1155, col: 68, offset: 37847},
							run: (*parser).callonChainExpression27,
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 3, offset: 37969},
							expr: &ruleRefExpr{
								pos:  position{line: 1157, col: 3, offset: 37969},
								name: "chainExpressionTrail",
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionTrail",
			pos:  position{line: 1166, col: 1, offset: 38267},
			expr: &actionExpr{
				pos: position{line: 1166, col: 26, offset: 38292},
				run: (*parser).callonchainExpressionTrail1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 26, offset: 38292},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1166, col: 26, offset: 38292},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1166, col: 32, offset: 38298},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 45, offset: 38311},
							label: "endI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonchainExpressionTrail6,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRoot",
			pos:  position{line: 1187, col: 1, offset: 39067},
			expr: &actionExpr{
				pos: position{line: 1187, col: 24, offset: 39090},
				run: (*parser).callonchainExpressionRoot1,
				expr: &choiceExpr{
					pos: position{line: 1187, col: 25, offset: 39091},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 1490, col: 17, offset: 49722},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 26, offset: 49731},
									expr: &charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 1187, col: 40, offset: 39106},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1187, col: 40, offset: 39106},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 1187, col: 44, offset: 39110},
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 44, offset: 39110},
										name: "chainExpressionRootParenContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 77, offset: 39143},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainExpressionRootParenContent",
			pos:  position{line: 1194, col: 1, offset: 39251},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 36, offset: 39286},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1194, col: 36, offset: 39286},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1194, col: 36, offset: 39286},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1194, col: 40, offset: 39290},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1194, col: 72, offset: 39322},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1195, col: 36, offset: 39363},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1195, col: 36, offset: 39363},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1195, col: 40, offset: 39367},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1195, col: 72, offset: 39399},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 1196, col: 36, offset: 39440},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1196, col: 36, offset: 39440},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1196, col: 40, offset: 39444},
								name: "chainExpressionRootParenContent",
							},
							&litMatcher{
								pos:        position{line: 1196, col: 72, offset: 39476},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1197, col: 36, offset: 39517},
						expr: &charClassMatcher{
							pos:        position{line: 1197, col: 36, offset: 39517},
							val:        "[^({[]})]",
							chars:      []rune{'(', '{', '[', ']', '}', ')'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "chainExpressionDefault",
			pos:  position{line: 1199, col: 1, offset: 39530},
			expr: &actionExpr{
				pos: position{line: 1199, col: 27, offset: 39556},
				run: (*parser).callonchainExpressionDefault1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 27, offset: 39556},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1199, col: 27, offset: 39556},
							label: "posI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonchainExpressionDefault4,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1199, col: 36, offset: 39565},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1199, col: 40, offset: 39569},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonchainExpressionDefault15,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 44, offset: 39573},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 50, offset: 39579},
								name: "GoExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "ChainExpressionNode",
			pos:  position{line: 1210, col: 1, offset: 39765},
			expr: &choiceExpr{
				pos: position{line: 1210, col: 24, offset: 39788},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1210, col: 24, offset: 39788},
						name: "IndexExpression",
					},
					&actionExpr{
						pos: position{line: 1225, col: 23, offset: 40327},
						run: (*parser).callonChainExpressionNode3,
						expr: &seqExpr{
							pos: position{line: 1225, col: 23, offset: 40327},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1225, col: 23, offset: 40327},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1225, col: 27, offset: 40331},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonChainExpressionNode10,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 31, offset: 40335},
									label: "identI",
									expr: &actionExpr{
										pos: position{line: 245, col: 10, offset: 7100},
										run: (*parser).callonChainExpressionNode15,
										expr: &labeledExpr{
											pos:   position{line: 245, col: 10, offset: 7100},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1490, col: 17, offset: 49722},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1473, col: 20, offset: 49477},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1490, col: 26, offset: 49731},
														expr: &charClassMatcher{
															pos:        position{line: 1473, col: 20, offset: 49477},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 44, offset: 40348},
									label: "checkI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1225, col: 51, offset: 40355},
										expr: &litMatcher{
											pos:        position{line: 1225, col: 51, offset: 40355},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 63, offset: 39827},
						name: "ParenExpression",
					},
					&actionExpr{
						pos: position{line: 1248, col: 28, offset: 41044},
						run: (*parser).callonChainExpressionNode25,
						expr: &seqExpr{
							pos: position{line: 1248, col: 28, offset: 41044},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1248, col: 28, offset: 41044},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 32, offset: 41048},
									label: "lParenI",
									expr: &actionExpr{
										pos: position{line: 2538, col: 12, offset: 88518},
										run: (*parser).callonChainExpressionNode29,
										expr: &seqExpr{
											pos: position{line: 2538, col: 12, offset: 88518},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2538, col: 12, offset: 88518},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonChainExpressionNode32,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2538, col: 21, offset: 88527},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1248, col: 48, offset: 41064},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 51, offset: 41067},
									label: "ptrsI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1248, col: 57, offset: 41073},
										expr: &litMatcher{
											pos:        position{line: 1248, col: 57, offset: 41073},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1248, col: 62, offset: 41078},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 65, offset: 41081},
									label: "packageI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1248, col: 74, offset: 41090},
										expr: &actionExpr{
											pos: position{line: 249, col: 14, offset: 7206},
											run: (*parser).callonChainExpressionNode48,
											expr: &seqExpr{
												pos: position{line: 249, col: 14, offset: 7206},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 249, col: 14, offset: 7206},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&labeledExpr{
														pos:   position{line: 249, col: 18, offset: 7210},
														label: "identI",
														expr: &actionExpr{
															pos: position{line: 245, col: 10, offset: 7100},
															run: (*parser).callonChainExpressionNode52,
															expr: &labeledExpr{
																pos:   position{line: 245, col: 10, offset: 7100},
																label: "identI",
																expr: &seqExpr{
																	pos: position{line: 1490, col: 17, offset: 49722},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 1473, col: 20, offset: 49477},
																			val:        "[_\\pL]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1490, col: 26, offset: 49731},
																			expr: &charClassMatcher{
																				pos:        position{line: 1473, col: 20, offset: 49477},
																				val:        "[_\\pL\\pNd]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 85, offset: 41101},
									label: "typeI",
									expr: &actionExpr{
										pos: position{line: 245, col: 10, offset: 7100},
										run: (*parser).callonChainExpressionNode59,
										expr: &labeledExpr{
											pos:   position{line: 245, col: 10, offset: 7100},
											label: "identI",
											expr: &seqExpr{
												pos: position{line: 1490, col: 17, offset: 49722},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 1473, col: 20, offset: 49477},
														val:        "[_\\pL]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 1490, col: 26, offset: 49731},
														expr: &charClassMatcher{
															pos:        position{line: 1473, col: 20, offset: 49477},
															val:        "[_\\pL\\pNd]",
															chars:      []rune{'_'},
															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 97, offset: 41113},
									label: "checkTypeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1248, col: 108, offset: 41124},
										expr: &litMatcher{
											pos:        position{line: 1248, col: 108, offset: 41124},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1248, col: 113, offset: 41129},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 116, offset: 41132},
									label: "rParenI",
									expr: &actionExpr{
										pos: position{line: 2539, col: 12, offset: 88579},
										run: (*parser).callonChainExpressionNode71,
										expr: &seqExpr{
											pos: position{line: 2539, col: 12, offset: 88579},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2539, col: 12, offset: 88579},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonChainExpressionNode74,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2539, col: 21, offset: 88588},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 132, offset: 41148},
									label: "checkValueI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1248, col: 144, offset: 41160},
										expr: &litMatcher{
											pos:        position{line: 1248, col: 144, offset: 41160},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexExpression",
			pos:  position{line: 1212, col: 1, offset: 39870},
			expr: &actionExpr{
				pos: position{line: 1212, col: 20, offset: 39889},
				run: (*parser).callonIndexExpression1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 20, offset: 39889},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2620, col: 15, offset: 91395},
							run: (*parser).callonIndexExpression3,
							expr: &seqExpr{
								pos: position{line: 2620, col: 15, offset: 91395},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonIndexExpression5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonIndexExpression11,
									},
									&labeledExpr{
										pos:   position{line: 2620, col: 25, offset: 91405},
										label: "lBracketI",
										expr: &actionExpr{
											pos: position{line: 2544, col: 14, offset: 88766},
											run: (*parser).callonIndexExpression13,
											expr: &seqExpr{
												pos: position{line: 2544, col: 14, offset: 88766},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2544, col: 14, offset: 88766},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonIndexExpression16,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2544, col: 23, offset: 88775},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2620, col: 45, offset: 91425},
										expr: &choiceExpr{
											pos: position{line: 2532, col: 20, offset: 88254},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2532, col: 31, offset: 88265},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															run: (*parser).callonIndexExpression27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2530, col: 37, offset: 88223},
															expr: &litMatcher{
																pos:        position{line: 2530, col: 37, offset: 88223},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2530, col: 43, offset: 88229},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 31, offset: 39900},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 37, offset: 39906},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 50, offset: 39919},
							label: "checkIndexI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 62, offset: 39931},
								expr: &litMatcher{
									pos:        position{line: 1212, col: 62, offset: 39931},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 67, offset: 39936},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 1221, col: 23, offset: 40248},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2624, col: 13, offset: 91488},
										run: (*parser).callonIndexExpression38,
										expr: &seqExpr{
											pos: position{line: 2624, col: 13, offset: 91488},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2624, col: 13, offset: 91488},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2624, col: 16, offset: 91491},
													expr: &seqExpr{
														pos: position{line: 2624, col: 17, offset: 91492},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2624, col: 17, offset: 91492},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2624, col: 21, offset: 91496},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).callonIndexExpression49,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2624, col: 27, offset: 91502},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2545, col: 14, offset: 88829},
														run: (*parser).callonIndexExpression54,
														expr: &seqExpr{
															pos: position{line: 2545, col: 14, offset: 88829},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2545, col: 14, offset: 88829},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonIndexExpression57,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2545, col: 23, offset: 88838},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonIndexExpression64,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1221, col: 34, offset: 40259},
										run: (*parser).callonIndexExpression65,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonIndexExpression66,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 96, offset: 39965},
							label: "checkValueI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 108, offset: 39977},
								expr: &litMatcher{
									pos:        position{line: 1212, col: 108, offset: 39977},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParenExpression",
			pos:  position{line: 1233, col: 1, offset: 40510},
			expr: &actionExpr{
				pos: position{line: 1233, col: 20, offset: 40529},
				run: (*parser).callonParenExpression1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 20, offset: 40529},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2612, col: 14, offset: 91211},
							run: (*parser).callonParenExpression3,
							expr: &seqExpr{
								pos: position{line: 2612, col: 14, offset: 91211},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonParenExpression5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonParenExpression11,
									},
									&labeledExpr{
										pos:   position{line: 2612, col: 24, offset: 91221},
										label: "lParenI",
										expr: &actionExpr{
											pos: position{line: 2538, col: 12, offset: 88518},
											run: (*parser).callonParenExpression13,
											expr: &seqExpr{
												pos: position{line: 2538, col: 12, offset: 88518},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2538, col: 12, offset: 88518},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonParenExpression16,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2538, col: 21, offset: 88527},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 2612, col: 40, offset: 91237},
										expr: &choiceExpr{
											pos: position{line: 2532, col: 20, offset: 88254},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2532, col: 31, offset: 88265},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															run: (*parser).callonParenExpression27,
														},
														&zeroOrOneExpr{
															pos: position{line: 2530, col: 37, offset: 88223},
															expr: &litMatcher{
																pos:        position{line: 2530, col: 37, offset: 88223},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2530, col: 43, offset: 88229},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 30, offset: 40539},
							label: "argsI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1233, col: 36, offset: 40545},
								expr: &ruleRefExpr{
									pos:  position{line: 1233, col: 36, offset: 40545},
									name: "parenExpressionArgs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 57, offset: 40566},
							label: "rParen",
							expr: &choiceExpr{
								pos: position{line: 1241, col: 23, offset: 40816},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2616, col: 12, offset: 91297},
										run: (*parser).callonParenExpression36,
										expr: &seqExpr{
											pos: position{line: 2616, col: 12, offset: 91297},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2616, col: 12, offset: 91297},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 2616, col: 15, offset: 91300},
													expr: &seqExpr{
														pos: position{line: 2616, col: 16, offset: 91301},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2616, col: 16, offset: 91301},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 2616, col: 20, offset: 91305},
																expr: &choiceExpr{
																	pos: position{line: 2532, col: 20, offset: 88254},
																	alternatives: []any{
																		&charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 2532, col: 31, offset: 88265},
																			exprs: []any{
																				&andCodeExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					run: (*parser).callonParenExpression47,
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 2530, col: 37, offset: 88223},
																					expr: &litMatcher{
																						pos:        position{line: 2530, col: 37, offset: 88223},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2530, col: 43, offset: 88229},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2616, col: 26, offset: 91311},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2539, col: 12, offset: 88579},
														run: (*parser).callonParenExpression52,
														expr: &seqExpr{
															pos: position{line: 2539, col: 12, offset: 88579},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2539, col: 12, offset: 88579},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonParenExpression55,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2539, col: 21, offset: 88588},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonParenExpression62,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1241, col: 33, offset: 40826},
										run: (*parser).callonParenExpression63,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonParenExpression64,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 83, offset: 40592},
							label: "checkI",
							expr: &zeroOrOneExpr{
								pos: position{line: 1233, col: 90, offset: 40599},
								expr: &litMatcher{
									pos:        position{line: 1233, col: 90, offset: 40599},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parenExpressionArgs",
			pos:  position{line: 1244, col: 1, offset: 40876},
			expr: &actionExpr{
				pos: position{line: 1244, col: 24, offset: 40899},
				run: (*parser).callonparenExpressionArgs1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 24, offset: 40899},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1244, col: 24, offset: 40899},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 31, offset: 40906},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 44, offset: 40919},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1244, col: 50, offset: 40925},
								expr: &seqExpr{
									pos: position{line: 1244, col: 51, offset: 40926},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 1244, col: 51, offset: 40926},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 1244, col: 54, offset: 40929},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1244, col: 58, offset: 40933},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonparenExpressionArgs15,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1244, col: 62, offset: 40937},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoExpression",
			pos:  position{line: 1266, col: 1, offset: 41834},
			expr: &actionExpr{
				pos: position{line: 1266, col: 17, offset: 41850},
				run: (*parser).callonGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1266, col: 17, offset: 41850},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1266, col: 24, offset: 41857},
						expr: &choiceExpr{
							pos: position{line: 1266, col: 25, offset: 41858},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1266, col: 25, offset: 41858},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1266, col: 39, offset: 41872},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1362, col: 28, offset: 45754},
									run: (*parser).callonGoExpression7,
									expr: &seqExpr{
										pos: position{line: 1362, col: 28, offset: 45754},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1362, col: 28, offset: 45754},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1362, col: 36, offset: 45762},
													expr: &choiceExpr{
														pos: position{line: 1362, col: 37, offset: 45763},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1362, col: 37, offset: 45763},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1347, col: 34, offset: 44937},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1347, col: 34, offset: 44937},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1347, col: 49, offset: 44952},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).callonGoExpression20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1362, col: 74, offset: 45800},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1378, col: 18, offset: 46213},
													run: (*parser).callonGoExpression25,
													expr: &seqExpr{
														pos: position{line: 1378, col: 18, offset: 46213},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1378, col: 18, offset: 46213},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1378, col: 26, offset: 46221},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 29, offset: 46224},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2612, col: 14, offset: 91211},
																	run: (*parser).callonGoExpression31,
																	expr: &seqExpr{
																		pos: position{line: 2612, col: 14, offset: 91211},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonGoExpression33,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2586, col: 18, offset: 90318},
																				run: (*parser).callonGoExpression39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2612, col: 24, offset: 91221},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2538, col: 12, offset: 88518},
																					run: (*parser).callonGoExpression41,
																					expr: &seqExpr{
																						pos: position{line: 2538, col: 12, offset: 88518},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2538, col: 12, offset: 88518},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2519, col: 8, offset: 87865},
																									run: (*parser).callonGoExpression44,
																									expr: &choiceExpr{
																										pos: position{line: 2519, col: 9, offset: 87866},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												expr: &anyMatcher{
																													line: 2519, col: 10, offset: 87867,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2519, col: 14, offset: 87871},
																												expr: &anyMatcher{
																													line: 2519, col: 15, offset: 87872,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2538, col: 21, offset: 88527},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2612, col: 40, offset: 91237},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonGoExpression55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 47, offset: 46242},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 245, col: 10, offset: 7100},
																	run: (*parser).callonGoExpression60,
																	expr: &labeledExpr{
																		pos:   position{line: 245, col: 10, offset: 7100},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1490, col: 17, offset: 49722},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1490, col: 26, offset: 49731},
																					expr: &charClassMatcher{
																						pos:        position{line: 1473, col: 20, offset: 49477},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 60, offset: 46255},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1387, col: 21, offset: 46498},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2616, col: 12, offset: 91297},
																			run: (*parser).callonGoExpression68,
																			expr: &seqExpr{
																				pos: position{line: 2616, col: 12, offset: 91297},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2616, col: 12, offset: 91297},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2616, col: 15, offset: 91300},
																						expr: &seqExpr{
																							pos: position{line: 2616, col: 16, offset: 91301},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2616, col: 16, offset: 91301},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2616, col: 20, offset: 91305},
																									expr: &choiceExpr{
																										pos: position{line: 2532, col: 20, offset: 88254},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2532, col: 31, offset: 88265},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2532, col: 31, offset: 88265},
																														run: (*parser).callonGoExpression79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2530, col: 37, offset: 88223},
																														expr: &litMatcher{
																															pos:        position{line: 2530, col: 37, offset: 88223},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2530, col: 43, offset: 88229},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2616, col: 26, offset: 91311},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2539, col: 12, offset: 88579},
																							run: (*parser).callonGoExpression84,
																							expr: &seqExpr{
																								pos: position{line: 2539, col: 12, offset: 88579},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2539, col: 12, offset: 88579},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2519, col: 8, offset: 87865},
																											run: (*parser).callonGoExpression87,
																											expr: &choiceExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2519, col: 9, offset: 87866},
																														expr: &anyMatcher{
																															line: 2519, col: 10, offset: 87867,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2519, col: 14, offset: 87871},
																														expr: &anyMatcher{
																															line: 2519, col: 15, offset: 87872,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2539, col: 21, offset: 88588},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2592, col: 13, offset: 90451},
																						run: (*parser).callonGoExpression94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1387, col: 31, offset: 46508},
																			run: (*parser).callonGoExpression95,
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonGoExpression96,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1336, col: 20, offset: 44578},
									run: (*parser).callonGoExpression102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1336, col: 20, offset: 44578},
										expr: &seqExpr{
											pos: position{line: 1350, col: 24, offset: 45033},
											exprs: []any{
												&notExpr{
													pos: position{line: 1350, col: 24, offset: 45033},
													expr: &seqExpr{
														pos: position{line: 1355, col: 35, offset: 45400},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1355, col: 36, offset: 45401},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1355, col: 36, offset: 45401},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1347, col: 34, offset: 44937},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1347, col: 34, offset: 44937},
																				val:        "[=&|^+/*%<>!-]",
																				chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1347, col: 49, offset: 44952},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonGoExpression116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1355, col: 72, offset: 45437},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1355, col: 80, offset: 45445},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1355, col: 83, offset: 45448},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1350, col: 57, offset: 45066},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1537, col: 14, offset: 51045},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1537, col: 14, offset: 51045},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1537, col: 20, offset: 51051},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1577, col: 19, offset: 53013},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1577, col: 19, offset: 53013},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1578, col: 5, offset: 53072},
																			run: (*parser).callonGoExpression134,
																			expr: &seqExpr{
																				pos: position{line: 1578, col: 5, offset: 53072},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1578, col: 5, offset: 53072},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 14, offset: 53081},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 26, offset: 53093},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 38, offset: 53105},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 50, offset: 53117},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1603, col: 16, offset: 54178},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1603, col: 16, offset: 54178},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1604, col: 5, offset: 54281},
																			run: (*parser).callonGoExpression155,
																			expr: &seqExpr{
																				pos: position{line: 1604, col: 5, offset: 54281},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1604, col: 5, offset: 54281},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 14, offset: 54290},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 26, offset: 54302},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 38, offset: 54314},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 50, offset: 54326},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 62, offset: 54338},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 74, offset: 54350},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 86, offset: 54362},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 98, offset: 54374},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1634, col: 24, offset: 55688},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1634, col: 24, offset: 55688},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1634, col: 29, offset: 55693},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1560, col: 75, offset: 52197},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1562, col: 24, offset: 52343},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1562, col: 24, offset: 52343},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1563, col: 24, offset: 52410},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1563, col: 24, offset: 52410},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1564, col: 5, offset: 52447},
																			run: (*parser).callonGoExpression187,
																			expr: &seqExpr{
																				pos: position{line: 1564, col: 5, offset: 52447},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1564, col: 5, offset: 52447},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 14, offset: 52456},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 26, offset: 52468},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1635, col: 24, offset: 55771},
																			run: (*parser).callonGoExpression194,
																			expr: &seqExpr{
																				pos: position{line: 1635, col: 24, offset: 55771},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1635, col: 24, offset: 55771},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1656, col: 5, offset: 56727},
																			run: (*parser).callonGoExpression205,
																			expr: &seqExpr{
																				pos: position{line: 1656, col: 5, offset: 56727},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1656, col: 5, offset: 56727},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1674, col: 5, offset: 57508},
																			run: (*parser).callonGoExpression212,
																			expr: &seqExpr{
																				pos: position{line: 1674, col: 5, offset: 57508},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1674, col: 5, offset: 57508},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1689, col: 5, offset: 58133},
																			run: (*parser).callonGoExpression217,
																			expr: &litMatcher{
																				pos:        position{line: 1689, col: 5, offset: 58133},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1537, col: 76, offset: 51107},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1538, col: 5, offset: 51118},
															run: (*parser).callonGoExpression220,
															expr: &seqExpr{
																pos: position{line: 1538, col: 5, offset: 51118},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1538, col: 5, offset: 51118},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 10, offset: 51123},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1538, col: 16, offset: 51129},
																			expr: &choiceExpr{
																				pos: position{line: 1538, col: 17, offset: 51130},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1577, col: 19, offset: 53013},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1577, col: 19, offset: 53013},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1578, col: 5, offset: 53072},
																						run: (*parser).callonGoExpression232,
																						expr: &seqExpr{
																							pos: position{line: 1578, col: 5, offset: 53072},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1578, col: 5, offset: 53072},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 14, offset: 53081},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 26, offset: 53093},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 38, offset: 53105},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 50, offset: 53117},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1603, col: 16, offset: 54178},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1603, col: 16, offset: 54178},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1604, col: 5, offset: 54281},
																						run: (*parser).callonGoExpression253,
																						expr: &seqExpr{
																							pos: position{line: 1604, col: 5, offset: 54281},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1604, col: 5, offset: 54281},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 14, offset: 54290},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 26, offset: 54302},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 38, offset: 54314},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 50, offset: 54326},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 62, offset: 54338},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 74, offset: 54350},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 86, offset: 54362},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 98, offset: 54374},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1634, col: 24, offset: 55688},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1634, col: 24, offset: 55688},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1634, col: 29, offset: 55693},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1560, col: 75, offset: 52197},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1562, col: 24, offset: 52343},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1562, col: 24, offset: 52343},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1563, col: 24, offset: 52410},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1563, col: 24, offset: 52410},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1564, col: 5, offset: 52447},
																						run: (*parser).callonGoExpression285,
																						expr: &seqExpr{
																							pos: position{line: 1564, col: 5, offset: 52447},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1564, col: 5, offset: 52447},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 14, offset: 52456},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 26, offset: 52468},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1635, col: 24, offset: 55771},
																						run: (*parser).callonGoExpression292,
																						expr: &seqExpr{
																							pos: position{line: 1635, col: 24, offset: 55771},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1635, col: 24, offset: 55771},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1656, col: 5, offset: 56727},
																						run: (*parser).callonGoExpression303,
																						expr: &seqExpr{
																							pos: position{line: 1656, col: 5, offset: 56727},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1656, col: 5, offset: 56727},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1674, col: 5, offset: 57508},
																						run: (*parser).callonGoExpression310,
																						expr: &seqExpr{
																							pos: position{line: 1674, col: 5, offset: 57508},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1674, col: 5, offset: 57508},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1689, col: 5, offset: 58133},
																						run: (*parser).callonGoExpression315,
																						expr: &litMatcher{
																							pos:        position{line: 1689, col: 5, offset: 58133},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1538, col: 74, offset: 51187},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 79, offset: 51192},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2519, col: 8, offset: 87865},
																			run: (*parser).callonGoExpression319,
																			expr: &choiceExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2519, col: 9, offset: 87866},
																						expr: &anyMatcher{
																							line: 2519, col: 10, offset: 87867,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2519, col: 14, offset: 87871},
																						expr: &anyMatcher{
																							line: 2519, col: 15, offset: 87872,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1347, col: 34, offset: 44937},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1347, col: 34, offset: 44937},
																	val:        "[=&|^+/*%<>!-]",
																	chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1347, col: 49, offset: 44952},
																	expr: &choiceExpr{
																		pos: position{line: 2532, col: 20, offset: 88254},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2532, col: 31, offset: 88265},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2532, col: 31, offset: 88265},
																						run: (*parser).callonGoExpression331,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2530, col: 37, offset: 88223},
																						expr: &litMatcher{
																							pos:        position{line: 2530, col: 37, offset: 88223},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2530, col: 43, offset: 88229},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1350, col: 101, offset: 45110},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1350, col: 101, offset: 45110},
																	expr: &seqExpr{
																		pos: position{line: 1350, col: 103, offset: 45112},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1350, col: 103, offset: 45112},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1350, col: 106, offset: 45115},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1350, col: 112, offset: 45121},
																	val:        "[^\\r\\n({[]}),;:\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ',', ';', ':', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "nestedGoCode",
			pos:  position{line: 1270, col: 1, offset: 41968},
			expr: &actionExpr{
				pos: position{line: 1270, col: 17, offset: 41984},
				run: (*parser).callonnestedGoCode1,
				expr: &labeledExpr{
					pos:   position{line: 1270, col: 17, offset: 41984},
					label: "exprsI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1270, col: 24, offset: 41991},
						expr: &choiceExpr{
							pos: position{line: 1270, col: 25, offset: 41992},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1270, col: 25, offset: 41992},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1270, col: 39, offset: 42006},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1370, col: 27, offset: 45988},
									run: (*parser).callonnestedGoCode7,
									expr: &seqExpr{
										pos: position{line: 1370, col: 27, offset: 45988},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1370, col: 27, offset: 45988},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1370, col: 35, offset: 45996},
													expr: &choiceExpr{
														pos: position{line: 1370, col: 36, offset: 45997},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1370, col: 36, offset: 45997},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1347, col: 34, offset: 44937},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1347, col: 34, offset: 44937},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1347, col: 49, offset: 44952},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).callonnestedGoCode20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1370, col: 73, offset: 46034},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1378, col: 18, offset: 46213},
													run: (*parser).callonnestedGoCode25,
													expr: &seqExpr{
														pos: position{line: 1378, col: 18, offset: 46213},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1378, col: 18, offset: 46213},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1378, col: 26, offset: 46221},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 29, offset: 46224},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2612, col: 14, offset: 91211},
																	run: (*parser).callonnestedGoCode31,
																	expr: &seqExpr{
																		pos: position{line: 2612, col: 14, offset: 91211},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonnestedGoCode33,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2586, col: 18, offset: 90318},
																				run: (*parser).callonnestedGoCode39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2612, col: 24, offset: 91221},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2538, col: 12, offset: 88518},
																					run: (*parser).callonnestedGoCode41,
																					expr: &seqExpr{
																						pos: position{line: 2538, col: 12, offset: 88518},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2538, col: 12, offset: 88518},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2519, col: 8, offset: 87865},
																									run: (*parser).callonnestedGoCode44,
																									expr: &choiceExpr{
																										pos: position{line: 2519, col: 9, offset: 87866},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												expr: &anyMatcher{
																													line: 2519, col: 10, offset: 87867,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2519, col: 14, offset: 87871},
																												expr: &anyMatcher{
																													line: 2519, col: 15, offset: 87872,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2538, col: 21, offset: 88527},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2612, col: 40, offset: 91237},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonnestedGoCode55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 47, offset: 46242},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 245, col: 10, offset: 7100},
																	run: (*parser).callonnestedGoCode60,
																	expr: &labeledExpr{
																		pos:   position{line: 245, col: 10, offset: 7100},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1490, col: 17, offset: 49722},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1490, col: 26, offset: 49731},
																					expr: &charClassMatcher{
																						pos:        position{line: 1473, col: 20, offset: 49477},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 60, offset: 46255},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1387, col: 21, offset: 46498},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2616, col: 12, offset: 91297},
																			run: (*parser).callonnestedGoCode68,
																			expr: &seqExpr{
																				pos: position{line: 2616, col: 12, offset: 91297},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2616, col: 12, offset: 91297},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2616, col: 15, offset: 91300},
																						expr: &seqExpr{
																							pos: position{line: 2616, col: 16, offset: 91301},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2616, col: 16, offset: 91301},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2616, col: 20, offset: 91305},
																									expr: &choiceExpr{
																										pos: position{line: 2532, col: 20, offset: 88254},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2532, col: 31, offset: 88265},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2532, col: 31, offset: 88265},
																														run: (*parser).callonnestedGoCode79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2530, col: 37, offset: 88223},
																														expr: &litMatcher{
																															pos:        position{line: 2530, col: 37, offset: 88223},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2530, col: 43, offset: 88229},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2616, col: 26, offset: 91311},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2539, col: 12, offset: 88579},
																							run: (*parser).callonnestedGoCode84,
																							expr: &seqExpr{
																								pos: position{line: 2539, col: 12, offset: 88579},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2539, col: 12, offset: 88579},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2519, col: 8, offset: 87865},
																											run: (*parser).callonnestedGoCode87,
																											expr: &choiceExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2519, col: 9, offset: 87866},
																														expr: &anyMatcher{
																															line: 2519, col: 10, offset: 87867,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2519, col: 14, offset: 87871},
																														expr: &anyMatcher{
																															line: 2519, col: 15, offset: 87872,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2539, col: 21, offset: 88588},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2592, col: 13, offset: 90451},
																						run: (*parser).callonnestedGoCode94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1387, col: 31, offset: 46508},
																			run: (*parser).callonnestedGoCode95,
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonnestedGoCode96,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1343, col: 20, offset: 44807},
									run: (*parser).callonnestedGoCode102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1343, col: 20, offset: 44807},
										expr: &seqExpr{
											pos: position{line: 1353, col: 24, offset: 45296},
											exprs: []any{
												&notExpr{
													pos: position{line: 1353, col: 24, offset: 45296},
													expr: &seqExpr{
														pos: position{line: 1356, col: 35, offset: 45486},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1356, col: 36, offset: 45487},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1356, col: 36, offset: 45487},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1348, col: 34, offset: 44989},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1348, col: 34, offset: 44989},
																				val:        "[=,&|^+/*%<>!-]",
																				chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1348, col: 50, offset: 45005},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonnestedGoCode116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1356, col: 71, offset: 45522},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1356, col: 79, offset: 45530},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1356, col: 82, offset: 45533},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1353, col: 56, offset: 45328},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1537, col: 14, offset: 51045},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1537, col: 14, offset: 51045},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1537, col: 20, offset: 51051},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1577, col: 19, offset: 53013},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1577, col: 19, offset: 53013},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1578, col: 5, offset: 53072},
																			run: (*parser).callonnestedGoCode134,
																			expr: &seqExpr{
																				pos: position{line: 1578, col: 5, offset: 53072},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1578, col: 5, offset: 53072},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 14, offset: 53081},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 26, offset: 53093},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 38, offset: 53105},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 50, offset: 53117},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1603, col: 16, offset: 54178},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1603, col: 16, offset: 54178},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1604, col: 5, offset: 54281},
																			run: (*parser).callonnestedGoCode155,
																			expr: &seqExpr{
																				pos: position{line: 1604, col: 5, offset: 54281},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1604, col: 5, offset: 54281},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 14, offset: 54290},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 26, offset: 54302},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 38, offset: 54314},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 50, offset: 54326},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 62, offset: 54338},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 74, offset: 54350},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 86, offset: 54362},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 98, offset: 54374},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1634, col: 24, offset: 55688},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1634, col: 24, offset: 55688},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1634, col: 29, offset: 55693},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1560, col: 75, offset: 52197},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1562, col: 24, offset: 52343},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1562, col: 24, offset: 52343},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1563, col: 24, offset: 52410},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1563, col: 24, offset: 52410},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1564, col: 5, offset: 52447},
																			run: (*parser).callonnestedGoCode187,
																			expr: &seqExpr{
																				pos: position{line: 1564, col: 5, offset: 52447},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1564, col: 5, offset: 52447},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 14, offset: 52456},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 26, offset: 52468},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1635, col: 24, offset: 55771},
																			run: (*parser).callonnestedGoCode194,
																			expr: &seqExpr{
																				pos: position{line: 1635, col: 24, offset: 55771},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1635, col: 24, offset: 55771},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1656, col: 5, offset: 56727},
																			run: (*parser).callonnestedGoCode205,
																			expr: &seqExpr{
																				pos: position{line: 1656, col: 5, offset: 56727},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1656, col: 5, offset: 56727},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1674, col: 5, offset: 57508},
																			run: (*parser).callonnestedGoCode212,
																			expr: &seqExpr{
																				pos: position{line: 1674, col: 5, offset: 57508},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1674, col: 5, offset: 57508},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1689, col: 5, offset: 58133},
																			run: (*parser).callonnestedGoCode217,
																			expr: &litMatcher{
																				pos:        position{line: 1689, col: 5, offset: 58133},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1537, col: 76, offset: 51107},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1538, col: 5, offset: 51118},
															run: (*parser).callonnestedGoCode220,
															expr: &seqExpr{
																pos: position{line: 1538, col: 5, offset: 51118},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1538, col: 5, offset: 51118},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 10, offset: 51123},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1538, col: 16, offset: 51129},
																			expr: &choiceExpr{
																				pos: position{line: 1538, col: 17, offset: 51130},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1577, col: 19, offset: 53013},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1577, col: 19, offset: 53013},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1578, col: 5, offset: 53072},
																						run: (*parser).callonnestedGoCode232,
																						expr: &seqExpr{
																							pos: position{line: 1578, col: 5, offset: 53072},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1578, col: 5, offset: 53072},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 14, offset: 53081},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 26, offset: 53093},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 38, offset: 53105},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 50, offset: 53117},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1603, col: 16, offset: 54178},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1603, col: 16, offset: 54178},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1604, col: 5, offset: 54281},
																						run: (*parser).callonnestedGoCode253,
																						expr: &seqExpr{
																							pos: position{line: 1604, col: 5, offset: 54281},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1604, col: 5, offset: 54281},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 14, offset: 54290},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 26, offset: 54302},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 38, offset: 54314},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 50, offset: 54326},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 62, offset: 54338},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 74, offset: 54350},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 86, offset: 54362},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 98, offset: 54374},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1634, col: 24, offset: 55688},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1634, col: 24, offset: 55688},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1634, col: 29, offset: 55693},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1560, col: 75, offset: 52197},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1562, col: 24, offset: 52343},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1562, col: 24, offset: 52343},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1563, col: 24, offset: 52410},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1563, col: 24, offset: 52410},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1564, col: 5, offset: 52447},
																						run: (*parser).callonnestedGoCode285,
																						expr: &seqExpr{
																							pos: position{line: 1564, col: 5, offset: 52447},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1564, col: 5, offset: 52447},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 14, offset: 52456},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 26, offset: 52468},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1635, col: 24, offset: 55771},
																						run: (*parser).callonnestedGoCode292,
																						expr: &seqExpr{
																							pos: position{line: 1635, col: 24, offset: 55771},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1635, col: 24, offset: 55771},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1656, col: 5, offset: 56727},
																						run: (*parser).callonnestedGoCode303,
																						expr: &seqExpr{
																							pos: position{line: 1656, col: 5, offset: 56727},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1656, col: 5, offset: 56727},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1674, col: 5, offset: 57508},
																						run: (*parser).callonnestedGoCode310,
																						expr: &seqExpr{
																							pos: position{line: 1674, col: 5, offset: 57508},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1674, col: 5, offset: 57508},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1689, col: 5, offset: 58133},
																						run: (*parser).callonnestedGoCode315,
																						expr: &litMatcher{
																							pos:        position{line: 1689, col: 5, offset: 58133},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1538, col: 74, offset: 51187},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 79, offset: 51192},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2519, col: 8, offset: 87865},
																			run: (*parser).callonnestedGoCode319,
																			expr: &choiceExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2519, col: 9, offset: 87866},
																						expr: &anyMatcher{
																							line: 2519, col: 10, offset: 87867,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2519, col: 14, offset: 87871},
																						expr: &anyMatcher{
																							line: 2519, col: 15, offset: 87872,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 1353, col: 68, offset: 45340},
															expr: &choiceExpr{
																pos: position{line: 2532, col: 20, offset: 88254},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2532, col: 31, offset: 88265},
																				run: (*parser).callonnestedGoCode329,
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 2530, col: 37, offset: 88223},
																				expr: &litMatcher{
																					pos:        position{line: 2530, col: 37, offset: 88223},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2530, col: 43, offset: 88229},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																		},
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1353, col: 74, offset: 45346},
															val:        "[^\\r\\n({[]})\\\"`]",
															chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', '\'', '"', '`'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParenExpr",
			pos:  position{line: 1274, col: 1, offset: 42086},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 16, offset: 42101},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1274, col: 16, offset: 42101},
						run: (*parser).callongoParenExpr2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 16, offset: 42101},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1274, col: 16, offset: 42101},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1282, col: 21, offset: 42469},
										run: (*parser).callongoParenExpr5,
										expr: &seqExpr{
											pos: position{line: 1282, col: 21, offset: 42469},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1282, col: 21, offset: 42469},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1282, col: 24, offset: 42472},
													expr: &litMatcher{
														pos:        position{line: 1282, col: 25, offset: 42473},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callongoParenExpr11,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).callongoParenExpr17,
												},
												&litMatcher{
													pos:        position{line: 1282, col: 39, offset: 42487},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 39, offset: 42124},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1274, col: 45, offset: 42130},
										expr: &ruleRefExpr{
											pos:  position{line: 1274, col: 45, offset: 42130},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 59, offset: 42144},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1291, col: 19, offset: 42788},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1291, col: 19, offset: 42788},
												run: (*parser).callongoParenExpr24,
												expr: &seqExpr{
													pos: position{line: 1291, col: 19, offset: 42788},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1291, col: 19, offset: 42788},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).callongoParenExpr27,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1293, col: 5, offset: 42867},
												run: (*parser).callongoParenExpr28,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callongoParenExpr29,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 5, offset: 42216},
						run: (*parser).callongoParenExpr35,
						expr: &seqExpr{
							pos: position{line: 1276, col: 5, offset: 42216},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1276, col: 5, offset: 42216},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1285, col: 21, offset: 42575},
										run: (*parser).callongoParenExpr38,
										expr: &seqExpr{
											pos: position{line: 1285, col: 21, offset: 42575},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1285, col: 21, offset: 42575},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1285, col: 24, offset: 42578},
													expr: &litMatcher{
														pos:        position{line: 1285, col: 25, offset: 42579},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callongoParenExpr44,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).callongoParenExpr50,
												},
												&litMatcher{
													pos:        position{line: 1285, col: 39, offset: 42593},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 28, offset: 42239},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1276, col: 34, offset: 42245},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 34, offset: 42245},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 48, offset: 42259},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1296, col: 19, offset: 42931},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1296, col: 19, offset: 42931},
												run: (*parser).callongoParenExpr57,
												expr: &seqExpr{
													pos: position{line: 1296, col: 19, offset: 42931},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1296, col: 19, offset: 42931},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).callongoParenExpr60,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1298, col: 5, offset: 43010},
												run: (*parser).callongoParenExpr61,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callongoParenExpr62,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 42331},
						run: (*parser).callongoParenExpr68,
						expr: &seqExpr{
							pos: position{line: 1278, col: 5, offset: 42331},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1278, col: 5, offset: 42331},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1288, col: 23, offset: 42684},
										run: (*parser).callongoParenExpr71,
										expr: &seqExpr{
											pos: position{line: 1288, col: 23, offset: 42684},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1288, col: 23, offset: 42684},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1288, col: 26, offset: 42687},
													expr: &litMatcher{
														pos:        position{line: 1288, col: 27, offset: 42688},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callongoParenExpr77,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).callongoParenExpr83,
												},
												&litMatcher{
													pos:        position{line: 1288, col: 41, offset: 42702},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 30, offset: 42356},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1278, col: 36, offset: 42362},
										expr: &ruleRefExpr{
											pos:  position{line: 1278, col: 36, offset: 42362},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 50, offset: 42376},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1301, col: 21, offset: 43076},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1301, col: 21, offset: 43076},
												run: (*parser).callongoParenExpr90,
												expr: &seqExpr{
													pos: position{line: 1301, col: 21, offset: 43076},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1301, col: 21, offset: 43076},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).callongoParenExpr93,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1303, col: 5, offset: 43155},
												run: (*parser).callongoParenExpr94,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callongoParenExpr95,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConditionalGoExpression",
			pos:  position{line: 1312, col: 1, offset: 43491},
			expr: &actionExpr{
				pos: position{line: 1312, col: 28, offset: 43518},
				run: (*parser).callonConditionalGoExpression1,
				expr: &labeledExpr{
					pos:   position{line: 1312, col: 28, offset: 43518},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1312, col: 35, offset: 43525},
						expr: &choiceExpr{
							pos: position{line: 1312, col: 36, offset: 43526},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1312, col: 36, offset: 43526},
									name: "conditionalGoParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1312, col: 61, offset: 43551},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1362, col: 28, offset: 45754},
									run: (*parser).callonConditionalGoExpression7,
									expr: &seqExpr{
										pos: position{line: 1362, col: 28, offset: 45754},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1362, col: 28, offset: 45754},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1362, col: 36, offset: 45762},
													expr: &choiceExpr{
														pos: position{line: 1362, col: 37, offset: 45763},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1362, col: 37, offset: 45763},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1347, col: 34, offset: 44937},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1347, col: 34, offset: 44937},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1347, col: 49, offset: 44952},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).callonConditionalGoExpression20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1362, col: 74, offset: 45800},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1378, col: 18, offset: 46213},
													run: (*parser).callonConditionalGoExpression25,
													expr: &seqExpr{
														pos: position{line: 1378, col: 18, offset: 46213},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1378, col: 18, offset: 46213},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1378, col: 26, offset: 46221},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 29, offset: 46224},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2612, col: 14, offset: 91211},
																	run: (*parser).callonConditionalGoExpression31,
																	expr: &seqExpr{
																		pos: position{line: 2612, col: 14, offset: 91211},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonConditionalGoExpression33,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2586, col: 18, offset: 90318},
																				run: (*parser).callonConditionalGoExpression39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2612, col: 24, offset: 91221},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2538, col: 12, offset: 88518},
																					run: (*parser).callonConditionalGoExpression41,
																					expr: &seqExpr{
																						pos: position{line: 2538, col: 12, offset: 88518},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2538, col: 12, offset: 88518},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2519, col: 8, offset: 87865},
																									run: (*parser).callonConditionalGoExpression44,
																									expr: &choiceExpr{
																										pos: position{line: 2519, col: 9, offset: 87866},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												expr: &anyMatcher{
																													line: 2519, col: 10, offset: 87867,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2519, col: 14, offset: 87871},
																												expr: &anyMatcher{
																													line: 2519, col: 15, offset: 87872,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2538, col: 21, offset: 88527},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2612, col: 40, offset: 91237},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonConditionalGoExpression55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 47, offset: 46242},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 245, col: 10, offset: 7100},
																	run: (*parser).callonConditionalGoExpression60,
																	expr: &labeledExpr{
																		pos:   position{line: 245, col: 10, offset: 7100},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1490, col: 17, offset: 49722},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1490, col: 26, offset: 49731},
																					expr: &charClassMatcher{
																						pos:        position{line: 1473, col: 20, offset: 49477},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 60, offset: 46255},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1387, col: 21, offset: 46498},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2616, col: 12, offset: 91297},
																			run: (*parser).callonConditionalGoExpression68,
																			expr: &seqExpr{
																				pos: position{line: 2616, col: 12, offset: 91297},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2616, col: 12, offset: 91297},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2616, col: 15, offset: 91300},
																						expr: &seqExpr{
																							pos: position{line: 2616, col: 16, offset: 91301},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2616, col: 16, offset: 91301},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2616, col: 20, offset: 91305},
																									expr: &choiceExpr{
																										pos: position{line: 2532, col: 20, offset: 88254},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2532, col: 31, offset: 88265},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2532, col: 31, offset: 88265},
																														run: (*parser).callonConditionalGoExpression79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2530, col: 37, offset: 88223},
																														expr: &litMatcher{
																															pos:        position{line: 2530, col: 37, offset: 88223},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2530, col: 43, offset: 88229},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2616, col: 26, offset: 91311},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2539, col: 12, offset: 88579},
																							run: (*parser).callonConditionalGoExpression84,
																							expr: &seqExpr{
																								pos: position{line: 2539, col: 12, offset: 88579},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2539, col: 12, offset: 88579},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2519, col: 8, offset: 87865},
																											run: (*parser).callonConditionalGoExpression87,
																											expr: &choiceExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2519, col: 9, offset: 87866},
																														expr: &anyMatcher{
																															line: 2519, col: 10, offset: 87867,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2519, col: 14, offset: 87871},
																														expr: &anyMatcher{
																															line: 2519, col: 15, offset: 87872,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2539, col: 21, offset: 88588},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2592, col: 13, offset: 90451},
																						run: (*parser).callonConditionalGoExpression94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1387, col: 31, offset: 46508},
																			run: (*parser).callonConditionalGoExpression95,
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonConditionalGoExpression96,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1336, col: 20, offset: 44578},
									run: (*parser).callonConditionalGoExpression102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1336, col: 20, offset: 44578},
										expr: &seqExpr{
											pos: position{line: 1350, col: 24, offset: 45033},
											exprs: []any{
												&notExpr{
													pos: position{line: 1350, col: 24, offset: 45033},
													expr: &seqExpr{
														pos: position{line: 1355, col: 35, offset: 45400},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1355, col: 36, offset: 45401},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1355, col: 36, offset: 45401},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1347, col: 34, offset: 44937},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1347, col: 34, offset: 44937},
																				val:        "[=&|^+/*%<>!-]",
																				chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1347, col: 49, offset: 44952},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonConditionalGoExpression116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1355, col: 72, offset: 45437},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1355, col: 80, offset: 45445},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1355, col: 83, offset: 45448},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1350, col: 57, offset: 45066},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1537, col: 14, offset: 51045},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1537, col: 14, offset: 51045},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1537, col: 20, offset: 51051},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1577, col: 19, offset: 53013},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1577, col: 19, offset: 53013},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1578, col: 5, offset: 53072},
																			run: (*parser).callonConditionalGoExpression134,
																			expr: &seqExpr{
																				pos: position{line: 1578, col: 5, offset: 53072},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1578, col: 5, offset: 53072},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 14, offset: 53081},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 26, offset: 53093},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 38, offset: 53105},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 50, offset: 53117},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1603, col: 16, offset: 54178},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1603, col: 16, offset: 54178},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1604, col: 5, offset: 54281},
																			run: (*parser).callonConditionalGoExpression155,
																			expr: &seqExpr{
																				pos: position{line: 1604, col: 5, offset: 54281},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1604, col: 5, offset: 54281},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 14, offset: 54290},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 26, offset: 54302},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 38, offset: 54314},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 50, offset: 54326},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 62, offset: 54338},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 74, offset: 54350},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 86, offset: 54362},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 98, offset: 54374},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1634, col: 24, offset: 55688},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1634, col: 24, offset: 55688},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1634, col: 29, offset: 55693},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1560, col: 75, offset: 52197},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1562, col: 24, offset: 52343},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1562, col: 24, offset: 52343},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1563, col: 24, offset: 52410},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1563, col: 24, offset: 52410},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1564, col: 5, offset: 52447},
																			run: (*parser).callonConditionalGoExpression187,
																			expr: &seqExpr{
																				pos: position{line: 1564, col: 5, offset: 52447},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1564, col: 5, offset: 52447},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 14, offset: 52456},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 26, offset: 52468},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1635, col: 24, offset: 55771},
																			run: (*parser).callonConditionalGoExpression194,
																			expr: &seqExpr{
																				pos: position{line: 1635, col: 24, offset: 55771},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1635, col: 24, offset: 55771},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1656, col: 5, offset: 56727},
																			run: (*parser).callonConditionalGoExpression205,
																			expr: &seqExpr{
																				pos: position{line: 1656, col: 5, offset: 56727},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1656, col: 5, offset: 56727},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1674, col: 5, offset: 57508},
																			run: (*parser).callonConditionalGoExpression212,
																			expr: &seqExpr{
																				pos: position{line: 1674, col: 5, offset: 57508},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1674, col: 5, offset: 57508},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1689, col: 5, offset: 58133},
																			run: (*parser).callonConditionalGoExpression217,
																			expr: &litMatcher{
																				pos:        position{line: 1689, col: 5, offset: 58133},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1537, col: 76, offset: 51107},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1538, col: 5, offset: 51118},
															run: (*parser).callonConditionalGoExpression220,
															expr: &seqExpr{
																pos: position{line: 1538, col: 5, offset: 51118},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1538, col: 5, offset: 51118},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 10, offset: 51123},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1538, col: 16, offset: 51129},
																			expr: &choiceExpr{
																				pos: position{line: 1538, col: 17, offset: 51130},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1577, col: 19, offset: 53013},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1577, col: 19, offset: 53013},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1578, col: 5, offset: 53072},
																						run: (*parser).callonConditionalGoExpression232,
																						expr: &seqExpr{
																							pos: position{line: 1578, col: 5, offset: 53072},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1578, col: 5, offset: 53072},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 14, offset: 53081},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 26, offset: 53093},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 38, offset: 53105},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 50, offset: 53117},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1603, col: 16, offset: 54178},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1603, col: 16, offset: 54178},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1604, col: 5, offset: 54281},
																						run: (*parser).callonConditionalGoExpression253,
																						expr: &seqExpr{
																							pos: position{line: 1604, col: 5, offset: 54281},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1604, col: 5, offset: 54281},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 14, offset: 54290},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 26, offset: 54302},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 38, offset: 54314},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 50, offset: 54326},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 62, offset: 54338},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 74, offset: 54350},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 86, offset: 54362},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 98, offset: 54374},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1634, col: 24, offset: 55688},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1634, col: 24, offset: 55688},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1634, col: 29, offset: 55693},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1560, col: 75, offset: 52197},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1562, col: 24, offset: 52343},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1562, col: 24, offset: 52343},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1563, col: 24, offset: 52410},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1563, col: 24, offset: 52410},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1564, col: 5, offset: 52447},
																						run: (*parser).callonConditionalGoExpression285,
																						expr: &seqExpr{
																							pos: position{line: 1564, col: 5, offset: 52447},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1564, col: 5, offset: 52447},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 14, offset: 52456},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 26, offset: 52468},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1635, col: 24, offset: 55771},
																						run: (*parser).callonConditionalGoExpression292,
																						expr: &seqExpr{
																							pos: position{line: 1635, col: 24, offset: 55771},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1635, col: 24, offset: 55771},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1656, col: 5, offset: 56727},
																						run: (*parser).callonConditionalGoExpression303,
																						expr: &seqExpr{
																							pos: position{line: 1656, col: 5, offset: 56727},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1656, col: 5, offset: 56727},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1674, col: 5, offset: 57508},
																						run: (*parser).callonConditionalGoExpression310,
																						expr: &seqExpr{
																							pos: position{line: 1674, col: 5, offset: 57508},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1674, col: 5, offset: 57508},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1689, col: 5, offset: 58133},
																						run: (*parser).callonConditionalGoExpression315,
																						expr: &litMatcher{
																							pos:        position{line: 1689, col: 5, offset: 58133},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1538, col: 74, offset: 51187},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 79, offset: 51192},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2519, col: 8, offset: 87865},
																			run: (*parser).callonConditionalGoExpression319,
																			expr: &choiceExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2519, col: 9, offset: 87866},
																						expr: &anyMatcher{
																							line: 2519, col: 10, offset: 87867,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2519, col: 14, offset: 87871},
																						expr: &anyMatcher{
																							line: 2519, col: 15, offset: 87872,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1347, col: 34, offset: 44937},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1347, col: 34, offset: 44937},
																	val:        "[=&|^+/*%<>!-]",
																	chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1347, col: 49, offset: 44952},
																	expr: &choiceExpr{
																		pos: position{line: 2532, col: 20, offset: 88254},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2532, col: 31, offset: 88265},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2532, col: 31, offset: 88265},
																						run: (*parser).callonConditionalGoExpression331,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2530, col: 37, offset: 88223},
																						expr: &litMatcher{
																							pos:        position{line: 2530, col: 37, offset: 88223},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2530, col: 43, offset: 88229},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1350, col: 101, offset: 45110},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1350, col: 101, offset: 45110},
																	expr: &seqExpr{
																		pos: position{line: 1350, col: 103, offset: 45112},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1350, col: 103, offset: 45112},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1350, col: 106, offset: 45115},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1350, col: 112, offset: 45121},
																	val:        "[^\\r\\n({[]}),;:\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ',', ';', ':', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "conditionalGoParenExpr",
			pos:  position{line: 1316, col: 1, offset: 43647},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 27, offset: 43673},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1316, col: 27, offset: 43673},
						run: (*parser).callonconditionalGoParenExpr2,
						expr: &seqExpr{
							pos: position{line: 1316, col: 27, offset: 43673},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1316, col: 27, offset: 43673},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1282, col: 21, offset: 42469},
										run: (*parser).callonconditionalGoParenExpr5,
										expr: &seqExpr{
											pos: position{line: 1282, col: 21, offset: 42469},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1282, col: 21, offset: 42469},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1282, col: 24, offset: 42472},
													expr: &litMatcher{
														pos:        position{line: 1282, col: 25, offset: 42473},
														val:        "(",
														ignoreCase: false,
														want:       "\"(\"",
													},
												},
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonconditionalGoParenExpr11,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).callonconditionalGoParenExpr17,
												},
												&litMatcher{
													pos:        position{line: 1282, col: 39, offset: 42487},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1316, col: 50, offset: 43696},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1316, col: 56, offset: 43702},
										expr: &ruleRefExpr{
											pos:  position{line: 1316, col: 56, offset: 43702},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1316, col: 70, offset: 43716},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1291, col: 19, offset: 42788},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1291, col: 19, offset: 42788},
												run: (*parser).callonconditionalGoParenExpr24,
												expr: &seqExpr{
													pos: position{line: 1291, col: 19, offset: 42788},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1291, col: 19, offset: 42788},
															val:        ")",
															ignoreCase: false,
															want:       "\")\"",
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).callonconditionalGoParenExpr27,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1293, col: 5, offset: 42867},
												run: (*parser).callonconditionalGoParenExpr28,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonconditionalGoParenExpr29,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 43788},
						run: (*parser).callonconditionalGoParenExpr35,
						expr: &seqExpr{
							pos: position{line: 1318, col: 5, offset: 43788},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1318, col: 5, offset: 43788},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1285, col: 21, offset: 42575},
										run: (*parser).callonconditionalGoParenExpr38,
										expr: &seqExpr{
											pos: position{line: 1285, col: 21, offset: 42575},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1285, col: 21, offset: 42575},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1285, col: 24, offset: 42578},
													expr: &litMatcher{
														pos:        position{line: 1285, col: 25, offset: 42579},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonconditionalGoParenExpr44,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).callonconditionalGoParenExpr50,
												},
												&litMatcher{
													pos:        position{line: 1285, col: 39, offset: 42593},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 28, offset: 43811},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1318, col: 34, offset: 43817},
										expr: &ruleRefExpr{
											pos:  position{line: 1318, col: 34, offset: 43817},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 48, offset: 43831},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1296, col: 19, offset: 42931},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1296, col: 19, offset: 42931},
												run: (*parser).callonconditionalGoParenExpr57,
												expr: &seqExpr{
													pos: position{line: 1296, col: 19, offset: 42931},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1296, col: 19, offset: 42931},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).callonconditionalGoParenExpr60,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1298, col: 5, offset: 43010},
												run: (*parser).callonconditionalGoParenExpr61,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonconditionalGoParenExpr62,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1318, col: 70, offset: 43853},
									expr: &choiceExpr{
										pos: position{line: 1318, col: 72, offset: 43855},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1318, col: 78, offset: 43861},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1318, col: 78, offset: 43861},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&litMatcher{
														pos:        position{line: 1318, col: 81, offset: 43864},
														val:        "else",
														ignoreCase: false,
														want:       "\"else\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 43922},
						run: (*parser).callonconditionalGoParenExpr92,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 43922},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1320, col: 5, offset: 43922},
									label: "openI",
									expr: &actionExpr{
										pos: position{line: 1288, col: 23, offset: 42684},
										run: (*parser).callonconditionalGoParenExpr95,
										expr: &seqExpr{
											pos: position{line: 1288, col: 23, offset: 42684},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1288, col: 23, offset: 42684},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1288, col: 26, offset: 42687},
													expr: &litMatcher{
														pos:        position{line: 1288, col: 27, offset: 42688},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonconditionalGoParenExpr101,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2586, col: 18, offset: 90318},
													run: (*parser).callonconditionalGoParenExpr107,
												},
												&litMatcher{
													pos:        position{line: 1288, col: 41, offset: 42702},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 30, offset: 43947},
									label: "codeI",
									expr: &zeroOrOneExpr{
										pos: position{line: 1320, col: 36, offset: 43953},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 36, offset: 43953},
											name: "nestedGoCode",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 50, offset: 43967},
									label: "closeI",
									expr: &choiceExpr{
										pos: position{line: 1301, col: 21, offset: 43076},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 1301, col: 21, offset: 43076},
												run: (*parser).callonconditionalGoParenExpr114,
												expr: &seqExpr{
													pos: position{line: 1301, col: 21, offset: 43076},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1301, col: 21, offset: 43076},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
														&stateCodeExpr{
															pos: position{line: 2592, col: 13, offset: 90451},
															run: (*parser).callonconditionalGoParenExpr117,
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1303, col: 5, offset: 43155},
												run: (*parser).callonconditionalGoParenExpr118,
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonconditionalGoParenExpr119,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 1320, col: 74, offset: 43991},
									expr: &choiceExpr{
										pos: position{line: 1320, col: 76, offset: 43993},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 1320, col: 82, offset: 43999},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 1320, col: 82, offset: 43999},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&litMatcher{
														pos:        position{line: 1320, col: 85, offset: 44002},
														val:        "else",
														ignoreCase: false,
														want:       "\"else\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GoStatement",
			pos:  position{line: 1328, col: 1, offset: 44246},
			expr: &actionExpr{
				pos: position{line: 1328, col: 16, offset: 44261},
				run: (*parser).callonGoStatement1,
				expr: &labeledExpr{
					pos:   position{line: 1328, col: 16, offset: 44261},
					label: "codesI",
					expr: &oneOrMoreExpr{
						pos: position{line: 1328, col: 23, offset: 44268},
						expr: &choiceExpr{
							pos: position{line: 1328, col: 24, offset: 44269},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1328, col: 24, offset: 44269},
									name: "goParenExpr",
								},
								&ruleRefExpr{
									pos:  position{line: 1328, col: 38, offset: 44283},
									name: "String",
								},
								&actionExpr{
									pos: position{line: 1370, col: 27, offset: 45988},
									run: (*parser).callonGoStatement7,
									expr: &seqExpr{
										pos: position{line: 1370, col: 27, offset: 45988},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 1370, col: 27, offset: 45988},
												label: "prefixI",
												expr: &zeroOrOneExpr{
													pos: position{line: 1370, col: 35, offset: 45996},
													expr: &choiceExpr{
														pos: position{line: 1370, col: 36, offset: 45997},
														alternatives: []any{
															&oneOrMoreExpr{
																pos: position{line: 1370, col: 36, offset: 45997},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&seqExpr{
																pos: position{line: 1347, col: 34, offset: 44937},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1347, col: 34, offset: 44937},
																		val:        "[=&|^+/*%<>!-]",
																		chars:      []rune{'=', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1347, col: 49, offset: 44952},
																		expr: &choiceExpr{
																			pos: position{line: 2532, col: 20, offset: 88254},
																			alternatives: []any{
																				&charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2532, col: 31, offset: 88265},
																					exprs: []any{
																						&andCodeExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							run: (*parser).callonGoStatement20,
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 2530, col: 37, offset: 88223},
																							expr: &litMatcher{
																								pos:        position{line: 2530, col: 37, offset: 88223},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2530, col: 43, offset: 88229},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1370, col: 73, offset: 46034},
												label: "bfI",
												expr: &actionExpr{
													pos: position{line: 1378, col: 18, offset: 46213},
													run: (*parser).callonGoStatement25,
													expr: &seqExpr{
														pos: position{line: 1378, col: 18, offset: 46213},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1378, col: 18, offset: 46213},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1378, col: 26, offset: 46221},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 29, offset: 46224},
																label: "lParenI",
																expr: &actionExpr{
																	pos: position{line: 2612, col: 14, offset: 91211},
																	run: (*parser).callonGoStatement31,
																	expr: &seqExpr{
																		pos: position{line: 2612, col: 14, offset: 91211},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonGoStatement33,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																			&stateCodeExpr{
																				pos: position{line: 2586, col: 18, offset: 90318},
																				run: (*parser).callonGoStatement39,
																			},
																			&labeledExpr{
																				pos:   position{line: 2612, col: 24, offset: 91221},
																				label: "lParenI",
																				expr: &actionExpr{
																					pos: position{line: 2538, col: 12, offset: 88518},
																					run: (*parser).callonGoStatement41,
																					expr: &seqExpr{
																						pos: position{line: 2538, col: 12, offset: 88518},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 2538, col: 12, offset: 88518},
																								label: "posI",
																								expr: &actionExpr{
																									pos: position{line: 2519, col: 8, offset: 87865},
																									run: (*parser).callonGoStatement44,
																									expr: &choiceExpr{
																										pos: position{line: 2519, col: 9, offset: 87866},
																										alternatives: []any{
																											&andExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												expr: &anyMatcher{
																													line: 2519, col: 10, offset: 87867,
																												},
																											},
																											&notExpr{
																												pos: position{line: 2519, col: 14, offset: 87871},
																												expr: &anyMatcher{
																													line: 2519, col: 15, offset: 87872,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2538, col: 21, offset: 88527},
																								val:        "(",
																								ignoreCase: false,
																								want:       "\"(\"",
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2612, col: 40, offset: 91237},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonGoStatement55,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 47, offset: 46242},
																label: "identI",
																expr: &actionExpr{
																	pos: position{line: 245, col: 10, offset: 7100},
																	run: (*parser).callonGoStatement60,
																	expr: &labeledExpr{
																		pos:   position{line: 245, col: 10, offset: 7100},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1490, col: 17, offset: 49722},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1490, col: 26, offset: 49731},
																					expr: &charClassMatcher{
																						pos:        position{line: 1473, col: 20, offset: 49477},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1378, col: 60, offset: 46255},
																label: "rParenI",
																expr: &choiceExpr{
																	pos: position{line: 1387, col: 21, offset: 46498},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2616, col: 12, offset: 91297},
																			run: (*parser).callonGoStatement68,
																			expr: &seqExpr{
																				pos: position{line: 2616, col: 12, offset: 91297},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2616, col: 12, offset: 91297},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2616, col: 15, offset: 91300},
																						expr: &seqExpr{
																							pos: position{line: 2616, col: 16, offset: 91301},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2616, col: 16, offset: 91301},
																									val:        ",",
																									ignoreCase: false,
																									want:       "\",\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2616, col: 20, offset: 91305},
																									expr: &choiceExpr{
																										pos: position{line: 2532, col: 20, offset: 88254},
																										alternatives: []any{
																											&charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&seqExpr{
																												pos: position{line: 2532, col: 31, offset: 88265},
																												exprs: []any{
																													&andCodeExpr{
																														pos: position{line: 2532, col: 31, offset: 88265},
																														run: (*parser).callonGoStatement79,
																													},
																													&zeroOrOneExpr{
																														pos: position{line: 2530, col: 37, offset: 88223},
																														expr: &litMatcher{
																															pos:        position{line: 2530, col: 37, offset: 88223},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2530, col: 43, offset: 88229},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 2616, col: 26, offset: 91311},
																						label: "rParenI",
																						expr: &actionExpr{
																							pos: position{line: 2539, col: 12, offset: 88579},
																							run: (*parser).callonGoStatement84,
																							expr: &seqExpr{
																								pos: position{line: 2539, col: 12, offset: 88579},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 2539, col: 12, offset: 88579},
																										label: "posI",
																										expr: &actionExpr{
																											pos: position{line: 2519, col: 8, offset: 87865},
																											run: (*parser).callonGoStatement87,
																											expr: &choiceExpr{
																												pos: position{line: 2519, col: 9, offset: 87866},
																												alternatives: []any{
																													&andExpr{
																														pos: position{line: 2519, col: 9, offset: 87866},
																														expr: &anyMatcher{
																															line: 2519, col: 10, offset: 87867,
																														},
																													},
																													&notExpr{
																														pos: position{line: 2519, col: 14, offset: 87871},
																														expr: &anyMatcher{
																															line: 2519, col: 15, offset: 87872,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2539, col: 21, offset: 88588},
																										val:        ")",
																										ignoreCase: false,
																										want:       "\")\"",
																									},
																								},
																							},
																						},
																					},
																					&stateCodeExpr{
																						pos: position{line: 2592, col: 13, offset: 90451},
																						run: (*parser).callonGoStatement94,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1387, col: 31, offset: 46508},
																			run: (*parser).callonGoStatement95,
																			expr: &actionExpr{
																				pos: position{line: 2519, col: 8, offset: 87865},
																				run: (*parser).callonGoStatement96,
																				expr: &choiceExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					alternatives: []any{
																						&andExpr{
																							pos: position{line: 2519, col: 9, offset: 87866},
																							expr: &anyMatcher{
																								line: 2519, col: 10, offset: 87867,
																							},
																						},
																						&notExpr{
																							pos: position{line: 2519, col: 14, offset: 87871},
																							expr: &anyMatcher{
																								line: 2519, col: 15, offset: 87872,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1339, col: 19, offset: 44692},
									run: (*parser).callonGoStatement102,
									expr: &oneOrMoreExpr{
										pos: position{line: 1339, col: 19, offset: 44692},
										expr: &seqExpr{
											pos: position{line: 1351, col: 24, offset: 45166},
											exprs: []any{
												&notExpr{
													pos: position{line: 1351, col: 24, offset: 45166},
													expr: &seqExpr{
														pos: position{line: 1356, col: 35, offset: 45486},
														exprs: []any{
															&choiceExpr{
																pos: position{line: 1356, col: 36, offset: 45487},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 1356, col: 36, offset: 45487},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 1348, col: 34, offset: 44989},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 1348, col: 34, offset: 44989},
																				val:        "[=,&|^+/*%<>!-]",
																				chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1348, col: 50, offset: 45005},
																				expr: &choiceExpr{
																					pos: position{line: 2532, col: 20, offset: 88254},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2532, col: 31, offset: 88265},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2532, col: 31, offset: 88265},
																									run: (*parser).callonGoStatement116,
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 2530, col: 37, offset: 88223},
																									expr: &litMatcher{
																										pos:        position{line: 2530, col: 37, offset: 88223},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2530, col: 43, offset: 88229},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1356, col: 71, offset: 45522},
																val:        "block",
																ignoreCase: false,
																want:       "\"block\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1356, col: 79, offset: 45530},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1356, col: 82, offset: 45533},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 1351, col: 56, offset: 45198},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1537, col: 14, offset: 51045},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1537, col: 14, offset: 51045},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&choiceExpr{
																	pos: position{line: 1537, col: 20, offset: 51051},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 1577, col: 19, offset: 53013},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1577, col: 19, offset: 53013},
																					val:        "\\u",
																					ignoreCase: false,
																					want:       "\"\\\\u\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1578, col: 5, offset: 53072},
																			run: (*parser).callonGoStatement134,
																			expr: &seqExpr{
																				pos: position{line: 1578, col: 5, offset: 53072},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1578, col: 5, offset: 53072},
																						val:        "\\u",
																						ignoreCase: false,
																						want:       "\"\\\\u\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 14, offset: 53081},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 26, offset: 53093},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 38, offset: 53105},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1578, col: 50, offset: 53117},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1603, col: 16, offset: 54178},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1603, col: 16, offset: 54178},
																					val:        "\\U",
																					ignoreCase: false,
																					want:       "\"\\\\U\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1604, col: 5, offset: 54281},
																			run: (*parser).callonGoStatement155,
																			expr: &seqExpr{
																				pos: position{line: 1604, col: 5, offset: 54281},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1604, col: 5, offset: 54281},
																						val:        "\\U",
																						ignoreCase: false,
																						want:       "\"\\\\U\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 14, offset: 54290},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 26, offset: 54302},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 38, offset: 54314},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 50, offset: 54326},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 62, offset: 54338},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 74, offset: 54350},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 86, offset: 54362},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1604, col: 98, offset: 54374},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1634, col: 24, offset: 55688},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1634, col: 24, offset: 55688},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1634, col: 29, offset: 55693},
																					val:        "[abfnrtv\\\\\\]",
																					chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 1560, col: 75, offset: 52197},
																			val:        "[^\\\\\\\\n]",
																			chars:      []rune{'\'', '\\', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																		&seqExpr{
																			pos: position{line: 1562, col: 24, offset: 52343},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1562, col: 24, offset: 52343},
																					val:        "\\",
																					ignoreCase: false,
																					want:       "\"\\\\\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1483, col: 19, offset: 49647},
																					val:        "[0-7]",
																					ranges:     []rune{'0', '7'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 1563, col: 24, offset: 52410},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1563, col: 24, offset: 52410},
																					val:        "\\x",
																					ignoreCase: false,
																					want:       "\"\\\\x\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 1484, col: 19, offset: 49671},
																					val:        "[0-9A-Fa-f]",
																					ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1564, col: 5, offset: 52447},
																			run: (*parser).callonGoStatement187,
																			expr: &seqExpr{
																				pos: position{line: 1564, col: 5, offset: 52447},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1564, col: 5, offset: 52447},
																						val:        "\\x",
																						ignoreCase: false,
																						want:       "\"\\\\x\"",
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 14, offset: 52456},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 1564, col: 26, offset: 52468},
																						expr: &charClassMatcher{
																							pos:        position{line: 1484, col: 19, offset: 49671},
																							val:        "[0-9A-Fa-f]",
																							ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1635, col: 24, offset: 55771},
																			run: (*parser).callonGoStatement194,
																			expr: &seqExpr{
																				pos: position{line: 1635, col: 24, offset: 55771},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1635, col: 24, offset: 55771},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1656, col: 5, offset: 56727},
																			run: (*parser).callonGoStatement205,
																			expr: &seqExpr{
																				pos: position{line: 1656, col: 5, offset: 56727},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1656, col: 5, offset: 56727},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1674, col: 5, offset: 57508},
																			run: (*parser).callonGoStatement212,
																			expr: &seqExpr{
																				pos: position{line: 1674, col: 5, offset: 57508},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1674, col: 5, offset: 57508},
																						val:        "\\",
																						ignoreCase: false,
																						want:       "\"\\\\\"",
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&charClassMatcher{
																						pos:        position{line: 1484, col: 19, offset: 49671},
																						val:        "[0-9A-Fa-f]",
																						ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1689, col: 5, offset: 58133},
																			run: (*parser).callonGoStatement217,
																			expr: &litMatcher{
																				pos:        position{line: 1689, col: 5, offset: 58133},
																				val:        "\\",
																				ignoreCase: false,
																				want:       "\"\\\\\"",
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1537, col: 76, offset: 51107},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
															},
														},
														&actionExpr{
															pos: position{line: 1538, col: 5, offset: 51118},
															run: (*parser).callonGoStatement220,
															expr: &seqExpr{
																pos: position{line: 1538, col: 5, offset: 51118},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1538, col: 5, offset: 51118},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 10, offset: 51123},
																		label: "valsI",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 1538, col: 16, offset: 51129},
																			expr: &choiceExpr{
																				pos: position{line: 1538, col: 17, offset: 51130},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1577, col: 19, offset: 53013},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1577, col: 19, offset: 53013},
																								val:        "\\u",
																								ignoreCase: false,
																								want:       "\"\\\\u\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1578, col: 5, offset: 53072},
																						run: (*parser).callonGoStatement232,
																						expr: &seqExpr{
																							pos: position{line: 1578, col: 5, offset: 53072},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1578, col: 5, offset: 53072},
																									val:        "\\u",
																									ignoreCase: false,
																									want:       "\"\\\\u\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 14, offset: 53081},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 26, offset: 53093},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 38, offset: 53105},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1578, col: 50, offset: 53117},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1603, col: 16, offset: 54178},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1603, col: 16, offset: 54178},
																								val:        "\\U",
																								ignoreCase: false,
																								want:       "\"\\\\U\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1604, col: 5, offset: 54281},
																						run: (*parser).callonGoStatement253,
																						expr: &seqExpr{
																							pos: position{line: 1604, col: 5, offset: 54281},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1604, col: 5, offset: 54281},
																									val:        "\\U",
																									ignoreCase: false,
																									want:       "\"\\\\U\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 14, offset: 54290},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 26, offset: 54302},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 38, offset: 54314},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 50, offset: 54326},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 62, offset: 54338},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 74, offset: 54350},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 86, offset: 54362},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1604, col: 98, offset: 54374},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1634, col: 24, offset: 55688},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1634, col: 24, offset: 55688},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1634, col: 29, offset: 55693},
																								val:        "[abfnrtv\\\\\\]",
																								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '\''},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&charClassMatcher{
																						pos:        position{line: 1560, col: 75, offset: 52197},
																						val:        "[^\\\\\\\\n]",
																						chars:      []rune{'\'', '\\', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																					&seqExpr{
																						pos: position{line: 1562, col: 24, offset: 52343},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1562, col: 24, offset: 52343},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1483, col: 19, offset: 49647},
																								val:        "[0-7]",
																								ranges:     []rune{'0', '7'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 1563, col: 24, offset: 52410},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 1563, col: 24, offset: 52410},
																								val:        "\\x",
																								ignoreCase: false,
																								want:       "\"\\\\x\"",
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 1484, col: 19, offset: 49671},
																								val:        "[0-9A-Fa-f]",
																								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1564, col: 5, offset: 52447},
																						run: (*parser).callonGoStatement285,
																						expr: &seqExpr{
																							pos: position{line: 1564, col: 5, offset: 52447},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1564, col: 5, offset: 52447},
																									val:        "\\x",
																									ignoreCase: false,
																									want:       "\"\\\\x\"",
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 14, offset: 52456},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 1564, col: 26, offset: 52468},
																									expr: &charClassMatcher{
																										pos:        position{line: 1484, col: 19, offset: 49671},
																										val:        "[0-9A-Fa-f]",
																										ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1635, col: 24, offset: 55771},
																						run: (*parser).callonGoStatement292,
																						expr: &seqExpr{
																							pos: position{line: 1635, col: 24, offset: 55771},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1635, col: 24, offset: 55771},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1656, col: 5, offset: 56727},
																						run: (*parser).callonGoStatement303,
																						expr: &seqExpr{
																							pos: position{line: 1656, col: 5, offset: 56727},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1656, col: 5, offset: 56727},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1674, col: 5, offset: 57508},
																						run: (*parser).callonGoStatement310,
																						expr: &seqExpr{
																							pos: position{line: 1674, col: 5, offset: 57508},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1674, col: 5, offset: 57508},
																									val:        "\\",
																									ignoreCase: false,
																									want:       "\"\\\\\"",
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 1484, col: 19, offset: 49671},
																									val:        "[0-9A-Fa-f]",
																									ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1689, col: 5, offset: 58133},
																						run: (*parser).callonGoStatement315,
																						expr: &litMatcher{
																							pos:        position{line: 1689, col: 5, offset: 58133},
																							val:        "\\",
																							ignoreCase: false,
																							want:       "\"\\\\\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1538, col: 74, offset: 51187},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1538, col: 79, offset: 51192},
																		label: "endI",
																		expr: &actionExpr{
																			pos: position{line: 2519, col: 8, offset: 87865},
																			run: (*parser).callonGoStatement319,
																			expr: &choiceExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				alternatives: []any{
																					&andExpr{
																						pos: position{line: 2519, col: 9, offset: 87866},
																						expr: &anyMatcher{
																							line: 2519, col: 10, offset: 87867,
																						},
																					},
																					&notExpr{
																						pos: position{line: 2519, col: 14, offset: 87871},
																						expr: &anyMatcher{
																							line: 2519, col: 15, offset: 87872,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1348, col: 34, offset: 44989},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 1348, col: 34, offset: 44989},
																	val:        "[=,&|^+/*%<>!-]",
																	chars:      []rune{'=', ',', '&', '|', '^', '+', '/', '*', '%', '<', '>', '!', '-'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1348, col: 50, offset: 45005},
																	expr: &choiceExpr{
																		pos: position{line: 2532, col: 20, offset: 88254},
																		alternatives: []any{
																			&charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 2532, col: 31, offset: 88265},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 2532, col: 31, offset: 88265},
																						run: (*parser).callonGoStatement331,
																					},
																					&zeroOrOneExpr{
																						pos: position{line: 2530, col: 37, offset: 88223},
																						expr: &litMatcher{
																							pos:        position{line: 2530, col: 37, offset: 88223},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2530, col: 43, offset: 88229},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1351, col: 99, offset: 45241},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1351, col: 99, offset: 45241},
																	expr: &seqExpr{
																		pos: position{line: 1351, col: 101, offset: 45243},
																		exprs: []any{
																			&zeroOrMoreExpr{
																				pos: position{line: 1351, col: 101, offset: 45243},
																				expr: &charClassMatcher{
																					pos:        position{line: 2529, col: 37, offset: 88181},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 1351, col: 104, offset: 45246},
																				val:        "[[{]",
																				chars:      []rune{'[', '{'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 1351, col: 110, offset: 45252},
																	val:        "[^\\r\\n({[]});\\\"`]",
																	chars:      []rune{'\r', '\n', '(', '{', '[', ']', '}', ')', ';', '\'', '"', '`'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 1395, col: 1, offset: 46755},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 11, offset: 46765},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 46765},
						name: "InterpretedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 31, offset: 46785},
						name: "RawString",
					},
				},
			},
		},
		{
			name: "InterpretedString",
			pos:  position{line: 1397, col: 1, offset: 46796},
			expr: &actionExpr{
				pos: position{line: 1397, col: 22, offset: 46817},
				run: (*parser).callonInterpretedString1,
				expr: &seqExpr{
					pos: position{line: 1397, col: 22, offset: 46817},
					exprs: []any{
						&actionExpr{
							pos: position{line: 1406, col: 27, offset: 47114},
							run: (*parser).callonInterpretedString3,
							expr: &seqExpr{
								pos: position{line: 1406, col: 27, offset: 47114},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonInterpretedString5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonInterpretedString11,
									},
									&labeledExpr{
										pos:   position{line: 1406, col: 37, offset: 47124},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonInterpretedString13,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 1406, col: 48, offset: 47135},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 45, offset: 46840},
							label: "contentsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1397, col: 55, offset: 46850},
								expr: &ruleRefExpr{
									pos:  position{line: 1397, col: 55, offset: 46850},
									name: "InterpretedStringContent",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 81, offset: 46876},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 1407, col: 25, offset: 47202},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1407, col: 25, offset: 47202},
										run: (*parser).callonInterpretedString25,
										expr: &seqExpr{
											pos: position{line: 1407, col: 25, offset: 47202},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1407, col: 25, offset: 47202},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 1407, col: 29, offset: 47206},
													label: "endI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonInterpretedString29,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonInterpretedString35,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1409, col: 5, offset: 47267},
										run: (*parser).callonInterpretedString36,
										expr: &labeledExpr{
											pos:   position{line: 1409, col: 5, offset: 47267},
											label: "endI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonInterpretedString38,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawString",
			pos:  position{line: 1423, col: 1, offset: 47740},
			expr: &actionExpr{
				pos: position{line: 1423, col: 14, offset: 47753},
				run: (*parser).callonRawString1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 14, offset: 47753},
					exprs: []any{
						&actionExpr{
							pos: position{line: 1432, col: 19, offset: 48018},
							run: (*parser).callonRawString3,
							expr: &seqExpr{
								pos: position{line: 1432, col: 19, offset: 48018},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonRawString5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonRawString11,
									},
									&labeledExpr{
										pos:   position{line: 1432, col: 29, offset: 48028},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonRawString13,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 1432, col: 40, offset: 48039},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 29, offset: 47768},
							label: "contentsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1423, col: 39, offset: 47778},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 39, offset: 47778},
									name: "RawStringContent",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 57, offset: 47796},
							label: "endI",
							expr: &choiceExpr{
								pos: position{line: 1433, col: 17, offset: 48098},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1433, col: 17, offset: 48098},
										run: (*parser).callonRawString25,
										expr: &seqExpr{
											pos: position{line: 1433, col: 17, offset: 48098},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1433, col: 17, offset: 48098},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonRawString28,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1433, col: 26, offset: 48107},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonRawString35,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1435, col: 5, offset: 48163},
										run: (*parser).callonRawString36,
										expr: &labeledExpr{
											pos:   position{line: 1435, col: 5, offset: 48163},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonRawString38,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpretedStringContent",
			pos:  position{line: 1442, col: 1, offset: 48385},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 29, offset: 48413},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1445, col: 26, offset: 48547},
						run: (*parser).callonInterpretedStringContent2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1445, col: 26, offset: 48547},
							expr: &choiceExpr{
								pos: position{line: 1445, col: 27, offset: 48548},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 2296, col: 25, offset: 78750},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2296, col: 25, offset: 78750},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonInterpretedStringContent10,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1445, col: 50, offset: 48571},
										exprs: []any{
											&notExpr{
												pos: position{line: 1445, col: 50, offset: 48571},
												expr: &litMatcher{
													pos:        position{line: 1445, col: 51, offset: 48572},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&choiceExpr{
												pos: position{line: 1445, col: 56, offset: 48577},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 1577, col: 19, offset: 53013},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1577, col: 19, offset: 53013},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1578, col: 5, offset: 53072},
														run: (*parser).callonInterpretedStringContent24,
														expr: &seqExpr{
															pos: position{line: 1578, col: 5, offset: 53072},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1578, col: 5, offset: 53072},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 14, offset: 53081},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 26, offset: 53093},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 38, offset: 53105},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 50, offset: 53117},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1603, col: 16, offset: 54178},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1603, col: 16, offset: 54178},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1604, col: 5, offset: 54281},
														run: (*parser).callonInterpretedStringContent45,
														expr: &seqExpr{
															pos: position{line: 1604, col: 5, offset: 54281},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1604, col: 5, offset: 54281},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 14, offset: 54290},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 26, offset: 54302},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 38, offset: 54314},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 50, offset: 54326},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 62, offset: 54338},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 74, offset: 54350},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 86, offset: 54362},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 98, offset: 54374},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1801, col: 36, offset: 62752},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1801, col: 36, offset: 62752},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1801, col: 41, offset: 62757},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1799, col: 38, offset: 62644},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 1562, col: 24, offset: 52343},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1562, col: 24, offset: 52343},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1483, col: 19, offset: 49647},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1483, col: 19, offset: 49647},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1483, col: 19, offset: 49647},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 1563, col: 24, offset: 52410},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1563, col: 24, offset: 52410},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1564, col: 5, offset: 52447},
														run: (*parser).callonInterpretedStringContent77,
														expr: &seqExpr{
															pos: position{line: 1564, col: 5, offset: 52447},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1564, col: 5, offset: 52447},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1564, col: 14, offset: 52456},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1564, col: 26, offset: 52468},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1702, col: 37, offset: 58641},
														run: (*parser).callonInterpretedStringContent84,
														expr: &seqExpr{
															pos: position{line: 1702, col: 37, offset: 58641},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1702, col: 37, offset: 58641},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1723, col: 5, offset: 59597},
														run: (*parser).callonInterpretedStringContent95,
														expr: &seqExpr{
															pos: position{line: 1723, col: 5, offset: 59597},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1723, col: 5, offset: 59597},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1741, col: 5, offset: 60378},
														run: (*parser).callonInterpretedStringContent102,
														expr: &seqExpr{
															pos: position{line: 1741, col: 5, offset: 60378},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1741, col: 5, offset: 60378},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1756, col: 5, offset: 61003},
														run: (*parser).callonInterpretedStringContent107,
														expr: &litMatcher{
															pos:        position{line: 1756, col: 5, offset: 61003},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 53, offset: 48437},
						name: "StringInterpolation",
					},
				},
			},
		},
		{
			name: "RawStringContent",
			pos:  position{line: 1443, col: 1, offset: 48457},
			expr: &choiceExpr{
				pos: position{line: 1443, col: 29, offset: 48485},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1451, col: 18, offset: 48781},
						run: (*parser).callonRawStringContent2,
						expr: &oneOrMoreExpr{
							pos: position{line: 1451, col: 18, offset: 48781},
							expr: &choiceExpr{
								pos: position{line: 1451, col: 19, offset: 48782},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 2296, col: 25, offset: 78750},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2296, col: 25, offset: 78750},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonRawStringContent10,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1451, col: 42, offset: 48805},
										exprs: []any{
											&notExpr{
												pos: position{line: 1451, col: 42, offset: 48805},
												expr: &litMatcher{
													pos:        position{line: 1451, col: 43, offset: 48806},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
											},
											&choiceExpr{
												pos: position{line: 2663, col: 17, offset: 92620},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2663, col: 17, offset: 92620},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2663, col: 17, offset: 92620},
																run: (*parser).callonRawStringContent19,
															},
															&notExpr{
																pos: position{line: 2663, col: 50, offset: 92653},
																expr: &charClassMatcher{
																	pos:        position{line: 2663, col: 51, offset: 92654},
																	val:        "[\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2663, col: 60, offset: 92663},
														run: (*parser).callonRawStringContent22,
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1783, col: 27, offset: 61861},
												val:        "[^`]",
												chars:      []rune{'`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 45, offset: 48501},
						name: "StringInterpolation",
					},
				},
			},
		},
		{
			name: "StringInterpolation",
			pos:  position{line: 1458, col: 1, offset: 48952},
			expr: &actionExpr{
				pos: position{line: 1458, col: 24, offset: 48975},
				run: (*parser).callonStringInterpolation1,
				expr: &seqExpr{
					pos: position{line: 1458, col: 24, offset: 48975},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2308, col: 23, offset: 79248},
							run: (*parser).callonStringInterpolation3,
							expr: &seqExpr{
								pos: position{line: 2308, col: 23, offset: 79248},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonStringInterpolation5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonStringInterpolation11,
									},
									&labeledExpr{
										pos:   position{line: 2308, col: 33, offset: 79258},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonStringInterpolation13,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2308, col: 44, offset: 79269},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1458, col: 43, offset: 48994},
							label: "interpI",
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 51, offset: 49002},
								name: "stringInterpolation",
							},
						},
						&actionExpr{
							pos: position{line: 2309, col: 23, offset: 79334},
							run: (*parser).callonStringInterpolation22,
							expr: &seqExpr{
								pos: position{line: 2309, col: 23, offset: 79334},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 2309, col: 23, offset: 79334},
										label: "endI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonStringInterpolation25,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2592, col: 13, offset: 90451},
										run: (*parser).callonStringInterpolation31,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stringInterpolation",
			pos:  position{line: 1461, col: 1, offset: 49067},
			expr: &choiceExpr{
				pos: position{line: 1461, col: 24, offset: 49090},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2315, col: 16, offset: 79592},
						run: (*parser).callonstringInterpolation2,
						expr: &litMatcher{
							pos:        position{line: 2315, col: 16, offset: 79592},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
					&actionExpr{
						pos: position{line: 2331, col: 23, offset: 80136},
						run: (*parser).callonstringInterpolation4,
						expr: &seqExpr{
							pos: position{line: 2331, col: 23, offset: 80136},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2331, col: 23, offset: 80136},
									label: "nameI",
									expr: &actionExpr{
										pos: position{line: 2337, col: 27, offset: 80312},
										run: (*parser).callonstringInterpolation7,
										expr: &oneOrMoreExpr{
											pos: position{line: 2337, col: 27, offset: 80312},
											expr: &charClassMatcher{
												pos:        position{line: 2337, col: 27, offset: 80312},
												val:        "[a-zA-Z]",
												ranges:     []rune{'a', 'z', 'A', 'Z'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2331, col: 52, offset: 80165},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1461, col: 59, offset: 49125},
						name: "ExpressionInterpolation",
					},
					&actionExpr{
						pos: position{line: 2491, col: 21, offset: 86690},
						run: (*parser).callonstringInterpolation12,
						expr: &litMatcher{
							pos:        position{line: 2491, col: 21, offset: 86690},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "goType",
			pos:  position{line: 1807, col: 1, offset: 62829},
			expr: &choiceExpr{
				pos: position{line: 1807, col: 15, offset: 62843},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1807, col: 16, offset: 62844},
						exprs: []any{
							&choiceExpr{
								pos: position{line: 1808, col: 15, offset: 62922},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 1507, col: 21, offset: 50274},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 1473, col: 20, offset: 49477},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1490, col: 26, offset: 49731},
												expr: &charClassMatcher{
													pos:        position{line: 1473, col: 20, offset: 49477},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1507, col: 35, offset: 50288},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1507, col: 38, offset: 50291},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1507, col: 42, offset: 50295},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&charClassMatcher{
												pos:        position{line: 1473, col: 20, offset: 49477},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1490, col: 26, offset: 49731},
												expr: &charClassMatcher{
													pos:        position{line: 1473, col: 20, offset: 49477},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 1490, col: 17, offset: 49722},
										exprs: []any{
											&charClassMatcher{
												pos:        position{line: 1473, col: 20, offset: 49477},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1490, col: 26, offset: 49731},
												expr: &charClassMatcher{
													pos:        position{line: 1473, col: 20, offset: 49477},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1807, col: 27, offset: 62855},
								expr: &seqExpr{
									pos: position{line: 1807, col: 28, offset: 62856},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 1807, col: 28, offset: 62856},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1807, col: 31, offset: 62859},
											name: "goTypeArgs",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1807, col: 47, offset: 62875},
						name: "goTypeLit",
					},
					&seqExpr{
						pos: position{line: 1807, col: 59, offset: 62887},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1807, col: 59, offset: 62887},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1807, col: 63, offset: 62891},
								expr: &charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1807, col: 66, offset: 62894},
								name: "goType",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1807, col: 73, offset: 62901},
								expr: &charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&litMatcher{
								pos:        position{line: 1807, col: 76, offset: 62904},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeArgs",
			pos:  position{line: 1809, col: 1, offset: 62954},
			expr: &seqExpr{
				pos: position{line: 1809, col: 15, offset: 62968},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1809, col: 15, offset: 62968},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1809, col: 19, offset: 62972},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1809, col: 22, offset: 62975},
						name: "goTypeList",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1809, col: 33, offset: 62986},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1809, col: 36, offset: 62989},
						expr: &seqExpr{
							pos: position{line: 1809, col: 37, offset: 62990},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1809, col: 37, offset: 62990},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1809, col: 41, offset: 62994},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1809, col: 46, offset: 62999},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
				},
			},
		},
		{
			name: "goTypeList",
			pos:  position{line: 1810, col: 1, offset: 63003},
			expr: &seqExpr{
				pos: position{line: 1810, col: 15, offset: 63017},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1810, col: 15, offset: 63017},
						name: "goType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1810, col: 22, offset: 63024},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1810, col: 25, offset: 63027},
						expr: &seqExpr{
							pos: position{line: 1810, col: 26, offset: 63028},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1810, col: 26, offset: 63028},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1810, col: 30, offset: 63032},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1810, col: 33, offset: 63035},
									name: "goType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeLit",
			pos:  position{line: 1811, col: 1, offset: 63044},
			expr: &choiceExpr{
				pos: position{line: 1811, col: 16, offset: 63059},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1811, col: 16, offset: 63059},
						name: "goArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 30, offset: 63073},
						name: "goStructType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 45, offset: 63088},
						name: "goPointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 61, offset: 63104},
						name: "goFunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 78, offset: 63121},
						name: "goInterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 96, offset: 63139},
						name: "goSliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 110, offset: 63153},
						name: "goMapType",
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 122, offset: 63165},
						name: "goChannelType",
					},
				},
			},
		},
		{
			name: "goArrayType",
			pos:  position{line: 1817, col: 1, offset: 63203},
			expr: &seqExpr{
				pos: position{line: 1817, col: 18, offset: 63220},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1817, col: 18, offset: 63220},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1817, col: 22, offset: 63224},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 25, offset: 63227},
						name: "goArrayLength",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1817, col: 39, offset: 63241},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1817, col: 42, offset: 63244},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1817, col: 46, offset: 63248},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 49, offset: 63251},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goArrayLength",
			pos:  position{line: 1818, col: 1, offset: 63265},
			expr: &seqExpr{
				pos: position{line: 1818, col: 18, offset: 63282},
				exprs: []any{
					&oneOrMoreExpr{
						pos: position{line: 1818, col: 18, offset: 63282},
						expr: &charClassMatcher{
							pos:        position{line: 1818, col: 18, offset: 63282},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1818, col: 25, offset: 63289},
						expr: &seqExpr{
							pos: position{line: 1818, col: 26, offset: 63290},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1818, col: 26, offset: 63290},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 1818, col: 30, offset: 63294},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1818, col: 30, offset: 63294},
											val:        "<<",
											ignoreCase: false,
											want:       "\"<<\"",
										},
										&litMatcher{
											pos:        position{line: 1818, col: 37, offset: 63301},
											val:        ">>",
											ignoreCase: false,
											want:       "\">>\"",
										},
										&charClassMatcher{
											pos:        position{line: 1818, col: 44, offset: 63308},
											val:        "[+-*/]",
											chars:      []rune{'+', '-', '*', '/'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1818, col: 67, offset: 63331},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1818, col: 70, offset: 63334},
									name: "goArrayLength",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goElementType",
			pos:  position{line: 1819, col: 1, offset: 63431},
			expr: &ruleRefExpr{
				pos:  position{line: 1819, col: 18, offset: 63448},
				name: "goType",
			},
		},
		{
			name: "goSliceType",
			pos:  position{line: 1825, col: 1, offset: 63478},
			expr: &seqExpr{
				pos: position{line: 1825, col: 16, offset: 63493},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1825, col: 16, offset: 63493},
						val:        "[]",
						ignoreCase: false,
						want:       "\"[]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1825, col: 21, offset: 63498},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1825, col: 24, offset: 63501},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goStructType",
			pos:  position{line: 1831, col: 1, offset: 63539},
			expr: &seqExpr{
				pos: position{line: 1831, col: 20, offset: 63558},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1831, col: 20, offset: 63558},
						val:        "struct",
						ignoreCase: false,
						want:       "\"struct\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1831, col: 29, offset: 63567},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1831, col: 32, offset: 63570},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1831, col: 36, offset: 63574},
						expr: &seqExpr{
							pos: position{line: 1831, col: 37, offset: 63575},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1831, col: 37, offset: 63575},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callongoStructType12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1831, col: 41, offset: 63579},
									expr: &ruleRefExpr{
										pos:  position{line: 1831, col: 41, offset: 63579},
										name: "goFieldDecl",
									},
								},
								&choiceExpr{
									pos: position{line: 1831, col: 55, offset: 63593},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1831, col: 55, offset: 63593},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&seqExpr{
											pos: position{line: 2530, col: 37, offset: 88223},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2530, col: 37, offset: 88223},
													expr: &litMatcher{
														pos:        position{line: 2530, col: 37, offset: 88223},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2530, col: 43, offset: 88229},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1831, col: 72, offset: 63610},
						expr: &choiceExpr{
							pos: position{line: 2532, col: 20, offset: 88254},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2532, col: 31, offset: 88265},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2532, col: 31, offset: 88265},
											run: (*parser).callongoStructType28,
										},
										&zeroOrOneExpr{
											pos: position{line: 2530, col: 37, offset: 88223},
											expr: &litMatcher{
												pos:        position{line: 2530, col: 37, offset: 88223},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2530, col: 43, offset: 88229},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1831, col: 76, offset: 63614},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goFieldDecl",
			pos:  position{line: 1832, col: 1, offset: 63618},
			expr: &seqExpr{
				pos: position{line: 1832, col: 20, offset: 63637},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 1832, col: 21, offset: 63638},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 1832, col: 21, offset: 63638},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1490, col: 26, offset: 49731},
										expr: &charClassMatcher{
											pos:        position{line: 1473, col: 20, offset: 49477},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1883, col: 34, offset: 64833},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1883, col: 37, offset: 64836},
										expr: &seqExpr{
											pos: position{line: 1883, col: 38, offset: 64837},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1883, col: 38, offset: 64837},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1883, col: 42, offset: 64841},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).callongoFieldDecl16,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 1473, col: 20, offset: 49477},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1490, col: 26, offset: 49731},
													expr: &charClassMatcher{
														pos:        position{line: 1473, col: 20, offset: 49477},
														val:        "[_\\pL\\pNd]",
														chars:      []rune{'_'},
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1832, col: 38, offset: 63655},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1832, col: 41, offset: 63658},
										name: "goType",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1832, col: 50, offset: 63667},
								name: "goEmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1832, col: 67, offset: 63684},
						expr: &choiceExpr{
							pos: position{line: 1774, col: 16, offset: 61517},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 1776, col: 19, offset: 61576},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1776, col: 19, offset: 61576},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1776, col: 23, offset: 61580},
											expr: &charClassMatcher{
												pos:        position{line: 1783, col: 27, offset: 61861},
												val:        "[^`]",
												chars:      []rune{'`'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&litMatcher{
											pos:        position{line: 1776, col: 47, offset: 61604},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 1777, col: 5, offset: 61614},
									run: (*parser).callongoFieldDecl34,
									expr: &seqExpr{
										pos: position{line: 1777, col: 5, offset: 61614},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1777, col: 5, offset: 61614},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1777, col: 9, offset: 61618},
												expr: &charClassMatcher{
													pos:        position{line: 1783, col: 27, offset: 61861},
													val:        "[^`]",
													chars:      []rune{'`'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2507, col: 27, offset: 87385},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														exprs: []any{
															&zeroOrOneExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																expr: &litMatcher{
																	pos:        position{line: 2507, col: 27, offset: 87385},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2507, col: 33, offset: 87391},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&notExpr{
														pos: position{line: 2506, col: 23, offset: 87356},
														expr: &anyMatcher{
															line: 2506, col: 24, offset: 87357,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 1785, col: 27, offset: 61893},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1785, col: 27, offset: 61893},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1785, col: 31, offset: 61897},
											expr: &choiceExpr{
												pos: position{line: 1785, col: 32, offset: 61898},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 1577, col: 19, offset: 53013},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1577, col: 19, offset: 53013},
																val:        "\\u",
																ignoreCase: false,
																want:       "\"\\\\u\"",
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1578, col: 5, offset: 53072},
														run: (*parser).callongoFieldDecl58,
														expr: &seqExpr{
															pos: position{line: 1578, col: 5, offset: 53072},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1578, col: 5, offset: 53072},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 14, offset: 53081},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 26, offset: 53093},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 38, offset: 53105},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1578, col: 50, offset: 53117},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1603, col: 16, offset: 54178},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1603, col: 16, offset: 54178},
																val:        "\\U",
																ignoreCase: false,
																want:       "\"\\\\U\"",
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1604, col: 5, offset: 54281},
														run: (*parser).callongoFieldDecl79,
														expr: &seqExpr{
															pos: position{line: 1604, col: 5, offset: 54281},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1604, col: 5, offset: 54281},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 14, offset: 54290},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 26, offset: 54302},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 38, offset: 54314},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 50, offset: 54326},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 62, offset: 54338},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 74, offset: 54350},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 86, offset: 54362},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1604, col: 98, offset: 54374},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 1801, col: 36, offset: 62752},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1801, col: 36, offset: 62752},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1801, col: 41, offset: 62757},
																val:        "[abfnrtv\\\\\"]",
																chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 1799, col: 38, offset: 62644},
														val:        "[^\"\\\\\\n]",
														chars:      []rune{'"', '\\', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
													&seqExpr{
														pos: position{line: 1562, col: 24, offset: 52343},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1562, col: 24, offset: 52343},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
															&charClassMatcher{
																pos:        position{line: 1483, col: 19, offset: 49647},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1483, col: 19, offset: 49647},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1483, col: 19, offset: 49647},
																val:        "[0-7]",
																ranges:     []rune{'0', '7'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&seqExpr{
														pos: position{line: 1563, col: 24, offset: 52410},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1563, col: 24, offset: 52410},
																val:        "\\x",
																ignoreCase: false,
																want:       "\"\\\\x\"",
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 1484, col: 19, offset: 49671},
																val:        "[0-9A-Fa-f]",
																ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 1564, col: 5, offset: 52447},
														run: (*parser).callongoFieldDecl111,
														expr: &seqExpr{
															pos: position{line: 1564, col: 5, offset: 52447},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1564, col: 5, offset: 52447},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 1564, col: 14, offset: 52456},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 1564, col: 26, offset: 52468},
																	expr: &charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1702, col: 37, offset: 58641},
														run: (*parser).callongoFieldDecl118,
														expr: &seqExpr{
															pos: position{line: 1702, col: 37, offset: 58641},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1702, col: 37, offset: 58641},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1723, col: 5, offset: 59597},
														run: (*parser).callongoFieldDecl129,
														expr: &seqExpr{
															pos: position{line: 1723, col: 5, offset: 59597},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1723, col: 5, offset: 59597},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1741, col: 5, offset: 60378},
														run: (*parser).callongoFieldDecl136,
														expr: &seqExpr{
															pos: position{line: 1741, col: 5, offset: 60378},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1741, col: 5, offset: 60378},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1756, col: 5, offset: 61003},
														run: (*parser).callongoFieldDecl141,
														expr: &litMatcher{
															pos:        position{line: 1756, col: 5, offset: 61003},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1785, col: 115, offset: 61981},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
								},
								&actionExpr{
									pos: position{line: 1786, col: 5, offset: 61991},
									run: (*parser).callongoFieldDecl144,
									expr: &seqExpr{
										pos: position{line: 1786, col: 5, offset: 61991},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1786, col: 5, offset: 61991},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1786, col: 9, offset: 61995},
												expr: &choiceExpr{
													pos: position{line: 1786, col: 10, offset: 61996},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 1577, col: 19, offset: 53013},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1577, col: 19, offset: 53013},
																	val:        "\\u",
																	ignoreCase: false,
																	want:       "\"\\\\u\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1578, col: 5, offset: 53072},
															run: (*parser).callongoFieldDecl155,
															expr: &seqExpr{
																pos: position{line: 1578, col: 5, offset: 53072},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1578, col: 5, offset: 53072},
																		val:        "\\u",
																		ignoreCase: false,
																		want:       "\"\\\\u\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1578, col: 14, offset: 53081},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1578, col: 26, offset: 53093},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1578, col: 38, offset: 53105},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1578, col: 50, offset: 53117},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1603, col: 16, offset: 54178},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1603, col: 16, offset: 54178},
																	val:        "\\U",
																	ignoreCase: false,
																	want:       "\"\\\\U\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1604, col: 5, offset: 54281},
															run: (*parser).callongoFieldDecl176,
															expr: &seqExpr{
																pos: position{line: 1604, col: 5, offset: 54281},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1604, col: 5, offset: 54281},
																		val:        "\\U",
																		ignoreCase: false,
																		want:       "\"\\\\U\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 14, offset: 54290},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 26, offset: 54302},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 38, offset: 54314},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 50, offset: 54326},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 62, offset: 54338},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 74, offset: 54350},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 86, offset: 54362},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1604, col: 98, offset: 54374},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 1801, col: 36, offset: 62752},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1801, col: 36, offset: 62752},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1801, col: 41, offset: 62757},
																	val:        "[abfnrtv\\\\\"]",
																	chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '\\', '"'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 1799, col: 38, offset: 62644},
															val:        "[^\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
														&seqExpr{
															pos: position{line: 1562, col: 24, offset: 52343},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1562, col: 24, offset: 52343},
																	val:        "\\",
																	ignoreCase: false,
																	want:       "\"\\\\\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1483, col: 19, offset: 49647},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1483, col: 19, offset: 49647},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1483, col: 19, offset: 49647},
																	val:        "[0-7]",
																	ranges:     []rune{'0', '7'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&seqExpr{
															pos: position{line: 1563, col: 24, offset: 52410},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1563, col: 24, offset: 52410},
																	val:        "\\x",
																	ignoreCase: false,
																	want:       "\"\\\\x\"",
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&charClassMatcher{
																	pos:        position{line: 1484, col: 19, offset: 49671},
																	val:        "[0-9A-Fa-f]",
																	ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 1564, col: 5, offset: 52447},
															run: (*parser).callongoFieldDecl208,
															expr: &seqExpr{
																pos: position{line: 1564, col: 5, offset: 52447},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1564, col: 5, offset: 52447},
																		val:        "\\x",
																		ignoreCase: false,
																		want:       "\"\\\\x\"",
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1564, col: 14, offset: 52456},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 1564, col: 26, offset: 52468},
																		expr: &charClassMatcher{
																			pos:        position{line: 1484, col: 19, offset: 49671},
																			val:        "[0-9A-Fa-f]",
																			ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1702, col: 37, offset: 58641},
															run: (*parser).callongoFieldDecl215,
															expr: &seqExpr{
																pos: position{line: 1702, col: 37, offset: 58641},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1702, col: 37, offset: 58641},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1723, col: 5, offset: 59597},
															run: (*parser).callongoFieldDecl226,
															expr: &seqExpr{
																pos: position{line: 1723, col: 5, offset: 59597},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1723, col: 5, offset: 59597},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1741, col: 5, offset: 60378},
															run: (*parser).callongoFieldDecl233,
															expr: &seqExpr{
																pos: position{line: 1741, col: 5, offset: 60378},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1741, col: 5, offset: 60378},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 1484, col: 19, offset: 49671},
																		val:        "[0-9A-Fa-f]",
																		ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1756, col: 5, offset: 61003},
															run: (*parser).callongoFieldDecl238,
															expr: &litMatcher{
																pos:        position{line: 1756, col: 5, offset: 61003},
																val:        "\\",
																ignoreCase: false,
																want:       "\"\\\\\"",
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2506, col: 23, offset: 87356},
												expr: &anyMatcher{
													line: 2506, col: 24, offset: 87357,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goEmbeddedField",
			pos:  position{line: 1833, col: 1, offset: 63691},
			expr: &seqExpr{
				pos: position{line: 1833, col: 20, offset: 63710},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1833, col: 20, offset: 63710},
						expr: &litMatcher{
							pos:        position{line: 1833, col: 20, offset: 63710},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1833, col: 25, offset: 63715},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&choiceExpr{
						pos: position{line: 1808, col: 15, offset: 62922},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 1507, col: 21, offset: 50274},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1490, col: 26, offset: 49731},
										expr: &charClassMatcher{
											pos:        position{line: 1473, col: 20, offset: 49477},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1507, col: 35, offset: 50288},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 1507, col: 38, offset: 50291},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1507, col: 42, offset: 50295},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1490, col: 26, offset: 49731},
										expr: &charClassMatcher{
											pos:        position{line: 1473, col: 20, offset: 49477},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1490, col: 17, offset: 49722},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 1490, col: 26, offset: 49731},
										expr: &charClassMatcher{
											pos:        position{line: 1473, col: 20, offset: 49477},
											val:        "[_\\pL\\pNd]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1833, col: 39, offset: 63729},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1833, col: 42, offset: 63732},
						expr: &ruleRefExpr{
							pos:  position{line: 1833, col: 42, offset: 63732},
							name: "goTypeArgs",
						},
					},
				},
			},
		},
		{
			name: "goPointerType",
			pos:  position{line: 1840, col: 1, offset: 63800},
			expr: &seqExpr{
				pos: position{line: 1840, col: 18, offset: 63817},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1840, col: 18, offset: 63817},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1840, col: 22, offset: 63821},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 25, offset: 63824},
						name: "goBaseType",
					},
				},
			},
		},
		{
			name: "goBaseType",
			pos:  position{line: 1841, col: 1, offset: 63835},
			expr: &ruleRefExpr{
				pos:  position{line: 1841, col: 18, offset: 63852},
				name: "goType",
			},
		},
		{
			name: "goFunctionType",
			pos:  position{line: 1847, col: 1, offset: 63885},
			expr: &seqExpr{
				pos: position{line: 1847, col: 20, offset: 63904},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1847, col: 20, offset: 63904},
						val:        "func",
						ignoreCase: false,
						want:       "\"func\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1847, col: 27, offset: 63911},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1847, col: 30, offset: 63914},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goSignature",
			pos:  position{line: 1848, col: 1, offset: 63926},
			expr: &seqExpr{
				pos: position{line: 1848, col: 20, offset: 63945},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1848, col: 20, offset: 63945},
						name: "goParameters",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1848, col: 33, offset: 63958},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1848, col: 36, offset: 63961},
						expr: &ruleRefExpr{
							pos:  position{line: 1848, col: 36, offset: 63961},
							name: "goResult",
						},
					},
				},
			},
		},
		{
			name: "goResult",
			pos:  position{line: 1849, col: 1, offset: 63971},
			expr: &choiceExpr{
				pos: position{line: 1849, col: 20, offset: 63990},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1849, col: 20, offset: 63990},
						name: "goParameters",
					},
					&ruleRefExpr{
						pos:  position{line: 1849, col: 35, offset: 64005},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goParameters",
			pos:  position{line: 1850, col: 1, offset: 64012},
			expr: &seqExpr{
				pos: position{line: 1850, col: 20, offset: 64031},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1850, col: 20, offset: 64031},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1850, col: 24, offset: 64035},
						expr: &choiceExpr{
							pos: position{line: 2532, col: 20, offset: 88254},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2532, col: 31, offset: 88265},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2532, col: 31, offset: 88265},
											run: (*parser).callongoParameters7,
										},
										&zeroOrOneExpr{
											pos: position{line: 2530, col: 37, offset: 88223},
											expr: &litMatcher{
												pos:        position{line: 2530, col: 37, offset: 88223},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2530, col: 43, offset: 88229},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1850, col: 28, offset: 64039},
						expr: &seqExpr{
							pos: position{line: 1850, col: 29, offset: 64040},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1850, col: 29, offset: 64040},
									name: "goParameterList",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1850, col: 45, offset: 64056},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1850, col: 48, offset: 64059},
									expr: &seqExpr{
										pos: position{line: 1850, col: 49, offset: 64060},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1850, col: 49, offset: 64060},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1850, col: 53, offset: 64064},
												expr: &choiceExpr{
													pos: position{line: 2532, col: 20, offset: 88254},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2532, col: 31, offset: 88265},
																	run: (*parser).callongoParameters23,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2530, col: 37, offset: 88223},
																	expr: &litMatcher{
																		pos:        position{line: 2530, col: 37, offset: 88223},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2530, col: 43, offset: 88229},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1850, col: 61, offset: 64072},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
				},
			},
		},
		{
			name: "goParameterList",
			pos:  position{line: 1851, col: 1, offset: 64076},
			expr: &seqExpr{
				pos: position{line: 1851, col: 20, offset: 64095},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1851, col: 20, offset: 64095},
						name: "goParameterDecl",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1851, col: 36, offset: 64111},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1851, col: 39, offset: 64114},
						expr: &seqExpr{
							pos: position{line: 1851, col: 40, offset: 64115},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1851, col: 40, offset: 64115},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1851, col: 44, offset: 64119},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callongoParameterList12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1851, col: 48, offset: 64123},
									name: "goParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goParameterDecl",
			pos:  position{line: 1852, col: 1, offset: 64141},
			expr: &seqExpr{
				pos: position{line: 1852, col: 20, offset: 64160},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1852, col: 20, offset: 64160},
						expr: &seqExpr{
							pos: position{line: 1883, col: 21, offset: 64820},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 1473, col: 20, offset: 49477},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1490, col: 26, offset: 49731},
									expr: &charClassMatcher{
										pos:        position{line: 1473, col: 20, offset: 49477},
										val:        "[_\\pL\\pNd]",
										chars:      []rune{'_'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1883, col: 34, offset: 64833},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1883, col: 37, offset: 64836},
									expr: &seqExpr{
										pos: position{line: 1883, col: 38, offset: 64837},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1883, col: 38, offset: 64837},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1883, col: 42, offset: 64841},
												expr: &choiceExpr{
													pos: position{line: 2532, col: 20, offset: 88254},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2532, col: 31, offset: 88265},
																	run: (*parser).callongoParameterDecl16,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2530, col: 37, offset: 88223},
																	expr: &litMatcher{
																		pos:        position{line: 2530, col: 37, offset: 88223},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2530, col: 43, offset: 88229},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
											&charClassMatcher{
												pos:        position{line: 1473, col: 20, offset: 49477},
												val:        "[_\\pL]",
												chars:      []rune{'_'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1490, col: 26, offset: 49731},
												expr: &charClassMatcher{
													pos:        position{line: 1473, col: 20, offset: 49477},
													val:        "[_\\pL\\pNd]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 38, offset: 64178},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1852, col: 41, offset: 64181},
						expr: &litMatcher{
							pos:        position{line: 1852, col: 41, offset: 64181},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 48, offset: 64188},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1852, col: 51, offset: 64191},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goInterfaceType",
			pos:  position{line: 1858, col: 1, offset: 64225},
			expr: &seqExpr{
				pos: position{line: 1858, col: 21, offset: 64245},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1858, col: 21, offset: 64245},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1858, col: 33, offset: 64257},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1858, col: 36, offset: 64260},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1858, col: 40, offset: 64264},
						expr: &seqExpr{
							pos: position{line: 1858, col: 41, offset: 64265},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1858, col: 41, offset: 64265},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callongoInterfaceType12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1858, col: 45, offset: 64269},
									name: "goInterfaceElem",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1858, col: 61, offset: 64285},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 1858, col: 65, offset: 64289},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 1858, col: 65, offset: 64289},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1858, col: 71, offset: 64295},
											expr: &seqExpr{
												pos: position{line: 2508, col: 28, offset: 87430},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2508, col: 28, offset: 87430},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 1858, col: 86, offset: 64310},
						expr: &choiceExpr{
							pos: position{line: 2532, col: 20, offset: 88254},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2529, col: 37, offset: 88181},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2532, col: 31, offset: 88265},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2532, col: 31, offset: 88265},
											run: (*parser).callongoInterfaceType32,
										},
										&zeroOrOneExpr{
											pos: position{line: 2530, col: 37, offset: 88223},
											expr: &litMatcher{
												pos:        position{line: 2530, col: 37, offset: 88223},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2530, col: 43, offset: 88229},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1858, col: 90, offset: 64314},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "goInterfaceElem",
			pos:  position{line: 1859, col: 1, offset: 64318},
			expr: &choiceExpr{
				pos: position{line: 1859, col: 21, offset: 64338},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1859, col: 21, offset: 64338},
						name: "goMethodElem",
					},
					&ruleRefExpr{
						pos:  position{line: 1859, col: 36, offset: 64353},
						name: "goTypeElem",
					},
				},
			},
		},
		{
			name: "goMethodElem",
			pos:  position{line: 1860, col: 1, offset: 64364},
			expr: &seqExpr{
				pos: position{line: 1860, col: 21, offset: 64384},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1473, col: 20, offset: 49477},
						val:        "[_\\pL]",
						chars:      []rune{'_'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1490, col: 26, offset: 49731},
						expr: &charClassMatcher{
							pos:        position{line: 1473, col: 20, offset: 49477},
							val:        "[_\\pL\\pNd]",
							chars:      []rune{'_'},
							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1860, col: 34, offset: 64397},
						name: "goSignature",
					},
				},
			},
		},
		{
			name: "goTypeElem",
			pos:  position{line: 1862, col: 1, offset: 64442},
			expr: &seqExpr{
				pos: position{line: 1862, col: 21, offset: 64462},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1862, col: 21, offset: 64462},
						name: "goTypeTerm",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1862, col: 32, offset: 64473},
						expr: &seqExpr{
							pos: position{line: 1862, col: 33, offset: 64474},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 1862, col: 33, offset: 64474},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1862, col: 36, offset: 64477},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1862, col: 40, offset: 64481},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callongoTypeElem12,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1862, col: 44, offset: 64485},
									name: "goTypeTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "goTypeTerm",
			pos:  position{line: 1863, col: 1, offset: 64498},
			expr: &choiceExpr{
				pos: position{line: 1863, col: 21, offset: 64518},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1863, col: 21, offset: 64518},
						name: "goType",
					},
					&ruleRefExpr{
						pos:  position{line: 1863, col: 30, offset: 64527},
						name: "goUnderlyingType",
					},
				},
			},
		},
		{
			name: "goUnderlyingType",
			pos:  position{line: 1864, col: 1, offset: 64544},
			expr: &seqExpr{
				pos: position{line: 1864, col: 21, offset: 64564},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1864, col: 21, offset: 64564},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1864, col: 25, offset: 64568},
						name: "goType",
					},
				},
			},
		},
		{
			name: "goMapType",
			pos:  position{line: 1870, col: 1, offset: 64596},
			expr: &seqExpr{
				pos: position{line: 1870, col: 14, offset: 64609},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1870, col: 14, offset: 64609},
						val:        "map",
						ignoreCase: false,
						want:       "\"map\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1870, col: 20, offset: 64615},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1870, col: 23, offset: 64618},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1870, col: 27, offset: 64622},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1870, col: 30, offset: 64625},
						name: "goKeyType",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1870, col: 40, offset: 64635},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 1870, col: 43, offset: 64638},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1870, col: 47, offset: 64642},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1870, col: 50, offset: 64645},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "goKeyType",
			pos:  position{line: 1871, col: 1, offset: 64659},
			expr: &ruleRefExpr{
				pos:  position{line: 1871, col: 14, offset: 64672},
				name: "goType",
			},
		},
		{
			name: "goChannelType",
			pos:  position{line: 1877, col: 1, offset: 64704},
			expr: &seqExpr{
				pos: position{line: 1877, col: 18, offset: 64721},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1877, col: 18, offset: 64721},
						expr: &seqExpr{
							pos: position{line: 1877, col: 19, offset: 64722},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1877, col: 19, offset: 64722},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1877, col: 24, offset: 64727},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1877, col: 29, offset: 64732},
						val:        "chan",
						ignoreCase: false,
						want:       "\"chan\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1877, col: 36, offset: 64739},
						expr: &charClassMatcher{
							pos:        position{line: 2529, col: 37, offset: 88181},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 1877, col: 39, offset: 64742},
						expr: &seqExpr{
							pos: position{line: 1877, col: 40, offset: 64743},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1877, col: 40, offset: 64743},
									val:        "<-",
									ignoreCase: false,
									want:       "\"<-\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1877, col: 45, offset: 64748},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1877, col: 50, offset: 64753},
						name: "goElementType",
					},
				},
			},
		},
		{
			name: "State",
			pos:  position{line: 2064, col: 1, offset: 71283},
			expr: &choiceExpr{
				pos: position{line: 2064, col: 10, offset: 71292},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2064, col: 10, offset: 71292},
						name: "SingleState",
					},
					&ruleRefExpr{
						pos:  position{line: 2064, col: 24, offset: 71306},
						name: "GroupState",
					},
					&actionExpr{
						pos: position{line: 2091, col: 13, offset: 72013},
						run: (*parser).callonState4,
						expr: &seqExpr{
							pos: position{line: 2091, col: 13, offset: 72013},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2091, col: 13, offset: 72013},
									val:        "state",
									ignoreCase: false,
									want:       "\"state\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2091, col: 21, offset: 72021},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&labeledExpr{
									pos:   position{line: 2091, col: 24, offset: 72024},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonState10,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2091, col: 35, offset: 72035},
									label: "badI",
									expr: &actionExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										run: (*parser).callonState17,
										expr: &seqExpr{
											pos: position{line: 2512, col: 35, offset: 87610},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2512, col: 35, offset: 87610},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2512, col: 38, offset: 87613},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2512, col: 50, offset: 87625},
														expr: &seqExpr{
															pos: position{line: 2512, col: 51, offset: 87626},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2512, col: 51, offset: 87626},
																	expr: &choiceExpr{
																		pos: position{line: 2509, col: 27, offset: 87467},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2507, col: 23, offset: 87381},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										expr: &litMatcher{
																											pos:        position{line: 2507, col: 27, offset: 87385},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2507, col: 33, offset: 87391},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2506, col: 23, offset: 87356},
																								expr: &anyMatcher{
																									line: 2506, col: 24, offset: 87357,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 33, offset: 87473},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2509, col: 39, offset: 87479},
																				expr: &seqExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2509, col: 41, offset: 87481},
																							expr: &charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2509, col: 45, offset: 87485},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2509, col: 45, offset: 87485},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 51, offset: 87491},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2512, col: 57, offset: 87632},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2512, col: 57, offset: 87632},
																			expr: &charClassMatcher{
																				pos:        position{line: 2512, col: 57, offset: 87632},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2512, col: 71, offset: 87646},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2512, col: 71, offset: 87646},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2512, col: 75, offset: 87650},
																					expr: &charClassMatcher{
																						pos:        position{line: 2512, col: 75, offset: 87650},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2512, col: 81, offset: 87656},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2091, col: 51, offset: 72051},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleState",
			pos:  position{line: 2066, col: 1, offset: 71329},
			expr: &actionExpr{
				pos: position{line: 2066, col: 16, offset: 71344},
				run: (*parser).callonSingleState1,
				expr: &seqExpr{
					pos: position{line: 2066, col: 16, offset: 71344},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2066, col: 16, offset: 71344},
							val:        "state",
							ignoreCase: false,
							want:       "\"state\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 2066, col: 24, offset: 71352},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2066, col: 27, offset: 71355},
							label: "varI",
							expr: &ruleRefExpr{
								pos:  position{line: 2066, col: 32, offset: 71360},
								name: "StateVar",
							},
						},
						&choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupState",
			pos:  position{line: 2073, col: 1, offset: 71494},
			expr: &actionExpr{
				pos: position{line: 2073, col: 15, offset: 71508},
				run: (*parser).callonGroupState1,
				expr: &seqExpr{
					pos: position{line: 2073, col: 15, offset: 71508},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2073, col: 15, offset: 71508},
							val:        "state",
							ignoreCase: false,
							want:       "\"state\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2073, col: 23, offset: 71516},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2073, col: 26, offset: 71519},
							label: "lParenI",
							expr: &actionExpr{
								pos: position{line: 2612, col: 14, offset: 91211},
								run: (*parser).callonGroupState7,
								expr: &seqExpr{
									pos: position{line: 2612, col: 14, offset: 91211},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonGroupState9,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2586, col: 18, offset: 90318},
											run: (*parser).callonGroupState15,
										},
										&labeledExpr{
											pos:   position{line: 2612, col: 24, offset: 91221},
											label: "lParenI",
											expr: &actionExpr{
												pos: position{line: 2538, col: 12, offset: 88518},
												run: (*parser).callonGroupState17,
												expr: &seqExpr{
													pos: position{line: 2538, col: 12, offset: 88518},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2538, col: 12, offset: 88518},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).callonGroupState20,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2538, col: 21, offset: 88527},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2612, col: 40, offset: 91237},
											expr: &choiceExpr{
												pos: position{line: 2532, col: 20, offset: 88254},
												alternatives: []any{
													&charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																run: (*parser).callonGroupState31,
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2073, col: 44, offset: 71537},
							label: "nodesI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2073, col: 51, offset: 71544},
								expr: &ruleRefExpr{
									pos:  position{line: 2073, col: 51, offset: 71544},
									name: "stateNode",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2073, col: 62, offset: 71555},
							label: "rParenI",
							expr: &choiceExpr{
								pos: position{line: 2082, col: 18, offset: 71794},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2082, col: 18, offset: 71794},
										run: (*parser).callonGroupState40,
										expr: &seqExpr{
											pos: position{line: 2082, col: 18, offset: 71794},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2082, col: 18, offset: 71794},
													expr: &choiceExpr{
														pos: position{line: 2532, col: 20, offset: 88254},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 2532, col: 31, offset: 88265},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2532, col: 31, offset: 88265},
																		run: (*parser).callonGroupState46,
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 2530, col: 37, offset: 88223},
																		expr: &litMatcher{
																			pos:        position{line: 2530, col: 37, offset: 88223},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2530, col: 43, offset: 88229},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2082, col: 22, offset: 71798},
													label: "rParenI",
													expr: &actionExpr{
														pos: position{line: 2539, col: 12, offset: 88579},
														run: (*parser).callonGroupState51,
														expr: &seqExpr{
															pos: position{line: 2539, col: 12, offset: 88579},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2539, col: 12, offset: 88579},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonGroupState54,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2539, col: 21, offset: 88588},
																	val:        ")",
																	ignoreCase: false,
																	want:       "\")\"",
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2084, col: 5, offset: 71844},
										run: (*parser).callonGroupState61,
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonGroupState62,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateNode",
			pos:  position{line: 2108, col: 1, offset: 72536},
			expr: &actionExpr{
				pos: position{line: 2108, col: 14, offset: 72549},
				run: (*parser).callonstateNode1,
				expr: &seqExpr{
					pos: position{line: 2108, col: 14, offset: 72549},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 2108, col: 14, offset: 72549},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonstateNode7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2108, col: 18, offset: 72553},
							label: "nodeI",
							expr: &choiceExpr{
								pos: position{line: 2108, col: 25, offset: 72560},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 441, col: 15, offset: 14245},
										run: (*parser).callonstateNode13,
										expr: &seqExpr{
											pos: position{line: 441, col: 15, offset: 14245},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 441, col: 15, offset: 14245},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 441, col: 20, offset: 14250},
													expr: &litMatcher{
														pos:        position{line: 441, col: 21, offset: 14251},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 441, col: 25, offset: 14255},
													label: "textI",
													expr: &seqExpr{
														pos: position{line: 441, col: 32, offset: 14262},
														exprs: []any{
															&notExpr{
																pos: position{line: 441, col: 32, offset: 14262},
																expr: &seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&anyMatcher{
																line: 441, col: 37, offset: 14267,
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2108, col: 38, offset: 72573},
										name: "StateVar",
									},
									&actionExpr{
										pos: position{line: 2189, col: 16, offset: 75281},
										run: (*parser).callonstateNode42,
										expr: &seqExpr{
											pos: position{line: 2189, col: 16, offset: 75281},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2189, col: 16, offset: 75281},
													label: "lineI",
													expr: &actionExpr{
														pos: position{line: 2512, col: 35, offset: 87610},
														run: (*parser).callonstateNode45,
														expr: &seqExpr{
															pos: position{line: 2512, col: 35, offset: 87610},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2512, col: 35, offset: 87610},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 2512, col: 38, offset: 87613},
																	label: "unexpectedI",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2512, col: 50, offset: 87625},
																		expr: &seqExpr{
																			pos: position{line: 2512, col: 51, offset: 87626},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2512, col: 51, offset: 87626},
																					expr: &choiceExpr{
																						pos: position{line: 2509, col: 27, offset: 87467},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 23, offset: 87381},
																								exprs: []any{
																									&zeroOrMoreExpr{
																										pos: position{line: 2507, col: 23, offset: 87381},
																										expr: &charClassMatcher{
																											pos:        position{line: 2529, col: 37, offset: 88181},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										alternatives: []any{
																											&seqExpr{
																												pos: position{line: 2507, col: 27, offset: 87385},
																												exprs: []any{
																													&zeroOrOneExpr{
																														pos: position{line: 2507, col: 27, offset: 87385},
																														expr: &litMatcher{
																															pos:        position{line: 2507, col: 27, offset: 87385},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2507, col: 33, offset: 87391},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2506, col: 23, offset: 87356},
																												expr: &anyMatcher{
																													line: 2506, col: 24, offset: 87357,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 33, offset: 87473},
																								val:        ";",
																								ignoreCase: false,
																								want:       "\";\"",
																							},
																							&andExpr{
																								pos: position{line: 2509, col: 39, offset: 87479},
																								expr: &seqExpr{
																									pos: position{line: 2509, col: 41, offset: 87481},
																									exprs: []any{
																										&zeroOrMoreExpr{
																											pos: position{line: 2509, col: 41, offset: 87481},
																											expr: &charClassMatcher{
																												pos:        position{line: 2529, col: 37, offset: 88181},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2509, col: 45, offset: 87485},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2509, col: 45, offset: 87485},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2509, col: 51, offset: 87491},
																													val:        "//",
																													ignoreCase: false,
																													want:       "\"//\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2512, col: 57, offset: 87632},
																					alternatives: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 2512, col: 57, offset: 87632},
																							expr: &charClassMatcher{
																								pos:        position{line: 2512, col: 57, offset: 87632},
																								val:        "[^\\r\\n;{}]",
																								chars:      []rune{'\r', '\n', ';', '{', '}'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2512, col: 71, offset: 87646},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2512, col: 71, offset: 87646},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2512, col: 75, offset: 87650},
																									expr: &charClassMatcher{
																										pos:        position{line: 2512, col: 75, offset: 87650},
																										val:        "[^}]",
																										chars:      []rune{'}'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2512, col: 81, offset: 87656},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2509, col: 27, offset: 87467},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2509, col: 33, offset: 87473},
															val:        ";",
															ignoreCase: false,
															want:       "\";\"",
														},
														&andExpr{
															pos: position{line: 2509, col: 39, offset: 87479},
															expr: &seqExpr{
																pos: position{line: 2509, col: 41, offset: 87481},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2509, col: 41, offset: 87481},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2509, col: 45, offset: 87485},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2509, col: 45, offset: 87485},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 51, offset: 87491},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StateVar",
			pos:  position{line: 2112, col: 1, offset: 72624},
			expr: &actionExpr{
				pos: position{line: 2112, col: 13, offset: 72636},
				run: (*parser).callonStateVar1,
				expr: &seqExpr{
					pos: position{line: 2112, col: 13, offset: 72636},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2112, col: 13, offset: 72636},
							label: "namesI",
							expr: &actionExpr{
								pos: position{line: 2141, col: 18, offset: 73647},
								run: (*parser).callonStateVar4,
								expr: &seqExpr{
									pos: position{line: 2141, col: 18, offset: 73647},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 2141, col: 18, offset: 73647},
											label: "firstI",
											expr: &choiceExpr{
												pos: position{line: 2149, col: 18, offset: 73908},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 245, col: 10, offset: 7100},
														run: (*parser).callonStateVar8,
														expr: &labeledExpr{
															pos:   position{line: 245, col: 10, offset: 7100},
															label: "identI",
															expr: &seqExpr{
																pos: position{line: 1490, col: 17, offset: 49722},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 1473, col: 20, offset: 49477},
																		val:        "[_\\pL]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1490, col: 26, offset: 49731},
																		expr: &charClassMatcher{
																			pos:        position{line: 1473, col: 20, offset: 49477},
																			val:        "[_\\pL\\pNd]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 2149, col: 26, offset: 73916},
														run: (*parser).callonStateVar14,
														expr: &oneOrMoreExpr{
															pos: position{line: 2149, col: 26, offset: 73916},
															expr: &charClassMatcher{
																pos:        position{line: 2149, col: 26, offset: 73916},
																val:        "[^\\r\\n\\t ,=]",
																chars:      []rune{'\r', '\n', '\t', ' ', ',', '='},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2141, col: 39, offset: 73668},
											label: "restI",
											expr: &zeroOrMoreExpr{
												pos: position{line: 2141, col: 45, offset: 73674},
												expr: &seqExpr{
													pos: position{line: 2141, col: 46, offset: 73675},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2141, col: 46, offset: 73675},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&litMatcher{
															pos:        position{line: 2141, col: 49, offset: 73678},
															val:        ",",
															ignoreCase: false,
															want:       "\",\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 2141, col: 53, offset: 73682},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2149, col: 18, offset: 73908},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 245, col: 10, offset: 7100},
																	run: (*parser).callonStateVar26,
																	expr: &labeledExpr{
																		pos:   position{line: 245, col: 10, offset: 7100},
																		label: "identI",
																		expr: &seqExpr{
																			pos: position{line: 1490, col: 17, offset: 49722},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 1473, col: 20, offset: 49477},
																					val:        "[_\\pL]",
																					chars:      []rune{'_'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1490, col: 26, offset: 49731},
																					expr: &charClassMatcher{
																						pos:        position{line: 1473, col: 20, offset: 49477},
																						val:        "[_\\pL\\pNd]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("Nd")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2149, col: 26, offset: 73916},
																	run: (*parser).callonStateVar32,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2149, col: 26, offset: 73916},
																		expr: &charClassMatcher{
																			pos:        position{line: 2149, col: 26, offset: 73916},
																			val:        "[^\\r\\n\\t ,=]",
																			chars:      []rune{'\r', '\n', '\t', ' ', ',', '='},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2112, col: 34, offset: 72657},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2112, col: 37, offset: 72660},
							label: "typI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2112, col: 42, offset: 72665},
								expr: &ruleRefExpr{
									pos:  position{line: 2112, col: 42, offset: 72665},
									name: "stateVarType",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2112, col: 56, offset: 72679},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2112, col: 59, offset: 72682},
							label: "assignI",
							expr: &actionExpr{
								pos: position{line: 2519, col: 8, offset: 87865},
								run: (*parser).callonStateVar43,
								expr: &choiceExpr{
									pos: position{line: 2519, col: 9, offset: 87866},
									alternatives: []any{
										&andExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											expr: &anyMatcher{
												line: 2519, col: 10, offset: 87867,
											},
										},
										&notExpr{
											pos: position{line: 2519, col: 14, offset: 87871},
											expr: &anyMatcher{
												line: 2519, col: 15, offset: 87872,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2112, col: 71, offset: 72694},
							label: "valsI",
							expr: &ruleRefExpr{
								pos:  position{line: 2112, col: 77, offset: 72700},
								name: "stateVarValues",
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarType",
			pos:  position{line: 2153, col: 1, offset: 74004},
			expr: &choiceExpr{
				pos: position{line: 2153, col: 17, offset: 74020},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2153, col: 17, offset: 74020},
						run: (*parser).callonstateVarType2,
						expr: &seqExpr{
							pos: position{line: 2153, col: 17, offset: 74020},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2153, col: 17, offset: 74020},
									label: "typI",
									expr: &ruleRefExpr{
										pos:  position{line: 2153, col: 22, offset: 74025},
										name: "Type",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2153, col: 27, offset: 74030},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2155, col: 5, offset: 74060},
						run: (*parser).callonstateVarType8,
						expr: &seqExpr{
							pos: position{line: 2155, col: 5, offset: 74060},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2155, col: 5, offset: 74060},
									label: "textI",
									expr: &oneOrMoreExpr{
										pos: position{line: 2155, col: 11, offset: 74066},
										expr: &seqExpr{
											pos: position{line: 2155, col: 12, offset: 74067},
											exprs: []any{
												&notExpr{
													pos: position{line: 2155, col: 12, offset: 74067},
													expr: &seqExpr{
														pos: position{line: 2155, col: 14, offset: 74069},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2155, col: 14, offset: 74069},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2155, col: 17, offset: 74072},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 2155, col: 22, offset: 74077},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2155, col: 32, offset: 74087},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarValues",
			pos:  position{line: 2166, col: 1, offset: 74361},
			expr: &choiceExpr{
				pos: position{line: 2166, col: 19, offset: 74379},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2166, col: 19, offset: 74379},
						run: (*parser).callonstateVarValues2,
						expr: &seqExpr{
							pos: position{line: 2166, col: 19, offset: 74379},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2166, col: 19, offset: 74379},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2166, col: 23, offset: 74383},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonstateVarValues9,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2166, col: 27, offset: 74387},
									label: "valsI",
									expr: &ruleRefExpr{
										pos:  position{line: 2166, col: 33, offset: 74393},
										name: "stateVarValueList",
									},
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2168, col: 5, offset: 74443},
						run: (*parser).callonstateVarValues34,
						expr: &seqExpr{
							pos: position{line: 2168, col: 5, offset: 74443},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2168, col: 5, offset: 74443},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2168, col: 9, offset: 74447},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonstateVarValues41,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2168, col: 13, offset: 74451},
									label: "valsI",
									expr: &zeroOrOneExpr{
										pos: position{line: 2168, col: 19, offset: 74457},
										expr: &ruleRefExpr{
											pos:  position{line: 2168, col: 19, offset: 74457},
											name: "stateVarValueList",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2168, col: 38, offset: 74476},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonstateVarValues49,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2168, col: 49, offset: 74487},
									label: "badI",
									expr: &actionExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										run: (*parser).callonstateVarValues56,
										expr: &seqExpr{
											pos: position{line: 2512, col: 35, offset: 87610},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2512, col: 35, offset: 87610},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 2512, col: 38, offset: 87613},
													label: "unexpectedI",
													expr: &oneOrMoreExpr{
														pos: position{line: 2512, col: 50, offset: 87625},
														expr: &seqExpr{
															pos: position{line: 2512, col: 51, offset: 87626},
															exprs: []any{
																&notExpr{
																	pos: position{line: 2512, col: 51, offset: 87626},
																	expr: &choiceExpr{
																		pos: position{line: 2509, col: 27, offset: 87467},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 23, offset: 87381},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2507, col: 23, offset: 87381},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2507, col: 27, offset: 87385},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2507, col: 27, offset: 87385},
																										expr: &litMatcher{
																											pos:        position{line: 2507, col: 27, offset: 87385},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2507, col: 33, offset: 87391},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2506, col: 23, offset: 87356},
																								expr: &anyMatcher{
																									line: 2506, col: 24, offset: 87357,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2509, col: 33, offset: 87473},
																				val:        ";",
																				ignoreCase: false,
																				want:       "\";\"",
																			},
																			&andExpr{
																				pos: position{line: 2509, col: 39, offset: 87479},
																				expr: &seqExpr{
																					pos: position{line: 2509, col: 41, offset: 87481},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2509, col: 41, offset: 87481},
																							expr: &charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2509, col: 45, offset: 87485},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2509, col: 45, offset: 87485},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2509, col: 51, offset: 87491},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2512, col: 57, offset: 87632},
																	alternatives: []any{
																		&oneOrMoreExpr{
																			pos: position{line: 2512, col: 57, offset: 87632},
																			expr: &charClassMatcher{
																				pos:        position{line: 2512, col: 57, offset: 87632},
																				val:        "[^\\r\\n;{}]",
																				chars:      []rune{'\r', '\n', ';', '{', '}'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2512, col: 71, offset: 87646},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2512, col: 71, offset: 87646},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2512, col: 75, offset: 87650},
																					expr: &charClassMatcher{
																						pos:        position{line: 2512, col: 75, offset: 87650},
																						val:        "[^}]",
																						chars:      []rune{'}'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2512, col: 81, offset: 87656},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2168, col: 65, offset: 74503},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2171, col: 5, offset: 74663},
						run: (*parser).callonstateVarValues111,
						expr: &seqExpr{
							pos: position{line: 2171, col: 5, offset: 74663},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2171, col: 5, offset: 74663},
									val:        "=",
									ignoreCase: false,
									want:       "\"=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2171, col: 9, offset: 74667},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonstateVarValues118,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2171, col: 13, offset: 74671},
									label: "startI",
									expr: &actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonstateVarValues123,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 2512, col: 35, offset: 87610},
									run: (*parser).callonstateVarValues129,
									expr: &seqExpr{
										pos: position{line: 2512, col: 35, offset: 87610},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2512, col: 35, offset: 87610},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 2512, col: 38, offset: 87613},
												label: "unexpectedI",
												expr: &oneOrMoreExpr{
													pos: position{line: 2512, col: 50, offset: 87625},
													expr: &seqExpr{
														pos: position{line: 2512, col: 51, offset: 87626},
														exprs: []any{
															&notExpr{
																pos: position{line: 2512, col: 51, offset: 87626},
																expr: &choiceExpr{
																	pos: position{line: 2509, col: 27, offset: 87467},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					expr: &charClassMatcher{
																						pos:        position{line: 2529, col: 37, offset: 88181},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							exprs: []any{
																								&zeroOrOneExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									expr: &litMatcher{
																										pos:        position{line: 2507, col: 27, offset: 87385},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2507, col: 33, offset: 87391},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2506, col: 23, offset: 87356},
																							expr: &anyMatcher{
																								line: 2506, col: 24, offset: 87357,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 2509, col: 33, offset: 87473},
																			val:        ";",
																			ignoreCase: false,
																			want:       "\";\"",
																		},
																		&andExpr{
																			pos: position{line: 2509, col: 39, offset: 87479},
																			expr: &seqExpr{
																				pos: position{line: 2509, col: 41, offset: 87481},
																				exprs: []any{
																					&zeroOrMoreExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						expr: &charClassMatcher{
																							pos:        position{line: 2529, col: 37, offset: 88181},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2509, col: 45, offset: 87485},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2509, col: 45, offset: 87485},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2509, col: 51, offset: 87491},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2512, col: 57, offset: 87632},
																alternatives: []any{
																	&oneOrMoreExpr{
																		pos: position{line: 2512, col: 57, offset: 87632},
																		expr: &charClassMatcher{
																			pos:        position{line: 2512, col: 57, offset: 87632},
																			val:        "[^\\r\\n;{}]",
																			chars:      []rune{'\r', '\n', ';', '{', '}'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2512, col: 71, offset: 87646},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2512, col: 71, offset: 87646},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2512, col: 75, offset: 87650},
																				expr: &charClassMatcher{
																					pos:        position{line: 2512, col: 75, offset: 87650},
																					val:        "[^}]",
																					chars:      []rune{'}'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 2512, col: 81, offset: 87656},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2171, col: 35, offset: 74693},
									label: "endI",
									expr: &choiceExpr{
										pos: position{line: 2509, col: 27, offset: 87467},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2509, col: 33, offset: 87473},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&andExpr{
												pos: position{line: 2509, col: 39, offset: 87479},
												expr: &seqExpr{
													pos: position{line: 2509, col: 41, offset: 87481},
													exprs: []any{
														&zeroOrMoreExpr{
															pos: position{line: 2509, col: 41, offset: 87481},
															expr: &charClassMatcher{
																pos:        position{line: 2529, col: 37, offset: 88181},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&choiceExpr{
															pos: position{line: 2509, col: 45, offset: 87485},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2509, col: 45, offset: 87485},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
																&litMatcher{
																	pos:        position{line: 2509, col: 51, offset: 87491},
																	val:        "//",
																	ignoreCase: false,
																	want:       "\"//\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2177, col: 5, offset: 74949},
						run: (*parser).callonstateVarValues184,
						expr: &choiceExpr{
							pos: position{line: 2509, col: 27, offset: 87467},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															expr: &litMatcher{
																pos:        position{line: 2507, col: 27, offset: 87385},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&litMatcher{
															pos:        position{line: 2507, col: 33, offset: 87391},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&notExpr{
													pos: position{line: 2506, col: 23, offset: 87356},
													expr: &anyMatcher{
														line: 2506, col: 24, offset: 87357,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2509, col: 33, offset: 87473},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&andExpr{
									pos: position{line: 2509, col: 39, offset: 87479},
									expr: &seqExpr{
										pos: position{line: 2509, col: 41, offset: 87481},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												expr: &charClassMatcher{
													pos:        position{line: 2529, col: 37, offset: 88181},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2509, col: 45, offset: 87485},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2509, col: 45, offset: 87485},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
													&litMatcher{
														pos:        position{line: 2509, col: 51, offset: 87491},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "stateVarValueList",
			pos:  position{line: 2181, col: 1, offset: 74995},
			expr: &actionExpr{
				pos: position{line: 2181, col: 22, offset: 75016},
				run: (*parser).callonstateVarValueList1,
				expr: &seqExpr{
					pos: position{line: 2181, col: 22, offset: 75016},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2181, col: 22, offset: 75016},
							label: "firstI",
							expr: &ruleRefExpr{
								pos:  position{line: 2181, col: 29, offset: 75023},
								name: "GoExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2181, col: 42, offset: 75036},
							label: "restI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2181, col: 48, offset: 75042},
								expr: &seqExpr{
									pos: position{line: 2181, col: 49, offset: 75043},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 2181, col: 49, offset: 75043},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 2181, col: 52, offset: 75046},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2181, col: 56, offset: 75050},
											expr: &charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2181, col: 59, offset: 75053},
											name: "GoExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlock",
			pos:  position{line: 2204, col: 1, offset: 75778},
			expr: &choiceExpr{
				pos: position{line: 2204, col: 15, offset: 75792},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2204, col: 15, offset: 75792},
						run: (*parser).callonArrowBlock2,
						expr: &seqExpr{
							pos: position{line: 2204, col: 15, offset: 75792},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2519, col: 8, offset: 87865},
									run: (*parser).callonArrowBlock4,
									expr: &choiceExpr{
										pos: position{line: 2519, col: 9, offset: 87866},
										alternatives: []any{
											&andExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												expr: &anyMatcher{
													line: 2519, col: 10, offset: 87867,
												},
											},
											&notExpr{
												pos: position{line: 2519, col: 14, offset: 87871},
												expr: &anyMatcher{
													line: 2519, col: 15, offset: 87872,
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 2551, col: 24, offset: 89124},
									run: (*parser).callonArrowBlock10,
								},
								&litMatcher{
									pos:        position{line: 2204, col: 31, offset: 75808},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 2204, col: 36, offset: 75813},
									label: "firstI",
									expr: &choiceExpr{
										pos: position{line: 2204, col: 44, offset: 75821},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 2204, col: 44, offset: 75821},
												name: "ArrowBlockLine",
											},
											&seqExpr{
												pos: position{line: 2507, col: 23, offset: 87381},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2507, col: 23, offset: 87381},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 27, offset: 87385},
																exprs: []any{
																	&zeroOrOneExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		expr: &litMatcher{
																			pos:        position{line: 2507, col: 27, offset: 87385},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2507, col: 33, offset: 87391},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																},
															},
															&notExpr{
																pos: position{line: 2506, col: 23, offset: 87356},
																expr: &anyMatcher{
																	line: 2506, col: 24, offset: 87357,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2204, col: 66, offset: 75843},
									label: "restI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2204, col: 72, offset: 75849},
										expr: &seqExpr{
											pos: position{line: 2204, col: 73, offset: 75850},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2204, col: 73, offset: 75850},
													expr: &seqExpr{
														pos: position{line: 2508, col: 28, offset: 87430},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 2508, col: 28, offset: 87430},
																expr: &charClassMatcher{
																	pos:        position{line: 2529, col: 37, offset: 88181},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 2530, col: 37, offset: 88223},
																expr: &litMatcher{
																	pos:        position{line: 2530, col: 37, offset: 88223},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&litMatcher{
																pos:        position{line: 2530, col: 43, offset: 88229},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 2204, col: 85, offset: 75862},
													name: "INDENTATION2",
												},
												&ruleRefExpr{
													pos:  position{line: 2204, col: 98, offset: 75875},
													name: "ArrowBlockLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2225, col: 5, offset: 76330},
						run: (*parser).callonArrowBlock37,
						expr: &seqExpr{
							pos: position{line: 2225, col: 5, offset: 76330},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2225, col: 5, offset: 76330},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 2507, col: 23, offset: 87381},
									expr: &charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2507, col: 27, offset: 87385},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													expr: &litMatcher{
														pos:        position{line: 2507, col: 27, offset: 87385},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&litMatcher{
													pos:        position{line: 2507, col: 33, offset: 87391},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
											},
										},
										&notExpr{
											pos: position{line: 2506, col: 23, offset: 87356},
											expr: &anyMatcher{
												line: 2506, col: 24, offset: 87357,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BracketText",
			pos:  position{line: 2233, col: 1, offset: 76579},
			expr: &choiceExpr{
				pos: position{line: 2233, col: 16, offset: 76594},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2233, col: 16, offset: 76594},
						run: (*parser).callonBracketText2,
						expr: &seqExpr{
							pos: position{line: 2233, col: 16, offset: 76594},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2544, col: 14, offset: 88766},
									run: (*parser).callonBracketText4,
									expr: &seqExpr{
										pos: position{line: 2544, col: 14, offset: 88766},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 2544, col: 14, offset: 88766},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonBracketText7,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2544, col: 23, offset: 88775},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2233, col: 26, offset: 76604},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonBracketText18,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2233, col: 30, offset: 76608},
									label: "btI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2233, col: 34, offset: 76612},
										expr: &ruleRefExpr{
											pos:  position{line: 2233, col: 34, offset: 76612},
											name: "BracketTextLine",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2233, col: 51, offset: 76629},
									expr: &choiceExpr{
										pos: position{line: 2532, col: 20, offset: 88254},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2529, col: 37, offset: 88181},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 2532, col: 31, offset: 88265},
														run: (*parser).callonBracketText29,
													},
													&zeroOrOneExpr{
														pos: position{line: 2530, col: 37, offset: 88223},
														expr: &litMatcher{
															pos:        position{line: 2530, col: 37, offset: 88223},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2530, col: 43, offset: 88229},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2233, col: 55, offset: 76633},
									label: "rBracketI",
									expr: &actionExpr{
										pos: position{line: 2545, col: 14, offset: 88829},
										run: (*parser).callonBracketText34,
										expr: &seqExpr{
											pos: position{line: 2545, col: 14, offset: 88829},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2545, col: 14, offset: 88829},
													label: "posI",
													expr: &actionExpr{
														pos: position{line: 2519, col: 8, offset: 87865},
														run: (*parser).callonBracketText37,
														expr: &choiceExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															alternatives: []any{
																&andExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	expr: &anyMatcher{
																		line: 2519, col: 10, offset: 87867,
																	},
																},
																&notExpr{
																	pos: position{line: 2519, col: 14, offset: 87871},
																	expr: &anyMatcher{
																		line: 2519, col: 15, offset: 87872,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2545, col: 23, offset: 88838},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 2509, col: 27, offset: 87467},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 2507, col: 23, offset: 87381},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 2507, col: 23, offset: 87381},
													expr: &charClassMatcher{
														pos:        position{line: 2529, col: 37, offset: 88181},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2507, col: 27, offset: 87385},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2507, col: 27, offset: 87385},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	expr: &litMatcher{
																		pos:        position{line: 2507, col: 27, offset: 87385},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2507, col: 33, offset: 87391},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
														&notExpr{
															pos: position{line: 2506, col: 23, offset: 87356},
															expr: &anyMatcher{
																line: 2506, col: 24, offset: 87357,
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 2509, col: 33, offset: 87473},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
										&andExpr{
											pos: position{line: 2509, col: 39, offset: 87479},
											expr: &seqExpr{
												pos: position{line: 2509, col: 41, offset: 87481},
												exprs: []any{
													&zeroOrMoreExpr{
														pos: position{line: 2509, col: 41, offset: 87481},
														expr: &charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&choiceExpr{
														pos: position{line: 2509, col: 45, offset: 87485},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2509, col: 45, offset: 87485},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
															&litMatcher{
																pos:        position{line: 2509, col: 51, offset: 87491},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2239, col: 5, offset: 76820},
						run: (*parser).callonBracketText63,
						expr: &seqExpr{
							pos: position{line: 2239, col: 5, offset: 76820},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2544, col: 14, offset: 88766},
									run: (*parser).callonBracketText65,
									expr: &seqExpr{
										pos: position{line: 2544, col: 14, offset: 88766},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 2544, col: 14, offset: 88766},
												label: "posI",
												expr: &actionExpr{
													pos: position{line: 2519, col: 8, offset: 87865},
													run: (*parser).callonBracketText68,
													expr: &choiceExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														alternatives: []any{
															&andExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																expr: &anyMatcher{
																	line: 2519, col: 10, offset: 87867,
																},
															},
															&notExpr{
																pos: position{line: 2519, col: 14, offset: 87871},
																expr: &anyMatcher{
																	line: 2519, col: 15, offset: 87872,
																},
															},
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 2544, col: 23, offset: 88775},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2239, col: 15, offset: 76830},
									label: "btI",
									expr: &zeroOrMoreExpr{
										pos: position{line: 2239, col: 19, offset: 76834},
										expr: &ruleRefExpr{
											pos:  position{line: 2239, col: 19, offset: 76834},
											name: "BracketTextLine",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 2239, col: 36, offset: 76851},
									expr: &anyMatcher{
										line: 2239, col: 36, offset: 76851,
									},
								},
								&notExpr{
									pos: position{line: 2506, col: 23, offset: 87356},
									expr: &anyMatcher{
										line: 2506, col: 24, offset: 87357,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowBlockLine",
			pos:  position{line: 2253, col: 1, offset: 77278},
			expr: &actionExpr{
				pos: position{line: 2253, col: 19, offset: 77296},
				run: (*parser).callonArrowBlockLine1,
				expr: &seqExpr{
					pos: position{line: 2253, col: 19, offset: 77296},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2253, col: 19, offset: 77296},
							label: "nodesI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2253, col: 26, offset: 77303},
								expr: &ruleRefExpr{
									pos:  position{line: 2253, col: 26, offset: 77303},
									name: "ArrowBlockTextNode",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2507, col: 23, offset: 87381},
							expr: &charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&choiceExpr{
							pos: position{line: 2507, col: 27, offset: 87385},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 2507, col: 27, offset: 87385},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 2507, col: 27, offset: 87385},
											expr: &litMatcher{
												pos:        position{line: 2507, col: 27, offset: 87385},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
										&litMatcher{
											pos:        position{line: 2507, col: 33, offset: 87391},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
								},
								&notExpr{
									pos: position{line: 2506, col: 23, offset: 87356},
									expr: &anyMatcher{
										line: 2506, col: 24, offset: 87357,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BracketTextLine",
			pos:  position{line: 2256, col: 1, offset: 77391},
			expr: &actionExpr{
				pos: position{line: 2256, col: 20, offset: 77410},
				run: (*parser).callonBracketTextLine1,
				expr: &seqExpr{
					pos: position{line: 2256, col: 20, offset: 77410},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 2256, col: 20, offset: 77410},
							expr: &choiceExpr{
								pos: position{line: 2532, col: 20, offset: 88254},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 2529, col: 37, offset: 88181},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 2532, col: 31, offset: 88265},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2532, col: 31, offset: 88265},
												run: (*parser).callonBracketTextLine7,
											},
											&zeroOrOneExpr{
												pos: position{line: 2530, col: 37, offset: 88223},
												expr: &litMatcher{
													pos:        position{line: 2530, col: 37, offset: 88223},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
											&litMatcher{
												pos:        position{line: 2530, col: 43, offset: 88229},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2256, col: 24, offset: 77414},
							label: "nodesI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2256, col: 31, offset: 77421},
								expr: &ruleRefExpr{
									pos:  position{line: 2256, col: 31, offset: 77421},
									name: "BracketTextTextNode",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 2256, col: 52, offset: 77442},
							expr: &seqExpr{
								pos: position{line: 2507, col: 23, offset: 87381},
								exprs: []any{
									&zeroOrMoreExpr{
										pos: position{line: 2507, col: 23, offset: 87381},
										expr: &charClassMatcher{
											pos:        position{line: 2529, col: 37, offset: 88181},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 2507, col: 27, offset: 87385},
										alternatives: []any{
											&seqExpr{
												pos: position{line: 2507, col: 27, offset: 87385},
												exprs: []any{
													&zeroOrOneExpr{
														pos: position{line: 2507, col: 27, offset: 87385},
														expr: &litMatcher{
															pos:        position{line: 2507, col: 27, offset: 87385},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&litMatcher{
														pos:        position{line: 2507, col: 33, offset: 87391},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
												},
											},
											&notExpr{
												pos: position{line: 2506, col: 23, offset: 87356},
												expr: &anyMatcher{
													line: 2506, col: 24, offset: 87357,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpolationValueLine",
			pos:  position{line: 2259, col: 1, offset: 77511},
			expr: &actionExpr{
				pos: position{line: 2259, col: 27, offset: 77537},
				run: (*parser).callonInterpolationValueLine1,
				expr: &labeledExpr{
					pos:   position{line: 2259, col: 27, offset: 77537},
					label: "nodesI",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2259, col: 34, offset: 77544},
						expr: &ruleRefExpr{
							pos:  position{line: 2259, col: 34, offset: 77544},
							name: "InterpolationValueTextNode",
						},
					},
				},
			},
		},
		{
			name: "ArrowBlockTextNode",
			pos:  position{line: 2267, col: 1, offset: 77820},
			expr: &choiceExpr{
				pos: position{line: 2267, col: 31, offset: 77850},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2275, col: 19, offset: 78210},
						run: (*parser).callonArrowBlockTextNode2,
						expr: &labeledExpr{
							pos:   position{line: 2275, col: 19, offset: 78210},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2275, col: 25, offset: 78216},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 26, offset: 78217},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2275, col: 26, offset: 78217},
											expr: &seqExpr{
												pos: position{line: 2275, col: 27, offset: 78218},
												exprs: []any{
													&notExpr{
														pos: position{line: 2275, col: 27, offset: 78218},
														expr: &seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2275, col: 32, offset: 78223},
														val:        "[^#]",
														chars:      []rune{'#'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 2296, col: 25, offset: 78750},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2296, col: 25, offset: 78750},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&choiceExpr{
													pos: position{line: 2532, col: 20, offset: 88254},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2532, col: 31, offset: 88265},
																	run: (*parser).callonArrowBlockTextNode25,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2530, col: 37, offset: 88223},
																	expr: &litMatcher{
																		pos:        position{line: 2530, col: 37, offset: 88223},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2530, col: 43, offset: 88229},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2267, col: 48, offset: 77867},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "BracketTextTextNode",
			pos:  position{line: 2268, col: 1, offset: 77881},
			expr: &choiceExpr{
				pos: position{line: 2268, col: 31, offset: 77911},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2282, col: 20, offset: 78372},
						run: (*parser).callonBracketTextTextNode2,
						expr: &labeledExpr{
							pos:   position{line: 2282, col: 20, offset: 78372},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2282, col: 26, offset: 78378},
								expr: &choiceExpr{
									pos: position{line: 2282, col: 27, offset: 78379},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2282, col: 27, offset: 78379},
											expr: &seqExpr{
												pos: position{line: 2282, col: 28, offset: 78380},
												exprs: []any{
													&notExpr{
														pos: position{line: 2282, col: 28, offset: 78380},
														expr: &choiceExpr{
															pos: position{line: 2282, col: 30, offset: 78382},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2507, col: 23, offset: 87381},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							expr: &litMatcher{
																								pos:        position{line: 2507, col: 27, offset: 87385},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2507, col: 33, offset: 87391},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2506, col: 23, offset: 87356},
																					expr: &anyMatcher{
																						line: 2506, col: 24, offset: 87357,
																					},
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2282, col: 36, offset: 78388},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2282, col: 36, offset: 78388},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2545, col: 14, offset: 88829},
																			run: (*parser).callonBracketTextTextNode23,
																			expr: &seqExpr{
																				pos: position{line: 2545, col: 14, offset: 88829},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 2545, col: 14, offset: 88829},
																						label: "posI",
																						expr: &actionExpr{
																							pos: position{line: 2519, col: 8, offset: 87865},
																							run: (*parser).callonBracketTextTextNode26,
																							expr: &choiceExpr{
																								pos: position{line: 2519, col: 9, offset: 87866},
																								alternatives: []any{
																									&andExpr{
																										pos: position{line: 2519, col: 9, offset: 87866},
																										expr: &anyMatcher{
																											line: 2519, col: 10, offset: 87867,
																										},
																									},
																									&notExpr{
																										pos: position{line: 2519, col: 14, offset: 87871},
																										expr: &anyMatcher{
																											line: 2519, col: 15, offset: 87872,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2545, col: 23, offset: 88838},
																						val:        "]",
																						ignoreCase: false,
																						want:       "\"]\"",
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2509, col: 27, offset: 87467},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 2507, col: 23, offset: 87381},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 2507, col: 23, offset: 87381},
																							expr: &charClassMatcher{
																								pos:        position{line: 2529, col: 37, offset: 88181},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2507, col: 27, offset: 87385},
																							alternatives: []any{
																								&seqExpr{
																									pos: position{line: 2507, col: 27, offset: 87385},
																									exprs: []any{
																										&zeroOrOneExpr{
																											pos: position{line: 2507, col: 27, offset: 87385},
																											expr: &litMatcher{
																												pos:        position{line: 2507, col: 27, offset: 87385},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 2507, col: 33, offset: 87391},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2506, col: 23, offset: 87356},
																									expr: &anyMatcher{
																										line: 2506, col: 24, offset: 87357,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2509, col: 33, offset: 87473},
																					val:        ";",
																					ignoreCase: false,
																					want:       "\";\"",
																				},
																				&andExpr{
																					pos: position{line: 2509, col: 39, offset: 87479},
																					expr: &seqExpr{
																						pos: position{line: 2509, col: 41, offset: 87481},
																						exprs: []any{
																							&zeroOrMoreExpr{
																								pos: position{line: 2509, col: 41, offset: 87481},
																								expr: &charClassMatcher{
																									pos:        position{line: 2529, col: 37, offset: 88181},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2509, col: 45, offset: 87485},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2509, col: 45, offset: 87485},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2509, col: 51, offset: 87491},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2282, col: 54, offset: 78406},
														val:        "[^#]]",
														chars:      []rune{'#', ']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 2296, col: 25, offset: 78750},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2296, col: 25, offset: 78750},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&choiceExpr{
													pos: position{line: 2532, col: 20, offset: 88254},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2532, col: 31, offset: 88265},
																	run: (*parser).callonBracketTextTextNode58,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2530, col: 37, offset: 88223},
																	expr: &litMatcher{
																		pos:        position{line: 2530, col: 37, offset: 88223},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2530, col: 43, offset: 88229},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 2282, col: 88, offset: 78440},
											exprs: []any{
												&actionExpr{
													pos: position{line: 2545, col: 14, offset: 88829},
													run: (*parser).callonBracketTextTextNode63,
													expr: &seqExpr{
														pos: position{line: 2545, col: 14, offset: 88829},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 2545, col: 14, offset: 88829},
																label: "posI",
																expr: &actionExpr{
																	pos: position{line: 2519, col: 8, offset: 87865},
																	run: (*parser).callonBracketTextTextNode66,
																	expr: &choiceExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		alternatives: []any{
																			&andExpr{
																				pos: position{line: 2519, col: 9, offset: 87866},
																				expr: &anyMatcher{
																					line: 2519, col: 10, offset: 87867,
																				},
																			},
																			&notExpr{
																				pos: position{line: 2519, col: 14, offset: 87871},
																				expr: &anyMatcher{
																					line: 2519, col: 15, offset: 87872,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2545, col: 23, offset: 88838},
																val:        "]",
																ignoreCase: false,
																want:       "\"]\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2282, col: 98, offset: 78450},
													expr: &choiceExpr{
														pos: position{line: 2509, col: 27, offset: 87467},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2507, col: 23, offset: 87381},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 2507, col: 23, offset: 87381},
																		expr: &charClassMatcher{
																			pos:        position{line: 2529, col: 37, offset: 88181},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2507, col: 27, offset: 87385},
																		alternatives: []any{
																			&seqExpr{
																				pos: position{line: 2507, col: 27, offset: 87385},
																				exprs: []any{
																					&zeroOrOneExpr{
																						pos: position{line: 2507, col: 27, offset: 87385},
																						expr: &litMatcher{
																							pos:        position{line: 2507, col: 27, offset: 87385},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 2507, col: 33, offset: 87391},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2506, col: 23, offset: 87356},
																				expr: &anyMatcher{
																					line: 2506, col: 24, offset: 87357,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 2509, col: 33, offset: 87473},
																val:        ";",
																ignoreCase: false,
																want:       "\";\"",
															},
															&andExpr{
																pos: position{line: 2509, col: 39, offset: 87479},
																expr: &seqExpr{
																	pos: position{line: 2509, col: 41, offset: 87481},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 2509, col: 41, offset: 87481},
																			expr: &charClassMatcher{
																				pos:        position{line: 2529, col: 37, offset: 88181},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2509, col: 45, offset: 87485},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2509, col: 45, offset: 87485},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2509, col: 51, offset: 87491},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2268, col: 49, offset: 77929},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "InterpolationValueTextNode",
			pos:  position{line: 2269, col: 1, offset: 77943},
			expr: &choiceExpr{
				pos: position{line: 2269, col: 31, offset: 77973},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2289, col: 27, offset: 78581},
						run: (*parser).callonInterpolationValueTextNode2,
						expr: &labeledExpr{
							pos:   position{line: 2289, col: 27, offset: 78581},
							label: "textI",
							expr: &oneOrMoreExpr{
								pos: position{line: 2289, col: 33, offset: 78587},
								expr: &choiceExpr{
									pos: position{line: 2289, col: 34, offset: 78588},
									alternatives: []any{
										&oneOrMoreExpr{
											pos: position{line: 2289, col: 34, offset: 78588},
											expr: &seqExpr{
												pos: position{line: 2289, col: 35, offset: 78589},
												exprs: []any{
													&notExpr{
														pos: position{line: 2289, col: 35, offset: 78589},
														expr: &seqExpr{
															pos: position{line: 2507, col: 23, offset: 87381},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 2507, col: 23, offset: 87381},
																	expr: &charClassMatcher{
																		pos:        position{line: 2529, col: 37, offset: 88181},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&choiceExpr{
																	pos: position{line: 2507, col: 27, offset: 87385},
																	alternatives: []any{
																		&seqExpr{
																			pos: position{line: 2507, col: 27, offset: 87385},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2507, col: 27, offset: 87385},
																					expr: &litMatcher{
																						pos:        position{line: 2507, col: 27, offset: 87385},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 2507, col: 33, offset: 87391},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2506, col: 23, offset: 87356},
																			expr: &anyMatcher{
																				line: 2506, col: 24, offset: 87357,
																			},
																		},
																	},
																},
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 2289, col: 40, offset: 78594},
														val:        "[^#]]",
														chars:      []rune{'#', ']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 2296, col: 25, offset: 78750},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2296, col: 25, offset: 78750},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&choiceExpr{
													pos: position{line: 2532, col: 20, offset: 88254},
													alternatives: []any{
														&charClassMatcher{
															pos:        position{line: 2529, col: 37, offset: 88181},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 2532, col: 31, offset: 88265},
															exprs: []any{
																&andCodeExpr{
																	pos: position{line: 2532, col: 31, offset: 88265},
																	run: (*parser).callonInterpolationValueTextNode25,
																},
																&zeroOrOneExpr{
																	pos: position{line: 2530, col: 37, offset: 88223},
																	expr: &litMatcher{
																		pos:        position{line: 2530, col: 37, offset: 88223},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&litMatcher{
																	pos:        position{line: 2530, col: 43, offset: 88229},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2269, col: 56, offset: 77998},
						name: "Interpolation",
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 2302, col: 1, offset: 78946},
			expr: &actionExpr{
				pos: position{line: 2302, col: 18, offset: 78963},
				run: (*parser).callonInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2302, col: 18, offset: 78963},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2308, col: 23, offset: 79248},
							run: (*parser).callonInterpolation3,
							expr: &seqExpr{
								pos: position{line: 2308, col: 23, offset: 79248},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonInterpolation5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonInterpolation11,
									},
									&labeledExpr{
										pos:   position{line: 2308, col: 33, offset: 79258},
										label: "startI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonInterpolation13,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2308, col: 44, offset: 79269},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2302, col: 37, offset: 78982},
							label: "interpI",
							expr: &ruleRefExpr{
								pos:  position{line: 2302, col: 45, offset: 78990},
								name: "interpolation",
							},
						},
						&actionExpr{
							pos: position{line: 2309, col: 23, offset: 79334},
							run: (*parser).callonInterpolation22,
							expr: &seqExpr{
								pos: position{line: 2309, col: 23, offset: 79334},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 2309, col: 23, offset: 79334},
										label: "endI",
										expr: &actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).callonInterpolation25,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2592, col: 13, offset: 90451},
										run: (*parser).callonInterpolation31,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "interpolation",
			pos:  position{line: 2305, col: 1, offset: 79049},
			expr: &choiceExpr{
				pos: position{line: 2305, col: 18, offset: 79066},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2315, col: 16, offset: 79592},
						run: (*parser).calloninterpolation2,
						expr: &litMatcher{
							pos:        position{line: 2315, col: 16, offset: 79592},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
					&actionExpr{
						pos: position{line: 2323, col: 14, offset: 79856},
						run: (*parser).calloninterpolation4,
						expr: &litMatcher{
							pos:        position{line: 2323, col: 14, offset: 79856},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
					&actionExpr{
						pos: position{line: 2331, col: 23, offset: 80136},
						run: (*parser).calloninterpolation6,
						expr: &seqExpr{
							pos: position{line: 2331, col: 23, offset: 80136},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2331, col: 23, offset: 80136},
									label: "nameI",
									expr: &actionExpr{
										pos: position{line: 2337, col: 27, offset: 80312},
										run: (*parser).calloninterpolation9,
										expr: &oneOrMoreExpr{
											pos: position{line: 2337, col: 27, offset: 80312},
											expr: &charClassMatcher{
												pos:        position{line: 2337, col: 27, offset: 80312},
												val:        "[a-zA-Z]",
												ranges:     []rune{'a', 'z', 'A', 'Z'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2331, col: 52, offset: 80165},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2305, col: 65, offset: 79113},
						name: "ExpressionInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 2306, col: 18, offset: 79156},
						name: "ElementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 2306, col: 41, offset: 79179},
						name: "ComponentCallInterpolation",
					},
					&actionExpr{
						pos: position{line: 2491, col: 21, offset: 86690},
						run: (*parser).calloninterpolation16,
						expr: &litMatcher{
							pos:        position{line: 2491, col: 21, offset: 86690},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "ExpressionInterpolation",
			pos:  position{line: 2345, col: 1, offset: 80557},
			expr: &actionExpr{
				pos: position{line: 2345, col: 28, offset: 80584},
				run: (*parser).callonExpressionInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2345, col: 28, offset: 80584},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2345, col: 28, offset: 80584},
							label: "fmtDirectiveI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2345, col: 42, offset: 80598},
								expr: &choiceExpr{
									pos: position{line: 2378, col: 17, offset: 81991},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 2378, col: 17, offset: 81991},
											run: (*parser).callonExpressionInterpolation6,
											expr: &seqExpr{
												pos: position{line: 2378, col: 17, offset: 81991},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2378, col: 17, offset: 81991},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2378, col: 21, offset: 81995},
														expr: &charClassMatcher{
															pos:        position{line: 2390, col: 12, offset: 82570},
															val:        "[-+# 0]",
															chars:      []rune{'-', '+', '#', ' ', '0'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 2378, col: 30, offset: 82004},
														expr: &seqExpr{
															pos: position{line: 2378, col: 31, offset: 82005},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 2378, col: 31, offset: 82005},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2378, col: 36, offset: 82010},
																	expr: &charClassMatcher{
																		pos:        position{line: 2378, col: 36, offset: 82010},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 2378, col: 45, offset: 82019},
														expr: &seqExpr{
															pos: position{line: 2378, col: 46, offset: 82020},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 2378, col: 46, offset: 82020},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2378, col: 50, offset: 82024},
																	expr: &charClassMatcher{
																		pos:        position{line: 2378, col: 50, offset: 82024},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2391, col: 12, offset: 82589},
														alternatives: []any{
															&charClassMatcher{
																pos:        position{line: 2391, col: 12, offset: 82589},
																val:        "[bcdeEfFgGoOpqstTUvX]",
																chars:      []rune{'b', 'c', 'd', 'e', 'E', 'f', 'F', 'g', 'G', 'o', 'O', 'p', 'q', 's', 't', 'T', 'U', 'v', 'X'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 2391, col: 36, offset: 82613},
																run: (*parser).callonExpressionInterpolation23,
																expr: &andExpr{
																	pos: position{line: 2391, col: 36, offset: 82613},
																	expr: &charClassMatcher{
																		pos:        position{line: 2391, col: 38, offset: 82615},
																		val:        "[{\"`]",
																		chars:      []rune{'{', '"', '`'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2400, col: 5, offset: 83074},
																run: (*parser).callonExpressionInterpolation26,
																expr: &anyMatcher{
																	line: 2400, col: 5, offset: 83074,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2380, col: 5, offset: 82082},
											run: (*parser).callonExpressionInterpolation28,
											expr: &seqExpr{
												pos: position{line: 2380, col: 5, offset: 82082},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2380, col: 5, offset: 82082},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2380, col: 9, offset: 82086},
														expr: &charClassMatcher{
															pos:        position{line: 2380, col: 9, offset: 82086},
															val:        "[^`\"{]",
															chars:      []rune{'`', '"', '{'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&labeledExpr{
														pos:   position{line: 2380, col: 17, offset: 82094},
														label: "endI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonExpressionInterpolation34,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2345, col: 56, offset: 80612},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2345, col: 62, offset: 80618},
								name: "interpolationExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "interpolationExpression",
			pos:  position{line: 2352, col: 1, offset: 80832},
			expr: &actionExpr{
				pos: position{line: 2352, col: 28, offset: 80859},
				run: (*parser).calloninterpolationExpression1,
				expr: &seqExpr{
					pos: position{line: 2352, col: 28, offset: 80859},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2352, col: 28, offset: 80859},
							label: "lBraceI",
							expr: &actionExpr{
								pos: position{line: 2359, col: 33, offset: 81184},
								run: (*parser).calloninterpolationExpression4,
								expr: &seqExpr{
									pos: position{line: 2359, col: 33, offset: 81184},
									exprs: []any{
										&actionExpr{
											pos: position{line: 2519, col: 8, offset: 87865},
											run: (*parser).calloninterpolationExpression6,
											expr: &choiceExpr{
												pos: position{line: 2519, col: 9, offset: 87866},
												alternatives: []any{
													&andExpr{
														pos: position{line: 2519, col: 9, offset: 87866},
														expr: &anyMatcher{
															line: 2519, col: 10, offset: 87867,
														},
													},
													&notExpr{
														pos: position{line: 2519, col: 14, offset: 87871},
														expr: &anyMatcher{
															line: 2519, col: 15, offset: 87872,
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 2586, col: 18, offset: 90318},
											run: (*parser).calloninterpolationExpression12,
										},
										&labeledExpr{
											pos:   position{line: 2359, col: 43, offset: 81194},
											label: "lBraceI",
											expr: &actionExpr{
												pos: position{line: 2541, col: 12, offset: 88641},
												run: (*parser).calloninterpolationExpression14,
												expr: &seqExpr{
													pos: position{line: 2541, col: 12, offset: 88641},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 2541, col: 12, offset: 88641},
															label: "posI",
															expr: &actionExpr{
																pos: position{line: 2519, col: 8, offset: 87865},
																run: (*parser).calloninterpolationExpression17,
																expr: &choiceExpr{
																	pos: position{line: 2519, col: 9, offset: 87866},
																	alternatives: []any{
																		&andExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			expr: &anyMatcher{
																				line: 2519, col: 10, offset: 87867,
																			},
																		},
																		&notExpr{
																			pos: position{line: 2519, col: 14, offset: 87871},
																			expr: &anyMatcher{
																				line: 2519, col: 15, offset: 87872,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 2541, col: 21, offset: 88650},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2352, col: 65, offset: 80896},
							label: "exprI",
							expr: &ruleRefExpr{
								pos:  position{line: 2352, col: 71, offset: 80902},
								name: "InlineExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 2352, col: 88, offset: 80919},
							label: "rBraceI",
							expr: &choiceExpr{
								pos: position{line: 2360, col: 31, offset: 81280},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2360, col: 31, offset: 81280},
										run: (*parser).calloninterpolationExpression28,
										expr: &seqExpr{
											pos: position{line: 2360, col: 31, offset: 81280},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2360, col: 31, offset: 81280},
													label: "rBraceI",
													expr: &actionExpr{
														pos: position{line: 2542, col: 12, offset: 88702},
														run: (*parser).calloninterpolationExpression31,
														expr: &seqExpr{
															pos: position{line: 2542, col: 12, offset: 88702},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2542, col: 12, offset: 88702},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).calloninterpolationExpression34,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2542, col: 21, offset: 88711},
																	val:        "}",
																	ignoreCase: false,
																	want:       "\"}\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).calloninterpolationExpression41,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2362, col: 5, offset: 81351},
										run: (*parser).calloninterpolationExpression42,
										expr: &labeledExpr{
											pos:   position{line: 2362, col: 5, offset: 81351},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).calloninterpolationExpression44,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementInterpolation",
			pos:  position{line: 2415, col: 1, offset: 83712},
			expr: &choiceExpr{
				pos: position{line: 2415, col: 25, offset: 83736},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2415, col: 25, offset: 83736},
						name: "elementInterpolation",
					},
					&ruleRefExpr{
						pos:  position{line: 2415, col: 48, offset: 83759},
						name: "voidElementInterpolation",
					},
				},
			},
		},
		{
			name: "elementInterpolation",
			pos:  position{line: 2417, col: 1, offset: 83785},
			expr: &actionExpr{
				pos: position{line: 2417, col: 25, offset: 83809},
				run: (*parser).callonelementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2417, col: 25, offset: 83809},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2417, col: 25, offset: 83809},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1917, col: 16, offset: 66519},
								expr: &charClassMatcher{
									pos:        position{line: 1903, col: 27, offset: 65858},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2649, col: 16, offset: 92419},
							run: (*parser).callonelementInterpolation6,
						},
						&labeledExpr{
							pos:   position{line: 2417, col: 55, offset: 83839},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2417, col: 62, offset: 83846},
								expr: &ruleRefExpr{
									pos:  position{line: 2417, col: 62, offset: 83846},
									name: "AttributeCollection",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2656, col: 14, offset: 92518},
							run: (*parser).callonelementInterpolation10,
						},
						&labeledExpr{
							pos:   position{line: 2417, col: 93, offset: 83877},
							label: "valI",
							expr: &zeroOrOneExpr{
								pos: position{line: 2417, col: 98, offset: 83882},
								expr: &ruleRefExpr{
									pos:  position{line: 2417, col: 98, offset: 83882},
									name: "InterpolationValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "voidElementInterpolation",
			pos:  position{line: 2429, col: 1, offset: 84225},
			expr: &actionExpr{
				pos: position{line: 2429, col: 29, offset: 84253},
				run: (*parser).callonvoidElementInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2429, col: 29, offset: 84253},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2429, col: 29, offset: 84253},
							label: "nameI",
							expr: &oneOrMoreExpr{
								pos: position{line: 1917, col: 16, offset: 66519},
								expr: &charClassMatcher{
									pos:        position{line: 1903, col: 27, offset: 65858},
									val:        "[0-9A-Za-z]",
									ranges:     []rune{'0', '9', 'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2429, col: 47, offset: 84271},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&stateCodeExpr{
							pos: position{line: 2649, col: 16, offset: 92419},
							run: (*parser).callonvoidElementInterpolation7,
						},
						&labeledExpr{
							pos:   position{line: 2429, col: 63, offset: 84287},
							label: "attrsI",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2429, col: 70, offset: 84294},
								expr: &ruleRefExpr{
									pos:  position{line: 2429, col: 70, offset: 84294},
									name: "AttributeCollection",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 2656, col: 14, offset: 92518},
							run: (*parser).callonvoidElementInterpolation11,
						},
					},
				},
			},
		},
		{
			name: "ComponentCallInterpolation",
			pos:  position{line: 2445, col: 1, offset: 84821},
			expr: &actionExpr{
				pos: position{line: 2445, col: 31, offset: 84851},
				run: (*parser).callonComponentCallInterpolation1,
				expr: &seqExpr{
					pos: position{line: 2445, col: 31, offset: 84851},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2445, col: 31, offset: 84851},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&stateCodeExpr{
							pos: position{line: 2649, col: 16, offset: 92419},
							run: (*parser).callonComponentCallInterpolation4,
						},
						&labeledExpr{
							pos:   position{line: 2445, col: 47, offset: 84867},
							label: "callI",
							expr: &ruleRefExpr{
								pos:  position{line: 2445, col: 53, offset: 84873},
								name: "ComponentCallHeader",
							},
						},
						&stateCodeExpr{
							pos: position{line: 2656, col: 14, offset: 92518},
							run: (*parser).callonComponentCallInterpolation7,
						},
						&labeledExpr{
							pos:   position{line: 2445, col: 83, offset: 84903},
							label: "valI",
							expr: &choiceExpr{
								pos: position{line: 2445, col: 89, offset: 84909},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2445, col: 89, offset: 84909},
										name: "InterpolationValue",
									},
									&stateCodeExpr{
										pos: position{line: 2592, col: 13, offset: 90451},
										run: (*parser).callonComponentCallInterpolation11,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InterpolationValue",
			pos:  position{line: 2460, col: 1, offset: 85389},
			expr: &actionExpr{
				pos: position{line: 2460, col: 23, offset: 85411},
				run: (*parser).callonInterpolationValue1,
				expr: &seqExpr{
					pos: position{line: 2460, col: 23, offset: 85411},
					exprs: []any{
						&actionExpr{
							pos: position{line: 2468, col: 28, offset: 85684},
							run: (*parser).callonInterpolationValue3,
							expr: &seqExpr{
								pos: position{line: 2468, col: 28, offset: 85684},
								exprs: []any{
									&actionExpr{
										pos: position{line: 2519, col: 8, offset: 87865},
										run: (*parser).callonInterpolationValue5,
										expr: &choiceExpr{
											pos: position{line: 2519, col: 9, offset: 87866},
											alternatives: []any{
												&andExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													expr: &anyMatcher{
														line: 2519, col: 10, offset: 87867,
													},
												},
												&notExpr{
													pos: position{line: 2519, col: 14, offset: 87871},
													expr: &anyMatcher{
														line: 2519, col: 15, offset: 87872,
													},
												},
											},
										},
									},
									&stateCodeExpr{
										pos: position{line: 2586, col: 18, offset: 90318},
										run: (*parser).callonInterpolationValue11,
									},
									&labeledExpr{
										pos:   position{line: 2468, col: 38, offset: 85694},
										label: "lBracketI",
										expr: &actionExpr{
											pos: position{line: 2544, col: 14, offset: 88766},
											run: (*parser).callonInterpolationValue13,
											expr: &seqExpr{
												pos: position{line: 2544, col: 14, offset: 88766},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 2544, col: 14, offset: 88766},
														label: "posI",
														expr: &actionExpr{
															pos: position{line: 2519, col: 8, offset: 87865},
															run: (*parser).callonInterpolationValue16,
															expr: &choiceExpr{
																pos: position{line: 2519, col: 9, offset: 87866},
																alternatives: []any{
																	&andExpr{
																		pos: position{line: 2519, col: 9, offset: 87866},
																		expr: &anyMatcher{
																			line: 2519, col: 10, offset: 87867,
																		},
																	},
																	&notExpr{
																		pos: position{line: 2519, col: 14, offset: 87871},
																		expr: &anyMatcher{
																			line: 2519, col: 15, offset: 87872,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 2544, col: 23, offset: 88775},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2460, col: 47, offset: 85435},
							label: "valI",
							expr: &ruleRefExpr{
								pos:  position{line: 2460, col: 52, offset: 85440},
								name: "InterpolationValueLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2460, col: 75, offset: 85463},
							label: "rBracketI",
							expr: &choiceExpr{
								pos: position{line: 2469, col: 26, offset: 85781},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2469, col: 26, offset: 85781},
										run: (*parser).callonInterpolationValue27,
										expr: &seqExpr{
											pos: position{line: 2469, col: 26, offset: 85781},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2469, col: 26, offset: 85781},
													label: "rBracketI",
													expr: &actionExpr{
														pos: position{line: 2545, col: 14, offset: 88829},
														run: (*parser).callonInterpolationValue30,
														expr: &seqExpr{
															pos: position{line: 2545, col: 14, offset: 88829},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2545, col: 14, offset: 88829},
																	label: "posI",
																	expr: &actionExpr{
																		pos: position{line: 2519, col: 8, offset: 87865},
																		run: (*parser).callonInterpolationValue33,
																		expr: &choiceExpr{
																			pos: position{line: 2519, col: 9, offset: 87866},
																			alternatives: []any{
																				&andExpr{
																					pos: position{line: 2519, col: 9, offset: 87866},
																					expr: &anyMatcher{
																						line: 2519, col: 10, offset: 87867,
																					},
																				},
																				&notExpr{
																					pos: position{line: 2519, col: 14, offset: 87871},
																					expr: &anyMatcher{
																						line: 2519, col: 15, offset: 87872,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2545, col: 23, offset: 88838},
																	val:        "]",
																	ignoreCase: false,
																	want:       "\"]\"",
																},
															},
														},
													},
												},
												&stateCodeExpr{
													pos: position{line: 2592, col: 13, offset: 90451},
													run: (*parser).callonInterpolationValue40,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2471, col: 5, offset: 85858},
										run: (*parser).callonInterpolationValue41,
										expr: &labeledExpr{
											pos:   position{line: 2471, col: 5, offset: 85858},
											label: "posI",
											expr: &actionExpr{
												pos: position{line: 2519, col: 8, offset: 87865},
												run: (*parser).callonInterpolationValue43,
												expr: &choiceExpr{
													pos: position{line: 2519, col: 9, offset: 87866},
													alternatives: []any{
														&andExpr{
															pos: position{line: 2519, col: 9, offset: 87866},
															expr: &anyMatcher{
																line: 2519, col: 10, offset: 87867,
															},
														},
														&notExpr{
															pos: position{line: 2519, col: 14, offset: 87871},
															expr: &anyMatcher{
																line: 2519, col: 15, offset: 87872,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "INDENTATION2",
			pos:  position{line: 2563, col: 1, offset: 89543},
			expr: &choiceExpr{
				pos: position{line: 2563, col: 17, offset: 89559},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2563, col: 17, offset: 89559},
						exprs: []any{
							&andCodeExpr{
								pos: position{line: 2563, col: 17, offset: 89559},
								run: (*parser).callonINDENTATION23,
							},
							&charClassMatcher{
								pos:        position{line: 2529, col: 37, offset: 88181},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
							&stateCodeExpr{
								pos: position{line: 2565, col: 5, offset: 89641},
								run: (*parser).callonINDENTATION25,
							},
							&ruleRefExpr{
								pos:  position{line: 2570, col: 3, offset: 89734},
								name: "INDENTATION2",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2570, col: 18, offset: 89749},
						exprs: []any{
							&andCodeExpr{
								pos: position{line: 2570, col: 18, offset: 89749},
								run: (*parser).callonINDENTATION28,
							},
							&litMatcher{
								pos:        position{line: 2572, col: 3, offset: 89830},
								val:        "  ",
								ignoreCase: false,
								want:       "\"  \"",
							},
							&stateCodeExpr{
								pos: position{line: 2572, col: 8, offset: 89835},
								run: (*parser).callonINDENTATION210,
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onAST3() error {
	newState(c)
	return nil
}

func (p *parser) callonAST3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST3()
}

func (c *current) onAST16(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAST16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST16(stack["textI"])
}

func (c *current) onAST5(commentsI any) (any, error) {
	commentIs := slice(commentsI)
	comments := make([]*ast.DevComment, 0, len(commentIs))
	for _, cI := range commentIs {
		if c, ok := cI.(*ast.DevComment); ok {
			comments = append(comments, c)
		}
	}
	comments = comments[:len(comments):len(comments)]
	return comments, nil
}

func (p *parser) callonAST5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST5(stack["commentsI"])
}

func (c *current) onAST63(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonAST63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST63(stack["identI"])
}

func (c *current) onAST60(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonAST60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST60(stack["identI"])
}

func (c *current) onAST78() (any, error) {
	return (*ast.Ident)(nil), &fileerr.Error{
		Message: "missing package name",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Highlight:  anno.HighlightPosition(pos(c)).Delta(1, 1),
			Annotation: "expected a package name",
		}),
		Example: "`package woof`",
	}
}

func (p *parser) callonAST78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST78()
}

func (c *current) onAST92() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAST92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST92()
}

func (c *current) onAST99(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonAST99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST99(stack["unexpectedI"])
}

func (c *current) onAST89(startI, identI any) (any, error) {
	return invalidIdent(c, "package", *startI.(*ast.Position), identI.(string))
}

func (p *parser) callonAST89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST89(stack["startI"], stack["identI"])
}

func (c *current) onAST53(nameI any) (any, error) {
	return &ast.PackageDirective{
		Name:     nameI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonAST53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST53(stack["nameI"])
}

func (c *current) onAST144() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAST144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST144()
}

func (c *current) onAST143() (any, error) {
	return (*ast.PackageDirective)(nil), &fileerr.Error{
		Message: "missing package directive",
		ErrorAnnotation: anno.ToEOL(file(c), pos(c),
			"expected `package` directive as first non-comment, found this instead"),
		Example: "`package woof`",
	}
}

func (p *parser) callonAST143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST143()
}

func (c *current) onAST1(docI, pkgI, scopeI any) (any, error) {
	f := file(c)
	f.PackageDoc = optCast[[]*ast.DevComment](docI)
	f.PackageDirective = optCast[*ast.PackageDirective](pkgI)
	f.Scope = scopeI.(*ast.Scope)
	return f.AST, nil
}

func (p *parser) callonAST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAST1(stack["docI"], stack["pkgI"], stack["scopeI"])
}

func (c *current) onAnd1(collsI any) (any, error) {
	return &ast.And{
		Attributes: collsI.([]ast.AttributeCollection),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd1(stack["collsI"])
}

func (c *current) onandAttributes6(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonandAttributes6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes6(stack["unexpectedI"])
}

func (c *current) onandAttributes42() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonandAttributes42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes42()
}

func (c *current) onandAttributes4(unexpectedI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "bad attribute syntax",
		ErrorAnnotation: annoRange(c, pos(c), endI, "this is not a valid attribute list"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if there is, remove any whitespace between class/id shorthands and attribute lists",
				Example:    "`&#bark .woof (title=\"howl\")`",
				ShouldBe:   "`&#bark.woof(title=\"howl\")`",
			},
			{Suggestion: "write a class shorthand", Example: "`&.woof`"},
			{Suggestion: "write an id shorthand", Example: "`&#bark`"},
			{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
		},
	}
}

func (p *parser) callonandAttributes4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes4(stack["unexpectedI"], stack["endI"])
}

func (c *current) onandAttributes49(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonandAttributes49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes49(stack["unexpectedI"])
}

func (c *current) onandAttributes48(unexpectedI any) (any, error) {
	return ([]*ast.AttributeCollection)(nil), &fileerr.Error{
		Message:         "`&` with no attributes",
		ErrorAnnotation: annoPos(c, "expected attributes"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "write a class shorthand", Example: "`&.woof`"},
			{Suggestion: "write an id shorthand", Example: "`&#bark`"},
			{Suggestion: "write an attribute list", Example: "`&(src=\"bark/woof\", title=\"howl\")`"},
		},
	}
}

func (p *parser) callonandAttributes48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandAttributes48(stack["unexpectedI"])
}

func (c *current) onAttributeCollection1(attrsI any) (any, error) {
	return sliceOf[*ast.AttributeCollection](attrsI), nil
}

func (p *parser) callonAttributeCollection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeCollection1(stack["attrsI"])
}

func (c *current) onattributeCollection12() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonattributeCollection12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection12()
}

func (c *current) onattributeCollection16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonattributeCollection16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection16()
}

func (c *current) onattributeCollection15() (any, error) {
	return "", &fileerr.Error{
		Message:         "id shorthand: missing id",
		ErrorAnnotation: annoPos(c, "expected an id"),
	}
}

func (p *parser) callonattributeCollection15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection15()
}

func (c *current) onattributeCollection7(idI any) (any, error) {
	return &ast.IDShorthand{
		ID:       idI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonattributeCollection7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection7(stack["idI"])
}

func (c *current) onattributeCollection27() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonattributeCollection27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection27()
}

func (c *current) onattributeCollection31() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonattributeCollection31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection31()
}

func (c *current) onattributeCollection30() (any, error) {
	return "", &fileerr.Error{
		Message:         "class shorthand: missing class name",
		ErrorAnnotation: annoPos(c, "expected a class name"),
	}
}

func (p *parser) callonattributeCollection30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection30()
}

func (c *current) onattributeCollection22(nameI any) (any, error) {
	return &ast.ClassShorthand{
		Name:     nameI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonattributeCollection22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection22(stack["nameI"])
}

func (c *current) onattributeCollection1(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonattributeCollection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributeCollection1(stack["nodeI"])
}

func (c *current) onAttributeList5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList5()
}

func (c *current) onAttributeList11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonAttributeList11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList11()
}

func (c *current) onAttributeList16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList16()
}

func (c *current) onAttributeList13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonAttributeList13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList13(stack["posI"])
}

func (c *current) onAttributeList27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonAttributeList27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList27()
}

func (c *current) onAttributeList3(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonAttributeList3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList3(stack["lParenI"])
}

func (c *current) onAttributeList47() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonAttributeList47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList47()
}

func (c *current) onAttributeList55() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList55()
}

func (c *current) onAttributeList52(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonAttributeList52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList52(stack["posI"])
}

func (c *current) onAttributeList62(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonAttributeList62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList62(stack["rParenI"])
}

func (c *current) onAttributeList36(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonAttributeList36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList36(stack["rParenI"])
}

func (c *current) onAttributeList64() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeList64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList64()
}

func (c *current) onAttributeList63() (any, error) {
	return unclosedList(c, "attribute list")
}

func (p *parser) callonAttributeList63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList63()
}

func (c *current) onAttributeList1(lParenI, attributesI, rParenI any) (any, error) {
	return &ast.AttributeList{
		LParen:     pos(c),
		Attributes: optCast[[]ast.Attribute](attributesI),
		RParen:     rParenI.(*ast.Position),
	}, nil
}

func (p *parser) callonAttributeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeList1(stack["lParenI"], stack["attributesI"], stack["rParenI"])
}

func (c *current) onattributes15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonattributes15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes15()
}

func (c *current) onattributes1(firstI, restI any) (any, error) {
	return collectList[ast.Attribute](firstI, restI, -1), nil
}

func (p *parser) callonattributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattributes1(stack["firstI"], stack["restI"])
}

func (c *current) onAttribute2() (any, error) {
	return &ast.AndPlaceholder{Position: pos(c)}, nil
}

func (p *parser) callonAttribute2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute2()
}

func (c *current) onSimpleAttribute5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSimpleAttribute5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute5()
}

func (c *current) onSimpleAttribute19() (any, error) {
	return string(c.text), &fileerr.Error{
		Message:         "attribute: invalid name",
		ErrorAnnotation: annoCaptured(c, "contains characters not allowed by the HTML5 spec"),
	}
}

func (p *parser) callonSimpleAttribute19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute19()
}

func (c *current) onSimpleAttribute1(nameI, valI any) (any, error) {
	a := valI.(ast.SimpleAttribute)
	a.Name = nameI.(string)
	a.Position = pos(c)
	return &a, nil
}

func (p *parser) callonSimpleAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleAttribute1(stack["nameI"], stack["valI"])
}

func (c *current) onsimpleAttributeValue2() (any, error) {
	return ast.SimpleAttribute{}, nil
}

func (p *parser) callonsimpleAttributeValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue2()
}

func (c *current) onsimpleAttributeValue8() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonsimpleAttributeValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue8()
}

func (c *current) onsimpleAttributeValue19() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonsimpleAttributeValue19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue19()
}

func (c *current) onsimpleAttributeValue5(assignI, valI any) (any, error) {
	return ast.SimpleAttribute{
		Assign: assignI.(*ast.Position),
		Value:  optCast[ast.AttributeValue](valI),
	}, nil
}

func (p *parser) callonsimpleAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsimpleAttributeValue5(stack["assignI"], stack["valI"])
}

func (c *current) onAttributeValue6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonAttributeValue6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue6()
}

func (c *current) onAttributeValue5() (any, error) {
	return nil, &fileerr.Error{
		Message:         "attribute: missing value",
		ErrorAnnotation: annoPos(c, "expected an expression or component call"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you want to write a static boolean attribute, remove the equal sign",
				Example:    "`input(disabled)`",
			},
		},
	}
}

func (p *parser) callonAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue5()
}

func (c *current) onTypedAttributeValue5() (any, error) {
	return attrtype.Plain, nil
}

func (p *parser) callonTypedAttributeValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue5()
}

func (c *current) onTypedAttributeValue7() (any, error) {
	return attrtype.CSS, nil
}

func (p *parser) callonTypedAttributeValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue7()
}

func (c *current) onTypedAttributeValue9() (any, error) {
	return attrtype.JS, nil
}

func (p *parser) callonTypedAttributeValue9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue9()
}

func (c *current) onTypedAttributeValue11() (any, error) {
	return attrtype.URL, nil
}

func (p *parser) callonTypedAttributeValue11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue11()
}

func (c *current) onTypedAttributeValue13() (any, error) {
	return attrtype.URLList, nil
}

func (p *parser) callonTypedAttributeValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue13()
}

func (c *current) onTypedAttributeValue15() (any, error) {
	return attrtype.ResourceURL, nil
}

func (p *parser) callonTypedAttributeValue15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue15()
}

func (c *current) onTypedAttributeValue17() (any, error) {
	return attrtype.Srcset, nil
}

func (p *parser) callonTypedAttributeValue17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue17()
}

func (c *current) onTypedAttributeValue19() (any, error) {
	return attrtype.Unsafe, nil
}

func (p *parser) callonTypedAttributeValue19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue19()
}

func (c *current) onTypedAttributeValue26() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue26()
}

func (c *current) onTypedAttributeValue32() error {
	pushStart(c)
	return nil
}

func (p *parser) callonTypedAttributeValue32() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue32()
}

func (c *current) onTypedAttributeValue37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue37()
}

func (c *current) onTypedAttributeValue34(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue34(stack["posI"])
}

func (c *current) onTypedAttributeValue48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonTypedAttributeValue48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue48()
}

func (c *current) onTypedAttributeValue24(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue24(stack["lParenI"])
}

func (c *current) onTypedAttributeValue67() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonTypedAttributeValue67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue67()
}

func (c *current) onTypedAttributeValue75() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue75()
}

func (c *current) onTypedAttributeValue72(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue72(stack["posI"])
}

func (c *current) onTypedAttributeValue82(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonTypedAttributeValue82() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue82(stack["rParenI"])
}

func (c *current) onTypedAttributeValue56(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonTypedAttributeValue56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue56(stack["rParenI"])
}

func (c *current) onTypedAttributeValue84() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonTypedAttributeValue84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue84()
}

func (c *current) onTypedAttributeValue83() (any, error) {
	return unclosedList(c, "attribute value")
}

func (p *parser) callonTypedAttributeValue83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue83()
}

func (c *current) onTypedAttributeValue1(typeI, lParenI, valI, rParenI any) (any, error) {
	return &ast.TypedAttributeValue{
		Type:     typeI.(attrtype.Type),
		LParen:   lParenI.(*ast.Position),
		Value:    optCast[ast.Expression](valI),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonTypedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedAttributeValue1(stack["typeI"], stack["lParenI"], stack["valI"], stack["rParenI"])
}

func (c *current) onComponentCallAttributeValue4() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallAttributeValue4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue4()
}

func (c *current) onComponentCallAttributeValue7(headerI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallAttributeValue7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue7(stack["headerI"])
}

func (c *current) onComponentCallAttributeValue1(headerI, valueI any) (any, error) {
	return &ast.ComponentCallAttributeValue{
		ComponentCall: headerI.(*ast.ComponentCall),
		Value:         optCast[*ast.InterpolationValue](valueI),
	}, nil
}

func (p *parser) callonComponentCallAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallAttributeValue1(stack["headerI"], stack["valueI"])
}

func (c *current) onType1(typeI any) (any, error) {
	return &ast.Type{Type: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType1(stack["typeI"])
}

func (c *current) onBody2(bodyI any) (any, error) {
	return bodyI, nil
}

func (p *parser) callonBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody2(stack["bodyI"])
}

func (c *current) onBody8() (any, error) {
	return nil, &fileerr.Error{
		Message:         "missing body",
		ErrorAnnotation: annoPos(c, "expected a body"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "start a scope", Example: "`{ ... }`"},
			{Suggestion: "write bracketed text", Example: "`[ woof woof ]`"},
		},
	}
}

func (p *parser) callonBody8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody8()
}

func (c *current) onBody33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBody33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody33()
}

func (c *current) onBody42() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBody42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody42()
}

func (c *current) onBody28(startI, endI, bodyI any) (any, error) {
	return bodyI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
}

func (p *parser) callonBody28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody28(stack["startI"], stack["endI"], stack["bodyI"])
}

func (c *current) onBody57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBody57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody57()
}

func (c *current) onBody63(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonBody63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody63(stack["startI"], stack["unexpectedI"])
}

func (c *current) onBody52(startI, unexpectedI, endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected a body")
}

func (p *parser) callonBody52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBody52(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onOptionalBody2(bodyI any) (any, error) {
	return bodyI, nil
}

func (p *parser) callonOptionalBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody2(stack["bodyI"])
}

func (c *current) onOptionalBody8() (any, error) {
	return nil, nil
}

func (p *parser) callonOptionalBody8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody8()
}

func (c *current) onOptionalBody33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonOptionalBody33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody33()
}

func (c *current) onOptionalBody42() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonOptionalBody42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody42()
}

func (c *current) onOptionalBody28(startI, endI, bodyI any) (any, error) {
	return bodyI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
}

func (p *parser) callonOptionalBody28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody28(stack["startI"], stack["endI"], stack["bodyI"])
}

func (c *current) onOptionalBody57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonOptionalBody57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody57()
}

func (c *current) onOptionalBody63(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonOptionalBody63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody63(stack["startI"], stack["unexpectedI"])
}

func (c *current) onOptionalBody52(startI, unexpectedI, endI any) (any, error) {
	return nil, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected a body, or nothing")
}

func (p *parser) callonOptionalBody52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalBody52(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onGlobalScope5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope5()
}

func (c *current) onGlobalScope11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGlobalScope11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope11()
}

func (c *current) onGlobalScope16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope16()
}

func (c *current) onGlobalScope13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope13(stack["posI"])
}

func (c *current) onGlobalScope27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGlobalScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope27()
}

func (c *current) onGlobalScope3(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope3(stack["lBraceI"])
}

func (c *current) onGlobalScope42() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGlobalScope42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope42()
}

func (c *current) onGlobalScope50() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope50()
}

func (c *current) onGlobalScope47(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope47(stack["posI"])
}

func (c *current) onGlobalScope57(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGlobalScope57() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope57(stack["rBraceI"])
}

func (c *current) onGlobalScope36(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) callonGlobalScope36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope36(stack["rBraceI"])
}

func (c *current) onGlobalScope60() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGlobalScope60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope60()
}

func (c *current) onGlobalScope58(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed `{`",
		ErrorAnnotation: anno.Position(file(c), popStart(c), "expected a closing `}` for this `{`"),
	}
}

func (p *parser) callonGlobalScope58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope58(stack["posI"])
}

func (c *current) onGlobalScope1(lBraceI, nodesI, rBraceI any) (any, error) {
	return &ast.Scope{
		LBrace: pos(c),
		Nodes:  sliceOf[ast.ScopeNode](nodesI),
		RBrace: rBraceI.(*ast.Position),
	}, nil
}

func (p *parser) callonGlobalScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalScope1(stack["lBraceI"], stack["nodesI"], stack["rBraceI"])
}

func (c *current) onglobalScopeNode7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeNode7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode7()
}

func (c *current) onglobalScopeNode17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode17()
}

func (c *current) onglobalScopeNode14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode14(stack["posI"])
}

func (c *current) onglobalScopeNode13(posI any) (any, error) {
	return &ast.BadNode{
			Line:     "}",
			Position: pos(c),
		}, &fileerr.Error{
			Message: "lone brace",
			ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
				Context:    anno.ContextDelta(-1, 1),
				Highlight:  anno.HighlightPosition(pos(c)),
				Annotation: "no matching opening brace",
			}),
		}
}

func (p *parser) callonglobalScopeNode13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode13(stack["posI"])
}

func (c *current) onglobalScopeNode35() (any, error) {
	return ast.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeNode35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode35()
}

func (c *current) onglobalScopeNode43(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeNode43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode43(stack["identI"])
}

func (c *current) onglobalScopeNode40(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonglobalScopeNode40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode40(stack["identI"])
}

func (c *current) onglobalScopeNode51() (any, error) {
	return invalidIdent(c, "import alias", pos(c), string(c.text))
}

func (p *parser) callonglobalScopeNode51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode51()
}

func (c *current) onglobalScopeNode66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode66()
}

func (c *current) onglobalScopeNode72() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode72() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode72()
}

func (c *current) onglobalScopeNode74() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode74()
}

func (c *current) onglobalScopeNode64(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode64(stack["startI"])
}

func (c *current) onglobalScopeNode89() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode89()
}

func (c *current) onglobalScopeNode96(posI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode96() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode96(stack["posI"])
}

func (c *current) onglobalScopeNode86(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode86(stack["posI"])
}

func (c *current) onglobalScopeNode99() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode99()
}

func (c *current) onglobalScopeNode97(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed string literal",
		ErrorAnnotation: anno.Position(file(c), popStart(c), "expected a closing ``` for this ```"),
	}
}

func (p *parser) callonglobalScopeNode97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode97(stack["posI"])
}

func (c *current) onglobalScopeNode62(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Open:     pos(c),
		Quote:    '`',
		Contents: concat(contentsI),
		Close:    endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeNode62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode62(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeNode109() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode109()
}

func (c *current) onglobalScopeNode115() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode115() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode115()
}

func (c *current) onglobalScopeNode117() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode117()
}

func (c *current) onglobalScopeNode107(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode107(stack["startI"])
}

func (c *current) onglobalScopeNode126() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonglobalScopeNode126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode126()
}

func (c *current) onglobalScopeNode138() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode138()
}

func (c *current) onglobalScopeNode144(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode144() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode144(stack["endI"])
}

func (c *current) onglobalScopeNode134(endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode134(stack["endI"])
}

func (c *current) onglobalScopeNode147() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode147()
}

func (c *current) onglobalScopeNode145(endI any) (any, error) {
	start := popStart(c)
	return endI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Highlight:  anno.HighlightToEOL(start).Delta(1, 0),
			Annotation: "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno.Position(file(c), start, "for the string literal started here"),
		},
	}
}

func (p *parser) callonglobalScopeNode145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode145(stack["endI"])
}

func (c *current) onglobalScopeNode105(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Open:     pos(c),
		Quote:    '"',
		Contents: optCast[string](contentsI),
		Close:    endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeNode105() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode105(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeNode30(aliasI, pathI any) (any, error) {
	return &ast.ImportSpec{
		Alias: optCast[*ast.Ident](aliasI),
		Path:  pathI.(*ast.StaticString),
	}, nil
}

func (p *parser) callonglobalScopeNode30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode30(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeNode24(specI any) (any, error) {
	return ast.Import{
		Imports:  []ast.ImportNode{specI.(*ast.ImportSpec)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeNode24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode24(stack["specI"])
}

func (c *current) onglobalScopeNode199() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode199() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode199()
}

func (c *current) onglobalScopeNode205() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode205() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode205()
}

func (c *current) onglobalScopeNode210() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode210()
}

func (c *current) onglobalScopeNode207(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode207() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode207(stack["posI"])
}

func (c *current) onglobalScopeNode221() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeNode221() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode221()
}

func (c *current) onglobalScopeNode197(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode197() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode197(stack["lParenI"])
}

func (c *current) onglobalScopeNode233() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeNode233() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode233()
}

func (c *current) onglobalScopeNode239(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeNode239() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode239(stack["textI"])
}

func (c *current) onglobalScopeNode272() (any, error) {
	return ast.Ident{Ident: ".", Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeNode272() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode272()
}

func (c *current) onglobalScopeNode280(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonglobalScopeNode280() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode280(stack["identI"])
}

func (c *current) onglobalScopeNode277(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonglobalScopeNode277() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode277(stack["identI"])
}

func (c *current) onglobalScopeNode288() (any, error) {
	return invalidIdent(c, "import alias", pos(c), string(c.text))
}

func (p *parser) callonglobalScopeNode288() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode288()
}

func (c *current) onglobalScopeNode303() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode303()
}

func (c *current) onglobalScopeNode309() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode309() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode309()
}

func (c *current) onglobalScopeNode311() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode311() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode311()
}

func (c *current) onglobalScopeNode301(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode301() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode301(stack["startI"])
}

func (c *current) onglobalScopeNode326() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode326() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode326()
}

func (c *current) onglobalScopeNode333(posI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode333() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode333(stack["posI"])
}

func (c *current) onglobalScopeNode323(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode323() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode323(stack["posI"])
}

func (c *current) onglobalScopeNode336() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode336() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode336()
}

func (c *current) onglobalScopeNode334(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed string literal",
		ErrorAnnotation: anno.Position(file(c), popStart(c), "expected a closing ``` for this ```"),
	}
}

func (p *parser) callonglobalScopeNode334() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode334(stack["posI"])
}

func (c *current) onglobalScopeNode299(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Open:     pos(c),
		Quote:    '`',
		Contents: concat(contentsI),
		Close:    endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeNode299() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode299(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeNode346() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode346() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode346()
}

func (c *current) onglobalScopeNode352() error {
	pushStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode352() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode352()
}

func (c *current) onglobalScopeNode354() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode354() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode354()
}

func (c *current) onglobalScopeNode344(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode344() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode344(stack["startI"])
}

func (c *current) onglobalScopeNode363() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonglobalScopeNode363() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode363()
}

func (c *current) onglobalScopeNode375() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode375() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode375()
}

func (c *current) onglobalScopeNode381(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonglobalScopeNode381() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode381(stack["endI"])
}

func (c *current) onglobalScopeNode371(endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode371() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode371(stack["endI"])
}

func (c *current) onglobalScopeNode384() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode384() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode384()
}

func (c *current) onglobalScopeNode382(endI any) (any, error) {
	start := popStart(c)
	return endI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Highlight:  anno.HighlightToEOL(start).Delta(1, 0),
			Annotation: "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno.Position(file(c), start, "for the string literal started here"),
		},
	}
}

func (p *parser) callonglobalScopeNode382() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode382(stack["endI"])
}

func (c *current) onglobalScopeNode342(startI, contentsI, endI any) (any, error) {
	return &ast.StaticString{
		Open:     pos(c),
		Quote:    '"',
		Contents: optCast[string](contentsI),
		Close:    endI.(*ast.Position),
	}, nil
}

func (p *parser) callonglobalScopeNode342() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode342(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onglobalScopeNode267(aliasI, pathI any) (any, error) {
	return &ast.ImportSpec{
		Alias: optCast[*ast.Ident](aliasI),
		Path:  pathI.(*ast.StaticString),
	}, nil
}

func (p *parser) callonglobalScopeNode267() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode267(stack["aliasI"], stack["pathI"])
}

func (c *current) onglobalScopeNode412(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonglobalScopeNode412() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode412(stack["unexpectedI"])
}

func (c *current) onglobalScopeNode409(lineI any) (any, error) {
	line := lineI.(string)
	return &ast.BadImportSpec{
			Line:     line,
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid import spec",
			ErrorAnnotation: anno.NChars(file(c), pos(c), len(line),
				"expected an import path, optionally preceded by an import alias"),
		}
}

func (p *parser) callonglobalScopeNode409() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode409(stack["lineI"])
}

func (c *current) onglobalScopeNode227(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonglobalScopeNode227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode227(stack["nodeI"])
}

func (c *current) onglobalScopeNode474() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonglobalScopeNode474() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode474()
}

func (c *current) onglobalScopeNode482() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode482() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode482()
}

func (c *current) onglobalScopeNode479(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonglobalScopeNode479() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode479(stack["posI"])
}

func (c *current) onglobalScopeNode468(rParenI any) (any, error) {
	return rParenI, nil
}

func (p *parser) callonglobalScopeNode468() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode468(stack["rParenI"])
}

func (c *current) onglobalScopeNode490() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode490() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode490()
}

func (c *current) onglobalScopeNode489() (any, error) {
	return nil, &fileerr.Error{
		Message:         "missing `)`",
		ErrorAnnotation: annoPos(c, "expected `)` to close the import group"),
	}
}

func (p *parser) callonglobalScopeNode489() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode489()
}

func (c *current) onglobalScopeNode191(lParenI, nodesI, rParenI any) (any, error) {
	return ast.Import{
		LParen:   lParenI.(*ast.Position),
		Imports:  sliceOf[ast.ImportNode](nodesI),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonglobalScopeNode191() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode191(stack["lParenI"], stack["nodesI"], stack["rParenI"])
}

func (c *current) onglobalScopeNode502() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonglobalScopeNode502() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode502()
}

func (c *current) onglobalScopeNode509(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonglobalScopeNode509() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode509(stack["unexpectedI"])
}

func (c *current) onglobalScopeNode496(startI, badI, endI any) (any, error) {
	return &ast.Import{
			Imports: []ast.ImportNode{
				&ast.BadImportSpec{
					Line:     badI.(string),
					Position: *startI.(*ast.Position),
				},
			},
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid import",
			ErrorAnnotation: annoRange(c, startI, endI,
				"expected an import path, optionally preceded by an import alias\n"+
					"or a group of imports"),
			Example: "`import \"fmt\"`",
		}
}

func (p *parser) callonglobalScopeNode496() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode496(stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onglobalScopeNode1(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonglobalScopeNode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onglobalScopeNode1(stack["nodeI"])
}

func (c *current) onScope5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope5()
}

func (c *current) onScope11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonScope11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope11()
}

func (c *current) onScope16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope16()
}

func (c *current) onScope13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonScope13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope13(stack["posI"])
}

func (c *current) onScope27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScope27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope27()
}

func (c *current) onScope3(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonScope3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope3(stack["lBraceI"])
}

func (c *current) onScope42() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScope42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope42()
}

func (c *current) onScope50() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope50()
}

func (c *current) onScope47(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonScope47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope47(stack["posI"])
}

func (c *current) onScope57(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonScope57() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope57(stack["rBraceI"])
}

func (c *current) onScope36(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) callonScope36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope36(stack["rBraceI"])
}

func (c *current) onScope60() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonScope60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope60()
}

func (c *current) onScope58(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed `{`",
		ErrorAnnotation: anno.Position(file(c), popStart(c), "expected a closing `}` for this `{`"),
	}
}

func (p *parser) callonScope58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope58(stack["posI"])
}

func (c *current) onScope1(lBraceI, nodesI, rBraceI any) (any, error) {
	return &ast.Scope{
		LBrace: pos(c),
		Nodes:  sliceOf[ast.ScopeNode](nodesI),
		RBrace: rBraceI.(*ast.Position),
	}, nil
}

func (p *parser) callonScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["lBraceI"], stack["nodesI"], stack["rBraceI"])
}

func (c *current) onScopeNode7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonScopeNode7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopeNode7()
}

func (c *current) onScopeNode1(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonScopeNode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopeNode1(stack["nodeI"])
}

func (c *current) onValidScopeNode7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonValidScopeNode7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValidScopeNode7()
}

func (c *current) onValidScopeNode1(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonValidScopeNode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValidScopeNode1(stack["nodeI"])
}

func (c *current) onvalidScopeNode3(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeNode3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode3(stack["textI"])
}

func (c *current) onvalidScopeNode38() (any, error) {
	return (*ast.Ident)(nil), nil
}

func (p *parser) callonvalidScopeNode38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode38()
}

func (c *current) onvalidScopeNode63(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeNode63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode63(stack["identI"])
}

func (c *current) onvalidScopeNode58(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonvalidScopeNode58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode58(stack["identI"])
}

func (c *current) onvalidScopeNode93(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeNode93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode93(stack["identI"])
}

func (c *current) onvalidScopeNode100() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode100()
}

func (c *current) onvalidScopeNode106(identI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeNode106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode106(stack["identI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeNode88(identI, startI, unexpectedI, endI any) (any, error) {
	return identI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens after break/continue label")
}

func (p *parser) callonvalidScopeNode88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode88(stack["identI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeNode166() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode166()
}

func (c *current) onvalidScopeNode172(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeNode172() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode172(stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeNode161(startI, unexpectedI, endI any) (any, error) {
	return (*ast.Ident)(nil), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected nothing, or a label")
}

func (p *parser) callonvalidScopeNode161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode161(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeNode33(labelI any) (any, error) {
	return &ast.Continue{
		Label:    labelI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeNode33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode33(stack["labelI"])
}

func (c *current) onvalidScopeNode232() (any, error) {
	return (*ast.Ident)(nil), nil
}

func (p *parser) callonvalidScopeNode232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode232()
}

func (c *current) onvalidScopeNode257(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeNode257() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode257(stack["identI"])
}

func (c *current) onvalidScopeNode252(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonvalidScopeNode252() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode252(stack["identI"])
}

func (c *current) onvalidScopeNode287(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeNode287() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode287(stack["identI"])
}

func (c *current) onvalidScopeNode294() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode294() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode294()
}

func (c *current) onvalidScopeNode300(identI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeNode300() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode300(stack["identI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeNode282(identI, startI, unexpectedI, endI any) (any, error) {
	return identI, newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens after break/continue label")
}

func (p *parser) callonvalidScopeNode282() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode282(stack["identI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeNode360() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode360() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode360()
}

func (c *current) onvalidScopeNode366(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeNode366() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode366(stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeNode355(startI, unexpectedI, endI any) (any, error) {
	return (*ast.Ident)(nil), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected nothing, or a label")
}

func (p *parser) callonvalidScopeNode355() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode355(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeNode227(labelI any) (any, error) {
	return &ast.Break{
		Label:    labelI.(*ast.Ident),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeNode227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode227(stack["labelI"])
}

func (c *current) onvalidScopeNode432() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonvalidScopeNode432() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode432()
}

func (c *current) onvalidScopeNode426(commentI any) (any, error) {
	return &ast.HTMLComment{
		Comment:  commentI.(string),
		Position: pos(c),
	}, nil
}

func (p *parser) callonvalidScopeNode426() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode426(stack["commentI"])
}

func (c *current) onvalidScopeNode467() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode467() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode467()
}

func (c *current) onvalidScopeNode473() error {
	pushStart(c)
	return nil
}

func (p *parser) callonvalidScopeNode473() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode473()
}

func (c *current) onvalidScopeNode478() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode478() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode478()
}

func (c *current) onvalidScopeNode475(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeNode475() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode475(stack["posI"])
}

func (c *current) onvalidScopeNode489() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvalidScopeNode489() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode489()
}

func (c *current) onvalidScopeNode465(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeNode465() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode465(stack["lParenI"])
}

func (c *current) onvalidScopeNode506() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvalidScopeNode506() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode506()
}

func (c *current) onvalidScopeNode514() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode514() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode514()
}

func (c *current) onvalidScopeNode511(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeNode511() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode511(stack["posI"])
}

func (c *current) onvalidScopeNode521(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonvalidScopeNode521() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode521(stack["rParenI"])
}

func (c *current) onvalidScopeNode495(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonvalidScopeNode495() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode495(stack["rParenI"])
}

func (c *current) onvalidScopeNode523() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode523() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode523()
}

func (c *current) onvalidScopeNode522() (any, error) {
	return unclosedList(c, "attribute list")
}

func (p *parser) callonvalidScopeNode522() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode522()
}

func (c *current) onvalidScopeNode553() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode553() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode553()
}

func (c *current) onvalidScopeNode559(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonvalidScopeNode559() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode559(stack["startI"], stack["unexpectedI"])
}

func (c *current) onvalidScopeNode595() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonvalidScopeNode595() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode595()
}

func (c *current) onvalidScopeNode548(startI, unexpectedI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "use of non-HTML5 doctype",
		ErrorAnnotation: annoRange(c, startI, endI, "this is not part of the HTML5 doctype"),
		ShouldBe:        "`!doctype(html)`",
	}
}

func (p *parser) callonvalidScopeNode548() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode548(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onvalidScopeNode458() (any, error) {
	return &ast.Doctype{Position: pos(c)}, nil
}

func (p *parser) callonvalidScopeNode458() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidScopeNode458()
}

func (c *current) onBadNode3(lineI, bodyI any) (any, error) {
	line := concat(lineI)
	return &ast.BadNode{
			Line:     line,
			Body:     optCast[ast.Body](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message:         "unrecognized directive or invalid element name",
			ErrorAnnotation: anno.FirstWord(file(c), pos(c), line, "expected a state variable"),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this is supposed to be an element name, make sure it conforms to the HTML spec"},
				{Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
			},
		}
}

func (p *parser) callonBadNode3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBadNode3(stack["lineI"], stack["bodyI"])
}

func (c *current) onLoneBody1(bodyI any) (any, error) {
	return &ast.BadNode{
			Body:     optCast[ast.Body](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message:         "lone body",
			ErrorAnnotation: annoPos(c, "this body is not attached to a directive or element"),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "make sure to place the opening brace/bracket on the same line as the attached directive"},
				{Suggestion: "if this is Go code and you didn't misspell, it needs the `-` code prefix"},
			},
		}
}

func (p *parser) callonLoneBody1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoneBody1(stack["bodyI"])
}

func (c *current) onreservedBadNode16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonreservedBadNode16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadNode16()
}

func (c *current) onreservedBadNode1(resI, endI, lineI, bodyI any) (any, error) {
	return &ast.BadNode{
			Line:     concat(resI) + concat(lineI),
			Body:     optCast[ast.Body](bodyI),
			Position: pos(c),
		}, &fileerr.Error{
			Message:         "potential use of reserved word",
			ErrorAnnotation: annoRange(c, pos(c), endI, "cannot use reserved word as element name"),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "if this is supposed to be an element, uppercase the first letter"},
				{Suggestion: "if this is Go code, you are seeing this error because you have a syntax error"},
			},
		}
}

func (p *parser) callonreservedBadNode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreservedBadNode1(stack["resI"], stack["endI"], stack["lineI"], stack["bodyI"])
}

func (c *current) onGlobalCode1(stmtI any) (any, error) {
	return &ast.Code{Statements: []*ast.GoCode{stmtI.(*ast.GoCode)}, Position: pos(c)}, nil
}

func (p *parser) callonGlobalCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobalCode1(stack["stmtI"])
}

func (c *current) onexplicitCode3() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonexplicitCode3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode3()
}

func (c *current) onexplicitCode9() error {
	editState(c, func(s *State) {
		s.Indentation.Target = c.pos.col - 1 // col is 1-indexed
	})
	return nil
}

func (p *parser) callonexplicitCode9() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode9()
}

func (c *current) onexplicitCode1(codeStatementsI any) (any, error) {
	return &ast.Code{
		Statements: codeStatementsI.([]*ast.GoCode),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonexplicitCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexplicitCode1(stack["codeStatementsI"])
}

func (c *current) oncodeStatements2(firstLineI, restI any) (any, error) {
	restIs := slice(restI)
	stmts := make([]*ast.GoCode, 1+len(restIs))
	stmts[0] = firstLineI.(*ast.GoCode)
	for i, restI := range restIs {
		stmts[i+1] = restI.(*ast.GoCode)
	}
	return stmts, nil
}

func (p *parser) calloncodeStatements2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements2(stack["firstLineI"], stack["restI"])
}

func (c *current) oncodeStatements9() (any, error) {
	return ([]*ast.GoCode)(nil), &fileerr.Error{
		Message:         "empty code block",
		ErrorAnnotation: annoPos(c, "expected code"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "either write some code, or delete this line"},
		},
	}
}

func (p *parser) calloncodeStatements9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatements9()
}

func (c *current) oncodeStatement2(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) calloncodeStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement2(stack["stmtI"])
}

func (c *current) oncodeStatement39(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) calloncodeStatement39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncodeStatement39(stack["stmtI"])
}

func (c *current) onimplicitCode1(stmtI any) (any, error) {
	return &ast.Code{
		Statements: []*ast.GoCode{stmtI.(*ast.GoCode)},
		Position:   pos(c),
	}, nil
}

func (p *parser) callonimplicitCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitCode1(stack["stmtI"])
}

func (c *current) onimplicitAhead38() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonimplicitAhead38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onimplicitAhead38()
}

func (c *current) ondeclaration15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callondeclaration15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondeclaration15()
}

func (c *current) onvarDecl18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDecl18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDecl18()
}

func (c *current) onvarDecl27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDecl27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDecl27()
}

func (c *current) onvarDeclLine14() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonvarDeclLine14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvarDeclLine14()
}

func (c *current) onReturn1(errI any) (any, error) {
	return &ast.Return{
		Err:      errI.(*ast.GoCode),
		Position: pos(c),
	}, nil
}

func (p *parser) callonReturn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturn1(stack["errI"])
}

func (c *current) onreturnErr2() (any, error) {
	return (*ast.GoCode)(nil), nil
}

func (p *parser) callonreturnErr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr2()
}

func (c *current) onreturnErr22(errI any) (any, error) {
	return errI.(*ast.GoCode), nil
}

func (p *parser) callonreturnErr22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr22(stack["errI"])
}

func (c *current) onreturnErr54() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonreturnErr54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr54()
}

func (c *current) onreturnErr60(errI, startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreturnErr60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr60(stack["errI"], stack["startI"], stack["unexpectedI"])
}

func (c *current) onreturnErr47(errI, startI, unexpectedI, endI any) (any, error) {
	return errI.(*ast.GoCode), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens after return value")
}

func (p *parser) callonreturnErr47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr47(stack["errI"], stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onreturnErr120() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonreturnErr120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr120()
}

func (c *current) onreturnErr126(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonreturnErr126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr126(stack["startI"], stack["unexpectedI"])
}

func (c *current) onreturnErr115(startI, unexpectedI, endI any) (any, error) {
	return (*ast.GoCode)(nil), newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected nothing, or an error to be returned")
}

func (p *parser) callonreturnErr115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreturnErr115(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onComponent10(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponent10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent10(stack["identI"])
}

func (c *current) onComponent8(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonComponent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent8(stack["identI"])
}

func (c *current) onComponent19() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonComponent19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent19()
}

func (c *current) onComponent16(startI, identI any) (any, error) {
	return invalidIdent(c, "component", *startI.(*ast.Position), concat(identI))
}

func (p *parser) callonComponent16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent16(stack["startI"], stack["identI"])
}

func (c *current) onComponent37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonComponent37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent37()
}

func (c *current) onComponent36() (any, error) {
	return missingIdent(c, "component", "`comp foo()`", 1)
}

func (p *parser) callonComponent36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent36()
}

func (c *current) onComponent1(nameI, typeParamsI, paramsI, bodyI any) (any, error) {
	comp := paramsI.(ast.Component)
	comp.Name = nameI.(*ast.Ident)

	typeParams := optCast[ast.Component](typeParamsI)
	comp.LBracket = typeParams.LBracket
	comp.TypeParams = typeParams.TypeParams
	comp.RBracket = typeParams.RBracket

	comp.Body = optCast[ast.Body](bodyI)
	comp.Position = pos(c)
	return &comp, nil
}

func (p *parser) callonComponent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponent1(stack["nameI"], stack["typeParamsI"], stack["paramsI"], stack["bodyI"])
}

func (c *current) oncomponentTypeParamList6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList6()
}

func (c *current) oncomponentTypeParamList12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentTypeParamList12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList12()
}

func (c *current) oncomponentTypeParamList17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList17()
}

func (c *current) oncomponentTypeParamList14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList14(stack["posI"])
}

func (c *current) oncomponentTypeParamList28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeParamList28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList28()
}

func (c *current) oncomponentTypeParamList4(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList4(stack["lBracketI"])
}

func (c *current) oncomponentTypeParamList48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeParamList48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList48()
}

func (c *current) oncomponentTypeParamList56() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList56()
}

func (c *current) oncomponentTypeParamList53(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList53(stack["posI"])
}

func (c *current) oncomponentTypeParamList63(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentTypeParamList63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList63(stack["rBracketI"])
}

func (c *current) oncomponentTypeParamList37(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeParamList37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList37(stack["rBracketI"])
}

func (c *current) oncomponentTypeParamList65() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeParamList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList65()
}

func (c *current) oncomponentTypeParamList64() (any, error) {
	return unclosedList(c, "component type parameters")
}

func (p *parser) calloncomponentTypeParamList64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList64()
}

func (c *current) oncomponentTypeParamList1(lBracketI, paramsI, rBracketI any) (any, error) {
	return ast.Component{
		LBracket:   lBracketI.(*ast.Position),
		TypeParams: optCast[[]*ast.TypeParam](paramsI),
		RBracket:   rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentTypeParamList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeParamList1(stack["lBracketI"], stack["paramsI"], stack["rBracketI"])
}

func (c *current) ontypeParams15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callontypeParams15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParams15()
}

func (c *current) ontypeParams1(firstI, restI any) (any, error) {
	return collectList[*ast.TypeParam](firstI, restI, -1), nil
}

func (p *parser) callontypeParams1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParams1(stack["firstI"], stack["restI"])
}

func (c *current) ontypeParam8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callontypeParam8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam8(stack["identI"])
}

func (c *current) ontypeParam14() (any, error) {
	return invalidIdent(c, "type parameter", pos(c), string(c.text))
}

func (p *parser) callontypeParam14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam14()
}

func (c *current) ontypeParam30() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callontypeParam30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam30()
}

func (c *current) ontypeParam35(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callontypeParam35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam35(stack["identI"])
}

func (c *current) ontypeParam41() (any, error) {
	return invalidIdent(c, "type parameter", pos(c), string(c.text))
}

func (p *parser) callontypeParam41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam41()
}

func (c *current) ontypeParam4(firstI, restI any) (any, error) {
	return collectList[*ast.Ident](firstI, restI, -1), nil
}

func (p *parser) callontypeParam4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam4(stack["firstI"], stack["restI"])
}

func (c *current) ontypeParam48() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callontypeParam48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam48()
}

func (c *current) ontypeParam1(namesI, posI, typeI any) (any, error) {
	return &ast.TypeParam{
		Names: namesI.([]*ast.Ident),
		Type:  typeI.(*ast.Type),
	}, nil
}

func (p *parser) callontypeParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParam1(stack["namesI"], stack["posI"], stack["typeI"])
}

func (c *current) ontypeParamType2(tI any) (any, error) {
	return tI, nil
}

func (p *parser) callontypeParamType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParamType2(stack["tI"])
}

func (c *current) ontypeParamType9() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callontypeParamType9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParamType9()
}

func (c *current) ontypeParamType8() (any, error) {
	return (*ast.Type)(nil), &fileerr.Error{
		Message:         "type param: missing type",
		ErrorAnnotation: annoPos(c, "expected a space and a type"),
	}
}

func (p *parser) callontypeParamType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeParamType8()
}

func (c *current) oncomponentParamList7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList7()
}

func (c *current) oncomponentParamList13() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentParamList13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList13()
}

func (c *current) oncomponentParamList18() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList18()
}

func (c *current) oncomponentParamList15(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList15(stack["posI"])
}

func (c *current) oncomponentParamList29() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParamList29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList29()
}

func (c *current) oncomponentParamList5(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList5(stack["lParenI"])
}

func (c *current) oncomponentParamList49() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParamList49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList49()
}

func (c *current) oncomponentParamList57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList57()
}

func (c *current) oncomponentParamList54(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList54(stack["posI"])
}

func (c *current) oncomponentParamList64(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentParamList64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList64(stack["rParenI"])
}

func (c *current) oncomponentParamList38(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentParamList38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList38(stack["rParenI"])
}

func (c *current) oncomponentParamList66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList66()
}

func (c *current) oncomponentParamList65() (any, error) {
	return unclosedList(c, "component parameters")
}

func (p *parser) calloncomponentParamList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList65()
}

func (c *current) oncomponentParamList2(lParenI, paramsI, rParenI any) (any, error) {
	return ast.Component{
		LParen: lParenI.(*ast.Position),
		Params: optCast[[]*ast.ComponentParam](paramsI),
		RParen: rParenI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentParamList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList2(stack["lParenI"], stack["paramsI"], stack["rParenI"])
}

func (c *current) oncomponentParamList73() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamList73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList73()
}

func (c *current) oncomponentParamList72() (any, error) {
	return ast.Component{}, &fileerr.Error{
		Message:         "component: missing parameters",
		ErrorAnnotation: annoPos(c, "expected a parameter list"),
		Example:         "`comp foo(bar string, baz: 123)`",
	}
}

func (p *parser) calloncomponentParamList72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamList72()
}

func (c *current) oncomponentParams15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentParams15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParams15()
}

func (c *current) oncomponentParams1(firstI, restI any) (any, error) {
	return collectList[*ast.ComponentParam](firstI, restI, -1), nil
}

func (p *parser) calloncomponentParams1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParams1(stack["firstI"], stack["restI"])
}

func (c *current) oncomponentParam5(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) calloncomponentParam5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam5(stack["identI"])
}

func (c *current) oncomponentParam11() (any, error) {
	return invalidIdent(c, "component parameter", pos(c), string(c.text))
}

func (p *parser) calloncomponentParam11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam11()
}

func (c *current) oncomponentParam1(nameI, typeI, defaultI any) (any, error) {
	paramDefault := optCast[ast.ComponentParam](defaultI)

	p := &ast.ComponentParam{
		Name:     nameI.(*ast.Ident),
		Type:     optCast[*ast.Type](typeI),
		Colon:    paramDefault.Colon,
		Default:  paramDefault.Default,
		Position: pos(c),
	}
	if p.Type == nil && p.Default == nil {
		return p, &fileerr.Error{
			Message:         "component parameter: need either a type or a default",
			ErrorAnnotation: anno.Node(file(c), p.Name, "param needs either a type or a default"),
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "give this parameter a type", Code: "`" + p.Name.Ident + " string`"},
				{Suggestion: "give this parameter a default with an inferrable type", Code: "`" + p.Name.Ident + ": \"woof\"`"},
			},
		}
	}

	return p, nil
}

func (p *parser) calloncomponentParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParam1(stack["nameI"], stack["typeI"], stack["defaultI"])
}

func (c *current) oncomponentParamType1(tI any) (any, error) {
	return tI, nil
}

func (p *parser) calloncomponentParamType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamType1(stack["tI"])
}

func (c *current) oncomponentParamDefault6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamDefault6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefault6()
}

func (c *current) oncomponentParamDefault1(colonI, exprI any) (any, error) {
	return ast.ComponentParam{
		Colon:   colonI.(*ast.Position),
		Default: exprI.(*ast.GoCode),
	}, nil
}

func (p *parser) calloncomponentParamDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefault1(stack["colonI"], stack["exprI"])
}

func (c *current) oncomponentParamDefaultValue2(exprI any) (any, error) {
	return exprI.(*ast.GoCode), nil
}

func (p *parser) calloncomponentParamDefaultValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue2(stack["exprI"])
}

func (c *current) oncomponentParamDefaultValue6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentParamDefaultValue6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue6()
}

func (c *current) oncomponentParamDefaultValue5() (any, error) {
	return (*ast.GoCode)(nil), &fileerr.Error{
		Message:         "component param: missing default",
		ErrorAnnotation: annoPos(c, "here"),
		HintAnnotations: []fileerr.Annotation{
			annoPos(c, "expected a default because of this `:`"),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "remove the `:`, if you didn't mean to define a default"},
		},
	}
}

func (p *parser) calloncomponentParamDefaultValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentParamDefaultValue5()
}

func (c *current) onComponentCall1(headerI, bodyI any) (any, error) {
	cc := headerI.(ast.ComponentCall)
	cc.Body = optCast[ast.Body](bodyI)
	cc.Position = pos(c)
	return &cc, nil
}

func (p *parser) callonComponentCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCall1(stack["headerI"], stack["bodyI"])
}

func (c *current) onComponentCallHeader9(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponentCallHeader9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader9(stack["identI"])
}

func (c *current) onComponentCallHeader5(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonComponentCallHeader5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader5(stack["identI"])
}

func (c *current) onComponentCallHeader17(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonComponentCallHeader17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader17(stack["identI"])
}

func (c *current) onComponentCallHeader23(identI any) (any, error) {
	return invalidIdent(c, "component call", pos(c), concat(identI))
}

func (p *parser) callonComponentCallHeader23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader23(stack["identI"])
}

func (c *current) onComponentCallHeader37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonComponentCallHeader37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader37()
}

func (c *current) onComponentCallHeader36() (any, error) {
	return missingIdent(c, "component call", "`+foo()`", 1)
}

func (p *parser) callonComponentCallHeader36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader36()
}

func (c *current) onComponentCallHeader1(namespaceI, nameI, typeArgsI, argsI any) (any, error) {
	cc := argsI.(ast.ComponentCall)
	cc.Namespace = optCast[*ast.Ident](namespaceI)
	cc.Name = nameI.(*ast.Ident)

	typeArgs := optCast[ast.ComponentCall](typeArgsI)
	cc.LBracket = typeArgs.LBracket
	cc.TypeArgs = typeArgs.TypeArgs
	cc.RBracket = typeArgs.RBracket

	return cc, nil
}

func (p *parser) callonComponentCallHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallHeader1(stack["namespaceI"], stack["nameI"], stack["typeArgsI"], stack["argsI"])
}

func (c *current) oncomponentTypeArgList6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList6()
}

func (c *current) oncomponentTypeArgList12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentTypeArgList12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList12()
}

func (c *current) oncomponentTypeArgList17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList17()
}

func (c *current) oncomponentTypeArgList14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList14(stack["posI"])
}

func (c *current) oncomponentTypeArgList28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeArgList28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList28()
}

func (c *current) oncomponentTypeArgList4(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList4(stack["lBracketI"])
}

func (c *current) oncomponentTypeArgList48() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentTypeArgList48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList48()
}

func (c *current) oncomponentTypeArgList56() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList56()
}

func (c *current) oncomponentTypeArgList53(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList53(stack["posI"])
}

func (c *current) oncomponentTypeArgList63(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentTypeArgList63() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList63(stack["rBracketI"])
}

func (c *current) oncomponentTypeArgList37(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) calloncomponentTypeArgList37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList37(stack["rBracketI"])
}

func (c *current) oncomponentTypeArgList65() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentTypeArgList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList65()
}

func (c *current) oncomponentTypeArgList64() (any, error) {
	return unclosedList(c, "component type arguments")
}

func (p *parser) calloncomponentTypeArgList64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList64()
}

func (c *current) oncomponentTypeArgList1(lBracketI, argsI, rBracketI any) (any, error) {
	return ast.ComponentCall{
		LBracket: lBracketI.(*ast.Position),
		TypeArgs: optCast[[]*ast.Type](argsI),
		RBracket: rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentTypeArgList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentTypeArgList1(stack["lBracketI"], stack["argsI"], stack["rBracketI"])
}

func (c *current) ontypeArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callontypeArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArgs15()
}

func (c *current) ontypeArgs1(firstI, restI any) (any, error) {
	return collectList[*ast.Type](firstI, restI, -1), nil
}

func (p *parser) callontypeArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArgs1(stack["firstI"], stack["restI"])
}

func (c *current) ontypeArg2(tI any) (any, error) {
	return tI, nil
}

func (p *parser) callontypeArg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArg2(stack["tI"])
}

func (c *current) ontypeArg6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callontypeArg6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArg6()
}

func (c *current) ontypeArg5() (any, error) {
	return &ast.Type{Position: pos(c)}, &fileerr.Error{
		Message:         "invalid or missing type argument",
		ErrorAnnotation: annoPos(c, "expected a type"),
	}
}

func (p *parser) callontypeArg5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontypeArg5()
}

func (c *current) oncomponentArgList7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList7()
}

func (c *current) oncomponentArgList13() error {
	pushStart(c)
	return nil
}

func (p *parser) calloncomponentArgList13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList13()
}

func (c *current) oncomponentArgList18() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList18()
}

func (c *current) oncomponentArgList15(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList15(stack["posI"])
}

func (c *current) oncomponentArgList29() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgList29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList29()
}

func (c *current) oncomponentArgList5(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList5(stack["lParenI"])
}

func (c *current) oncomponentArgList49() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgList49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList49()
}

func (c *current) oncomponentArgList57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList57()
}

func (c *current) oncomponentArgList54(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList54(stack["posI"])
}

func (c *current) oncomponentArgList64(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloncomponentArgList64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList64(stack["rParenI"])
}

func (c *current) oncomponentArgList38(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) calloncomponentArgList38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList38(stack["rParenI"])
}

func (c *current) oncomponentArgList66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList66()
}

func (c *current) oncomponentArgList65() (any, error) {
	return unclosedList(c, "component arguments")
}

func (p *parser) calloncomponentArgList65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList65()
}

func (c *current) oncomponentArgList2(lParenI, argsI, rParenI any) (any, error) {
	return ast.ComponentCall{
		LParen: lParenI.(*ast.Position),
		Args:   optCast[[]*ast.ComponentArg](argsI),
		RParen: rParenI.(*ast.Position),
	}, nil
}

func (p *parser) calloncomponentArgList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList2(stack["lParenI"], stack["argsI"], stack["rParenI"])
}

func (c *current) oncomponentArgList73() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgList73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList73()
}

func (c *current) oncomponentArgList72() (any, error) {
	return ast.ComponentCall{}, &fileerr.Error{
		Message:         "component call: missing arguments",
		ErrorAnnotation: annoPos(c, "expected an argument list"),
		Example:         "`+foo(bar: \"foo\", baz: 123)`",
	}
}

func (p *parser) calloncomponentArgList72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgList72()
}

func (c *current) oncomponentArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgs15()
}

func (c *current) oncomponentArgs1(firstI, restI any) (any, error) {
	return collectList[*ast.ComponentArg](firstI, restI, -1), nil
}

func (p *parser) calloncomponentArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgs1(stack["firstI"], stack["restI"])
}

func (c *current) oncomponentArg5(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) calloncomponentArg5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg5(stack["identI"])
}

func (c *current) oncomponentArg11() (any, error) {
	return invalidIdent(c, "component argument", pos(c), string(c.text))
}

func (p *parser) calloncomponentArg11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg11()
}

func (c *current) oncomponentArg1(nameI, valI any) (any, error) {
	return &ast.ComponentArg{
		Name:  nameI.(*ast.Ident),
		Value: optCast[ast.Expression](valI),
	}, nil
}

func (p *parser) calloncomponentArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArg1(stack["nameI"], stack["valI"])
}

func (c *current) oncomponentArgValue9() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) calloncomponentArgValue9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue9()
}

func (c *current) oncomponentArgValue2(exprI any) (any, error) {
	return exprI, nil
}

func (p *parser) calloncomponentArgValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue2(stack["exprI"])
}

func (c *current) oncomponentArgValue22() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncomponentArgValue22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue22()
}

func (c *current) oncomponentArgValue15(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "missing component argument value",
		ErrorAnnotation: anno.Position(file(c), *posI.(*ast.Position), "expected a value"),
		Example:         "`argName: 123`",
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "remember to always write the name of the argument before it's value"},
		},
	}
}

func (p *parser) calloncomponentArgValue15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentArgValue15(stack["posI"])
}

func (c *current) onComponentCallBody1(bI any) (any, error) {
	return bI, nil
}

func (p *parser) callonComponentCallBody1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallBody1(stack["bI"])
}

func (c *current) oncomponentCallBody4() (any, error) {
	return nil, nil
}

func (p *parser) calloncomponentCallBody4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody4()
}

func (c *current) oncomponentCallBody27(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) calloncomponentCallBody27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody27(stack["unexpectedI"])
}

func (c *current) oncomponentCallBody24(uI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "unexpected tokens",
		ErrorAnnotation: annoRange(c, pos(c), endI, "expected a body or the end of command"),
		Example:         "`+foo()`\n`+foo() { ... }`\n`+foo() _[ ... ]`\n`+foo() _{ ... }`",
	}
}

func (p *parser) calloncomponentCallBody24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomponentCallBody24(stack["uI"], stack["endI"])
}

func (c *current) onUnderscoreBlockShorthand1(bodyI any) (any, error) {
	return &ast.UnderscoreBlockShorthand{
		Body:     optCast[ast.Body](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonUnderscoreBlockShorthand1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnderscoreBlockShorthand1(stack["bodyI"])
}

func (c *current) onBlock8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonBlock8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock8(stack["identI"])
}

func (c *current) onBlock6(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonBlock6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock6(stack["identI"])
}

func (c *current) onBlock17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBlock17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock17()
}

func (c *current) onBlock14(startI, identI any) (any, error) {
	return invalidIdent(c, "block", *startI.(*ast.Position), concat(identI))
}

func (p *parser) callonBlock14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock14(stack["startI"], stack["identI"])
}

func (c *current) onBlock35() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBlock35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock35()
}

func (c *current) onBlock34() (any, error) {
	return missingIdent(c, "block", "`block bark [ woof ]`", 1)
}

func (p *parser) callonBlock34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock34()
}

func (c *current) onBlock1(nameI, bodyI any) (any, error) {
	return &ast.Block{
		Name:     nameI.(*ast.Ident),
		Body:     optCast[ast.Body](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["nameI"], stack["bodyI"])
}

func (c *current) onIf1(condI, thenI, elseIfsI, elseI any) (any, error) {
	return &ast.If{
		Header:   condI.(*ast.IfHeader),
		Then:     optCast[ast.Body](thenI),
		ElseIfs:  sliceOf[*ast.ElseIf](elseIfsI),
		Else:     optCast[*ast.Else](elseI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonIf1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIf1(stack["condI"], stack["thenI"], stack["elseIfsI"], stack["elseI"])
}

func (c *current) onElseIf7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonElseIf7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf7()
}

func (c *current) onElseIf1(condI, thenI any) (any, error) {
	return &ast.ElseIf{
		Header:   condI.(*ast.IfHeader),
		Then:     optCast[ast.Body](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElseIf1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIf1(stack["condI"], stack["thenI"])
}

func (c *current) onElse7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonElse7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse7()
}

func (c *current) onElse1(thenI any) (any, error) {
	return &ast.Else{
		Then:     optCast[ast.Body](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonElse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElse1(stack["thenI"])
}

func (c *current) onifHeader2(condI any) (any, error) {
	return condI, nil
}

func (p *parser) callonifHeader2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifHeader2(stack["condI"])
}

func (c *current) onifHeader14() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonifHeader14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifHeader14()
}

func (c *current) onifHeader9(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "missing condition",
		ErrorAnnotation: annoPos(c, "expected a condition"),
	}
}

func (p *parser) callonifHeader9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifHeader9(stack["posI"])
}

func (c *current) onifHeader8(posI any) (any, error) {
	return (*ast.IfHeader)(nil), nil
}

func (p *parser) callonifHeader8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifHeader8(stack["posI"])
}

func (c *current) onIfHeader1(stmtI, condI any) (any, error) {
	return &ast.IfHeader{
		Statement: optCast[*ast.GoCode](stmtI),
		Condition: optCast[ast.Expression](condI),
	}, nil
}

func (p *parser) callonIfHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfHeader1(stack["stmtI"], stack["condI"])
}

func (c *current) ongoIfHeaderStatement28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoIfHeaderStatement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfHeaderStatement28()
}

func (c *current) ongoIfHeaderStatement1(stmtI any) (any, error) {
	return stmtI, nil
}

func (p *parser) callongoIfHeaderStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoIfHeaderStatement1(stack["stmtI"])
}

func (c *current) onSwitch9() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonSwitch9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9()
}

func (c *current) onSwitch15() error {
	pushStart(c)
	return nil
}

func (p *parser) callonSwitch15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch15()
}

func (c *current) onSwitch20() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonSwitch20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch20()
}

func (c *current) onSwitch17(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonSwitch17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch17(stack["posI"])
}

func (c *current) onSwitch31() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonSwitch31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch31()
}

func (c *current) onSwitch7(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) callonSwitch7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch7(stack["lBraceI"])
}

func (c *current) onSwitch45() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonSwitch45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch45()
}

func (c *current) onSwitch53() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonSwitch53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch53()
}

func (c *current) onSwitch50(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonSwitch50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch50(stack["posI"])
}

func (c *current) onSwitch60(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonSwitch60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch60(stack["rBraceI"])
}

func (c *current) onSwitch39(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) callonSwitch39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch39(stack["rBraceI"])
}

func (c *current) onSwitch63() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonSwitch63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch63()
}

func (c *current) onSwitch61(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed `{`",
		ErrorAnnotation: anno.Position(file(c), popStart(c), "expected a closing `}` for this `{`"),
	}
}

func (p *parser) callonSwitch61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch61(stack["posI"])
}

func (c *current) onSwitch1(comparatorI, lBraceI, casesI, rBraceI any) (any, error) {
	s := &ast.Switch{
		Comparator: comparatorI.(*ast.GoCode),
		LBrace:     lBraceI.(*ast.Position),
		Cases:      casesI.([]*ast.Case),
		RBrace:     rBraceI.(*ast.Position),
		Position:   pos(c),
	}

	for _, c := range s.Cases {
		if c.Expression != nil {
			return s, nil
		}
	}

	return s, &fileerr.Error{
		Message: "switch: no cases",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Context:    anno.ContextDelta(0, 1),
			Highlight:  anno.HighlightNode(s),
			Annotation: "expected switch to have at least one non-default case",
		}),
	}
}

func (p *parser) callonSwitch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch1(stack["comparatorI"], stack["lBraceI"], stack["casesI"], stack["rBraceI"])
}

func (c *current) onswitchComparator2() (any, error) {
	return (*ast.GoCode)(nil), nil
}

func (p *parser) callonswitchComparator2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator2()
}

func (c *current) onswitchComparator8(compI any) (any, error) {
	return compI.(*ast.GoCode), nil
}

func (p *parser) callonswitchComparator8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator8(stack["compI"])
}

func (c *current) onswitchComparator25() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchComparator25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator25()
}

func (c *current) onswitchComparator34() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonswitchComparator34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator34()
}

func (c *current) onswitchComparator18(compI, startI, endI any) (any, error) {
	return compI.(*ast.GoCode),
		newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "switch comparator terminated early")
}

func (p *parser) callonswitchComparator18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchComparator18(stack["compI"], stack["startI"], stack["endI"])
}

func (c *current) onswitchCases1(casesI any) (any, error) {
	cases := sliceOf[*ast.Case](casesI)

	var firstDefault *ast.Case
	for _, ca := range cases {
		if ca.Expression != nil {
			continue
		}
		if firstDefault == nil {
			firstDefault = ca
			continue
		}

		return cases, &fileerr.Error{
			Message:         "multiple default cases in switch",
			ErrorAnnotation: anno.Node(file(c), ca, "second default case"),
			HintAnnotations: []fileerr.Annotation{
				anno.Node(file(c), firstDefault, "first default case"),
			},
		}
	}

	return cases, nil
}

func (p *parser) callonswitchCases1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCases1(stack["casesI"])
}

func (c *current) onpreFirstCase1() (any, error) {
	return nil, &fileerr.Error{
		Message:         "switch: unexpected tokens",
		ErrorAnnotation: annoPos(c, "expected a `case` or `default`"),
	}
}

func (p *parser) callonpreFirstCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpreFirstCase1()
}

func (c *current) onswitchCase7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonswitchCase7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCase7()
}

func (c *current) onswitchCase1(caseI any) (any, error) {
	return caseI, nil
}

func (p *parser) callonswitchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchCase1(stack["caseI"])
}

func (c *current) onCase12() (any, error) {
	return pos(c), nil
}

func (p *parser) callonCase12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase12()
}

func (c *current) onCase15() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonCase15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase15()
}

func (c *current) onCase14() (any, error) {
	return pos(c), &fileerr.Error{
		Message:         "switch case: missing colon",
		ErrorAnnotation: annoPos(c, "expected a colon"),
	}
}

func (p *parser) callonCase14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase14()
}

func (c *current) onCase1(condI, colonI, thenI any) (any, error) {
	return &ast.Case{
		Expression: optCast[ast.Expression](condI),
		Colon:      colonI.(*ast.Position),
		Then:       optCast[*ast.Scope](thenI),
		Position:   pos(c),
	}, nil
}

func (p *parser) callonCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase1(stack["condI"], stack["colonI"], stack["thenI"])
}

func (c *current) onDefault8() (any, error) {
	return pos(c), nil
}

func (p *parser) callonDefault8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault8()
}

func (c *current) onDefault11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonDefault11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault11()
}

func (c *current) onDefault10() (any, error) {
	return pos(c), &fileerr.Error{
		Message:         "switch case: missing colon",
		ErrorAnnotation: annoPos(c, "expected a colon"),
	}
}

func (p *parser) callonDefault10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault10()
}

func (c *current) onDefault1(colonI, thenI any) (any, error) {
	return &ast.Case{
		Colon:    colonI.(*ast.Position),
		Then:     optCast[*ast.Scope](thenI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["colonI"], stack["thenI"])
}

func (c *current) oncaseCondition2(condI any) (any, error) {
	return condI, nil
}

func (p *parser) calloncaseCondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition2(stack["condI"])
}

func (c *current) oncaseCondition14() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloncaseCondition14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition14()
}

func (c *current) oncaseCondition9(posI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "missing condition",
		ErrorAnnotation: annoPos(c, "expected a condition"),
	}
}

func (p *parser) calloncaseCondition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition9(stack["posI"])
}

func (c *current) oncaseCondition8(posI any) (any, error) {
	return nil, nil
}

func (p *parser) calloncaseCondition8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncaseCondition8(stack["posI"])
}

func (c *current) onswitchThen1(nodesI any) (any, error) {
	return &ast.Scope{Nodes: sliceOf[ast.ScopeNode](nodesI)}, nil
}

func (p *parser) callonswitchThen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchThen1(stack["nodesI"])
}

func (c *current) onswitchScopeNode1(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonswitchScopeNode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onswitchScopeNode1(stack["nodeI"])
}

func (c *current) onFor1(exprI, bodyI any) (any, error) {
	return &ast.For{
		Header:   optCast[ast.ForHeader](exprI),
		Body:     optCast[ast.Body](bodyI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonFor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFor1(stack["exprI"], stack["bodyI"])
}

func (c *current) onforHeader1(condI any) (any, error) {
	return condI, nil
}

func (p *parser) callonforHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onforHeader1(stack["condI"])
}

func (c *current) onForRangeHeader8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonForRangeHeader8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader8(stack["identI"])
}

func (c *current) onForRangeHeader19() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonForRangeHeader19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader19()
}

func (c *current) onForRangeHeader28(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonForRangeHeader28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader28(stack["identI"])
}

func (c *current) onForRangeHeader37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonForRangeHeader37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader37()
}

func (c *current) onForRangeHeader5(var1I, var2I, eqPosI, declaresI any) (any, error) {
	h := ast.ForRangeHeader{
		Var1:      var1I.(*ast.Ident),
		EqualSign: eqPosI.(*ast.Position),
		Declares:  declaresI != nil,
	}
	if var2I != nil {
		h.Comma = getTuple[*ast.Position](var2I, 0)
		h.Var2 = getTuple[*ast.Ident](var2I, -1)
	}

	return h, nil
}

func (p *parser) callonForRangeHeader5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader5(stack["var1I"], stack["var2I"], stack["eqPosI"], stack["declaresI"])
}

func (c *current) onForRangeHeader50() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonForRangeHeader50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader50()
}

func (c *current) onForRangeHeader63() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonForRangeHeader63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader63()
}

func (c *current) onForRangeHeader1(varsI, orderedPosI, orderedI, rangePosI, exprI any) (any, error) {
	e := optCast[ast.ForRangeHeader](varsI)
	if orderedI != nil {
		e.Ordered = orderedPosI.(*ast.Position)
	}
	e.Range = rangePosI.(*ast.Position)
	e.Expression = optCast[ast.Expression](exprI)
	e.Position = pos(c)
	return &e, nil
}

func (p *parser) callonForRangeHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForRangeHeader1(stack["varsI"], stack["orderedPosI"], stack["orderedI"], stack["rangePosI"], stack["exprI"])
}

func (c *current) onElement1(nameI, voidI, attrsI, bodyI any) (any, error) {
	return ast.Element{
		Name:       concat(nameI),
		Attributes: optCast[[]ast.AttributeCollection](attrsI),
		Body:       optCast[ast.Body](bodyI),
		Void:       voidI != nil,
		Position:   pos(c),
	}, nil
}

func (p *parser) callonElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElement1(stack["nameI"], stack["voidI"], stack["attrsI"], stack["bodyI"])
}

func (c *current) onRawElement1(bodyI any) (any, error) {
	return &ast.RawElement{
		Body:     bodyI.(*ast.BracketText),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawElement1(stack["bodyI"])
}

func (c *current) onrawElementBody2(btI any) (any, error) {
	return btI, nil
}

func (p *parser) callonrawElementBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody2(stack["btI"])
}

func (c *current) onrawElementBody32() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonrawElementBody32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody32()
}

func (c *current) onrawElementBody27(posI any) (any, error) {
	return (*ast.BracketText)(nil), &fileerr.Error{
		Message: "`!raw` with scope",
		ErrorAnnotation: anno.Position(file(c), *posI.(*ast.Position),
			"the `!raw` element must have bracketed text as body"),
		ShouldBe: "`!raw [ ... ]`",
	}
}

func (p *parser) callonrawElementBody27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody27(stack["posI"])
}

func (c *current) onrawElementBody39() (any, error) {
	return (*ast.BracketText)(nil), &fileerr.Error{
		Message: "empty `!raw` element",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Highlight:  anno.HighlightPosition(pos(c)).Delta(1, 1),
			Annotation: "expected a body",
		}),
		ShouldBe: "`!raw [ ... ]`",
	}
}

func (p *parser) callonrawElementBody39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody39()
}

func (c *current) onrawElementBody64() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonrawElementBody64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody64()
}

func (c *current) onrawElementBody70(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonrawElementBody70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody70(stack["startI"], stack["unexpectedI"])
}

func (c *current) onrawElementBody59(startI, unexpectedI, endI any) (any, error) {
	return (*ast.BracketText)(nil),
		newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "expected the body of the `!raw` element")
}

func (p *parser) callonrawElementBody59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrawElementBody59(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onInlineExpression3() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonInlineExpression3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineExpression3()
}

func (c *current) onInlineExpression6(exprI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonInlineExpression6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineExpression6(stack["exprI"])
}

func (c *current) onInlineExpression1(exprI any) (any, error) {
	return exprI, nil
}

func (p *parser) callonInlineExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineExpression1(stack["exprI"])
}

func (c *current) onChainExpression4() (any, error) {
	return len(c.text), nil
}

func (p *parser) callonChainExpression4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression4()
}

func (c *current) onChainExpression19() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonChainExpression19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression19()
}

func (c *current) onChainExpression27(derefsI, rootI, checkRootI, chainI, defaultI, endPosI any) (bool, error) {
	return checkRootI != nil || chainExprItmsCheck(sliceOf[ast.ChainExpressionNode](chainI)) || defaultI != nil, nil
}

func (p *parser) callonChainExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression27(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onChainExpression1(derefsI, rootI, checkRootI, chainI, defaultI, endPosI any) (any, error) {
	expr := optCast[ast.ChainExpression](defaultI)
	expr.Root = rootI.(*ast.RawGoCode)
	expr.CheckRoot = checkRootI != nil
	expr.Chain = sliceOf[ast.ChainExpressionNode](chainI)
	expr.DerefCount = derefsI.(int)
	expr.Position = pos(c)
	return &expr, nil
}

func (p *parser) callonChainExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpression1(stack["derefsI"], stack["rootI"], stack["checkRootI"], stack["chainI"], stack["defaultI"], stack["endPosI"])
}

func (c *current) onchainExpressionTrail6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonchainExpressionTrail6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionTrail6()
}

func (c *current) onchainExpressionTrail1(exprI, endI any) (any, error) {
	return nil, &fileerr.Error{
		Message:         "malformed chain expression",
		ErrorAnnotation: anno.Node(file(c), exprI.(ast.Node), "unable to parse this expression as of a chain expression"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "did you mean to put a default? default values start with the `~` operator",
				Example:    "`woof?.bark[12?] ~ someDefault`",
			},
			{
				Suggestion: "remember that chain expressions cannot be embedded in Go expressions;\n" +
					"you can either write a chain expression or a Go expression",
			},
		},
	}
}

func (p *parser) callonchainExpressionTrail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionTrail1(stack["exprI"], stack["endI"])
}

func (c *current) onchainExpressionRoot1() (any, error) {
	return &ast.RawGoCode{
		Code:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonchainExpressionRoot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionRoot1()
}

func (c *current) onchainExpressionDefault4() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonchainExpressionDefault4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault4()
}

func (c *current) onchainExpressionDefault15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonchainExpressionDefault15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault15()
}

func (c *current) onchainExpressionDefault1(posI, exprI any) (any, error) {
	return ast.ChainExpression{
		DefaultOperator: posI.(*ast.Position),
		Default:         exprI.(*ast.GoCode),
	}, nil
}

func (p *parser) callonchainExpressionDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainExpressionDefault1(stack["posI"], stack["exprI"])
}

func (c *current) onChainExpressionNode10() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonChainExpressionNode10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode10()
}

func (c *current) onChainExpressionNode15(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionNode15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode15(stack["identI"])
}

func (c *current) onChainExpressionNode3(identI, checkI any) (any, error) {
	return &ast.DotIdentExpression{
		Ident:    identI.(*ast.Ident),
		Check:    checkI != nil,
		Position: pos(c),
	}, nil
}

func (p *parser) callonChainExpressionNode3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode3(stack["identI"], stack["checkI"])
}

func (c *current) onChainExpressionNode32() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonChainExpressionNode32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode32()
}

func (c *current) onChainExpressionNode29(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonChainExpressionNode29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode29(stack["posI"])
}

func (c *current) onChainExpressionNode52(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionNode52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode52(stack["identI"])
}

func (c *current) onChainExpressionNode48(identI any) (any, error) {
	return identI, nil
}

func (p *parser) callonChainExpressionNode48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode48(stack["identI"])
}

func (c *current) onChainExpressionNode59(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonChainExpressionNode59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode59(stack["identI"])
}

func (c *current) onChainExpressionNode74() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonChainExpressionNode74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode74()
}

func (c *current) onChainExpressionNode71(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonChainExpressionNode71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode71(stack["posI"])
}

func (c *current) onChainExpressionNode25(lParenI, ptrsI, packageI, typeI, checkTypeI, rParenI, checkValueI any) (any, error) {
	return &ast.TypeAssertionExpression{
		LParen:       lParenI.(*ast.Position),
		PointerCount: len(slice(ptrsI)),
		Package:      optCast[*ast.Ident](packageI),
		Type:         typeI.(*ast.Ident),
		CheckType:    checkTypeI != nil,
		RParen:       rParenI.(*ast.Position),
		CheckValue:   checkValueI != nil,
		Position:     pos(c),
	}, nil
}

func (p *parser) callonChainExpressionNode25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onChainExpressionNode25(stack["lParenI"], stack["ptrsI"], stack["packageI"], stack["typeI"], stack["checkTypeI"], stack["rParenI"], stack["checkValueI"])
}

func (c *current) onIndexExpression5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression5()
}

func (c *current) onIndexExpression11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonIndexExpression11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression11()
}

func (c *current) onIndexExpression16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression16()
}

func (c *current) onIndexExpression13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression13(stack["posI"])
}

func (c *current) onIndexExpression27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonIndexExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression27()
}

func (c *current) onIndexExpression3(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression3(stack["lBracketI"])
}

func (c *current) onIndexExpression49() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonIndexExpression49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression49()
}

func (c *current) onIndexExpression57() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression57()
}

func (c *current) onIndexExpression54(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression54(stack["posI"])
}

func (c *current) onIndexExpression64(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonIndexExpression64() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression64(stack["rBracketI"])
}

func (c *current) onIndexExpression38(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) callonIndexExpression38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression38(stack["rBracketI"])
}

func (c *current) onIndexExpression66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonIndexExpression66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression66()
}

func (c *current) onIndexExpression65() (any, error) {
	return unclosedIndex(c, "index")
}

func (p *parser) callonIndexExpression65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression65()
}

func (c *current) onIndexExpression1(lBracketI, exprI, checkIndexI, rBracketI, checkValueI any) (any, error) {
	return &ast.IndexExpression{
		LBracket:   pos(c),
		Index:      exprI.(*ast.GoCode),
		RBracket:   rBracketI.(*ast.Position),
		CheckIndex: checkIndexI != nil,
		CheckValue: checkValueI != nil,
	}, nil
}

func (p *parser) callonIndexExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexExpression1(stack["lBracketI"], stack["exprI"], stack["checkIndexI"], stack["rBracketI"], stack["checkValueI"])
}

func (c *current) onParenExpression5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression5()
}

func (c *current) onParenExpression11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonParenExpression11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression11()
}

func (c *current) onParenExpression16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression16()
}

func (c *current) onParenExpression13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonParenExpression13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression13(stack["posI"])
}

func (c *current) onParenExpression27() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonParenExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression27()
}

func (c *current) onParenExpression3(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonParenExpression3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression3(stack["lParenI"])
}

func (c *current) onParenExpression47() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonParenExpression47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression47()
}

func (c *current) onParenExpression55() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression55()
}

func (c *current) onParenExpression52(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonParenExpression52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression52(stack["posI"])
}

func (c *current) onParenExpression62(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonParenExpression62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression62(stack["rParenI"])
}

func (c *current) onParenExpression36(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonParenExpression36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression36(stack["rParenI"])
}

func (c *current) onParenExpression64() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonParenExpression64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression64()
}

func (c *current) onParenExpression63() (any, error) {
	return unclosedList(c, "parentheses")
}

func (p *parser) callonParenExpression63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression63()
}

func (c *current) onParenExpression1(lParenI, argsI, rParen, checkI any) (any, error) {
	return &ast.ParenExpression{
		LParen: pos(c),
		Args:   optCast[[]*ast.GoCode](argsI),
		RParen: rParen.(*ast.Position),
		Check:  checkI != nil,
	}, nil
}

func (p *parser) callonParenExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpression1(stack["lParenI"], stack["argsI"], stack["rParen"], stack["checkI"])
}

func (c *current) onparenExpressionArgs15() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonparenExpressionArgs15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs15()
}

func (c *current) onparenExpressionArgs1(firstI, restI any) (any, error) {
	return collectList[*ast.GoCode](firstI, restI, -1), nil
}

func (p *parser) callonparenExpressionArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparenExpressionArgs1(stack["firstI"], stack["restI"])
}

func (c *current) onGoExpression20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression20()
}

func (c *current) onGoExpression33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression33()
}

func (c *current) onGoExpression39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGoExpression39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression39()
}

func (c *current) onGoExpression44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression44()
}

func (c *current) onGoExpression41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoExpression41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression41(stack["posI"])
}

func (c *current) onGoExpression55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression55()
}

func (c *current) onGoExpression31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonGoExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression31(stack["lParenI"])
}

func (c *current) onGoExpression60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoExpression60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression60(stack["identI"])
}

func (c *current) onGoExpression79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression79()
}

func (c *current) onGoExpression87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression87()
}

func (c *current) onGoExpression84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoExpression84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression84(stack["posI"])
}

func (c *current) onGoExpression94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGoExpression94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression94(stack["rParenI"])
}

func (c *current) onGoExpression68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonGoExpression68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression68(stack["rParenI"])
}

func (c *current) onGoExpression96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression96()
}

func (c *current) onGoExpression95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonGoExpression95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression95()
}

func (c *current) onGoExpression25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGoExpression25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onGoExpression7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonGoExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression7(stack["prefixI"], stack["bfI"])
}

func (c *current) onGoExpression116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression116()
}

func (c *current) onGoExpression134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoExpression134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression134()
}

func (c *current) onGoExpression155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoExpression155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression155()
}

func (c *current) onGoExpression187() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression187()
}

func (c *current) onGoExpression194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression194()
}

func (c *current) onGoExpression205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression205()
}

func (c *current) onGoExpression212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression212()
}

func (c *current) onGoExpression217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression217()
}

func (c *current) onGoExpression232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoExpression232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression232()
}

func (c *current) onGoExpression253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoExpression253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression253()
}

func (c *current) onGoExpression285() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoExpression285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression285()
}

func (c *current) onGoExpression292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression292()
}

func (c *current) onGoExpression303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression303()
}

func (c *current) onGoExpression310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoExpression310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression310()
}

func (c *current) onGoExpression315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoExpression315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression315()
}

func (c *current) onGoExpression319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoExpression319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression319()
}

func (c *current) onGoExpression220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message:         "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: annoRange(c, pos(c), endI, "should contain only a single character or escape sequence"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoExpression220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression220(stack["valsI"], stack["endI"])
}

func (c *current) onGoExpression331() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoExpression331() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression331()
}

func (c *current) onGoExpression102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoExpression102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression102()
}

func (c *current) onGoExpression1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonGoExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoExpression1(stack["codesI"])
}

func (c *current) onnestedGoCode20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode20()
}

func (c *current) onnestedGoCode33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode33()
}

func (c *current) onnestedGoCode39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonnestedGoCode39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode39()
}

func (c *current) onnestedGoCode44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode44()
}

func (c *current) onnestedGoCode41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode41(stack["posI"])
}

func (c *current) onnestedGoCode55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode55()
}

func (c *current) onnestedGoCode31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode31(stack["lParenI"])
}

func (c *current) onnestedGoCode60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonnestedGoCode60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode60(stack["identI"])
}

func (c *current) onnestedGoCode79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode79()
}

func (c *current) onnestedGoCode87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode87()
}

func (c *current) onnestedGoCode84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode84(stack["posI"])
}

func (c *current) onnestedGoCode94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonnestedGoCode94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode94(stack["rParenI"])
}

func (c *current) onnestedGoCode68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonnestedGoCode68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode68(stack["rParenI"])
}

func (c *current) onnestedGoCode96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode96()
}

func (c *current) onnestedGoCode95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonnestedGoCode95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode95()
}

func (c *current) onnestedGoCode25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonnestedGoCode25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onnestedGoCode7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonnestedGoCode7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode7(stack["prefixI"], stack["bfI"])
}

func (c *current) onnestedGoCode116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode116()
}

func (c *current) onnestedGoCode134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonnestedGoCode134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode134()
}

func (c *current) onnestedGoCode155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonnestedGoCode155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode155()
}

func (c *current) onnestedGoCode187() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonnestedGoCode187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode187()
}

func (c *current) onnestedGoCode194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode194()
}

func (c *current) onnestedGoCode205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode205()
}

func (c *current) onnestedGoCode212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode212()
}

func (c *current) onnestedGoCode217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode217()
}

func (c *current) onnestedGoCode232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonnestedGoCode232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode232()
}

func (c *current) onnestedGoCode253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonnestedGoCode253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode253()
}

func (c *current) onnestedGoCode285() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonnestedGoCode285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode285()
}

func (c *current) onnestedGoCode292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode292()
}

func (c *current) onnestedGoCode303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode303()
}

func (c *current) onnestedGoCode310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode310()
}

func (c *current) onnestedGoCode315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonnestedGoCode315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode315()
}

func (c *current) onnestedGoCode319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonnestedGoCode319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode319()
}

func (c *current) onnestedGoCode220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message:         "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: annoRange(c, pos(c), endI, "should contain only a single character or escape sequence"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonnestedGoCode220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode220(stack["valsI"], stack["endI"])
}

func (c *current) onnestedGoCode329() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonnestedGoCode329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode329()
}

func (c *current) onnestedGoCode102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonnestedGoCode102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode102()
}

func (c *current) onnestedGoCode1(exprsI any) (any, error) {
	return exprsI, nil
}

func (p *parser) callonnestedGoCode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnestedGoCode1(stack["exprsI"])
}

func (c *current) ongoParenExpr11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr11()
}

func (c *current) ongoParenExpr17() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr17() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr17()
}

func (c *current) ongoParenExpr5() (any, error) {
	return &ast.RawGoCode{Code: "(", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr5()
}

func (c *current) ongoParenExpr27() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr27()
}

func (c *current) ongoParenExpr24() (any, error) {
	return &ast.RawGoCode{Code: ")", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr24()
}

func (c *current) ongoParenExpr29() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr29()
}

func (c *current) ongoParenExpr28() (any, error) {
	return unclosedParen(c, "(", ")")
}

func (p *parser) callongoParenExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr28()
}

func (c *current) ongoParenExpr2(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr2(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) ongoParenExpr44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr44()
}

func (c *current) ongoParenExpr50() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr50()
}

func (c *current) ongoParenExpr38() (any, error) {
	return &ast.RawGoCode{Code: "{", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr38()
}

func (c *current) ongoParenExpr60() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr60()
}

func (c *current) ongoParenExpr57() (any, error) {
	return &ast.RawGoCode{Code: "}", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr57()
}

func (c *current) ongoParenExpr62() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr62()
}

func (c *current) ongoParenExpr61() (any, error) {
	return unclosedParen(c, "{", "}")
}

func (p *parser) callongoParenExpr61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr61()
}

func (c *current) ongoParenExpr35(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr35(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) ongoParenExpr77() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr77()
}

func (c *current) ongoParenExpr83() error {
	pushStart(c)
	return nil
}

func (p *parser) callongoParenExpr83() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr83()
}

func (c *current) ongoParenExpr71() (any, error) {
	return &ast.RawGoCode{Code: "[", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr71()
}

func (c *current) ongoParenExpr93() error {
	popStart(c)
	return nil
}

func (p *parser) callongoParenExpr93() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr93()
}

func (c *current) ongoParenExpr90() (any, error) {
	return &ast.RawGoCode{Code: "]", Position: pos(c)}, nil
}

func (p *parser) callongoParenExpr90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr90()
}

func (c *current) ongoParenExpr95() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callongoParenExpr95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr95()
}

func (c *current) ongoParenExpr94() (any, error) {
	return unclosedParen(c, "[", "]")
}

func (p *parser) callongoParenExpr94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr94()
}

func (c *current) ongoParenExpr68(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callongoParenExpr68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParenExpr68(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onConditionalGoExpression20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression20()
}

func (c *current) onConditionalGoExpression33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression33()
}

func (c *current) onConditionalGoExpression39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonConditionalGoExpression39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression39()
}

func (c *current) onConditionalGoExpression44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression44()
}

func (c *current) onConditionalGoExpression41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression41(stack["posI"])
}

func (c *current) onConditionalGoExpression55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression55()
}

func (c *current) onConditionalGoExpression31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression31(stack["lParenI"])
}

func (c *current) onConditionalGoExpression60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonConditionalGoExpression60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression60(stack["identI"])
}

func (c *current) onConditionalGoExpression79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression79()
}

func (c *current) onConditionalGoExpression87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression87()
}

func (c *current) onConditionalGoExpression84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression84(stack["posI"])
}

func (c *current) onConditionalGoExpression94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonConditionalGoExpression94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression94(stack["rParenI"])
}

func (c *current) onConditionalGoExpression68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonConditionalGoExpression68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression68(stack["rParenI"])
}

func (c *current) onConditionalGoExpression96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression96()
}

func (c *current) onConditionalGoExpression95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonConditionalGoExpression95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression95()
}

func (c *current) onConditionalGoExpression25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonConditionalGoExpression25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onConditionalGoExpression7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonConditionalGoExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression7(stack["prefixI"], stack["bfI"])
}

func (c *current) onConditionalGoExpression116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression116()
}

func (c *current) onConditionalGoExpression134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonConditionalGoExpression134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression134()
}

func (c *current) onConditionalGoExpression155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonConditionalGoExpression155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression155()
}

func (c *current) onConditionalGoExpression187() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression187()
}

func (c *current) onConditionalGoExpression194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression194()
}

func (c *current) onConditionalGoExpression205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression205()
}

func (c *current) onConditionalGoExpression212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression212()
}

func (c *current) onConditionalGoExpression217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression217()
}

func (c *current) onConditionalGoExpression232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonConditionalGoExpression232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression232()
}

func (c *current) onConditionalGoExpression253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonConditionalGoExpression253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression253()
}

func (c *current) onConditionalGoExpression285() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression285()
}

func (c *current) onConditionalGoExpression292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression292()
}

func (c *current) onConditionalGoExpression303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression303()
}

func (c *current) onConditionalGoExpression310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression310()
}

func (c *current) onConditionalGoExpression315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonConditionalGoExpression315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression315()
}

func (c *current) onConditionalGoExpression319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonConditionalGoExpression319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression319()
}

func (c *current) onConditionalGoExpression220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message:         "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: annoRange(c, pos(c), endI, "should contain only a single character or escape sequence"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonConditionalGoExpression220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression220(stack["valsI"], stack["endI"])
}

func (c *current) onConditionalGoExpression331() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonConditionalGoExpression331() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression331()
}

func (c *current) onConditionalGoExpression102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonConditionalGoExpression102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression102()
}

func (c *current) onConditionalGoExpression1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonConditionalGoExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalGoExpression1(stack["codesI"])
}

func (c *current) onconditionalGoParenExpr11() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr11()
}

func (c *current) onconditionalGoParenExpr17() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr17() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr17()
}

func (c *current) onconditionalGoParenExpr5() (any, error) {
	return &ast.RawGoCode{Code: "(", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr5()
}

func (c *current) onconditionalGoParenExpr27() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr27()
}

func (c *current) onconditionalGoParenExpr24() (any, error) {
	return &ast.RawGoCode{Code: ")", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr24()
}

func (c *current) onconditionalGoParenExpr29() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr29()
}

func (c *current) onconditionalGoParenExpr28() (any, error) {
	return unclosedParen(c, "(", ")")
}

func (p *parser) callonconditionalGoParenExpr28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr28()
}

func (c *current) onconditionalGoParenExpr2(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr2(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onconditionalGoParenExpr44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr44()
}

func (c *current) onconditionalGoParenExpr50() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr50()
}

func (c *current) onconditionalGoParenExpr38() (any, error) {
	return &ast.RawGoCode{Code: "{", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr38()
}

func (c *current) onconditionalGoParenExpr60() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr60() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr60()
}

func (c *current) onconditionalGoParenExpr57() (any, error) {
	return &ast.RawGoCode{Code: "}", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr57()
}

func (c *current) onconditionalGoParenExpr62() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr62()
}

func (c *current) onconditionalGoParenExpr61() (any, error) {
	return unclosedParen(c, "{", "}")
}

func (p *parser) callonconditionalGoParenExpr61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr61()
}

func (c *current) onconditionalGoParenExpr35(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr35(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onconditionalGoParenExpr101() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr101()
}

func (c *current) onconditionalGoParenExpr107() error {
	pushStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr107() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr107()
}

func (c *current) onconditionalGoParenExpr95() (any, error) {
	return &ast.RawGoCode{Code: "[", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr95()
}

func (c *current) onconditionalGoParenExpr117() error {
	popStart(c)
	return nil
}

func (p *parser) callonconditionalGoParenExpr117() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr117()
}

func (c *current) onconditionalGoParenExpr114() (any, error) {
	return &ast.RawGoCode{Code: "]", Position: pos(c)}, nil
}

func (p *parser) callonconditionalGoParenExpr114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr114()
}

func (c *current) onconditionalGoParenExpr119() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonconditionalGoParenExpr119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr119()
}

func (c *current) onconditionalGoParenExpr118() (any, error) {
	return unclosedParen(c, "[", "]")
}

func (p *parser) callonconditionalGoParenExpr118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr118()
}

func (c *current) onconditionalGoParenExpr92(openI, codeI, closeI any) (any, error) {
	return []any{openI, codeI, closeI}, nil
}

func (p *parser) callonconditionalGoParenExpr92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconditionalGoParenExpr92(stack["openI"], stack["codeI"], stack["closeI"])
}

func (c *current) onGoStatement20() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement20()
}

func (c *current) onGoStatement33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement33()
}

func (c *current) onGoStatement39() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGoStatement39() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement39()
}

func (c *current) onGoStatement44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement44()
}

func (c *current) onGoStatement41(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoStatement41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement41(stack["posI"])
}

func (c *current) onGoStatement55() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement55()
}

func (c *current) onGoStatement31(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonGoStatement31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement31(stack["lParenI"])
}

func (c *current) onGoStatement60(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoStatement60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement60(stack["identI"])
}

func (c *current) onGoStatement79() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement79()
}

func (c *current) onGoStatement87() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement87()
}

func (c *current) onGoStatement84(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGoStatement84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement84(stack["posI"])
}

func (c *current) onGoStatement94(rParenI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonGoStatement94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement94(stack["rParenI"])
}

func (c *current) onGoStatement68(rParenI any) (any, error) {
	return rParenI.(*ast.Position), nil
}

func (p *parser) callonGoStatement68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement68(stack["rParenI"])
}

func (c *current) onGoStatement96() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement96()
}

func (c *current) onGoStatement95() (any, error) {
	return unclosedList(c, "`block` function arguments")
}

func (p *parser) callonGoStatement95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement95()
}

func (c *current) onGoStatement25(lParenI, identI, rParenI any) (any, error) {
	return &ast.BlockFunction{
		LParen:   lParenI.(*ast.Position),
		Block:    identI.(*ast.Ident),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGoStatement25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement25(stack["lParenI"], stack["identI"], stack["rParenI"])
}

func (c *current) onGoStatement7(prefixI, bfI any) (any, error) {
	if prefixI == nil {
		return bfI, nil
	}

	return []any{&ast.RawGoCode{Code: concat(prefixI), Position: pos(c)}, bfI}, nil
}

func (p *parser) callonGoStatement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement7(stack["prefixI"], stack["bfI"])
}

func (c *current) onGoStatement116() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement116() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement116()
}

func (c *current) onGoStatement134() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoStatement134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement134()
}

func (c *current) onGoStatement155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoStatement155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement155()
}

func (c *current) onGoStatement187() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoStatement187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement187()
}

func (c *current) onGoStatement194() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement194()
}

func (c *current) onGoStatement205() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement205()
}

func (c *current) onGoStatement212() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement212()
}

func (c *current) onGoStatement217() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoStatement217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement217()
}

func (c *current) onGoStatement232() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoStatement232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement232()
}

func (c *current) onGoStatement253() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonGoStatement253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement253()
}

func (c *current) onGoStatement285() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonGoStatement285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement285()
}

func (c *current) onGoStatement292() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement292()
}

func (c *current) onGoStatement303() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement303() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement303()
}

func (c *current) onGoStatement310() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonGoStatement310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement310()
}

func (c *current) onGoStatement315() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonGoStatement315() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement315()
}

func (c *current) onGoStatement319() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGoStatement319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement319()
}

func (c *current) onGoStatement220(valsI, endI any) (any, error) {
	valIs := slice(valsI)
	return c.text, &fileerr.Error{
		Message:         "rune literals may not contain multiple or zero characters",
		ErrorAnnotation: annoRange(c, pos(c), endI, "should contain only a single character or escape sequence"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "use a single character or escape sequence",
				Example: func() string {
					if len(valIs) > 0 {
						return "''" + concat(valIs[0]) + "'"
					}
					return "`'a'` or `'\\u1234'`"
				}(),
			},
			{
				Suggestion: "make this a string, if the context allows it",
				Code:       strconv.Quote(string(c.text[1 : len(c.text)-1])),
			},
		},
	}

}

func (p *parser) callonGoStatement220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement220(stack["valsI"], stack["endI"])
}

func (c *current) onGoStatement331() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGoStatement331() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement331()
}

func (c *current) onGoStatement102() (any, error) {
	return &ast.RawGoCode{Code: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonGoStatement102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement102()
}

func (c *current) onGoStatement1(codesI any) (any, error) {
	return combineGoCode(codesI), nil
}

func (p *parser) callonGoStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoStatement1(stack["codesI"])
}

func (c *current) onInterpretedString5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString5()
}

func (c *current) onInterpretedString11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpretedString11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString11()
}

func (c *current) onInterpretedString13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString13()
}

func (c *current) onInterpretedString3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonInterpretedString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString3(stack["startI"])
}

func (c *current) onInterpretedString29() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString29()
}

func (c *current) onInterpretedString35(endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpretedString35() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString35(stack["endI"])
}

func (c *current) onInterpretedString25(endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonInterpretedString25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString25(stack["endI"])
}

func (c *current) onInterpretedString38() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpretedString38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString38()
}

func (c *current) onInterpretedString36(endI any) (any, error) {
	start := popStart(c)
	return endI.(*ast.Position), &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Highlight:  anno.HighlightToEOL(start).Delta(1, 0),
			Annotation: "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			anno.Position(file(c), start, "for the string literal started here"),
		},
	}
}

func (p *parser) callonInterpretedString36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString36(stack["endI"])
}

func (c *current) onInterpretedString1(startI, contentsI, endI any) (any, error) {
	return &ast.String{
		Open:     pos(c),
		Quote:    '"',
		Contents: sliceOf[ast.StringContent](contentsI),
		Close:    endI.(*ast.Position),
	}, nil
}

func (p *parser) callonInterpretedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedString1(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onRawString5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString5()
}

func (c *current) onRawString11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonRawString11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString11()
}

func (c *current) onRawString13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString13()
}

func (c *current) onRawString3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonRawString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString3(stack["startI"])
}

func (c *current) onRawString28() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString28()
}

func (c *current) onRawString35(posI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonRawString35() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString35(stack["posI"])
}

func (c *current) onRawString25(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonRawString25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString25(stack["posI"])
}

func (c *current) onRawString38() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonRawString38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString38()
}

func (c *current) onRawString36(posI any) (any, error) {
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed string literal",
		ErrorAnnotation: anno.Position(file(c), popStart(c), "expected a closing ``` for this ```"),
	}
}

func (p *parser) callonRawString36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString36(stack["posI"])
}

func (c *current) onRawString1(startI, contentsI, endI any) (any, error) {
	return &ast.String{
		Open:     pos(c),
		Quote:    '`',
		Contents: sliceOf[ast.StringContent](contentsI),
		Close:    endI.(*ast.Position),
	}, nil
}

func (p *parser) callonRawString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString1(stack["startI"], stack["contentsI"], stack["endI"])
}

func (c *current) onInterpretedStringContent10() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonInterpretedStringContent10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent10()
}

func (c *current) onInterpretedStringContent24() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonInterpretedStringContent24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent24()
}

func (c *current) onInterpretedStringContent45() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callonInterpretedStringContent45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent45()
}

func (c *current) onInterpretedStringContent77() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callonInterpretedStringContent77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent77()
}

func (c *current) onInterpretedStringContent84() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringContent84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent84()
}

func (c *current) onInterpretedStringContent95() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringContent95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent95()
}

func (c *current) onInterpretedStringContent102() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringContent102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent102()
}

func (c *current) onInterpretedStringContent107() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callonInterpretedStringContent107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent107()
}

func (c *current) onInterpretedStringContent2() (any, error) {
	return &ast.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpretedStringContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpretedStringContent2()
}

func (c *current) onRawStringContent10() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonRawStringContent10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringContent10()
}

func (c *current) onRawStringContent19() (bool, error) {
	return state(c).Inline, nil
}

func (p *parser) callonRawStringContent19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringContent19()
}

func (c *current) onRawStringContent22() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonRawStringContent22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringContent22()
}

func (c *current) onRawStringContent2() (any, error) {
	return &ast.StringText{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonRawStringContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawStringContent2()
}

func (c *current) onStringInterpolation5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStringInterpolation5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation5()
}

func (c *current) onStringInterpolation11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonStringInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation11()
}

func (c *current) onStringInterpolation13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStringInterpolation13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation13()
}

func (c *current) onStringInterpolation3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonStringInterpolation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation3(stack["startI"])
}

func (c *current) onStringInterpolation25() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStringInterpolation25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation25()
}

func (c *current) onStringInterpolation31(startI, interpI, endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonStringInterpolation31() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation31(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onStringInterpolation22(startI, interpI, endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonStringInterpolation22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation22(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onStringInterpolation1(startI, interpI, endI any) (any, error) {
	return interpI, nil
}

func (p *parser) callonStringInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringInterpolation1(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onstringInterpolation2() (any, error) {
	return &ast.EscapedHash{Position: peekStart(c)}, nil
}

func (p *parser) callonstringInterpolation2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolation2()
}

func (c *current) onstringInterpolation7() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonstringInterpolation7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolation7()
}

func (c *current) onstringInterpolation4(nameI any) (any, error) {
	return &ast.CharacterReference{
		Name:     nameI.(string),
		Position: peekStart(c),
	}, nil
}

func (p *parser) callonstringInterpolation4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolation4(stack["nameI"])
}

func (c *current) onstringInterpolation12() (any, error) {
	return &ast.BadInterpolation{Position: peekStart(c)}, &fileerr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: annoPos(c, "expected an expression interpolation, a component call,\n"+
			"an element interpolation, or a HTML character reference"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) callonstringInterpolation12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstringInterpolation12()
}

func (c *current) ongoStructType12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoStructType12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoStructType12()
}

func (c *current) ongoStructType28() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoStructType28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoStructType28()
}

func (c *current) ongoFieldDecl16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoFieldDecl16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl16()
}

func (c *current) ongoFieldDecl34() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "unclosed string literal",
		ErrorAnnotation: annoPos(c, "expected a closing ``` for this ```"),
	}
}

func (p *parser) callongoFieldDecl34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl34()
}

func (c *current) ongoFieldDecl58() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callongoFieldDecl58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl58()
}

func (c *current) ongoFieldDecl79() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callongoFieldDecl79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl79()
}

func (c *current) ongoFieldDecl111() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl111()
}

func (c *current) ongoFieldDecl118() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl118()
}

func (c *current) ongoFieldDecl129() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl129()
}

func (c *current) ongoFieldDecl136() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl136()
}

func (c *current) ongoFieldDecl141() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl141() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl141()
}

func (c *current) ongoFieldDecl155() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 6-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 6-len(c.text)) + "`",
	})

	return c.text, &fileerr.Error{
		Message:         "invalid little u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 6, "expected `\\u`, followed by four hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callongoFieldDecl155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl155()
}

func (c *current) ongoFieldDecl176() (any, error) {
	suggestions := []fileerr.Suggestion{
		{
			Suggestion: "if you didn't mean to write a big U escape, escape the `\\`",
			Code:       "`\\\\" + string(c.text[1:]) + "`",
		},
	}
	if len(c.text) >= 4 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a two digit hex escape",
			Code:       "`\\x" + string(c.text[2:4]) + "`",
		})
	}
	if len(c.text) >= 6 {
		suggestions = append(suggestions, fileerr.Suggestion{
			Suggestion: "make this a little u escape",
			Code:       "`\\u" + string(c.text[2:6]) + "`",
		})
	}
	suggestions = append(suggestions, fileerr.Suggestion{
		Suggestion: fmt.Sprint("append the missing ", 10-len(c.text), " hex digit(s)"),
		Example:    "`\\U" + string(c.text[2:4]) + strings.Repeat("f", 10-len(c.text)) + "`",
	})
	return c.text, &fileerr.Error{
		Message:         "invalid big u escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 10, "expected `\\U`, followed by eight hex digits"),
		Example:         "`\\u1a7f`",
		Suggestions:     suggestions,
	}

}

func (p *parser) callongoFieldDecl176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl176()
}

func (c *current) ongoFieldDecl208() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid hex byte escape",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 4, "expected `\\x`, followed by two hex digits"),
		Example:         "`\\x1f`",
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write a hex escape, escape the `\\`",
				Code:       "`\\\\" + string(c.text[1:]) + "`",
			},
		},
	}

}

func (p *parser) callongoFieldDecl208() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl208()
}

func (c *current) ongoFieldDecl215() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a big U escape",
				Code:       "`\\U" + string(c.text[1:9]) + "`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl215()
}

func (c *current) ongoFieldDecl226() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a little u escape",
				Code:       "`\\u" + string(c.text[1:5]) + "`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl226()
}

func (c *current) ongoFieldDecl233() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			}, {
				Suggestion: "make this a hex escape",
				Code:       "`\\x" + string(c.text[1:3]) + "`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl233() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl233()
}

func (c *current) ongoFieldDecl238() (any, error) {
	return c.text, &fileerr.Error{
		Message: "invalid escape sequence",
		ErrorAnnotation: anno.NChars(file(c), pos(c), 2,
			"expected `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\`, `\\'`, `\\x`, `\\u`, an octal escape, or `\\U`"),
		Suggestions: []fileerr.Suggestion{
			{
				Suggestion: "if you didn't mean to write an escape, escape the `\\`",
				Code:       "`\\\\`",
			},
		},
	}
}

func (p *parser) callongoFieldDecl238() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl238()
}

func (c *current) ongoFieldDecl144() (any, error) {
	return c.text, &fileerr.Error{
		Message: "unclosed string literal",
		ErrorAnnotation: anno.Anno(file(c), anno.Annotation{
			Highlight:  anno.HighlightToEOL(pos(c)).Delta(1, 0),
			Annotation: "expected a `\"` somewhere here",
		}),
		HintAnnotations: []fileerr.Annotation{
			annoPos(c, "for the string literal started here"),
		},
	}

}

func (p *parser) callongoFieldDecl144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoFieldDecl144()
}

func (c *current) ongoParameters7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameters7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameters7()
}

func (c *current) ongoParameters23() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameters23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameters23()
}

func (c *current) ongoParameterList12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameterList12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameterList12()
}

func (c *current) ongoParameterDecl16() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoParameterDecl16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoParameterDecl16()
}

func (c *current) ongoInterfaceType12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoInterfaceType12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoInterfaceType12()
}

func (c *current) ongoInterfaceType32() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoInterfaceType32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoInterfaceType32()
}

func (c *current) ongoTypeElem12() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callongoTypeElem12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongoTypeElem12()
}

func (c *current) onState10() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonState10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState10()
}

func (c *current) onState17(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonState17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState17(stack["unexpectedI"])
}

func (c *current) onState4(startI, badI, endI any) (any, error) {
	return &ast.State{
			Vars: []ast.StateNode{
				&ast.BadStateVar{
					Line:     badI.(string),
					Position: *startI.(*ast.Position),
				},
			},
			Position: pos(c),
		}, &fileerr.Error{
			Message: "invalid state",
			ErrorAnnotation: annoRange(c, startI, endI,
				"expected a state variable declaration or a group of state variables"),
			Example: "`state bark = \"woof\"`",
		}
}

func (p *parser) callonState4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onState4(stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onSingleState1(varI any) (any, error) {
	return ast.State{
		Vars:     []ast.StateNode{varI.(*ast.StateVar)},
		Position: pos(c),
	}, nil
}

func (p *parser) callonSingleState1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleState1(stack["varI"])
}

func (c *current) onGroupState9() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState9()
}

func (c *current) onGroupState15() error {
	pushStart(c)
	return nil
}

func (p *parser) callonGroupState15() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState15()
}

func (c *current) onGroupState20() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState20()
}

func (c *current) onGroupState17(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGroupState17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState17(stack["posI"])
}

func (c *current) onGroupState31() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGroupState31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState31()
}

func (c *current) onGroupState7(lParenI any) (any, error) {
	return lParenI.(*ast.Position), nil
}

func (p *parser) callonGroupState7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState7(stack["lParenI"])
}

func (c *current) onGroupState46() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonGroupState46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState46()
}

func (c *current) onGroupState54() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState54()
}

func (c *current) onGroupState51(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonGroupState51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState51(stack["posI"])
}

func (c *current) onGroupState40(rParenI any) (any, error) {
	return rParenI, nil
}

func (p *parser) callonGroupState40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState40(stack["rParenI"])
}

func (c *current) onGroupState62() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonGroupState62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState62()
}

func (c *current) onGroupState61() (any, error) {
	return nil, &fileerr.Error{
		Message:         "missing `)`",
		ErrorAnnotation: annoPos(c, "expected `)` to close the state group"),
	}
}

func (p *parser) callonGroupState61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState61()
}

func (c *current) onGroupState1(lParenI, nodesI, rParenI any) (any, error) {
	return ast.State{
		LParen:   lParenI.(*ast.Position),
		Vars:     sliceOf[ast.StateNode](nodesI),
		RParen:   rParenI.(*ast.Position),
		Position: pos(c),
	}, nil
}

func (p *parser) callonGroupState1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupState1(stack["lParenI"], stack["nodesI"], stack["rParenI"])
}

func (c *current) onstateNode7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateNode7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateNode7()
}

func (c *current) onstateNode13(textI any) (any, error) {
	return &ast.DevComment{
		Comment:  concat(textI),
		Position: pos(c),
	}, nil
}

func (p *parser) callonstateNode13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateNode13(stack["textI"])
}

func (c *current) onstateNode45(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateNode45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateNode45(stack["unexpectedI"])
}

func (c *current) onstateNode42(lineI any) (any, error) {
	line := lineI.(string)
	return &ast.BadStateVar{
			Line:     line,
			Position: pos(c),
		}, &fileerr.Error{
			Message:         "invalid state variable",
			ErrorAnnotation: anno.NChars(file(c), pos(c), len(line), "expected a state variable declaration"),
		}
}

func (p *parser) callonstateNode42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateNode42(stack["lineI"])
}

func (c *current) onstateNode1(nodeI any) (any, error) {
	return nodeI, nil
}

func (p *parser) callonstateNode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateNode1(stack["nodeI"])
}

func (c *current) onStateVar8(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonStateVar8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar8(stack["identI"])
}

func (c *current) onStateVar14() (any, error) {
	return invalidIdent(c, "state variable", pos(c), string(c.text))
}

func (p *parser) callonStateVar14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar14()
}

func (c *current) onStateVar26(identI any) (any, error) {
	return &ast.Ident{Ident: string(c.text), Position: pos(c)}, nil
}

func (p *parser) callonStateVar26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar26(stack["identI"])
}

func (c *current) onStateVar32() (any, error) {
	return invalidIdent(c, "state variable", pos(c), string(c.text))
}

func (p *parser) callonStateVar32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar32()
}

func (c *current) onStateVar4(firstI, restI any) (any, error) {
	rest := getTuples[*ast.Ident](restI, -1)
	names := make([]*ast.Ident, 1, 1+len(rest))
	names[0] = firstI.(*ast.Ident)
	names = append(names, rest...)
	return names, nil
}

func (p *parser) callonStateVar4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar4(stack["firstI"], stack["restI"])
}

func (c *current) onStateVar43() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonStateVar43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar43()
}

func (c *current) onStateVar1(namesI, typI, assignI, valsI any) (any, error) {
	names := namesI.([]*ast.Ident)
	vals := valsI.([]*ast.GoCode)

	if len(names) != len(vals) && len(vals) > 0 {
		return (*ast.StateVar)(nil), &fileerr.Error{
			Message: "state variable: unequal number of declarations and initializations",
			ErrorAnnotation: annoPos(c,
				fmt.Sprintf("have %d declarations and %d initializations", len(names), len(vals))),
			Example: "`state bark, howl = \"woof\", \"awoooo\"`",
			Suggestions: []fileerr.Suggestion{
				{Suggestion: "the number of variable names must always match the number of expressions"},
			},
		}
	}

	var assign *ast.Position
	if len(vals) > 0 {
		assign = assignI.(*ast.Position)
	}

	return ast.StateVar{
		Names:  names,
		Type:   optCast[*ast.Type](typI),
		Assign: assign,
		Values: vals,
	}, nil
}

func (p *parser) callonStateVar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStateVar1(stack["namesI"], stack["typI"], stack["assignI"], stack["valsI"])
}

func (c *current) onstateVarType2(typI any) (any, error) {
	return typI, nil
}

func (p *parser) callonstateVarType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarType2(stack["typI"])
}

func (c *current) onstateVarType8(textI any) (any, error) {
	text := concat(textI)
	return ast.Type{
			Type:     string(c.text),
			Position: pos(c),
		}, &fileerr.Error{
			Message:         "invalid type",
			ErrorAnnotation: anno.NChars(file(c), pos(c), len(text), "this is not a valid Go type"),
		}
}

func (p *parser) callonstateVarType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarType8(stack["textI"])
}

func (c *current) onstateVarValues9() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues9()
}

func (c *current) onstateVarValues2(valsI any) (any, error) {
	return valsI, nil
}

func (p *parser) callonstateVarValues2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues2(stack["valsI"])
}

func (c *current) onstateVarValues41() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues41()
}

func (c *current) onstateVarValues49() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstateVarValues49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues49()
}

func (c *current) onstateVarValues56(unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateVarValues56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues56(stack["unexpectedI"])
}

func (c *current) onstateVarValues34(valsI, startI, badI, endI any) (any, error) {
	return optCast[[]*ast.GoCode](valsI),
		newUnexpectedTokensErr(c, *startI.(*ast.Position), *endI.(*ast.Position), "unexpected tokens")
}

func (p *parser) callonstateVarValues34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues34(stack["valsI"], stack["startI"], stack["badI"], stack["endI"])
}

func (c *current) onstateVarValues118() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonstateVarValues118() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues118()
}

func (c *current) onstateVarValues123() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonstateVarValues123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues123()
}

func (c *current) onstateVarValues129(startI, unexpectedI any) (any, error) {
	return concat(unexpectedI), nil
}

func (p *parser) callonstateVarValues129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues129(stack["startI"], stack["unexpectedI"])
}

func (c *current) onstateVarValues111(startI, unexpectedI, endI any) (any, error) {
	return ([]*ast.GoCode)(nil), &fileerr.Error{
		Message:         "invalid state variable values",
		ErrorAnnotation: annoRange(c, startI, endI, "expected one or more Go expressions"),
		Example:         "`state bark = \"woof\"`",
	}
}

func (p *parser) callonstateVarValues111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues111(stack["startI"], stack["unexpectedI"], stack["endI"])
}

func (c *current) onstateVarValues184() (any, error) {
	return ([]*ast.GoCode)(nil), nil
}

func (p *parser) callonstateVarValues184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValues184()
}

func (c *current) onstateVarValueList1(firstI, restI any) (any, error) {
	rest := getTuples[*ast.GoCode](restI, -1)
	values := make([]*ast.GoCode, 1, 1+len(rest))
	values[0] = firstI.(*ast.GoCode)
	values = append(values, rest...)
	return values, nil
}

func (p *parser) callonstateVarValueList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstateVarValueList1(stack["firstI"], stack["restI"])
}

func (c *current) onArrowBlock4() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonArrowBlock4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock4()
}

func (c *current) onArrowBlock10() error {
	editState(c, func(s *State) {
		s.Indentation.Target = c.pos.col - 1 // col is 1-indexed
	})
	return nil
}

func (p *parser) callonArrowBlock10() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock10()
}

func (c *current) onArrowBlock2(firstI, restI any) (any, error) {
	first, firstOk := firstI.(ast.TextLine)
	restTuples := slice(restI)

	n := len(restTuples)
	if firstOk {
		n++
	}

	lines := make([]ast.TextLine, 0, n)
	if firstOk {
		lines = append(lines, first)
	}
	for _, lt := range restTuples {
		lines = append(lines, getTuple[ast.TextLine](lt, -1))
	}

	return &ast.ArrowBlock{
		Lines:    lines,
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlock2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock2(stack["firstI"], stack["restI"])
}

func (c *current) onArrowBlock37() (any, error) {
	return ast.ArrowBlock{Position: pos(c)}, nil
}

func (p *parser) callonArrowBlock37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlock37()
}

func (c *current) onBracketText7() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketText7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText7()
}

func (c *current) onBracketText4(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketText4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText4(stack["posI"])
}

func (c *current) onBracketText18() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketText18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText18()
}

func (c *current) onBracketText29() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketText29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText29()
}

func (c *current) onBracketText37() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketText37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText37()
}

func (c *current) onBracketText34(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketText34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText34(stack["posI"])
}

func (c *current) onBracketText2(posI, btI, rBracketI any) (any, error) {
	return &ast.BracketText{
		LBracket: pos(c),
		Lines:    sliceOf[ast.TextLine](btI),
		RBracket: rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) callonBracketText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText2(stack["posI"], stack["btI"], stack["rBracketI"])
}

func (c *current) onBracketText68() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketText68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText68()
}

func (c *current) onBracketText65(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketText65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText65(stack["posI"])
}

func (c *current) onBracketText63(posI, btI any) (any, error) {
	return &ast.BracketText{
			LBracket: pos(c),
			Lines:    sliceOf[ast.TextLine](btI),
		}, &fileerr.Error{
			Message:         "unclosed bracket text",
			ErrorAnnotation: annoPos(c, "missing closing `]`"),
		}
}

func (p *parser) callonBracketText63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketText63(stack["posI"], stack["btI"])
}

func (c *current) onArrowBlockLine1(nodesI any) (any, error) {
	return ast.TextLine(sliceOf[ast.TextNode](nodesI)), nil
}

func (p *parser) callonArrowBlockLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockLine1(stack["nodesI"])
}

func (c *current) onBracketTextLine7() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketTextLine7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine7()
}

func (c *current) onBracketTextLine1(nodesI any) (any, error) {
	return ast.TextLine(sliceOf[ast.TextNode](nodesI)), nil
}

func (p *parser) callonBracketTextLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextLine1(stack["nodesI"])
}

func (c *current) onInterpolationValueLine1(nodesI any) (any, error) {
	return ast.TextLine(sliceOf[ast.TextNode](nodesI)), nil
}

func (p *parser) callonInterpolationValueLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueLine1(stack["nodesI"])
}

func (c *current) onArrowBlockTextNode25() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonArrowBlockTextNode25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockTextNode25()
}

func (c *current) onArrowBlockTextNode2(textI any) (any, error) {
	return &ast.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonArrowBlockTextNode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowBlockTextNode2(stack["textI"])
}

func (c *current) onBracketTextTextNode26() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketTextTextNode26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextNode26()
}

func (c *current) onBracketTextTextNode23(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketTextTextNode23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextNode23(stack["posI"])
}

func (c *current) onBracketTextTextNode58() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonBracketTextTextNode58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextNode58()
}

func (c *current) onBracketTextTextNode66() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonBracketTextTextNode66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextNode66()
}

func (c *current) onBracketTextTextNode63(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonBracketTextTextNode63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextNode63(stack["posI"])
}

func (c *current) onBracketTextTextNode2(textI any) (any, error) {
	return &ast.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonBracketTextTextNode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracketTextTextNode2(stack["textI"])
}

func (c *current) onInterpolationValueTextNode25() (bool, error) {
	return !state(c).Inline, nil
}

func (p *parser) callonInterpolationValueTextNode25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueTextNode25()
}

func (c *current) onInterpolationValueTextNode2(textI any) (any, error) {
	return &ast.Text{
		Text:     string(c.text),
		Position: pos(c),
	}, nil
}

func (p *parser) callonInterpolationValueTextNode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValueTextNode2(stack["textI"])
}

func (c *current) onInterpolation5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolation5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation5()
}

func (c *current) onInterpolation11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation11()
}

func (c *current) onInterpolation13() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolation13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation13()
}

func (c *current) onInterpolation3(startI any) (any, error) {
	return startI.(*ast.Position), nil
}

func (p *parser) callonInterpolation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation3(stack["startI"])
}

func (c *current) onInterpolation25() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolation25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation25()
}

func (c *current) onInterpolation31(startI, interpI, endI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpolation31() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation31(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onInterpolation22(startI, interpI, endI any) (any, error) {
	return endI.(*ast.Position), nil
}

func (p *parser) callonInterpolation22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation22(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) onInterpolation1(startI, interpI, endI any) (any, error) {
	return interpI, nil
}

func (p *parser) callonInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation1(stack["startI"], stack["interpI"], stack["endI"])
}

func (c *current) oninterpolation2() (any, error) {
	return &ast.EscapedHash{Position: peekStart(c)}, nil
}

func (p *parser) calloninterpolation2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolation2()
}

func (c *current) oninterpolation4() (any, error) {
	return &ast.HashSpace{Position: peekStart(c)}, nil
}

func (p *parser) calloninterpolation4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolation4()
}

func (c *current) oninterpolation9() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloninterpolation9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolation9()
}

func (c *current) oninterpolation6(nameI any) (any, error) {
	return &ast.CharacterReference{
		Name:     nameI.(string),
		Position: peekStart(c),
	}, nil
}

func (p *parser) calloninterpolation6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolation6(stack["nameI"])
}

func (c *current) oninterpolation16() (any, error) {
	return &ast.BadInterpolation{Position: peekStart(c)}, &fileerr.Error{
		Message: "bad interpolation",
		ErrorAnnotation: annoPos(c, "expected an expression interpolation, a component call,\n"+
			"an element interpolation, or a HTML character reference"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#`", Code: "`##`"},
		},
	}
}

func (p *parser) calloninterpolation16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolation16()
}

func (c *current) onExpressionInterpolation23() (any, error) {
	return []byte(nil), &fileerr.Error{
		Message:         "missing format verb",
		ErrorAnnotation: annoPos(c, "expected a formatting verb"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation23()
}

func (c *current) onExpressionInterpolation26() (any, error) {
	return c.text, &fileerr.Error{
		Message:         "invalid format verb",
		ErrorAnnotation: annoPos(c, "this is not a valid format verb"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on valid formatting verbs"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` before this error by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation26()
}

func (c *current) onExpressionInterpolation6() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonExpressionInterpolation6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation6()
}

func (c *current) onExpressionInterpolation34() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonExpressionInterpolation34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation34()
}

func (c *current) onExpressionInterpolation28(endI any) (any, error) {
	return string(c.text[1:]), &fileerr.Error{
		Message:         "invalid format directive",
		ErrorAnnotation: annoRange(c, pos(c), endI, "invalid formatter"),
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "consult the docs of the Go built-in package `fmt` on how to write a formatting placeholder"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonExpressionInterpolation28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation28(stack["endI"])
}

func (c *current) onExpressionInterpolation1(fmtDirectiveI, exprI any) (any, error) {
	exprInterp := exprI.(*ast.ExpressionInterpolation)
	exprInterp.FormatDirective = optCast[string](fmtDirectiveI)
	exprInterp.Position = peekStart(c)
	return exprInterp, nil
}

func (p *parser) callonExpressionInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionInterpolation1(stack["fmtDirectiveI"], stack["exprI"])
}

func (c *current) oninterpolationExpression6() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloninterpolationExpression6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression6()
}

func (c *current) oninterpolationExpression12() error {
	pushStart(c)
	return nil
}

func (p *parser) calloninterpolationExpression12() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression12()
}

func (c *current) oninterpolationExpression17() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloninterpolationExpression17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression17()
}

func (c *current) oninterpolationExpression14(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloninterpolationExpression14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression14(stack["posI"])
}

func (c *current) oninterpolationExpression4(lBraceI any) (any, error) {
	return lBraceI.(*ast.Position), nil
}

func (p *parser) calloninterpolationExpression4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression4(stack["lBraceI"])
}

func (c *current) oninterpolationExpression34() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloninterpolationExpression34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression34()
}

func (c *current) oninterpolationExpression31(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) calloninterpolationExpression31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression31(stack["posI"])
}

func (c *current) oninterpolationExpression41(rBraceI any) error {
	popStart(c)
	return nil
}

func (p *parser) calloninterpolationExpression41() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression41(stack["rBraceI"])
}

func (c *current) oninterpolationExpression28(rBraceI any) (any, error) {
	return rBraceI.(*ast.Position), nil
}

func (p *parser) calloninterpolationExpression28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression28(stack["rBraceI"])
}

func (c *current) oninterpolationExpression44() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) calloninterpolationExpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression44()
}

func (c *current) oninterpolationExpression42(posI any) (any, error) {
	braceStart := popStart(c)
	hashStart := peekStart(c)
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed interpolation",
		ErrorAnnotation: anno.Position(file(c), braceStart, "expected a closing `}` for this `}`"),
		HintAnnotations: []fileerr.Annotation{
			anno.Position(file(c), hashStart, "for the interpolation started here"),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `}`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) calloninterpolationExpression42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression42(stack["posI"])
}

func (c *current) oninterpolationExpression1(lBraceI, exprI, rBraceI any) (any, error) {
	return &ast.ExpressionInterpolation{
		LBrace:     lBraceI.(*ast.Position),
		Expression: optCast[ast.Expression](exprI),
		RBrace:     rBraceI.(*ast.Position),
	}, nil
}

func (p *parser) calloninterpolationExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninterpolationExpression1(stack["lBraceI"], stack["exprI"], stack["rBraceI"])
}

func (c *current) onelementInterpolation6(nameI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonelementInterpolation6() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation6(stack["nameI"])
}

func (c *current) onelementInterpolation10(nameI, attrsI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonelementInterpolation10() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation10(stack["nameI"], stack["attrsI"])
}

func (c *current) onelementInterpolation1(nameI, attrsI, valI any) (any, error) {
	return &ast.ElementInterpolation{
		Element: &ast.Element{
			Name:       concat(nameI),
			Attributes: sliceOf[ast.AttributeCollection](attrsI),
			Position:   pos(c),
		},
		Value:    optCast[*ast.InterpolationValue](valI),
		Position: peekStart(c),
	}, nil
}

func (p *parser) callonelementInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelementInterpolation1(stack["nameI"], stack["attrsI"], stack["valI"])
}

func (c *current) onvoidElementInterpolation7(nameI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonvoidElementInterpolation7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation7(stack["nameI"])
}

func (c *current) onvoidElementInterpolation11(nameI, attrsI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonvoidElementInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation11(stack["nameI"], stack["attrsI"])
}

func (c *current) onvoidElementInterpolation1(nameI, attrsI any) (any, error) {
	return &ast.ElementInterpolation{
		Element: &ast.Element{
			Name:       concat(nameI),
			Attributes: sliceOf[ast.AttributeCollection](attrsI),
			Void:       true,
			Position:   pos(c),
		},
		Position: peekStart(c),
	}, nil
}

func (p *parser) callonvoidElementInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvoidElementInterpolation1(stack["nameI"], stack["attrsI"])
}

func (c *current) onComponentCallInterpolation4() error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallInterpolation4() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation4()
}

func (c *current) onComponentCallInterpolation7(callI any) error {
	editState(c, func(s *State) {
		s.Inline = true
	})
	return nil
}

func (p *parser) callonComponentCallInterpolation7() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation7(stack["callI"])
}

func (c *current) onComponentCallInterpolation11() error {
	popStart(c)
	return nil
}

func (p *parser) callonComponentCallInterpolation11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation11()
}

func (c *current) onComponentCallInterpolation1(callI, valI any) (any, error) {
	call := callI.(ast.ComponentCall)
	call.Position = pos(c)

	return &ast.ComponentCallInterpolation{
		ComponentCall: &call,
		Value:         optCast[*ast.InterpolationValue](valI),
		Position:      peekStart(c),
	}, nil
}

func (p *parser) callonComponentCallInterpolation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComponentCallInterpolation1(stack["callI"], stack["valI"])
}

func (c *current) onInterpolationValue5() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue5()
}

func (c *current) onInterpolationValue11() error {
	pushStart(c)
	return nil
}

func (p *parser) callonInterpolationValue11() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue11()
}

func (c *current) onInterpolationValue16() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue16()
}

func (c *current) onInterpolationValue13(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue13(stack["posI"])
}

func (c *current) onInterpolationValue3(lBracketI any) (any, error) {
	return lBracketI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue3(stack["lBracketI"])
}

func (c *current) onInterpolationValue33() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue33()
}

func (c *current) onInterpolationValue30(posI any) (any, error) {
	return posI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue30(stack["posI"])
}

func (c *current) onInterpolationValue40(rBracketI any) error {
	popStart(c)
	return nil
}

func (p *parser) callonInterpolationValue40() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue40(stack["rBracketI"])
}

func (c *current) onInterpolationValue27(rBracketI any) (any, error) {
	return rBracketI.(*ast.Position), nil
}

func (p *parser) callonInterpolationValue27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue27(stack["rBracketI"])
}

func (c *current) onInterpolationValue43() (any, error) {
	p := pos(c)
	return &p, nil
}

func (p *parser) callonInterpolationValue43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue43()
}

func (c *current) onInterpolationValue41(posI any) (any, error) {
	bracketStart := popStart(c)
	hashStart := peekStart(c)
	return posI.(*ast.Position), &fileerr.Error{
		Message:         "unclosed interpolation",
		ErrorAnnotation: anno.Position(file(c), bracketStart, "expected a `]` for this `]`"),
		HintAnnotations: []fileerr.Annotation{
			anno.Position(file(c), hashStart, "for the interpolation started here"),
		},
		Suggestions: []fileerr.Suggestion{
			{Suggestion: "add the missing `]`"},
			{Suggestion: "if you didn't mean to start an interpolation, escape the `#` by writing `##`"},
		},
	}
}

func (p *parser) callonInterpolationValue41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue41(stack["posI"])
}

func (c *current) onInterpolationValue1(lBracketI, valI, rBracketI any) (any, error) {
	return &ast.InterpolationValue{
		LBracket: pos(c),
		Text:     valI.(ast.TextLine),
		RBracket: rBracketI.(*ast.Position),
	}, nil
}

func (p *parser) callonInterpolationValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolationValue1(stack["lBracketI"], stack["valI"], stack["rBracketI"])
}

func (c *current) onINDENTATION23() (bool, error) {
	return state(c).Indentation.Current < state(c).Indentation.Target, nil
}

func (p *parser) callonINDENTATION23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION23()
}

func (c *current) onINDENTATION25() error {
	editState(c, func(s *State) {
		s.Indentation.Current++
	})
	return nil
}

func (p *parser) callonINDENTATION25() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION25()
}

func (c *current) onINDENTATION28() (bool, error) {
	return state(c).Indentation.Current == state(c).Indentation.Target, nil
}

func (p *parser) callonINDENTATION28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION28()
}

func (c *current) onINDENTATION210() error {
	editState(c, func(s *State) {
		s.Indentation.Current = 0
	})
	return nil
}

func (p *parser) callonINDENTATION210() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINDENTATION210()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	val, ok = p.parseRule(rule)

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
